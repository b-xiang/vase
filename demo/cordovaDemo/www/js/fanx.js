(function () {
var root=this;
var fan=root.fan;
if (fan === undefined) {
   if (typeof exports !== 'undefined') {
     fan = exports;
   } else {
     fan = root.fan = {};
   }
}
if (!fan.sys && (typeof require !== 'undefined')) fan = require('sys.js');

if (typeof exports !== 'undefined') {
  fan.sys = exports;
} else {
  fan.sys = root.fan.sys = {};
}

fan.sys = {};
fan.sys.Obj = function() {};
fan.sys.Obj.$init = {};
fan.sys.Obj.$extend = function(base)
{
  function f()
  {
    if (arguments.length > 0 && arguments[0] === fan.sys.Obj.$init) return;
    this.$ctor.apply(this, arguments);
  }
  f.prototype = new base(fan.sys.Obj.$init)
  f.prototype.constructor = f;
  return f;
}
fan.sys.Obj.prototype.$ctor = function() {}
fan.sys.Obj.prototype.make$ = function() {}
fan.sys.Obj.prototype.equals = function(that)
{
  return this === that;
}
fan.sys.Obj.prototype.compare = function(that)
{
  if (this < that) return -1;
  if (this > that) return 1;
  return 0;
}
fan.sys.Obj.$hashCounter = 0;
fan.sys.Obj.prototype.hash = function()
{
  if (this.$hash === undefined)
    this.$hash = fan.sys.Obj.$hashCounter++;
  return this.$hash;
}
fan.sys.Obj.prototype.$with = function(f)
{
  f.call(this);
  return this;
}
fan.sys.Obj.prototype.isImmutable = function()
{
  return this.$typeof().isConst();
}
fan.sys.Obj.prototype.toImmutable = function()
{
  if (this.$typeof().isConst()) return this;
  throw fan.sys.NotImmutableErr.make(this.$typeof().toString());
}
fan.sys.Obj.prototype.$typeof = function()
{
  return fan.sys.Obj.$type;
}
fan.sys.Obj.prototype.toStr = function()
{
  return "" + this.$typeof() + "@" + this.hash();
}
fan.sys.Obj.prototype.toString = function()
{
  return "" + this.toStr();
}
fan.sys.Obj.prototype.trap = function(name, args)
{
  return fan.sys.ObjUtil.doTrap(this, name, args, this.$typeof());
}
fan.sys.Num = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.Num.prototype.$ctor = function() {}
fan.sys.Num.prototype.$typeof = function() { return fan.sys.Num.$type; }
fan.sys.Num.toDecimal = function(val) { return fan.std.Decimal.make(val.valueOf()); }
fan.sys.Num.toFloat = function(val) { return fan.sys.Float.make(val.valueOf()); }
fan.sys.Num.toInt = function(val)
{
  if (isNaN(val)) return 0;
  if (val == Number.POSITIVE_INFINITY) return fan.sys.Int.m_maxVal;
  if (val == Number.NEGATIVE_INFINITY) return fan.sys.Int.m_minVal;
  if (val < 0) return Math.ceil(val);
  return Math.floor(val);
}
fan.sys.Int = fan.sys.Obj.$extend(fan.sys.Num);
fan.sys.Int.prototype.$ctor = function() {}
fan.sys.Int.prototype.$typeof = function() { return fan.sys.Int.$type; }
fan.sys.Int.make = function(val) { return val; }
fan.sys.Int.MAX_SAFE = 9007199254740991;
fan.sys.Int.MIN_SAFE = -9007199254740991;
fan.sys.Int.fromStr = function(s, radix, checked)
{
  if (radix === undefined) radix = 10;
  if (checked === undefined) checked = true;
  try
  {
    if (radix === 10) { var n = fan.sys.Int.parseDecimal(s); return n; }
    if (radix === 16) { var n = fan.sys.Int.parseHex(s); return n; }
    throw new Error("Unsupported radix " + radix);
  }
  catch (err) {}
  if (checked) throw fan.sys.ParseErr.makeStr("Int", s);
  return null;
}
fan.sys.Int.parseDecimal = function(s)
{
  var n = 0;
  if (s.charCodeAt(0) === 45) n++;
  for (var i=n; i<s.length; i++)
  {
    ch = s.charCodeAt(i);
    if (ch >= 48 && ch <= 57) continue;
    throw new Error("Illegal decimal char " + s.charAt(i));
  }
  var x = parseInt(s, 10);
  if (isNaN(x)) throw new Error("Invalid number");
  return x;
}
fan.sys.Int.parseHex = function(s)
{
  for (var i=0; i<s.length; i++)
  {
    ch = s.charCodeAt(i);
    if (ch >= 48 && ch <= 57) continue;
    if (ch >= 65 && ch <= 70) continue;
    if (ch >= 97 && ch <= 102) continue;
    throw new Error("Illegal hex char " + s.charAt(i));
  }
  var x = parseInt(s, 16);
  if (isNaN(x)) throw new Error("Invalid number");
  return x;
}
fan.sys.Int.toStr = function(self)
{
  return self.toString();
}
fan.sys.Int.equals = function(self, obj)
{
  return self === obj;
}
fan.sys.Int.hash = function(self) { return self; }
fan.sys.Int.abs = function(self)      { return self < 0 ? -self : self; }
fan.sys.Int.min = function(self, val) { return self < val ? self : val; }
fan.sys.Int.max = function(self, val) { return self > val ? self : val; }
fan.sys.Int.isEven  = function(self) { return self % 2 == 0; }
fan.sys.Int.isOdd   = function(self) { return self % 2 != 0; }
fan.sys.Int.isSpace = function(self) { return self == 32 || self == 9 || self == 10 || self == 13; }
fan.sys.Int.isDigit = function(self, radix)
{
  if (radix == null || radix == 10) return self >= 48 && self <= 57;
  if (radix == 16)
  {
    if (self >= 48 && self <= 57) return true;
    if (self >= 65 && self <= 70) return true;
    if (self >= 97 && self <= 102) return true;
    return false;
  }
  if (radix <= 10) return 48 <= self && self <= (48+radix);
  var x = self-10;
  if (97 <= self && self <= 97+x) return true;
  if (65 <= self && self <= 65+x) return true;
  return false;
}
fan.sys.Int.toDigit = function(self, radix)
{
  if (radix == null || radix == 10) return 0 <= self && self <= 9 ? 48+self : null;
  if (self < 0 || self >= radix) return null;
  if (self < 10) return 48+self;
  return self-10+97;
}
fan.sys.Int.fromDigit = function(self, radix)
{
  if (self < 0 || self >= 128) return null;
  var ten = radix < 10 ? radix : 10;
  if (48 <= self && self < 48+ten) return self-48;
  if (radix > 10)
  {
    var alpha = radix-10;
    if (97 <= self && self < 97+alpha) return self+10-97;
    if (65 <= self && self < 65+alpha) return self+10-65;
  }
  return null;
}
fan.sys.Int.random = function(r)
{
  if (r === undefined) return Math.floor(Math.random() * Math.pow(2, 64));
  else
  {
    var start = r.start();
    var end   = r.end();
    if (r.inclusive()) ++end;
    if (end <= start) throw fan.sys.ArgErr.make("Range end < start: " + r);
    r = end-start;
    if (r < 0) r = -r;
    return Math.floor(Math.random()*r) + start;
  }
}
fan.sys.Int.isUpper    = function(self) { return self >= 65 && self <= 90; }
fan.sys.Int.isLower    = function(self) { return self >= 97 && self <= 122; }
fan.sys.Int.upper      = function(self) { return fan.sys.Int.isLower(self) ? self-32 : self; }
fan.sys.Int.lower      = function(self) { return fan.sys.Int.isUpper(self) ? self+32 : self; }
fan.sys.Int.isAlpha    = function(self) { return fan.sys.Int.isUpper(self) || fan.sys.Int.isLower(self); }
fan.sys.Int.isAlphaNum = function(self) { return fan.sys.Int.isAlpha(self) || fan.sys.Int.isDigit(self); }
fan.sys.Int.equalsIgnoreCase = function(self, ch) { return (self|0x20) == (ch|0x20); }
fan.sys.Int.times = function(self, f)
{
  for (var i=0; i<self; i++)
    f.call(i);
}
fan.sys.Int.negate    = function(self) { return -self; }
fan.sys.Int.increment = function(self) { return self+1; }
fan.sys.Int.decrement = function(self) { return self-1; }
fan.sys.Int.plus        = function(a, b) { return a + b; }
fan.sys.Int.plusFloat   = function(a, b) { return fan.sys.Float.make(a + b); }
fan.sys.Int.plusDecimal = function(a, b) { return fan.sys.Decimal.make(a + b); }
fan.sys.Int.minus        = function(a, b) { return a - b; }
fan.sys.Int.minusFloat   = function(a, b) { return fan.sys.Float.make(a - b); }
fan.sys.Int.minusDecimal = function(a, b) { return fan.sys.Decimal.make(a - b); }
fan.sys.Int.mult         = function(a, b) { return a * b; }
fan.sys.Int.multFloat    = function(a, b) { return fan.sys.Float.make(a * b); }
fan.sys.Int.multDecimal  = function(a, b) { return fan.sys.Decimal.make(a * b); }
fan.sys.Int.div = function(a, b)
{
  var r = a / b;
  if (r < 0) return Math.ceil(r);
  return Math.floor(r);
}
fan.sys.Int.divFloat   = function(a, b) { return fan.sys.Float.make(a / b); }
fan.sys.Int.divDecimal = function(a, b) { return fan.sys.Decimal.make(fan.sys.Int.div(a, b)); }
fan.sys.Int.mod        = function(a, b) { return a % b; }
fan.sys.Int.modFloat   = function(a, b) { return fan.sys.Float.make(a % b); }
fan.sys.Int.modDecimal = function(a, b) { return fan.sys.Decimal.make(a % b); }
fan.sys.Int.pow = function(self, pow)
{
  if (pow < 0) throw fan.sys.ArgErr.make("pow < 0");
  return Math.pow(self, pow);
}
fan.sys.Int.not = function(a)    { return ~a; }
fan.sys.Int.and = function(a, b) { var x = a & b;  if (x<0) x += 0xffffffff+1; return x; }
fan.sys.Int.or  = function(a, b) { var x = a | b;  if (x<0) x += 0xffffffff+1; return x; }
fan.sys.Int.xor = function(a, b) { var x = a ^ b;  if (x<0) x += 0xffffffff+1; return x; }
fan.sys.Int.shiftl = function(a, b) { var x = a << b; if (x<0) x += 0xffffffff+1; return x; }
fan.sys.Int.shiftr = function(a, b) { var x = a >>> b; if (x<0) x += 0xffffffff+1; return x; }
fan.sys.Int.shifta = function(a, b) { var x = a >> b; return x; }
fan.sys.Int.toInt = function(val) { return val; }
fan.sys.Int.toFloat = function(val) { return fan.sys.Float.make(val); }
fan.sys.Int.toDecimal = function(val) { return fan.sys.Decimal.make(val); }
fan.sys.Int.toChar = function(self)
{
  if (self < 0 || self > 0xFFFF) throw fan.sys.Err.make("Invalid unicode char: " + self);
  return String.fromCharCode(self);
}
fan.sys.Int.toHex = function(self, width)
{
  if (width === undefined) width = null;
  // make sure non-null to prevent infinite loop
  if (self == null) self = 0;
  // TODO FIXIT: how do we handle negative numbers?
  var val = self;
  if (val < 0) val += fan.sys.Int.MAX_SAFE;
  // convert to hex string
  var s = "";
  while (true)
  {
    // write chars backwards
    s = "0123456789abcdef".charAt(val % 16) + s;
    val = Math.floor(val / 16);
    if (val === 0) break
  }
  // pad width
  if (width != null && s.length < width)
  {
    var zeros = width - s.length;
    for (var i=0; i<zeros; ++i) s = '0' + s;
  }
  return s;
}
fan.sys.Int.toRadix = function(self, radix, width)
{
  if (width === undefined) width = null;
  // convert to hex string
  var s = self.toString(radix);
  // pad width
  if (width != null && s.length < width)
  {
    var zeros = width - s.length;
    for (var i=0; i<zeros; ++i) s = '0' + s;
  }
  return s;
}
fan.sys.Int.toCode = function(self, base)
{
  if (base === undefined) base = 10;
  if (base == 10) return self.toString();
  if (base == 16) return "0x" + fan.sys.Int.toHex(self);
  throw fan.sys.ArgErr.make("Invalid base " + base);
}
fan.sys.Int.toDuration = function(self)
{
  return fan.sys.Duration.make(self);
}
fan.sys.Int.toDateTime = function(self, tz)
{
  return (tz === undefined)
    ? fan.sys.DateTime.makeTicks(self)
    : fan.sys.DateTime.makeTicks(self, tz);
}
fan.sys.Int.charMap = [];
fan.sys.Int.SPACE    = 0x01;
fan.sys.Int.UPPER    = 0x02;
fan.sys.Int.LOWER    = 0x04;
fan.sys.Int.DIGIT    = 0x08;
fan.sys.Int.HEX      = 0x10;
fan.sys.Int.ALPHA    = fan.sys.Int.UPPER | fan.sys.Int.LOWER;
fan.sys.Int.ALPHANUM = fan.sys.Int.UPPER | fan.sys.Int.LOWER | fan.sys.Int.DIGIT;
fan.sys.Int.charMap[32] |= fan.sys.Int.SPACE;
fan.sys.Int.charMap[10] |= fan.sys.Int.SPACE;
fan.sys.Int.charMap[13] |= fan.sys.Int.SPACE;
fan.sys.Int.charMap[9]  |= fan.sys.Int.SPACE;
fan.sys.Int.charMap[12] |= fan.sys.Int.SPACE;
for (var i=97; i<=122; ++i) fan.sys.Int.charMap[i] |= fan.sys.Int.LOWER;
for (var i=65; i<=90;  ++i) fan.sys.Int.charMap[i] |= fan.sys.Int.UPPER;
for (var i=48; i<=57; ++i) fan.sys.Int.charMap[i] |= fan.sys.Int.DIGIT;
for (var i=48; i<=57;  ++i) fan.sys.Int.charMap[i] |= fan.sys.Int.HEX;
for (var i=97; i<=102; ++i) fan.sys.Int.charMap[i] |= fan.sys.Int.HEX;
for (var i=65; i<=70;  ++i) fan.sys.Int.charMap[i] |= fan.sys.Int.HEX;
fan.sys.Int.toLocale = function(self, pattern)
{
  //if (locale === undefined || locale == null) locale = fan.sys.Locale.cur();
  if (pattern === undefined) pattern = null;
  return fan.sys.NumFormat.formatInt(self, pattern);
}
fan.sys.Int.toLocaleBytes = function(b)
{
  var KB = fan.sys.Int.m_KB;
  var MB = fan.sys.Int.m_MB;
  var GB = fan.sys.Int.m_GB;
  if (b < KB)    return b + "B";
  if (b < 10*KB) return fan.sys.Float.toLocale(b/KB, "#.#") + "KB";
  if (b < MB)    return Math.round(b/KB) + "KB";
  if (b < 10*MB) return fan.sys.Float.toLocale(b/MB, "#.#") + "MB";
  if (b < GB)    return Math.round(b/MB) + "MB";
  if (b < 10*GB) return fan.sys.Float.toLocale(b/GB, "#.#") + "GB";
  return Math.round(b/fan.sys.Int.m_GB) + "GB";
}
fan.sys.Int.m_KB = 1024;
fan.sys.Int.m_MB = 1024*1024;
fan.sys.Int.m_GB = 1024*1024*1024;
fan.sys.Int.localeIsUpper = function(self) { return fan.sys.Int.isUpper(self); }
fan.sys.Int.localeIsLower = function(self) { return fan.sys.Int.isLower(self); }
fan.sys.Int.localeUpper   = function(self) { return fan.sys.Int.upper(self); }
fan.sys.Int.localeLower   = function(self) { return fan.sys.Int.lower(self); }
fan.sys.Void = function() {};
fan.sys.Void.prototype.$typeof = function() { return fan.sys.Void.$type; }
fan.sys.StrBuf = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.StrBuf.prototype.$ctor = function()
{
  this.m_str = "";
}
fan.sys.StrBuf.prototype.$typeof = function()
{
  return fan.sys.StrBuf.$type;
}
fan.sys.StrBuf.prototype.add = function(obj)
{
  this.m_str += obj==null ? "null" : fan.sys.ObjUtil.toStr(obj);
  return this;
}
fan.sys.StrBuf.prototype.addStr = function(str, offset, len) {
  if (offset == undefined) offset = 0;
  if (len == undefined) len = str.length;
  this.m_str += str.substr(offset, len);
  return this;
}
fan.sys.StrBuf.prototype.addChar = function(ch)
{
  this.m_str += String.fromCharCode(ch);
  return this;
}
fan.sys.StrBuf.prototype.capacity = function()
{
  if (this.m_capacity == null) return this.m_str.length;
  return this.m_capacity;
}
fan.sys.StrBuf.prototype.capacity$ = function(c) { this.m_capacity = c; }
fan.sys.StrBuf.prototype.m_capacity = null;
fan.sys.StrBuf.prototype.clear = function()
{
  this.m_str = "";
  return this;
}
fan.sys.StrBuf.prototype.get = function(i)
{
  if (i < 0) i = this.m_str.length+i;
  if (i < 0 || i >= this.m_str.length) throw fan.sys.IndexErr.make(i);
  return this.m_str.charCodeAt(i);
}
fan.sys.StrBuf.prototype.getRange = function(range)
{
  var size = this.m_str.length;
  var s = range.$start(size);
  var e = range.$end(size);
  if (e+1 < s) throw fan.sys.IndexErr.make(range);
  return this.m_str.substr(s, (e-s)+1);
}
fan.sys.StrBuf.prototype.set = function(i, ch)
{
  if (i < 0) i = this.m_str.length+i;
  if (i < 0 || i >= this.m_str.length) throw fan.sys.IndexErr.make(i);
  this.m_str = this.m_str.substr(0,i) + String.fromCharCode(ch) + this.m_str.substr(i+1);
  return this;
}
fan.sys.StrBuf.prototype.join = function(x, sep)
{
  if (sep === undefined) sep = " ";
  var s = (x == null) ? "null" : fan.sys.ObjUtil.toStr(x);
  if (this.m_str.length > 0) this.m_str += sep;
  this.m_str += s;
  return this;
}
fan.sys.StrBuf.prototype.insert = function(i, x)
{
  var s = (x == null) ? "null" : fan.sys.ObjUtil.toStr(x);
  if (i < 0) i = this.m_str.length+i;
  if (i < 0 || i > this.m_str.length) throw fan.sys.IndexErr.make(i);
  this.m_str = this.m_str.substr(0,i) + s + this.m_str.substr(i);
  return this;
}
fan.sys.StrBuf.prototype.remove = function(i)
{
  if (i < 0) i = this.m_str.length+i;
  if (i< 0 || i >= this.m_str.length) throw fan.sys.IndexErr.make(i);
  this.m_str = this.m_str.substr(0,i) + this.m_str.substr(i+1);
  return this;
}
fan.sys.StrBuf.prototype.removeRange = function(r)
{
  var s = r.$start(this.m_str.length);
  var e = r.$end(this.m_str.length);
  var n = e - s + 1;
  if (s < 0 || n < 0) throw fan.sys.IndexErr.make(r);
  this.m_str = this.m_str.substr(0,s) + this.m_str.substr(e+1);
  return this;
}
fan.sys.StrBuf.prototype.replaceRange = function(r, str)
{
  var s = r.$start(this.m_str.length);
  var e = r.$end(this.m_str.length);
  var n = e - s + 1;
  if (s < 0 || n < 0) throw fan.sys.IndexErr.make(r);
  this.m_str = this.m_str.substr(0,s) + str + this.m_str.substr(e+1);
  return this;
}
fan.sys.StrBuf.prototype.isEmpty = function()
{
  return this.m_str.length == 0;
}
fan.sys.StrBuf.prototype.size = function()
{
  return this.m_str.length;
}
fan.sys.StrBuf.prototype.toStr = function()
{
  return this.m_str;
}
fan.sys.StrBuf.prototype.out = function()
{
  return new fan.sys.StrBufOutStream(this);
}
fan.sys.StrBuf.make = function() { return new fan.sys.StrBuf(); }
fan.sys.Func = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.Func.prototype.$ctor = function()
{
}
fan.sys.Func.make$closure = function(spec, func)
{
  var self = new fan.sys.Func();
  self.m_params = spec.m_params;
  self.m_return = spec.m_type.ret;
  self.m_type   = spec.m_type;
  self.m_func   = func;
  return self;
}
fan.sys.Func.make = function(params, ret, func)
{
  var self = new fan.sys.Func();
  fan.sys.Func.make$(self, params, ret, func);
  return self;
}
fan.sys.Func.make$ = function(self, params, ret, func)
{
  var types = [];
  for (var i=0; i<params.size(); i++)
    types.push(params.get(i).m_type);
  self.m_params = params;
  self.m_return = ret;
  self.m_type   = fan.sys.Sys.find("sys", "Func", true);
  self.m_func   = func;
}
fan.sys.Func.prototype.$typeof = function() { return this.m_type; }
fan.sys.Func.prototype.isImmutable = function()
{
  return true;
}
fan.sys.Func.prototype.toImmutable = function()
{
  if (this.isImmutable()) return this;
  throw fan.sys.NotImmutableErr.make("Func");
}
fan.sys.Func.prototype.params = function() { return this.m_params; }
fan.sys.Func.prototype.arity = function() { return this.m_params.size(); }
fan.sys.Func.prototype.returns = function() { return this.m_return; }
fan.sys.Func.prototype.method = function() { return null; }
fan.sys.Func.prototype.call = function() { return this.m_func.apply(null, arguments); }
fan.sys.Func.prototype.callList = function(args) { return this.m_func.apply(null, args===null?null:args.toJs()); }
fan.sys.Func.prototype.callOn = function(obj, args) { return this.m_func.apply(obj, args===null?null:args.toJs()); }
fan.sys.Func.prototype.enterCtor = function(obj) {}
fan.sys.Func.prototype.exitCtor = function() {}
fan.sys.Func.prototype.checkInCtor = function(obj) {}
fan.sys.Func.prototype.toStr = function() { return "sys::Func"; }
fan.sys.ClosureFuncSpec$ = function(name, ret, params)
{
  var types = [];
  var paramDefs = [];
  var i, param;
  if (params.length % 3 != 0) {
   throw fan.sys.ArgErr("Invalid params " + params.toString);
  }
  for (i=0; i<params.length; i+=3) {
    param = new fan.std.Param(params[i], params[i+1], params[i+2]);
    paramDefs.push(param);
    types.push(param.m_type);
  }
  this.m_params = (fan.sys.List.make(fan.std.Param.$type, paramDefs));
  this.m_params.m_readOnly = true;
  this.m_params.m_immutable = true;
  var type = new fan.std.Type(name, "sys::Func", [], "", 0);
  this.m_type = type;//fan.sys.ObjUtil.toImmutable(new fan.sys.FuncType(types, ret));
}
fan.sys.BindFunc = fan.sys.Obj.$extend(fan.sys.Func);
fan.sys.BindFunc.prototype.$ctor = function()
{
  fan.sys.Func.prototype.$ctor.call(this);
  this.peer = new fan.sys.BindFuncPeer(this);
  var $this = this;
}
fan.sys.BindFunc.prototype.$typeof = function() { return fan.sys.BindFunc.$type; }
fan.sys.BindFunc.prototype._isImmutable = function()
{
  return this.m__isImmutable;
}
fan.sys.BindFunc.prototype._isImmutable$ = function(it)
{
  this.m__isImmutable = it;
  return;
}
fan.sys.BindFunc.make = function(orig,bound) {
  var self = new fan.sys.BindFunc();
  fan.sys.BindFunc.make$(self,orig,bound);
  return self;
  }
fan.sys.BindFunc.make$ = function(self,orig,bound)
{
  fan.sys.Func.make$(self);
  self.m_orig = fan.sys.ObjUtil.coerce((function($this) { var $_u0 = orig; if ($_u0 == null) return null; return fan.sys.ObjUtil.toImmutable($_u0); })(self),fan.std.Type.find("sys::Func<>"));
  self.m_bound = fan.sys.ObjUtil.coerce((function($this) { var $_u1 = fan.sys.ObjUtil.coerce(bound.ro(),fan.std.Type.find("sys::List<sys::Obj?>")); if ($_u1 == null) return null; return fan.sys.ObjUtil.toImmutable($_u1); })(self),fan.std.Type.find("sys::List<sys::Obj?>"));
  return;
}
fan.sys.BindFunc.prototype.isImmutable = function()
{
  if (this.m__isImmutable == null)
  {
    var isImu = false;
    if (fan.sys.ObjUtil.isImmutable(this.m_orig))
    {
      isImu = true;
      for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_bound.size()); i = fan.sys.Int.increment(i))
      {
        var obj = this.m_bound.get(i);
        if ((obj != null && !fan.sys.ObjUtil.isImmutable(obj)))
        {
          isImu = false;
          break;
        }
        ;
      }
      ;
    }
    ;
    this.m__isImmutable = fan.sys.ObjUtil.coerce(isImu,fan.sys.Bool.$type.toNullable());
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m__isImmutable,fan.sys.Bool.$type);
}
fan.sys.BindFunc.prototype.call = function(a,b,c,d,e,f,g,h)
{
  if (a === undefined) a = null;
  if (b === undefined) b = null;
  if (c === undefined) c = null;
  if (d === undefined) d = null;
  if (e === undefined) e = null;
  if (f === undefined) f = null;
  if (g === undefined) g = null;
  if (h === undefined) h = null;
  return this.peer.call(this,a,b,c,d,e,f,g,h);
}
fan.sys.BindFunc.prototype.callList = function(args)
{
  if (args == null)
  {
    args = fan.sys.ObjUtil.coerce(((fan.sys.List.static$init ? fan.sys.List.static$init() : null),fan.sys.List.m_defVal),fan.std.Type.find("sys::List<sys::Obj?>?"));
  }
  ;
  var temp = fan.sys.List.make(10);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_bound.size()); i = fan.sys.Int.increment(i))
  {
    temp.add(this.m_bound.get(i));
  }
  ;
  for (var j = 0; fan.sys.ObjUtil.compareLT(j,args.size()); j = fan.sys.Int.increment(j))
  {
    temp.add(args.get(j));
  }
  ;
  return this.m_orig.callList(fan.sys.ObjUtil.coerce(temp,fan.std.Type.find("sys::List<sys::Obj?>?")));
}
fan.sys.BindFunc.prototype.callOn = function(obj,args)
{
  if (args == null)
  {
    args = fan.sys.ObjUtil.coerce(((fan.sys.List.static$init ? fan.sys.List.static$init() : null),fan.sys.List.m_defVal),fan.std.Type.find("sys::List<sys::Obj?>?"));
  }
  ;
  var temp = fan.sys.List.make(10);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_bound.size()); i = fan.sys.Int.increment(i))
  {
    temp.add(this.m_bound.get(i));
  }
  ;
  temp.add(obj);
  for (var j = 0; fan.sys.ObjUtil.compareLT(j,args.size()); j = fan.sys.Int.increment(j))
  {
    temp.add(args.get(j));
  }
  ;
  return this.m_orig.callList(fan.sys.ObjUtil.coerce(temp,fan.std.Type.find("sys::List<sys::Obj?>?")));
}
fan.sys.BindFunc.prototype.m_orig = null;
fan.sys.BindFunc.prototype.m_bound = null;
fan.sys.BindFunc.prototype.m__isImmutable = null;
fan.sys.Err = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.Err.prototype.$ctor = function(msg, cause)
{
  this.$err    = new Error();
  this.m_msg   = msg;
  this.m_cause = cause;
}
fan.sys.Err.make$ = function(self, msg, cause)
{
  this.$err    = new Error();
  self.m_msg   = msg;
  self.m_cause = cause;
}
fan.sys.Err.prototype.$assign = function(jsErr)
{
  this.$err = jsErr;
  return this;
}
fan.sys.Err.prototype.cause = function()
{
  return this.m_cause;
}
fan.sys.Err.prototype.$typeof = function()
{
  return fan.sys.Err.$type;
}
fan.sys.Err.prototype.toStr = function()
{
  return this.$typeof() + ": " + this.m_msg;
}
fan.sys.Err.prototype.msg = function()
{
  return this.m_msg;
}
fan.sys.Err.prototype.trace = function()
{
  fan.sys.ObjUtil.echo(this.traceToStr());
}
fan.sys.Err.prototype.traceToStr = function()
{
  var s = this.$typeof() + ": " + this.m_msg;
  if (this.$err.stack) s += "\n" + fan.sys.Err.cleanTrace(this.$err.stack);
  if (this.m_cause)    s += "\n  Caused by: " + this.m_cause.traceToStr();
  return s;
}
fan.sys.Err.cleanTrace = function(orig)
{
  var stack = [];
  var lines = orig.split('\n');
  for (var i=0; i<lines.length; i++)
  {
    var line = lines[i];
    if (line.indexOf("@") != -1)
    {
      // firefox
      var about = line.lastIndexOf("@");
      var slash = line.lastIndexOf("/");
      if (slash != -1)
      {
        // TODO FIXIT
        var func = "Unknown"; // line.substring(0, about)
        var sub = "  at " + func + " (" + line.substr(slash+1) + ")";
        stack.push(sub);
      }
    }
    else if (line.charAt(line.length-1) == ')')
    {
      // chrome
      var paren = line.lastIndexOf("(");
      var slash = line.lastIndexOf("/");
      var sub   = line.substring(0, paren+1) + line.substr(slash+1);
      stack.push(sub);
    }
    else
    {
      // add orig
      stack.push(line)
    }
  }
  return stack.join("\n") + "\n";
}
fan.sys.Err.make = function(err, cause)
{
  if (err instanceof fan.sys.Err) return err;
  if (err instanceof Error)
  {
    var m = err.message;
    if (m.indexOf(" from null") != -1) return fan.sys.NullErr.make(m, cause).$assign(err);
    if (m.indexOf(" of null")   != -1) return fan.sys.NullErr.make(m, cause).$assign(err);
    // TODO
    //  EvalError
    //  RangeError
    //  ReferenceError
    //  SyntaxError
    //  TypeError
    //  URIError
    // TODO: do we need to wrap `cause` too?
    return new fan.sys.Err(err.message, cause).$assign(err);
  }
  return new fan.sys.Err("" + err, cause);
}
fan.sys.Str = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.Str.prototype.$ctor = function() {}
fan.sys.Str.equalsIgnoreCase = function(self, that)
{
  return self.toLowerCase() == that.toLowerCase();
}
fan.sys.Str.compareIgnoreCase = function(self, that)
{
  var a = self.toLowerCase();
  var b = that.toLowerCase();
  if (a < b) return -1;
  if (a == b) return 0;
  return 1;
}
fan.sys.Str.toStr = function(self) { return self; }
fan.sys.Str.toLocale = function(self) { return self; }
fan.sys.Str.$typeof = function(self) { return fan.sys.Str.$type; }
fan.sys.Str.hash = function(self)
{
  var hash = 0;
  if (self.length == 0) return hash;
  for (var i=0; i<self.length; i++)
  {
    var ch = self.charCodeAt(i);
    hash = ((hash << 5) - hash) + ch;
    hash = hash & hash;
  }
  return hash;
}
fan.sys.Str.get = function(self, index)
{
  if (index < 0) index += self.length;
  if (index < 0 || index >= self.length) throw fan.sys.IndexErr.make(index);
  return self.charCodeAt(index);
}
fan.sys.Str.getSafe = function(self, index, def)
{
  if (def === undefined) def = 0;
  try
  {
    if (index < 0) index += self.length;
    if (index < 0 || index >= self.length) throw new Error();
    return self.charCodeAt(index);
  }
  catch (err) { return def; }
}
fan.sys.Str.getRange = function(self, range)
{
  var size = self.length;
  var s = range.startIndex(size);
  var e = range.endIndex(size);
  if (e+1 < s) throw fan.sys.IndexErr.make(range);
  return self.substr(s, (e-s)+1);
}
fan.sys.Str.plus = function(self, obj)
{
  if (obj == null) return self + "null";
  var x = fan.sys.ObjUtil.toStr(obj);
  if (x.length == 0) return self;
  return self + x;
}
fan.sys.Str.intern = function(self) { return self; }
fan.sys.Str.isEmpty = function(self) { return self.length == 0; }
fan.sys.Str.size = function(self) { return self.length; }
fan.sys.Str.startsWith = function(self, test)
{
  if (self.length < test.length) return false;
  for (var i=0; i<test.length; i++)
    if (self[i] != test[i])
      return false;
  return true;
}
fan.sys.Str.endsWith = function(self, test)
{
  if (self.length < test.length) return false;
  for (var i=0; i<test.length; i++)
    if (self[self.length-i-1] != test[test.length-i-1])
      return false;
  return true;
}
fan.sys.Str.contains = function(self, arg)
{
  return self.indexOf(arg) != -1
}
fan.sys.Str.containsChar = function(self, arg)
{
  return self.indexOf(fan.sys.Int.toChar(arg)) != -1
}
fan.sys.Str.find = function(self, s, off)
{
  var i = 0;
  if (off != null) i = off;
  if (i < 0) i = self.length+i;
  var r = self.indexOf(s, i);
  return r;
}
fan.sys.Str.findr = function(self, s, off)
{
  var i = -1;
  if (off != null) i = off;
  if (i < 0) i = self.length+i;
  var r = self.lastIndexOf(s, i);
  return r;
}
fan.sys.Str.index = function(self, s, off)
{
  var i = 0;
  if (off != null) i = off;
  if (i < 0) i = self.length+i;
  var r = self.indexOf(s, i);
  if (r < 0) return null;
  return r;
}
fan.sys.Str.indexr = function(self, s, off)
{
  var i = -1;
  if (off != null) i = off;
  if (i < 0) i = self.length+i;
  var r = self.lastIndexOf(s, i);
  if (r < 0) return null;
  return r;
}
fan.sys.Str.indexIgnoreCase = function(self, s, off)
{
  return fan.sys.Str.index(self.toLowerCase(), s.toLowerCase(), off);
}
fan.sys.Str.indexrIgnoreCase = function(self, s, off)
{
  return fan.sys.Str.indexr(self.toLowerCase(), s.toLowerCase(), off);
}
fan.sys.Str.each = function(self, f)
{
  var len = self.length;
  if (f.m_params.size() == 1)
  {
    for (var i=0; i<len; i++)
      f.call(self.charCodeAt(i), i);
  }
  else
  {
    for (var i=0; i<len; i++)
      f.call(self.charCodeAt(i), i);
  }
}
fan.sys.Str.eachr = function(self, f)
{
  if (f.m_params.size() == 1)
  {
    for (var i=self.length-1; i>=0; i--)
      f.call(self.charCodeAt(i), i);
  }
  else
  {
    for (var i=self.length-1; i>=0; i--)
      f.call(self.charCodeAt(i), i);
  }
}
fan.sys.Str.any = function(self, f)
{
  var len = self.length;
  if (f.m_params.size() == 1)
  {
    for (var i=0; i<len; ++i)
      if (f.call(self.charCodeAt(i)) == true)
        return true;
  }
  else
  {
    for (var i=0; i<len; ++i)
      if (f.call(self.charCodeAt(i), i) == true)
        return true;
  }
  return false;
}
fan.sys.Str.all = function(self, f)
{
  var len = self.length;
  if (f.m_params.size() == 1)
  {
    for (var i=0; i<len; ++i)
      if (f.call(self.charCodeAt(i)) == false)
        return false;
  }
  else
  {
    for (var i=0; i<len; ++i)
      if (f.call(self.charCodeAt(i), i) == false)
        return false;
  }
  return true;
}
fan.sys.Str.spaces = function(n)
{
  if (fan.sys.Str.$spaces == null)
  {
    fan.sys.Str.$spaces = new Array();
    var s = "";
    for (var i=0; i<20; i++)
    {
      fan.sys.Str.$spaces[i] = s;
      s += " ";
    }
  }
  if (n < 20) return fan.sys.Str.$spaces[n];
  var s = "";
  for (var i=0; i<n; i++) s += " ";
  return s;
}
fan.sys.Str.$spaces = null;
fan.sys.Str.lower = function(self)
{
  var lower = "";
  for (var i = 0; i < self.length; ++i)
  {
    var char = self[i];
    var code = self.charCodeAt(i);
    if (65 <= code && code <= 90)
      char = String.fromCharCode(code | 0x20);
    lower = lower + char;
  }
  return lower;
}
fan.sys.Str.upper = function(self)
{
  var upper = "";
  for (var i = 0; i < self.length; ++i)
  {
    var char = self[i];
    var code = self.charCodeAt(i);
    if (97 <= code && code <= 122)
      char = String.fromCharCode(code & ~0x20);
    upper = upper + char;
  }
  return upper;
}
fan.sys.Str.trim = function(self, trimStart, trimEnd)
{
  if (self.length == 0) return self;
  if (trimStart == null) trimStart = true;
  if (trimEnd == null) trimEnd = true;
  var s = 0;
  var e = self.length-1;
  while (trimStart && s<self.length && self.charCodeAt(s) <= 32) s++;
  while (trimEnd && e>=s && self.charCodeAt(e) <= 32) e--;
  return self.substr(s, (e-s)+1);
}
fan.sys.Str.trimStart = function(self) { return fan.sys.Str.trim(self, true, false); }
fan.sys.Str.trimEnd   = function(self) { return fan.sys.Str.trim(self, false, true); }
fan.sys.Str.trimToNull = function(self)
{
  var trimmed = fan.sys.Str.trim(self, true, true);
  return trimmed.length == 0 ? null : trimmed;
}
fan.sys.Str.split = function(self, sep, trimmed)
{
  if (sep == null) return fan.sys.Str.splitws(self);
  var toks = fan.sys.List.make(fan.sys.Str.$type, []);
  var trim = (trimmed != null) ? trimmed : true;
  var len = self.length;
  var x = 0;
  for (var i=0; i<len; ++i)
  {
    if (self.charCodeAt(i) != sep) continue;
    if (x <= i) toks.add(fan.sys.Str.splitStr(self, x, i, trim));
    x = i+1;
  }
  if (x <= len) toks.add(fan.sys.Str.splitStr(self, x, len, trim));
  return toks;
}
fan.sys.Str.splitStr = function(val, s, e, trim)
{
  if (trim == true)
  {
    while (s < e && val.charCodeAt(s) <= 32) ++s;
    while (e > s && val.charCodeAt(e-1) <= 32) --e;
  }
  return val.substring(s, e);
}
fan.sys.Str.splitws = function(val)
{
  var toks = fan.sys.List.make(fan.sys.Str.$type, []);
  var len = val.length;
  while (len > 0 && val.charCodeAt(len-1) <= 32) --len;
  var x = 0;
  while (x < len && val.charCodeAt(x) <= 32) ++x;
  for (var i=x; i<len; ++i)
  {
    if (val.charCodeAt(i) > 32) continue;
    toks.add(val.substring(x, i));
    x = i + 1;
    while (x < len && val.charCodeAt(x) <= 32) ++x;
    i = x;
  }
  if (x <= len) toks.add(val.substring(x, len));
  if (toks.size() == 0) toks.add("");
  return toks;
}
fan.sys.Str.replace = function(self, oldstr, newstr)
{
  if (oldstr == '') return self;
  return self.split(oldstr).join(newstr);
}
fan.sys.Str.isAscii = function(self)
{
  for (var i=0; i<self.length; i++)
    if (self.charCodeAt(i) > 127)
      return false;
  return true;
}
fan.sys.Str.isSpace = function(self)
{
  for (var i=0; i<self.length; i++)
  {
    var ch = self.charCodeAt(i);
    if (ch != 32 && ch != 9 && ch != 10 && ch != 12 && ch != 13)
      return false;
  }
  return true;
}
fan.sys.Str.isUpper = function(self)
{
  for (var i=0; i<self.length; i++)
  {
    var ch = self.charCodeAt(i);
    if (ch < 65 || ch > 90) return false;
  }
  return true;
}
fan.sys.Str.isLower = function(self)
{
  for (var i=0; i<self.length; i++)
  {
    var ch = self.charCodeAt(i);
    if (ch < 97 || ch > 122) return false;
  }
  return true;
}
fan.sys.Str.isAlpha = function(self)
{
  var Int = fan.sys.Int;
  for (var i=0; i<self.length; i++)
  {
    var ch = self.charCodeAt(i);
    if (ch >= 128 || (Int.charMap[ch] & Int.ALPHA) == 0)
      return false;
  }
  return true;
}
fan.sys.Str.isAlphaNum = function(self)
{
  var Int = fan.sys.Int;
  for (var i=0; i<self.length; i++)
  {
    var ch = self.charCodeAt(i);
    if (ch >= 128 || (Int.charMap[ch] & Int.ALPHANUM) == 0)
      return false;
  }
  return true;
}
fan.sys.Str.isEveryChar = function(self, ch)
{
  var len = self.length;
  for (var i=0; i<len; ++i)
    if (self.charCodeAt(i) != ch) return false;
  return true;
}
fan.sys.Str.localeCompare = function(self, that)
{
  return self.localeCompare(that, fan.sys.Locale.cur().toStr(), {sensitivity:'base'});
}
fan.sys.Str.localeUpper = function(self)
{
  return self.toLocaleUpperCase(fan.sys.Locale.cur().toStr());
}
fan.sys.Str.localeLower = function(self)
{
  return self.toLocaleLowerCase(fan.sys.Locale.cur().toStr());
}
fan.sys.Str.localeCapitalize = function(self)
{
  var upper = fan.sys.Str.localeUpper(self);
  return upper[0] + self.substring(1);
}
fan.sys.Str.localeDecapitalize = function(self)
{
  var lower = fan.sys.Str.localeLower(self);
  return lower[0] + self.substring(1);
}
fan.sys.Str.toBool = function(self, checked) { return fan.sys.Bool.fromStr(self, checked); }
fan.sys.Str.toFloat = function(self, checked) { return fan.sys.Float.fromStr(self, checked); }
fan.sys.Str.toInt = function(self, radix, checked) { return fan.sys.Int.fromStr(self, radix, checked); }
fan.sys.Str.toDecimal = function(self, checked) { return fan.sys.Decimal.fromStr(self, checked); }
fan.sys.Str.$in = function(self) { return fan.sys.InStream.makeForStr(self); }
fan.sys.Str.toUri = function(self) { return fan.sys.Uri.fromStr(self); }
fan.sys.Str.toRegex = function(self) { return fan.sys.Regex.fromStr(self); }
fan.sys.Str.chars = function(self)
{
  var ch = fan.sys.List.make(fan.sys.Int.$type, []);
  for (var i=0; i<self.length; i++) ch.add(self.charCodeAt(i));
  return ch;
}
fan.sys.Str.fromChars = function(ch)
{
  var i, s = '';
  for (i=0; i<ch.size(); i++) s += String.fromCharCode(ch.get(i));
  return s;
}
fan.sys.Str.toBuf = function(self, charset)
{
  if (charset === undefined) charset = fan.sys.Charset.utf8();
  var buf = new fan.sys.MemBuf();
  buf.charset$(charset);
  buf.print(self);
  return buf.flip();
}
fan.sys.Str.toCode = function(self, quote, escu)
{
  if (quote === undefined) quote = 34;
  if (escu === undefined) escu = false;
  // opening quote
  var s = "";
  var q = 0;
  if (quote != null)
  {
    q = String.fromCharCode(quote);
    s += q;
  }
  // NOTE: these escape sequences are duplicated in ObjEncoder
  var len = self.length;
  for (var i=0; i<len; ++i)
  {
    var c = self.charAt(i);
    switch (c)
    {
      case '\n': s += '\\' + 'n'; break;
      case '\r': s += '\\' + 'r'; break;
      case '\f': s += '\\' + 'f'; break;
      case '\t': s += '\\' + 't'; break;
      case '\\': s += '\\' + '\\'; break;
      case '"':  if (q == '"')  s += '\\' + '"';  else s += c; break;
      case '`':  if (q == '`')  s += '\\' + '`';  else s += c; break;
      case '\'': if (q == '\'') s += '\\' + '\''; else s += c; break;
      case '$':  s += '\\' + '$'; break;
      default:
        var hex  = function(x) { return "0123456789abcdef".charAt(x); }
        var code = c.charCodeAt(0);
        if (code < 32 || (escu && code > 127))
        {
          s += '\\' + 'u'
            + hex((code>>12)&0xf)
            + hex((code>>8)&0xf)
            + hex((code>>4)&0xf)
            + hex(code & 0xf);
        }
        else
        {
          s += c;
        }
    }
  }
  // closing quote
  if (q != 0) s += q;
  return s;
}
fan.sys.Str.javaToJs = function(java)
{
  var js = "";
  for(var i=0; i<java.length(); ++i) js += String.fromCharCode(java.charAt(i));
  return js;
}
fan.sys.Str.toUtf8 = function(str) {
    var n = str.length,
    idx = 0,
    utf8 = new Uint8Array(new ArrayBuffer(n * 4)),
    i, j, c;
  //http://user1.matsumoto.ne.jp/~goma/js/utf.js
  for (i = 0; i < n; ++i) {
    c = str.charCodeAt(i);
    if (c <= 0x7F) {
      utf8[idx++] = c;
    } else if (c <= 0x7FF) {
      utf8[idx++] = 0xC0 | (c >>> 6);
      utf8[idx++] = 0x80 | (c & 0x3F);
    } else if (c <= 0xFFFF) {
      utf8[idx++] = 0xE0 | (c >>> 12);
      utf8[idx++] = 0x80 | ((c >>> 6) & 0x3F);
      utf8[idx++] = 0x80 | (c & 0x3F);
    } else {
      j = 4;
      while (c >> (6 * j)) j++;
      utf8[idx++] = ((0xFF00 >>> j) & 0xFF) | (c >>> (6 * --j));
      while (j--)
        utf8[idx++] = 0x80 | ((c >>> (6 * j)) & 0x3F);
    }
  }
  var res = fan.sys.Array.make(idx, "sys::Int8");
  for (var i =0; i<idx; ++i) {
    res.set(i, utf8[i]);
  }
  return res;
}
fan.sys.Str.fromUtf8 = function(byteArray) {
  var out, i, len, c;
  var char2, char3;
  var array = byteArray.m_array;
  out = "";
  len = array.length;
  i = 0;
  while(i < len) {
    c = array[i++];
    switch(c >> 4)
    {
      case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
        // 0xxxxxxx
        out += String.fromCharCode(c);
        break;
      case 12: case 13:
        // 110x xxxx   10xx xxxx
        char2 = array[i++];
        out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
        break;
      case 14:
        // 1110 xxxx  10xx xxxx  10xx xxxx
        char2 = array[i++];
        char3 = array[i++];
        out += String.fromCharCode(((c & 0x0F) << 12) |
                       ((char2 & 0x3F) << 6) |
                       ((char3 & 0x3F) << 0));
        break;
    }
  }
  return out;
}
fan.sys.Bool = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.Bool.prototype.$ctor = function() {}
fan.sys.Bool.hash = function(self)
{
  return self ? 1231 : 1237;
}
fan.sys.Bool.prototype.$typeof = function()
{
  return fan.sys.Bool.$type;
}
fan.sys.Bool.not = function(self)    { return !self; }
fan.sys.Bool.and = function(self, b) { return self && b; }
fan.sys.Bool.or  = function(self, b) { return self || b; }
fan.sys.Bool.xor = function(self, b) { return self != b; }
fan.sys.Bool.fromStr = function(s, checked)
{
  if (checked === undefined) checked = true;
  if (s == "true") return true;
  if (s == "false") return false;
  if (!checked) return null;
  throw fan.sys.ParseErr.makeStr("Bool", s);
}
fan.sys.Bool.toStr  = function(self) { return self ? "true" : "false"; }
fan.sys.Bool.toCode = function(self) { return self ? "true" : "false"; }
fan.sys.Bool.toLocale = function(self)
{
  var key = self ? "boolTrue" : "boolFalse";
  return fan.std.Env.cur().locale(fan.sys.Pod.find("sys"), key, fan.sys.Bool.toStr(self));
}
fan.sys.Ptr = function() {};
fan.sys.Ptr.prototype.$typeof = function() { return fan.sys.Ptr.$type; }
fan.sys.Ptr.nil = null;
fan.sys.Ptr.make = function() { return null; }
fan.sys.Ptr.stackAlloc = function(size) { return null; }
fan.sys.Ptr.prototype.load = function() { return null; }
fan.sys.Ptr.prototype.store = function() {}
fan.sys.Ptr.prototype.plus = function(b) {}
fan.sys.Ptr.prototype.set = function(i, t) {}
fan.sys.Ptr.prototype.get = function(i) { return null; }
fan.sys.Array = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.Array.prototype.$ctor = function() {}
fan.sys.Array.prototype.$typeof = function() { return fan.sys.Array.$type; }
fan.sys.Array.make = function(size, type) {
  var self = new fan.sys.Array();
  if (type == "sys::Int8") {
    self.m_array = new Uint8ClampedArray(size);
  }
  else if (type == "sys::Int8") {
    self.m_array = new Uint8ClampedArray(size);
  }
  else if (type == "sys::Int16") {
    self.m_array = new Int16Array(size);
  }
  else if (type == "sys::Int32") {
    self.m_array = new Int32Array(size);
  }
  else if (type == "sys::Float32") {
    self.m_array = new Float32Array(size);
  }
  else if (type == "sys::Float" || type == "sys::Float64") {
    self.m_array = new Float64Array(size);
  }
  else {
    self.m_array = new Array(size);
  }
  self.m_of = type;
  return self;
}
fan.sys.Array.prototype.get = function(pos) {
  return this.m_array[pos];
}
fan.sys.Array.prototype.set = function(pos, val) {
  this.m_array[pos] = val;
}
fan.sys.Array.prototype.size = function() {
  return this.m_array.length;
}
fan.sys.Array.realloc = function(self, newSize) {
  if (self.m_array.length == newSize) return self;
  if (newSize > self.m_array.length) {
    for (i = self.m_array.length; i<newSize; ++i) {
      self.m_array.push(null)
    }
    return self;
  }
  var na = fan.sys.Array.make(newSize, self.m_of);
  var len = self.m_array.length > newSize ? newSize : self.m_array.length;
  for (i = 0; i<len; ++i) {
    na.m_array[i] = self.m_array[i]
  }
  return na;
}
fan.sys.Array.fill = function(self, val, times) {
  for (var i = 0; i < times; ++i) {
    self.m_array[i] = val;
  }
  return;
}
fan.sys.Array.arraycopy = function(that, thatOffset, desc, descOffset, length) {
  if (desc === that) {
    desc.m_array.copyWithin(descOffset, thatOffset, thatOffset+length)
    return;
  }
  for (var i = 0; i<length; ++i) {
    desc.m_array[descOffset + i] = that.m_array[i+thatOffset]
  }
  return;
}
fan.sys.NativeC = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.NativeC.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.sys.NativeCPeer(this);
  var $this = this;
}
fan.sys.NativeC.prototype.$typeof = function() { return fan.sys.NativeC.$type; }
fan.sys.NativeC.toId = function(self)
{
  return fan.sys.NativeCPeer.toId(self);
}
fan.sys.NativeC.typeName = function(self)
{
  return fan.sys.NativeCPeer.typeName(self);
}
fan.sys.NativeC.print = function(utf8)
{
  return fan.sys.NativeCPeer.print(utf8);
}
fan.sys.NativeC.printErr = function(utf8)
{
  return fan.sys.NativeCPeer.printErr(utf8);
}
fan.sys.NativeC.stackTrace = function()
{
  return fan.sys.NativeCPeer.stackTrace();
}
fan.sys.NativeC.make = function() {
  var self = new fan.sys.NativeC();
  fan.sys.NativeC.make$(self);
  return self;
  }
fan.sys.NativeC.make$ = function(self)
{
  return;
}
fan.sys.Libc = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.Libc.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.sys.LibcPeer(this);
  var $this = this;
}
fan.sys.Libc.prototype.$typeof = function() { return fan.sys.Libc.$type; }
fan.sys.Libc.strlen = function(cstr)
{
  return fan.sys.LibcPeer.strlen(cstr);
}
fan.sys.Libc.strdup = function(cstr)
{
  return fan.sys.LibcPeer.strdup(cstr);
}
fan.sys.Libc.malloc = function(size)
{
  return fan.sys.LibcPeer.malloc(size);
}
fan.sys.Libc.realloc = function(old,size)
{
  return fan.sys.LibcPeer.realloc(old,size);
}
fan.sys.Libc.free = function(str)
{
  return fan.sys.LibcPeer.free(str);
}
fan.sys.Libc.memcpy = function(dst,src,len)
{
  return fan.sys.LibcPeer.memcpy(dst,src,len);
}
fan.sys.Libc.memmove = function(dst,src,len)
{
  return fan.sys.LibcPeer.memmove(dst,src,len);
}
fan.sys.Libc.puts = function(cstr)
{
  return fan.sys.LibcPeer.puts(cstr);
}
fan.sys.Libc.make = function() {
  var self = new fan.sys.Libc();
  fan.sys.Libc.make$(self);
  return self;
  }
fan.sys.Libc.make$ = function(self)
{
  return;
}
fan.sys.Float = fan.sys.Obj.$extend(fan.sys.Num);
fan.sys.Float.prototype.$ctor = function() {}
fan.sys.Float.make = function(val)
{
  var x = new Number(val);
  x.$fanType = fan.sys.Float.$type;
  return x;
}
fan.sys.Float.makeBits = function(bits)
{
  throw fan.sys.Err.make("Float.makeBits not available in JavaScript");
}
fan.sys.Float.makeBits32 = function(bits)
{
  var buffer = new ArrayBuffer(4);
  (new Uint32Array(buffer))[0] = bits;
  return fan.sys.Float.make(new Float32Array(buffer)[0]);
}
fan.sys.Float.prototype.$typeof = function()
{
  return fan.sys.Float.$type;
}
fan.sys.Float.equals = function(self, that)
{
  if (that != null && self.$fanType === that.$fanType)
  {
    return self.valueOf() == that.valueOf();
  }
  return false;
}
fan.sys.Float.compare = function(self, that)
{
  if (self == null) return that == null ? 0 : -1;
  if (that == null) return 1;
  if (isNaN(self)) return isNaN(that) ? 0 : -1;
  if (isNaN(that)) return 1;
  if (self < that) return -1;
  return self.valueOf() == that.valueOf() ? 0 : 1;
}
fan.sys.Float.isNaN = function(self)
{
  return isNaN(self);
}
fan.sys.Float.isNegZero = function(self)
{
  return 1/self === -Infinity;
}
fan.sys.Float.normNegZero = function(self)
{
  return fan.sys.Float.isNegZero(self) ? 0.0 : self;
}
fan.sys.Float.hash = function(self)
{
  return fan.sys.Str.hash(self.toString());
}
fan.sys.Float.bits = function(self)
{
  throw fan.sys.Err.make("Float.bits not available in JavaScript");
}
fan.sys.Float.bitsArray = function(self)
{
  var buf = new ArrayBuffer(8);
  (new Float64Array(buf))[0] = self;
  return [(new Uint32Array(buf))[0], (new Uint32Array(buf))[1]];
}
fan.sys.Float.bits32 = function(self)
{
  var buf = new ArrayBuffer(4);
  (new Float32Array(buf))[0] = self;
  return (new Uint32Array(buf))[0];
}
fan.sys.Float.toInt = function(val) { return (val<0) ? Math.ceil(val) : Math.floor(val); }
fan.sys.Float.toFloat = function(val) { return val; }
fan.sys.Float.toDecimal = function(val) { return fan.sys.Decimal.make(val); }
fan.sys.Float.abs = function(self) { return fan.sys.Float.make(Math.abs(self)); }
fan.sys.Float.approx = function(self, that, tolerance)
{
  // need this to check +inf, -inf, and nan
  if (fan.sys.Float.compare(self, that) == 0) return true;
  var t = tolerance == null
    ? Math.min(Math.abs(self/1e6), Math.abs(that/1e6))
    : tolerance;
  return Math.abs(self - that) <= t;
}
fan.sys.Float.ceil  = function(self) { return fan.sys.Float.make(Math.ceil(self)); }
fan.sys.Float.exp   = function(self) { return fan.sys.Float.make(Math.exp(self)); }
fan.sys.Float.floor = function(self) { return fan.sys.Float.make(Math.floor(self)); }
fan.sys.Float.log   = function(self) { return fan.sys.Float.make(Math.log(self)); }
fan.sys.Float.log10 = function(self) { return fan.sys.Float.make(Math.log(self) / Math.LN10); }
fan.sys.Float.min   = function(self, that) { return fan.sys.Float.make(Math.min(self, that)); }
fan.sys.Float.max   = function(self, that) { return fan.sys.Float.make(Math.max(self, that)); }
fan.sys.Float.negate = function(self) { return fan.sys.Float.make(-self); }
fan.sys.Float.pow   = function(self, exp) { return fan.sys.Float.make(Math.pow(self, exp)); }
fan.sys.Float.round = function(self) { return fan.sys.Float.make(Math.round(self)); }
fan.sys.Float.sqrt  = function(self) { return fan.sys.Float.make(Math.sqrt(self)); }
fan.sys.Float.random = function() { return fan.sys.Float.make(Math.random()); }
fan.sys.Float.plus     = function(a,b) { return fan.sys.Float.make(a+b); }
fan.sys.Float.plusInt  = function(a,b) { return fan.sys.Float.make(a+b); }
fan.sys.Float.plusDecimal = function(a,b) { return fan.sys.Decimal.make(a+b); }
fan.sys.Float.minus        = function(a,b) { return fan.sys.Float.make(a-b); }
fan.sys.Float.minusInt     = function(a,b) { return fan.sys.Float.make(a-b); }
fan.sys.Float.minusDecimal = function(a,b) { return fan.sys.Decimal.make(a-b); }
fan.sys.Float.mult        = function(a,b) { return fan.sys.Float.make(a*b); }
fan.sys.Float.multInt     = function(a,b) { return fan.sys.Float.make(a*b); }
fan.sys.Float.multDecimal = function(a,b) { return fan.sys.Decimal.make(a*b); }
fan.sys.Float.div        = function(a,b) { return fan.sys.Float.make(a/b); }
fan.sys.Float.divInt     = function(a,b) { return fan.sys.Float.make(a/b); }
fan.sys.Float.divDecimal = function(a,b) { return fan.sys.Decimal.make(a/b); }
fan.sys.Float.mod        = function(a,b) { return fan.sys.Float.make(a%b); }
fan.sys.Float.modInt     = function(a,b) { return fan.sys.Float.make(a%b); }
fan.sys.Float.modDecimal = function(a,b) { return fan.sys.Decimal.make(a%b); }
fan.sys.Float.increment = function(self) { return fan.sys.Float.make(self+1); }
fan.sys.Float.decrement = function(self) { return fan.sys.Float.make(self-1); }
fan.sys.Float.acos  = function(self) { return fan.sys.Float.make(Math.acos(self)); }
fan.sys.Float.asin  = function(self) { return fan.sys.Float.make(Math.asin(self)); }
fan.sys.Float.atan  = function(self) { return fan.sys.Float.make(Math.atan(self)); }
fan.sys.Float.atan2 = function(y, x) { return fan.sys.Float.make(Math.atan2(y, x)); }
fan.sys.Float.cos   = function(self) { return fan.sys.Float.make(Math.cos(self)); }
fan.sys.Float.sin   = function(self) { return fan.sys.Float.make(Math.sin(self)); }
fan.sys.Float.tan   = function(self) { return fan.sys.Float.make(Math.tan(self)); }
fan.sys.Float.toDegrees = function(self) { return fan.sys.Float.make(self * 180 / Math.PI); }
fan.sys.Float.toRadians = function(self) { return fan.sys.Float.make(self * Math.PI / 180); }
fan.sys.Float.cosh  = function(self) { return fan.sys.Float.make(0.5 * (Math.exp(self) + Math.exp(-self))); }
fan.sys.Float.sinh  = function(self) { return fan.sys.Float.make(0.5 * (Math.exp(self) - Math.exp(-self))); }
fan.sys.Float.tanh  = function(self) { return fan.sys.Float.make((Math.exp(2*self)-1) / (Math.exp(2*self)+1)); }
fan.sys.Float.fromStr = function(s, checked)
{
  if (s == "NaN") return fan.sys.Float.m_nan;
  if (s == "INF") return fan.sys.Float.m_posInf;
  if (s == "-INF") return fan.sys.Float.m_negInf;
  if (isNaN(s))
  {
    if (checked != null && !checked) return null;
    throw fan.sys.ParseErr.makeStr("Float", s);
  }
  return fan.sys.Float.make(parseFloat(s));
}
fan.sys.Float.toStr = function(self)
{
  if (isNaN(self)) return "NaN";
  if (fan.sys.Float.isNegZero(self)) return "-0.0";
  if (self == fan.sys.Float.m_posInf) return "INF";
  if (self == fan.sys.Float.m_negInf) return "-INF";
  return (fan.sys.Float.toInt(self) == self) ? self.toFixed(1) : ""+self;
}
fan.sys.Float.encode = function(self, out)
{
  if (isNaN(self)) out.w("sys::Float(\"NaN\")");
  else if (self == fan.sys.Float.m_posInf) out.w("sys::Float(\"INF\")");
  else if (self == fan.sys.Float.m_negInf) out.w("sys::Float(\"-INF\")");
  else out.w(""+self).w("f");
}
fan.sys.Float.toCode = function(self)
{
  if (isNaN(self)) return "Float.nan";
  if (self == fan.sys.Float.m_posInf) return "Float.posInf";
  if (self == fan.sys.Float.m_negInf) return "Float.negInf";
  var s = ""+self
  if (s.indexOf(".") == -1) s += ".0";
  return s + "f";
}
fan.sys.Float.toLocale = function(self, pattern)
{
  //if (locale === undefined || locale == null) locale = fan.std.Locale.cur();
  if (pattern === undefined) pattern = null;
  try
  {
    // handle special values
    if (isNaN(self)) return "NaN";
    if (self == fan.sys.Float.m_posInf) return "+INF";
    if (self == fan.sys.Float.m_negInf) return "-INF";
    // get default pattern if necessary
    if (pattern == null)
    {
      if (Math.abs(self) >= 100.0)
        return fan.sys.Int.toLocale(Math.round(self), null);
      pattern = fan.sys.Float.toDefaultLocalePattern(self);
    }
    // TODO: if value is < 10^-3 or > 10^7 it will be
    // converted to exponent string, so just bail on that
    var string = ''+self;
    return fan.sys.NumFormat.formatDigits(string, pattern);
  }
  catch (err)
  {
    fan.sys.ObjUtil.echo(err);
    return ''+self;
  }
}
fan.sys.Float.toDefaultLocalePattern = function(self)
{
  var abs  = Math.abs(self);
  var fabs = Math.floor(abs);
  if (fabs >= 10.0) return "#0.0#";
  if (fabs >= 1.0)  return "#0.0##";
  // format a fractional number (no decimal part)
  var frac = abs - fabs;
  if (frac < 0.00000001) return "0.0";
  if (frac < 0.0000001)  return "0.0000000##";
  if (frac < 0.000001)   return "0.000000##";
  if (frac < 0.00001)    return "0.00000##";
  if (frac < 0.0001)     return "0.0000##";
  if (frac < 0.001)      return "0.000##";
  return "0.0##";
}
fan.sys.Facet = function() {}
fan.sys.Facet.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.Facet.prototype.$typeof = function() { return fan.sys.Facet.$type; }
fan.sys.ArgErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.ArgErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.ArgErr.prototype.$typeof = function() { return fan.sys.ArgErr.$type; }
fan.sys.ArgErr.make = function(msg,cause) {
  var self = new fan.sys.ArgErr();
  fan.sys.ArgErr.make$(self,msg,cause);
  return self;
  }
fan.sys.ArgErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.CancelledErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.CancelledErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.CancelledErr.prototype.$typeof = function() { return fan.sys.CancelledErr.$type; }
fan.sys.CancelledErr.make = function(msg,cause) {
  var self = new fan.sys.CancelledErr();
  fan.sys.CancelledErr.make$(self,msg,cause);
  return self;
  }
fan.sys.CancelledErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.CastErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.CastErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.CastErr.prototype.$typeof = function() { return fan.sys.CastErr.$type; }
fan.sys.CastErr.make = function(msg,cause) {
  var self = new fan.sys.CastErr();
  fan.sys.CastErr.make$(self,msg,cause);
  return self;
  }
fan.sys.CastErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.ConstErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.ConstErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.ConstErr.prototype.$typeof = function() { return fan.sys.ConstErr.$type; }
fan.sys.ConstErr.make = function(msg,cause) {
  var self = new fan.sys.ConstErr();
  fan.sys.ConstErr.make$(self,msg,cause);
  return self;
  }
fan.sys.ConstErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.FieldNotSetErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.FieldNotSetErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.FieldNotSetErr.prototype.$typeof = function() { return fan.sys.FieldNotSetErr.$type; }
fan.sys.FieldNotSetErr.make = function(msg,cause) {
  var self = new fan.sys.FieldNotSetErr();
  fan.sys.FieldNotSetErr.make$(self,msg,cause);
  return self;
  }
fan.sys.FieldNotSetErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.IndexErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.IndexErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.IndexErr.prototype.$typeof = function() { return fan.sys.IndexErr.$type; }
fan.sys.IndexErr.make = function(msg,cause) {
  var self = new fan.sys.IndexErr();
  fan.sys.IndexErr.make$(self,msg,cause);
  return self;
  }
fan.sys.IndexErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.InterruptedErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.InterruptedErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.InterruptedErr.prototype.$typeof = function() { return fan.sys.InterruptedErr.$type; }
fan.sys.InterruptedErr.make = function(msg,cause) {
  var self = new fan.sys.InterruptedErr();
  fan.sys.InterruptedErr.make$(self,msg,cause);
  return self;
  }
fan.sys.InterruptedErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.IOErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.IOErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.IOErr.prototype.$typeof = function() { return fan.sys.IOErr.$type; }
fan.sys.IOErr.make = function(msg,cause) {
  var self = new fan.sys.IOErr();
  fan.sys.IOErr.make$(self,msg,cause);
  return self;
  }
fan.sys.IOErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.NameErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.NameErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.NameErr.prototype.$typeof = function() { return fan.sys.NameErr.$type; }
fan.sys.NameErr.make = function(msg,cause) {
  var self = new fan.sys.NameErr();
  fan.sys.NameErr.make$(self,msg,cause);
  return self;
  }
fan.sys.NameErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.NotImmutableErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.NotImmutableErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.NotImmutableErr.prototype.$typeof = function() { return fan.sys.NotImmutableErr.$type; }
fan.sys.NotImmutableErr.make = function(msg,cause) {
  var self = new fan.sys.NotImmutableErr();
  fan.sys.NotImmutableErr.make$(self,msg,cause);
  return self;
  }
fan.sys.NotImmutableErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.NullErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.NullErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.NullErr.prototype.$typeof = function() { return fan.sys.NullErr.$type; }
fan.sys.NullErr.make = function(msg,cause) {
  var self = new fan.sys.NullErr();
  fan.sys.NullErr.make$(self,msg,cause);
  return self;
  }
fan.sys.NullErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.NullErr.makeCoerce = function()
{
  return fan.sys.NullErr.make("Coerce to non-null");
}
fan.sys.ParseErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.ParseErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.ParseErr.prototype.$typeof = function() { return fan.sys.ParseErr.$type; }
fan.sys.ParseErr.make = function(msg,cause) {
  var self = new fan.sys.ParseErr();
  fan.sys.ParseErr.make$(self,msg,cause);
  return self;
  }
fan.sys.ParseErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.ReadonlyErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.ReadonlyErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.ReadonlyErr.prototype.$typeof = function() { return fan.sys.ReadonlyErr.$type; }
fan.sys.ReadonlyErr.make = function(msg,cause) {
  var self = new fan.sys.ReadonlyErr();
  fan.sys.ReadonlyErr.make$(self,msg,cause);
  return self;
  }
fan.sys.ReadonlyErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.UnknownFacetErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.UnknownFacetErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.UnknownFacetErr.prototype.$typeof = function() { return fan.sys.UnknownFacetErr.$type; }
fan.sys.UnknownFacetErr.make = function(msg,cause) {
  var self = new fan.sys.UnknownFacetErr();
  fan.sys.UnknownFacetErr.make$(self,msg,cause);
  return self;
  }
fan.sys.UnknownFacetErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.UnknownKeyErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.UnknownKeyErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.UnknownKeyErr.prototype.$typeof = function() { return fan.sys.UnknownKeyErr.$type; }
fan.sys.UnknownKeyErr.make = function(msg,cause) {
  var self = new fan.sys.UnknownKeyErr();
  fan.sys.UnknownKeyErr.make$(self,msg,cause);
  return self;
  }
fan.sys.UnknownKeyErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.UnknownPodErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.UnknownPodErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.UnknownPodErr.prototype.$typeof = function() { return fan.sys.UnknownPodErr.$type; }
fan.sys.UnknownPodErr.make = function(msg,cause) {
  var self = new fan.sys.UnknownPodErr();
  fan.sys.UnknownPodErr.make$(self,msg,cause);
  return self;
  }
fan.sys.UnknownPodErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.UnknownServiceErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.UnknownServiceErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.UnknownServiceErr.prototype.$typeof = function() { return fan.sys.UnknownServiceErr.$type; }
fan.sys.UnknownServiceErr.make = function(msg,cause) {
  var self = new fan.sys.UnknownServiceErr();
  fan.sys.UnknownServiceErr.make$(self,msg,cause);
  return self;
  }
fan.sys.UnknownServiceErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.UnknownSlotErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.UnknownSlotErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.UnknownSlotErr.prototype.$typeof = function() { return fan.sys.UnknownSlotErr.$type; }
fan.sys.UnknownSlotErr.make = function(msg,cause) {
  var self = new fan.sys.UnknownSlotErr();
  fan.sys.UnknownSlotErr.make$(self,msg,cause);
  return self;
  }
fan.sys.UnknownSlotErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.UnknownTypeErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.UnknownTypeErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.UnknownTypeErr.prototype.$typeof = function() { return fan.sys.UnknownTypeErr.$type; }
fan.sys.UnknownTypeErr.make = function(msg,cause) {
  var self = new fan.sys.UnknownTypeErr();
  fan.sys.UnknownTypeErr.make$(self,msg,cause);
  return self;
  }
fan.sys.UnknownTypeErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.UnresolvedErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.UnresolvedErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.UnresolvedErr.prototype.$typeof = function() { return fan.sys.UnresolvedErr.$type; }
fan.sys.UnresolvedErr.make = function(msg,cause) {
  var self = new fan.sys.UnresolvedErr();
  fan.sys.UnresolvedErr.make$(self,msg,cause);
  return self;
  }
fan.sys.UnresolvedErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.UnsupportedErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.UnsupportedErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.UnsupportedErr.prototype.$typeof = function() { return fan.sys.UnsupportedErr.$type; }
fan.sys.UnsupportedErr.make = function(msg,cause) {
  var self = new fan.sys.UnsupportedErr();
  fan.sys.UnsupportedErr.make$(self,msg,cause);
  return self;
  }
fan.sys.UnsupportedErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.TimeoutErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.TimeoutErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.TimeoutErr.prototype.$typeof = function() { return fan.sys.TimeoutErr.$type; }
fan.sys.TimeoutErr.make = function(msg,cause) {
  var self = new fan.sys.TimeoutErr();
  fan.sys.TimeoutErr.make$(self,msg,cause);
  return self;
  }
fan.sys.TimeoutErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.AssertErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.sys.AssertErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.AssertErr.prototype.$typeof = function() { return fan.sys.AssertErr.$type; }
fan.sys.AssertErr.make = function(msg,cause) {
  var self = new fan.sys.AssertErr();
  fan.sys.AssertErr.make$(self,msg,cause);
  return self;
  }
fan.sys.AssertErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = "";
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,msg,cause);
  return;
}
fan.sys.List = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.List.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.List.prototype.$typeof = function() { return fan.sys.List.$type; }
fan.sys.List.make = function(capacity)
{
  return fan.sys.ObjUtil.coerce(fan.sys.ArrayList.make(capacity),fan.std.Type.find("sys::List<sys::List^V>"));
}
fan.sys.List.makeObj = function(capacity)
{
  if (capacity === undefined) capacity = 4;
  return fan.sys.ObjUtil.coerce(fan.sys.ArrayList.make(capacity),fan.std.Type.find("sys::List<sys::Obj?>"));
}
fan.sys.List.privateMake = function() {
  var self = new fan.sys.List();
  fan.sys.List.privateMake$(self);
  return self;
  }
fan.sys.List.privateMake$ = function(self)
{
  return;
}
fan.sys.List.prototype.equals = function(other)
{
  if (other == null)
  {
    return false;
  }
  ;
  if (!fan.sys.ObjUtil.is(other,fan.std.Type.find("sys::List<>")))
  {
    return false;
  }
  ;
  var that = fan.sys.ObjUtil.as(other,fan.std.Type.find("sys::List<sys::List^V>"));
  if (fan.sys.ObjUtil.compareNE(this.size(),that.size()))
  {
    return false;
  }
  ;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.size()); i = fan.sys.Int.increment(i))
  {
    if (fan.sys.ObjUtil.compareNE(this.get(i),that.get(i)))
    {
      return false;
    }
    ;
  }
  ;
  return true;
}
fan.sys.List.prototype.hash = function()
{
  var $this = this;
  var hash = 33;
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u2,
    function(obj,ignoreparam$1)
    {
      hash = fan.sys.Int.plus(fan.sys.Int.mult(31,hash),(function($this) { if (obj == null) return 0; return fan.sys.ObjUtil.hash(obj); })($this));
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,sys::List^V,sys::Int>")));
  return hash;
}
fan.sys.List.prototype.isEmpty = function()
{
  return fan.sys.ObjUtil.equals(this.size(),0);
}
fan.sys.List.prototype.sz = function()
{
  return this.size();
}
fan.sys.List.prototype.getSafe = function(index,defV)
{
  if (defV === undefined) defV = null;
  if (fan.sys.ObjUtil.compareLT(index,0))
  {
    index = fan.sys.Int.plus(index,this.size());
    if (fan.sys.ObjUtil.compareLT(index,0))
    {
      return defV;
    }
    ;
  }
  ;
  if (fan.sys.ObjUtil.compareGE(index,this.size()))
  {
    return defV;
  }
  ;
  return this.get(index);
}
fan.sys.List.prototype.slice = function(r)
{
  var s = r.startIndex(this.size());
  var e = r.endIndex(this.size());
  return fan.sys.ObjUtil.coerce(fan.sys.ListView.make(fan.sys.ObjUtil.coerce(this,fan.std.Type.find("sys::List<sys::List^V>")),s,fan.sys.Int.minus(fan.sys.Int.plus(e,1),s)),fan.std.Type.find("sys::List<sys::List^V>"));
}
fan.sys.List.prototype.contains = function(item)
{
  var $this = this;
  return fan.sys.ObjUtil.compareNE(this.findIndex(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u4,
    function(v,i)
    {
      return fan.sys.ObjUtil.equals(v,item);
    }),fan.std.Type.find("sys::Func<sys::Bool,sys::List^V,sys::Int>"))),-1);
}
fan.sys.List.prototype.containsSame = function(item)
{
  var $this = this;
  return fan.sys.ObjUtil.compareNE(this.findIndex(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u4,
    function(v,i)
    {
      return v === item;
    }),fan.std.Type.find("sys::Func<sys::Bool,sys::List^V,sys::Int>"))),-1);
}
fan.sys.List.prototype.containsAll = function(list)
{
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,list.size()); i = fan.sys.Int.increment(i))
  {
    var obj = list.get(i);
    if (!this.contains(obj))
    {
      return false;
    }
    ;
  }
  ;
  return true;
}
fan.sys.List.prototype.containsAny = function(list)
{
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,list.size()); i = fan.sys.Int.increment(i))
  {
    var obj = list.get(i);
    if (this.contains(obj))
    {
      return true;
    }
    ;
  }
  ;
  return false;
}
fan.sys.List.prototype.index = function(item,offset)
{
  if (offset === undefined) offset = 0;
  var $this = this;
  return this.findIndex(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u4,
    function(v,i)
    {
      return fan.sys.ObjUtil.equals(v,item);
    }),fan.std.Type.find("sys::Func<sys::Bool,sys::List^V,sys::Int>")),offset);
}
fan.sys.List.prototype.indexr = function(item,offset)
{
  if (offset === undefined) offset = -1;
  var $this = this;
  return this.findrIndex(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u4,
    function(v,i)
    {
      return fan.sys.ObjUtil.equals(v,item);
    }),fan.std.Type.find("sys::Func<sys::Bool,sys::List^V,sys::Int>")),offset);
}
fan.sys.List.prototype.indexSame = function(item,offset)
{
  if (offset === undefined) offset = 0;
  var $this = this;
  return this.findIndex(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u4,
    function(v,i)
    {
      return v === item;
    }),fan.std.Type.find("sys::Func<sys::Bool,sys::List^V,sys::Int>")),offset);
}
fan.sys.List.prototype.first = function()
{
  if (fan.sys.ObjUtil.equals(this.size(),0))
  {
    return null;
  }
  ;
  return this.get(0);
}
fan.sys.List.prototype.last = function()
{
  if (fan.sys.ObjUtil.equals(this.size(),0))
  {
    return null;
  }
  ;
  return this.get(fan.sys.Int.minus(this.size(),1));
}
fan.sys.List.prototype.addIfNotNull = function(item)
{
  if (item == null)
  {
    return this;
  }
  ;
  return this.add(item);
}
fan.sys.List.prototype.remove = function(item)
{
  var index = this.index(item);
  if (fan.sys.ObjUtil.equals(index,-1))
  {
    return null;
  }
  ;
  return this.removeAt(index);
}
fan.sys.List.prototype.removeSame = function(item)
{
  var index = this.indexSame(item);
  if (fan.sys.ObjUtil.equals(index,-1))
  {
    return null;
  }
  ;
  return this.removeAt(index);
}
fan.sys.List.prototype.removeAll = function(list)
{
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,list.size()); i = fan.sys.Int.increment(i))
  {
    var obj = list.get(i);
    this.remove(obj);
  }
  ;
  return this;
}
fan.sys.List.prototype.trim = function()
{
  this.capacity$(this.size());
  return this;
}
fan.sys.List.prototype.fill = function(val,times)
{
  var esize = fan.sys.Int.plus(this.size(),times);
  if (fan.sys.ObjUtil.compareGT(esize,this.capacity()))
  {
    this.capacity$(esize);
  }
  ;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,times); i = fan.sys.Int.increment(i))
  {
    this.add(val);
  }
  ;
  return this;
}
fan.sys.List.prototype.peek = function()
{
  return this.last();
}
fan.sys.List.prototype.pop = function()
{
  if (fan.sys.ObjUtil.equals(this.size(),0))
  {
    return null;
  }
  ;
  var obj = this.last();
  this.removeAt(fan.sys.Int.minus(this.size(),1));
  return obj;
}
fan.sys.List.prototype.push = function(item)
{
  return this.add(item);
}
fan.sys.List.prototype.each = function(c)
{
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.size()); i = fan.sys.Int.increment(i))
  {
    c.call(this.get(i),fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
  }
  ;
  return;
}
fan.sys.List.prototype.eachr = function(c)
{
  for (var i = fan.sys.Int.minus(this.size(),1); fan.sys.ObjUtil.compareGE(i,0); i = fan.sys.Int.decrement(i))
  {
    c.call(this.get(i),fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
  }
  ;
  return;
}
fan.sys.List.prototype.eachRange = function(r,c)
{
  var s = r.startIndex(this.size());
  var e = r.endIndex(this.size());
  for (var i = s; fan.sys.ObjUtil.compareLE(i,e); i = fan.sys.Int.increment(i))
  {
    c.call(this.get(i),fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
  }
  ;
  return;
}
fan.sys.List.prototype.eachWhile = function(c,offset)
{
  if (offset === undefined) offset = 0;
  if (fan.sys.ObjUtil.compareLT(offset,0))
  {
    offset = fan.sys.Int.plus(offset,this.size());
  }
  ;
  for (var i = offset; fan.sys.ObjUtil.compareLT(i,this.size()); i = fan.sys.Int.increment(i))
  {
    var res = c.call(this.get(i),fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
    if (res != null)
    {
      return res;
    }
    ;
  }
  ;
  return null;
}
fan.sys.List.prototype.eachrWhile = function(c,offset)
{
  if (offset === undefined) offset = -1;
  if (fan.sys.ObjUtil.compareLT(offset,0))
  {
    offset = fan.sys.Int.plus(offset,this.size());
  }
  ;
  for (var i = offset; fan.sys.ObjUtil.compareGE(i,0); i = fan.sys.Int.decrement(i))
  {
    var res = c.call(this.get(i),fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
    if (res != null)
    {
      return res;
    }
    ;
  }
  ;
  return null;
}
fan.sys.List.prototype.find = function(c)
{
  var $this = this;
  var i = this.findIndex(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u4,
    function(v,i)
    {
      return c.call(v,fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
    }),fan.std.Type.find("sys::Func<sys::Bool,sys::List^V,sys::Int>")));
  return (function($this) { if (fan.sys.ObjUtil.equals(i,-1)) return null; return $this.get(i); })(this);
}
fan.sys.List.prototype.findIndex = function(c,offset)
{
  if (offset === undefined) offset = 0;
  if (fan.sys.ObjUtil.compareLT(offset,0))
  {
    offset = fan.sys.Int.plus(offset,this.size());
  }
  ;
  for (var i = offset; fan.sys.ObjUtil.compareLT(i,this.size()); i = fan.sys.Int.increment(i))
  {
    var obj = this.get(i);
    var result = c.call(obj,fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
    if (result)
    {
      return i;
    }
    ;
  }
  ;
  return -1;
}
fan.sys.List.prototype.findrIndex = function(c,offset)
{
  if (offset === undefined) offset = -1;
  if (fan.sys.ObjUtil.compareLT(offset,0))
  {
    offset = fan.sys.Int.plus(offset,this.size());
  }
  ;
  for (var i = offset; fan.sys.ObjUtil.compareGE(i,0); i = fan.sys.Int.decrement(i))
  {
    var obj = this.get(i);
    var result = c.call(obj,fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
    if (result)
    {
      return i;
    }
    ;
  }
  ;
  return -1;
}
fan.sys.List.prototype.findAll = function(c)
{
  var $this = this;
  var nlist = fan.sys.List.make(1);
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u6,
    function(obj,i)
    {
      var result = c.call(obj,fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
      if (result)
      {
        nlist.add(obj);
      }
      ;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,sys::List^V,sys::Int>")));
  return fan.sys.ObjUtil.coerce(nlist,fan.std.Type.find("sys::List<sys::List^V>"));
}
fan.sys.List.prototype.exclude = function(c)
{
  var $this = this;
  var nlist = fan.sys.List.make(1);
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u6,
    function(obj,i)
    {
      var result = c.call(obj,fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
      if (!result)
      {
        nlist.add(obj);
      }
      ;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,sys::List^V,sys::Int>")));
  return fan.sys.ObjUtil.coerce(nlist,fan.std.Type.find("sys::List<sys::List^V>"));
}
fan.sys.List.prototype.any = function(c)
{
  var $this = this;
  return fan.sys.ObjUtil.compareNE(this.findIndex(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u4,
    function(v,i)
    {
      return c.call(v,fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
    }),fan.std.Type.find("sys::Func<sys::Bool,sys::List^V,sys::Int>"))),-1);
}
fan.sys.List.prototype.all = function(c)
{
  var $this = this;
  return fan.sys.ObjUtil.equals(this.findIndex(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u4,
    function(v,i)
    {
      return !c.call(v,fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
    }),fan.std.Type.find("sys::Func<sys::Bool,sys::List^V,sys::Int>"))),-1);
}
fan.sys.List.prototype.map = function(c)
{
  var $this = this;
  var nlist = fan.sys.List.make(this.size());
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u6,
    function(obj,i)
    {
      var result = c.call(obj,fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
      nlist.add(result);
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,sys::List^V,sys::Int>")));
  return nlist;
}
fan.sys.List.prototype.flatMap = function(c)
{
  var $this = this;
  var nlist = fan.sys.List.make(this.size());
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u6,
    function(obj,i)
    {
      var result = c.call(obj,fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
      nlist.addAll(result);
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,sys::List^V,sys::Int>")));
  return nlist;
}
fan.sys.List.prototype.reduce = function(init,c)
{
  var $this = this;
  var reduction = init;
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u6,
    function(obj,i)
    {
      reduction = c.call(reduction,obj,fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,sys::List^V,sys::Int>")));
  return reduction;
}
fan.sys.List.prototype.min = function(c)
{
  if (c === undefined) c = null;
  var $this = this;
  var min = null;
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u6,
    function(obj,i)
    {
      if (fan.sys.ObjUtil.equals(i,0))
      {
        min = obj;
        return;
      }
      ;
      var result = 0;
      if (c != null)
      {
        result = c.call(min,obj);
      }
      else
      {
        result = fan.sys.ObjUtil.compare(min,obj);
      }
      ;
      if (fan.sys.ObjUtil.compareGT(result,0))
      {
        min = obj;
      }
      ;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,sys::List^V,sys::Int>")));
  return min;
}
fan.sys.List.prototype.max = function(c)
{
  if (c === undefined) c = null;
  var $this = this;
  var max = null;
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u6,
    function(obj,i)
    {
      if (fan.sys.ObjUtil.equals(i,0))
      {
        max = obj;
        return;
      }
      ;
      var result = 0;
      if (c != null)
      {
        result = c.call(max,obj);
      }
      else
      {
        result = fan.sys.ObjUtil.compare(max,obj);
      }
      ;
      if (fan.sys.ObjUtil.compareLT(result,0))
      {
        max = obj;
      }
      ;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,sys::List^V,sys::Int>")));
  return max;
}
fan.sys.List.prototype.insertSort = function(left,right,cmopFunc)
{
  var self = this;
  for (var i = left; fan.sys.ObjUtil.compareLT(i,right); (function($this) { var $_u7 = i; i = fan.sys.Int.increment(i); return $_u7; })(this))
  {
    var curVal = self.get(fan.sys.Int.plus(i,1));
    var j = i;
    while ((fan.sys.ObjUtil.compareGE(j,left) && fan.sys.ObjUtil.compareLT(cmopFunc.call(curVal,self.get(j)),0)))
    {
      self.set(fan.sys.Int.plus(j,1),self.get(j));
      j = fan.sys.Int.decrement(j);
    }
    ;
    self.set(fan.sys.Int.plus(j,1),curVal);
  }
  ;
  return;
}
fan.sys.List.prototype.quickSort = function(low,high,cmopFunc)
{
  if (fan.sys.ObjUtil.equals(low,high))
  {
    return;
  }
  ;
  if (!fan.sys.ObjUtil.compareLT(low,high))
  {
    throw fan.sys.Err.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(low,fan.sys.Obj.$type.toNullable()))," >= "),fan.sys.ObjUtil.coerce(high,fan.sys.Obj.$type.toNullable())));
  }
  ;
  if (fan.sys.ObjUtil.compareLT(fan.sys.Int.minus(high,low),5))
  {
    this.insertSort(low,high,cmopFunc);
    return;
  }
  ;
  var self = this;
  var i = low;
  var j = high;
  var pivot = fan.sys.Int.div(fan.sys.Int.plus(j,i),2);
  var min = i;
  var max = j;
  if (fan.sys.ObjUtil.compareGT(self.get(i),self.get(j)))
  {
    min = j;
    max = i;
  }
  ;
  if (fan.sys.ObjUtil.compareLT(self.get(pivot),self.get(min)))
  {
    pivot = min;
  }
  else
  {
    if (fan.sys.ObjUtil.compareGT(self.get(pivot),self.get(max)))
    {
      pivot = max;
    }
    ;
  }
  ;
  var pivotVal = self.get(pivot);
  self.set(pivot,self.get(i));
  while (fan.sys.ObjUtil.compareLT(i,j))
  {
    while ((fan.sys.ObjUtil.compareLT(i,j) && fan.sys.ObjUtil.compareLE(cmopFunc.call(pivotVal,self.get(j)),0)))
    {
      j = fan.sys.Int.decrement(j);
    }
    ;
    if (fan.sys.ObjUtil.compareLT(i,j))
    {
      self.set(i,self.get(j));
      i = fan.sys.Int.increment(i);
    }
    ;
    while ((fan.sys.ObjUtil.compareLT(i,j) && fan.sys.ObjUtil.compareLT(cmopFunc.call(self.get(i),pivotVal),0)))
    {
      i = fan.sys.Int.increment(i);
    }
    ;
    if (fan.sys.ObjUtil.compareLT(i,j))
    {
      self.set(j,self.get(i));
      j = fan.sys.Int.decrement(j);
    }
    ;
  }
  ;
  self.set(i,pivotVal);
  if (fan.sys.ObjUtil.compareLT(low,fan.sys.Int.minus(i,1)))
  {
    this.quickSort(low,fan.sys.Int.minus(i,1),cmopFunc);
  }
  ;
  if (fan.sys.ObjUtil.compareLT(fan.sys.Int.plus(i,1),high))
  {
    this.quickSort(fan.sys.Int.plus(j,1),high,cmopFunc);
  }
  ;
  return;
}
fan.sys.List.prototype.sort = function(c)
{
  if (c === undefined) c = null;
  var $this = this;
  if (fan.sys.ObjUtil.compareLE(this.size(),1))
  {
    return this;
  }
  ;
  if (c == null)
  {
    c = fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
      fan.sys.$clos$_u8,
      function(a,b)
      {
        return fan.sys.ObjUtil.compare(a,b);
      }),fan.std.Type.find("sys::Func<sys::Int,sys::List^V,sys::List^V>?"));
  }
  ;
  this.quickSort(0,fan.sys.Int.minus(this.size(),1),fan.sys.ObjUtil.coerce(c,fan.std.Type.find("sys::Func<sys::Int,sys::List^V,sys::List^V>")));
  return this;
}
fan.sys.List.prototype.sortr = function(c)
{
  if (c === undefined) c = null;
  var $this = this;
  return this.sort(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u8,
    function(a,b)
    {
      if (c == null)
      {
        return fan.sys.Int.negate(fan.sys.ObjUtil.compare(a,b));
      }
      ;
      return fan.sys.Int.negate(c.call(a,b));
    }),fan.std.Type.find("sys::Func<sys::Int,sys::List^V,sys::List^V>?")));
}
fan.sys.List.prototype.bsearch = function(cmopFunc)
{
  var self = this;
  var n = this.size();
  if (fan.sys.ObjUtil.equals(n,0))
  {
    return -1;
  }
  ;
  var low = 0;
  var high = fan.sys.Int.minus(n,1);
  while (fan.sys.ObjUtil.compareLE(low,high))
  {
    var mid = fan.sys.Int.div(fan.sys.Int.plus(low,high),2);
    var cond = cmopFunc.call(self.get(mid),fan.sys.ObjUtil.coerce(mid,fan.sys.Obj.$type.toNullable()));
    if (fan.sys.ObjUtil.compareLT(cond,0))
    {
      high = fan.sys.Int.minus(mid,1);
    }
    else
    {
      if (fan.sys.ObjUtil.compareGT(cond,0))
      {
        low = fan.sys.Int.plus(mid,1);
      }
      else
      {
        return mid;
      }
      ;
    }
    ;
  }
  ;
  return fan.sys.Int.negate(fan.sys.Int.plus(low,1));
}
fan.sys.List.prototype.binarySearch = function(key,c)
{
  if (c === undefined) c = null;
  var $this = this;
  return this.bsearch(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u9,
    function(b,i)
    {
      if (c == null)
      {
        return fan.sys.ObjUtil.compare(key,b);
      }
      ;
      return c.call(key,b);
    }),fan.std.Type.find("sys::Func<sys::Int,sys::List^V,sys::Int>")));
}
fan.sys.List.prototype.binaryFind = function(c)
{
  return this.bsearch(c);
}
fan.sys.List.prototype.reverse = function()
{
  if (fan.sys.ObjUtil.compareLE(this.size(),1))
  {
    return this;
  }
  ;
  var n = this.size();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,n); i = fan.sys.Int.increment(i))
  {
    var j = fan.sys.Int.minus(fan.sys.Int.minus(n,i),1);
    if (fan.sys.ObjUtil.compareGE(i,j))
    {
      break;
    }
    ;
    var a = this.get(i);
    var b = this.get(j);
    this.set(j,a);
    this.set(i,b);
  }
  ;
  return this;
}
fan.sys.List.prototype.swap = function(indexA,indexB)
{
  if (fan.sys.ObjUtil.compareLT(indexA,0))
  {
    indexA = fan.sys.Int.plus(indexA,this.size());
  }
  ;
  if (fan.sys.ObjUtil.compareLT(indexB,0))
  {
    indexB = fan.sys.Int.plus(indexB,this.size());
  }
  ;
  var a = this.get(indexA);
  var b = this.get(indexB);
  this.set(indexB,a);
  this.set(indexA,b);
  return this;
}
fan.sys.List.prototype.moveTo = function(item,toIndex)
{
  if (item == null)
  {
    return this;
  }
  ;
  var i = this.index(item);
  if (fan.sys.ObjUtil.equals(i,-1))
  {
    return this;
  }
  ;
  if (fan.sys.ObjUtil.compareLT(toIndex,0))
  {
    toIndex = fan.sys.Int.plus(toIndex,this.size());
  }
  ;
  this.removeAt(i);
  this.insert(toIndex,item);
  return this;
}
fan.sys.List.prototype.flatten = function()
{
  var $this = this;
  var nlist = fan.sys.List.make(this.size());
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u10,
    function(item,ignoreparam$1)
    {
      if (fan.sys.ObjUtil.is(item,fan.std.Type.find("sys::List<>")))
      {
        var f = (function($this) { var $_u11 = fan.sys.ObjUtil.as(item,fan.std.Type.find("sys::List<>")); if ($_u11 == null) return null; return $_u11.flatten(); })($this);
        if (f != null)
        {
          nlist.addAll(fan.sys.ObjUtil.coerce(f,fan.std.Type.find("sys::List<sys::Obj?>")));
        }
        ;
      }
      else
      {
        nlist.add(item);
      }
      ;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,sys::List^V,sys::Int>")));
  return nlist;
}
fan.sys.List.prototype.random = function()
{
  if (fan.sys.ObjUtil.equals(this.size(),0))
  {
    return null;
  }
  ;
  var r = fan.sys.Range.make(0,this.size(),true);
  return this.get(r.random());
}
fan.sys.List.prototype.shuffle = function()
{
  var $this = this;
  var r = fan.sys.Range.make(0,this.size(),true);
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u12,
    function(v,i)
    {
      $this.swap(i,r.random());
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,sys::List^V,sys::Int>")));
  return this;
}
fan.sys.List.prototype.toStr = function()
{
  var $this = this;
  if (fan.sys.ObjUtil.equals(this.size(),0))
  {
    return "[,]";
  }
  ;
  var buf = fan.sys.StrBuf.make();
  buf.add("[");
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u13,
    function(item,i)
    {
      if (fan.sys.ObjUtil.compareNE(i,0))
      {
        buf.add(", ");
      }
      ;
      buf.add(item);
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,sys::List^V,sys::Int>")));
  buf.add("]");
  return buf.toStr();
}
fan.sys.List.prototype.join = function(separator,c)
{
  if (separator === undefined) separator = "";
  if (c === undefined) c = null;
  var $this = this;
  var buf = fan.sys.StrBuf.make();
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u13,
    function(item,i)
    {
      if (fan.sys.ObjUtil.compareNE(i,0))
      {
        buf.add(separator);
      }
      ;
      if (c != null)
      {
        buf.add(c.call(item,fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable())));
      }
      else
      {
        buf.add(item);
      }
      ;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,sys::List^V,sys::Int>")));
  return buf.toStr();
}
fan.sys.List.prototype.toCode = function()
{
  var $this = this;
  if (fan.sys.ObjUtil.equals(this.size(),0))
  {
    return "[,]";
  }
  ;
  var buf = fan.sys.StrBuf.make();
  buf.add("[");
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u13,
    function(item,i)
    {
      if (fan.sys.ObjUtil.compareNE(i,0))
      {
        buf.add(", ");
      }
      ;
      buf.add(fan.sys.ObjUtil.trap(item,"toCode",fan.sys.List.make(fan.sys.Obj.$type.toNullable(),[])));
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,sys::List^V,sys::Int>")));
  buf.add("]");
  return buf.toStr();
}
fan.sys.List.prototype.isRW = function()
{
  return !this.isRO();
}
fan.sys.List.prototype.ro = function()
{
  if (this.isRO())
  {
    return this;
  }
  ;
  var nlist = fan.sys.ObjUtil.coerce(this.dup(),fan.std.Type.find("sys::ArrayList<sys::List^V>"));
  nlist.m_readOnly = true;
  return fan.sys.ObjUtil.coerce(nlist,fan.std.Type.find("sys::List"));
}
fan.sys.List.prototype.rw = function()
{
  if (this.isRW())
  {
    return this;
  }
  ;
  var nlist = fan.sys.ObjUtil.coerce(this.dup(),fan.std.Type.find("sys::ArrayList<sys::List^V>"));
  nlist.m_readOnly = false;
  return fan.sys.ObjUtil.coerce(nlist,fan.std.Type.find("sys::List"));
}
fan.sys.List.prototype.toImmutable = function()
{
  var $this = this;
  if (this.isImmutable())
  {
    return fan.sys.ObjUtil.coerce(this,fan.std.Type.find("sys::List<sys::List^V>"));
  }
  ;
  var nlist = fan.sys.ArrayList.make(this.size());
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u14,
    function(v,ignoreparam$1)
    {
      nlist.add(fan.sys.ObjUtil.toImmutable(v));
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,sys::List^V,sys::Int>")));
  nlist.m_readOnly = true;
  nlist.m_immutable = true;
  return fan.sys.ObjUtil.coerce(nlist,fan.std.Type.find("sys::List<sys::List^V>"));
}
fan.sys.List.static$init = function()
{
  if (fan.sys.List.static$inited) return;
  fan.sys.List.static$inited = true;
  fan.sys.List.m_defVal = fan.sys.ObjUtil.coerce((function($this) { var $_u15 = fan.sys.List.make(fan.sys.Obj.$type); if ($_u15 == null) return null; return fan.sys.ObjUtil.toImmutable($_u15); })(this),fan.std.Type.find("sys::List<sys::Obj>"));
  return;
}
fan.sys.List.m_defVal = null;
fan.sys.List.prototype.m_size = 0;
fan.sys.List.prototype.m_capacity = 0;
fan.sys.ListView = fan.sys.Obj.$extend(fan.sys.List);
fan.sys.ListView.prototype.$ctor = function()
{
  fan.sys.List.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.ListView.prototype.$typeof = function() { return fan.sys.ListView.$type; }
fan.sys.ListView.prototype.base = function()
{
  return this.m_base;
}
fan.sys.ListView.prototype.base$ = function(it)
{
  this.m_base = it;
  return;
}
fan.sys.ListView.prototype.size = function()
{
  return this.m_size;
}
fan.sys.ListView.prototype.size$ = function(it)
{
  if (fan.sys.ObjUtil.compareGT(it,this.m_size))
  {
    throw fan.sys.ReadonlyErr.make();
  }
  else
  {
    this.m_size = it;
  }
  ;
  return;
}
fan.sys.ListView.prototype.capacity = function()
{
  return this.m_capacity;
}
fan.sys.ListView.prototype.capacity$ = function(it)
{
  throw fan.sys.ReadonlyErr.make();
}
fan.sys.ListView.make = function(base,offset,size) {
  var self = new fan.sys.ListView();
  fan.sys.ListView.make$(self,base,offset,size);
  return self;
  }
fan.sys.ListView.make$ = function(self,base,offset,size)
{
  fan.sys.List.privateMake$(self);
  if (fan.sys.ObjUtil.is(base,fan.std.Type.find("sys::ListView<sys::ListView^V>")))
  {
    var b = fan.sys.ObjUtil.coerce(base,fan.std.Type.find("sys::ListView<sys::ListView^V>"));
    offset = fan.sys.Int.plus(offset,b.m_offset);
    base = b.base();
  }
  ;
  self.m_base = base;
  self.m_offset = offset;
  self.m_size = size;
  return;
}
fan.sys.ListView.prototype.get = function(index)
{
  if (fan.sys.ObjUtil.compareLT(index,0))
  {
    index = fan.sys.Int.plus(this.size(),index);
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(index,0) || fan.sys.ObjUtil.compareGE(index,this.size())))
  {
    throw fan.sys.IndexErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("index is out of range. size:",fan.sys.ObjUtil.coerce(this.size(),fan.sys.Obj.$type.toNullable())),", index:"),fan.sys.ObjUtil.coerce(index,fan.sys.Obj.$type.toNullable())));
  }
  ;
  return this.m_base.get(fan.sys.Int.plus(this.m_offset,index));
}
fan.sys.ListView.prototype.getRange = function(r)
{
  var start = r.startIndex(this.size());
  var end = r.endIndex(this.size());
  end = fan.sys.Int.increment(end);
  var len = fan.sys.Int.minus(end,start);
  if (fan.sys.ObjUtil.compareLT(len,0))
  {
    throw fan.sys.IndexErr.make("range illegal");
  }
  ;
  var nlist = fan.sys.ArrayList.make(len);
  if (fan.sys.ObjUtil.is(this.m_base,fan.std.Type.find("sys::ArrayList<sys::ListView^V>")))
  {
    var a = fan.sys.ObjUtil.coerce(this.m_base,fan.std.Type.find("sys::ArrayList<sys::ListView^V>"));
    fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(a.m_array,fan.sys.Obj.$type),fan.sys.Int.plus(start,this.m_offset),fan.sys.ObjUtil.coerce(nlist.m_array,fan.sys.Obj.$type),0,len);
    nlist.size$(len);
  }
  else
  {
    for (var i = start; fan.sys.ObjUtil.compareLT(i,end); i = fan.sys.Int.increment(i))
    {
      nlist.add(this.get(i));
    }
    ;
  }
  ;
  return fan.sys.ObjUtil.coerce(nlist,fan.std.Type.find("sys::List<sys::ListView^V>"));
}
fan.sys.ListView.prototype.set = function(index,item)
{
  if (fan.sys.ObjUtil.compareLT(index,0))
  {
    index = fan.sys.Int.plus(this.size(),index);
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(index,0) || fan.sys.ObjUtil.compareGE(index,this.size())))
  {
    throw fan.sys.IndexErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("index is out of range. size:",fan.sys.ObjUtil.coerce(this.size(),fan.sys.Obj.$type.toNullable())),", index:"),fan.sys.ObjUtil.coerce(index,fan.sys.Obj.$type.toNullable())));
  }
  ;
  this.m_base.set(fan.sys.Int.plus(this.m_offset,index),item);
  return this;
}
fan.sys.ListView.prototype.add = function(item)
{
  throw fan.sys.ReadonlyErr.make();
}
fan.sys.ListView.prototype.dup = function()
{
  var nlist = fan.sys.ArrayList.make(this.size());
  if (fan.sys.ObjUtil.is(this.m_base,fan.std.Type.find("sys::ArrayList<sys::ListView^V>")))
  {
    var a = fan.sys.ObjUtil.coerce(this.m_base,fan.std.Type.find("sys::ArrayList<sys::ListView^V>"));
    fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(a.m_array,fan.sys.Obj.$type),this.m_offset,fan.sys.ObjUtil.coerce(nlist.m_array,fan.sys.Obj.$type),0,this.size());
    nlist.size$(this.size());
  }
  else
  {
    for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.size()); i = fan.sys.Int.increment(i))
    {
      nlist.add(this.get(i));
    }
    ;
  }
  ;
  return fan.sys.ObjUtil.coerce(nlist,fan.std.Type.find("sys::List<sys::ListView^V>"));
}
fan.sys.ListView.prototype.addAll = function(list)
{
  throw fan.sys.ReadonlyErr.make();
}
fan.sys.ListView.prototype.insert = function(index,item)
{
  throw fan.sys.ReadonlyErr.make();
}
fan.sys.ListView.prototype.insertAll = function(index,list)
{
  throw fan.sys.ReadonlyErr.make();
}
fan.sys.ListView.prototype.removeAt = function(index)
{
  throw fan.sys.ReadonlyErr.make();
}
fan.sys.ListView.prototype.removeRange = function(r)
{
  throw fan.sys.ReadonlyErr.make();
}
fan.sys.ListView.prototype.clear = function()
{
  this.size$(0);
  return this;
}
fan.sys.ListView.prototype.isRO = function()
{
  return this.m_base.isRO();
}
fan.sys.ListView.prototype.isImmutable = function()
{
  return this.m_base.isImmutable();
}
fan.sys.ListView.prototype.m_base = null;
fan.sys.ListView.prototype.m_offset = 0;
fan.sys.ListView.prototype.m_size = 0;
fan.sys.ListView.prototype.m_capacity = 0;
fan.sys.This = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.This.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.This.prototype.$typeof = function() { return fan.sys.This.$type; }
fan.sys.This.make = function() {
  var self = new fan.sys.This();
  fan.sys.This.make$(self);
  return self;
  }
fan.sys.This.make$ = function(self)
{
  return;
}
fan.sys.Range = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.Range.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.Range.prototype.$typeof = function() { return fan.sys.Range.$type; }
fan.sys.Range.makeInclusive = function(start,end)
{
  return fan.sys.Range.make(start,end,false);
}
fan.sys.Range.makeExclusive = function(start,end)
{
  return fan.sys.Range.make(start,end,true);
}
fan.sys.Range.make = function(start,end,exclusive) {
  var self = new fan.sys.Range();
  fan.sys.Range.make$(self,start,end,exclusive);
  return self;
  }
fan.sys.Range.make$ = function(self,start,end,exclusive)
{
  self.m__start = start;
  self.m__end = end;
  self.m__exclusive = exclusive;
  return;
}
fan.sys.Range.fromStr = function(str,checked)
{
  if (checked === undefined) checked = true;
  var pos = fan.sys.Str.find(str,"..");
  if ((fan.sys.ObjUtil.equals(pos,-1) || fan.sys.ObjUtil.compareGE(fan.sys.Int.plus(pos,2),fan.sys.Str.size(str))))
  {
    if (checked)
    {
      throw fan.sys.ParseErr.make(fan.sys.Str.plus("Invalide Range: ",str));
    }
    ;
    return fan.sys.Range.make(0,0,true);
  }
  ;
  var s = fan.sys.Str.getRange(str,fan.sys.Range.make(0,pos,true));
  var e = null;
  var exclusive = false;
  if (fan.sys.ObjUtil.equals(fan.sys.Str.get(str,fan.sys.Int.plus(pos,2)),60))
  {
    e = fan.sys.Str.getRange(str,fan.sys.Range.make(fan.sys.Int.plus(pos,3),-1));
    exclusive = true;
  }
  else
  {
    e = fan.sys.Str.getRange(str,fan.sys.Range.make(fan.sys.Int.plus(pos,2),-1));
    exclusive = false;
  }
  ;
  return fan.sys.Range.make(fan.sys.Str.toInt(s),fan.sys.Str.toInt(e),exclusive);
}
fan.sys.Range.prototype.equals = function(obj)
{
  if (obj == null)
  {
    return false;
  }
  ;
  if (!fan.sys.ObjUtil.is(obj,fan.sys.Range.$type))
  {
    return false;
  }
  ;
  var other = fan.sys.ObjUtil.as(obj,fan.sys.Range.$type);
  if (fan.sys.ObjUtil.compareNE(this.start(),fan.sys.ObjUtil.coerce(other,fan.sys.Range.$type).start()))
  {
    return false;
  }
  ;
  if (fan.sys.ObjUtil.compareNE(this.end(),fan.sys.ObjUtil.coerce(other,fan.sys.Range.$type).end()))
  {
    return false;
  }
  ;
  if (fan.sys.ObjUtil.compareNE(this.exclusive(),fan.sys.ObjUtil.coerce(other,fan.sys.Range.$type).exclusive()))
  {
    return false;
  }
  ;
  return true;
}
fan.sys.Range.prototype.hash = function()
{
  return fan.sys.Int.xor(this.start(),this.end());
}
fan.sys.Range.prototype.toStr = function()
{
  if (this.exclusive())
  {
    return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(this.start(),fan.sys.Obj.$type.toNullable())),"..<"),fan.sys.ObjUtil.coerce(this.end(),fan.sys.Obj.$type.toNullable()));
  }
  else
  {
    return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(this.start(),fan.sys.Obj.$type.toNullable())),".."),fan.sys.ObjUtil.coerce(this.end(),fan.sys.Obj.$type.toNullable()));
  }
  ;
}
fan.sys.Range.prototype.start = function()
{
  return this.m__start;
}
fan.sys.Range.prototype.end = function()
{
  return this.m__end;
}
fan.sys.Range.prototype.lastEnd = function()
{
  if (fan.sys.ObjUtil.equals(this.start(),this.end()))
  {
    return this.end();
  }
  else
  {
    if (fan.sys.ObjUtil.compareLT(this.start(),this.end()))
    {
      return (function($this) { if ($this.exclusive()) return fan.sys.Int.minus($this.end(),1); return $this.end(); })(this);
    }
    else
    {
      return (function($this) { if ($this.exclusive()) return fan.sys.Int.plus($this.end(),1); return $this.end(); })(this);
    }
    ;
  }
  ;
}
fan.sys.Range.prototype.inclusive = function()
{
  return !this.exclusive();
}
fan.sys.Range.prototype.exclusive = function()
{
  return this.m__exclusive;
}
fan.sys.Range.prototype.isEmpty = function()
{
  return (this.exclusive() && fan.sys.ObjUtil.equals(this.start(),this.end()));
}
fan.sys.Range.prototype.min = function()
{
  if (this.isEmpty())
  {
    return null;
  }
  ;
  if (fan.sys.ObjUtil.compareLT(this.end(),this.start()))
  {
    return fan.sys.ObjUtil.coerce((function($this) { if ($this.exclusive()) return fan.sys.Int.plus($this.end(),1); return $this.end(); })(this),fan.sys.Int.$type.toNullable());
  }
  ;
  return fan.sys.ObjUtil.coerce(this.start(),fan.sys.Int.$type.toNullable());
}
fan.sys.Range.prototype.max = function()
{
  if (this.isEmpty())
  {
    return null;
  }
  ;
  if (fan.sys.ObjUtil.compareLT(this.end(),this.start()))
  {
    return fan.sys.ObjUtil.coerce(this.start(),fan.sys.Int.$type.toNullable());
  }
  ;
  return fan.sys.ObjUtil.coerce((function($this) { if ($this.exclusive()) return fan.sys.Int.minus($this.end(),1); return $this.end(); })(this),fan.sys.Int.$type.toNullable());
}
fan.sys.Range.prototype.first = function()
{
  if (this.isEmpty())
  {
    return null;
  }
  ;
  return fan.sys.ObjUtil.coerce(this.start(),fan.sys.Int.$type.toNullable());
}
fan.sys.Range.prototype.last = function()
{
  if (this.isEmpty())
  {
    return null;
  }
  ;
  return fan.sys.ObjUtil.coerce(this.lastEnd(),fan.sys.Int.$type.toNullable());
}
fan.sys.Range.prototype.contains = function(i)
{
  if (fan.sys.ObjUtil.compareLT(this.start(),this.end()))
  {
    if (this.exclusive())
    {
      return (fan.sys.ObjUtil.compareLE(this.start(),i) && fan.sys.ObjUtil.compareLT(i,this.end()));
    }
    else
    {
      return (fan.sys.ObjUtil.compareLE(this.start(),i) && fan.sys.ObjUtil.compareLE(i,this.end()));
    }
    ;
  }
  else
  {
    if (this.exclusive())
    {
      return (fan.sys.ObjUtil.compareLT(this.end(),i) && fan.sys.ObjUtil.compareLE(i,this.start()));
    }
    else
    {
      return (fan.sys.ObjUtil.compareLE(this.end(),i) && fan.sys.ObjUtil.compareLE(i,this.start()));
    }
    ;
  }
  ;
}
fan.sys.Range.prototype.offset = function(offset)
{
  return fan.sys.Range.make(fan.sys.Int.plus(this.start(),offset),fan.sys.Int.plus(this.end(),offset),this.exclusive());
}
fan.sys.Range.prototype.each = function(f)
{
  var start = this.start();
  var end = this.lastEnd();
  if (fan.sys.ObjUtil.compareLT(start,end))
  {
    for (var i = start; fan.sys.ObjUtil.compareLE(i,end); i = fan.sys.Int.increment(i))
    {
      f.call(fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
    }
    ;
  }
  else
  {
    for (var i = start; fan.sys.ObjUtil.compareGE(i,end); i = fan.sys.Int.decrement(i))
    {
      f.call(fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
    }
    ;
  }
  ;
  return;
}
fan.sys.Range.prototype.eachWhile = function(f)
{
  var start = this.start();
  var end = this.lastEnd();
  if (fan.sys.ObjUtil.compareLT(start,end))
  {
    for (var i = start; fan.sys.ObjUtil.compareLE(i,end); i = fan.sys.Int.increment(i))
    {
      var r = f.call(fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
      if (r != null)
      {
        return r;
      }
      ;
    }
    ;
  }
  else
  {
    for (var i = start; fan.sys.ObjUtil.compareGE(i,end); i = fan.sys.Int.decrement(i))
    {
      var r = f.call(fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
      if (r != null)
      {
        return r;
      }
      ;
    }
    ;
  }
  ;
  return null;
}
fan.sys.Range.prototype.map = function(f)
{
  var cp = (function($this) { if (fan.sys.ObjUtil.compareLT($this.start(),$this.end())) return fan.sys.Int.plus(fan.sys.Int.minus($this.end(),$this.start()),1); return fan.sys.Int.plus(fan.sys.Int.minus($this.start(),$this.end()),1); })(this);
  var nlist = fan.sys.List.make(cp);
  var start = this.start();
  var end = this.lastEnd();
  if (fan.sys.ObjUtil.compareLT(start,end))
  {
    for (var i = start; fan.sys.ObjUtil.compareLE(i,end); i = fan.sys.Int.increment(i))
    {
      var r = f.call(fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
      nlist.add(r);
    }
    ;
  }
  else
  {
    for (var i = start; fan.sys.ObjUtil.compareGE(i,end); i = fan.sys.Int.decrement(i))
    {
      var r = f.call(fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
      nlist.add(r);
    }
    ;
  }
  ;
  return nlist;
}
fan.sys.Range.prototype.toList = function()
{
  var nlist = fan.sys.List.make(fan.sys.Int.$type);
  if (this.isEmpty())
  {
    return nlist;
  }
  ;
  var start = this.start();
  var end = this.lastEnd();
  if (fan.sys.ObjUtil.compareLT(start,end))
  {
    nlist.capacity$(fan.sys.Int.plus(fan.sys.Int.minus(end,start),1));
    for (var i = start; fan.sys.ObjUtil.compareLE(i,end); i = fan.sys.Int.increment(i))
    {
      nlist.add(fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
    }
    ;
  }
  else
  {
    nlist.capacity$(fan.sys.Int.plus(fan.sys.Int.minus(start,end),1));
    for (var i = start; fan.sys.ObjUtil.compareGE(i,end); i = fan.sys.Int.decrement(i))
    {
      nlist.add(fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
    }
    ;
  }
  ;
  return nlist;
}
fan.sys.Range.prototype.random = function()
{
  return fan.sys.Int.random(fan.sys.ObjUtil.coerce(this,fan.sys.Range.$type.toNullable()));
}
fan.sys.Range.prototype.startIndex = function(size)
{
  var x = this.start();
  if (fan.sys.ObjUtil.compareLT(x,0))
  {
    x = fan.sys.Int.plus(size,x);
  }
  ;
  if (fan.sys.ObjUtil.compareGT(x,size))
  {
    throw fan.sys.IndexErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Range: ",fan.sys.ObjUtil.coerce(this,fan.sys.Obj.$type.toNullable())),", "),fan.sys.ObjUtil.coerce(size,fan.sys.Obj.$type.toNullable())));
  }
  ;
  return x;
}
fan.sys.Range.prototype.endIndex = function(size)
{
  var x = this.end();
  if (fan.sys.ObjUtil.compareLT(x,0))
  {
    x = fan.sys.Int.plus(size,x);
  }
  ;
  if (this.exclusive())
  {
    (function($this) { var $_u21 = x; x = fan.sys.Int.decrement(x); return $_u21; })(this);
  }
  ;
  if (fan.sys.ObjUtil.compareGE(x,size))
  {
    throw fan.sys.IndexErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Range: ",fan.sys.ObjUtil.coerce(this,fan.sys.Obj.$type.toNullable())),", "),fan.sys.ObjUtil.coerce(size,fan.sys.Obj.$type.toNullable())));
  }
  ;
  return x;
}
fan.sys.Range.prototype.m__start = 0;
fan.sys.Range.prototype.m__end = 0;
fan.sys.Range.prototype.m__exclusive = false;
fan.sys.ArrayList = fan.sys.Obj.$extend(fan.sys.List);
fan.sys.ArrayList.prototype.$ctor = function()
{
  fan.sys.List.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.ArrayList.prototype.$typeof = function() { return fan.sys.ArrayList.$type; }
fan.sys.ArrayList.prototype.array = function()
{
  return this.m_array;
}
fan.sys.ArrayList.prototype.array$ = function(it)
{
  this.m_array = it;
  return;
}
fan.sys.ArrayList.prototype.readOnly = function()
{
  return this.m_readOnly;
}
fan.sys.ArrayList.prototype.readOnly$ = function(it)
{
  this.m_readOnly = it;
  return;
}
fan.sys.ArrayList.prototype.immutable = function()
{
  return this.m_immutable;
}
fan.sys.ArrayList.prototype.immutable$ = function(it)
{
  this.m_immutable = it;
  return;
}
fan.sys.ArrayList.prototype.modify = function()
{
  if (this.m_readOnly)
  {
    throw fan.sys.ReadonlyErr.make();
  }
  ;
  return;
}
fan.sys.ArrayList.make = function(capacity) {
  var self = new fan.sys.ArrayList();
  fan.sys.ArrayList.make$(self,capacity);
  return self;
  }
fan.sys.ArrayList.make$ = function(self,capacity)
{
  fan.sys.List.privateMake$(self);
  self.m_array = fan.sys.ObjUtil.coerce(fan.sys.Array.make(capacity,"sys::Obj"),fan.std.Type.find("sys::Array<sys::Obj?>"));
  return;
}
fan.sys.ArrayList.prototype.size = function()
{
  return this.m_size;
}
fan.sys.ArrayList.prototype.size$ = function(it)
{
  this.modify();
  if (fan.sys.ObjUtil.equals(it,this.m_size))
  {
    return;
  }
  else
  {
    if (fan.sys.ObjUtil.compareLT(it,this.m_size))
    {
      for (var i = it; fan.sys.ObjUtil.compareLT(i,this.m_size); i = fan.sys.Int.increment(i))
      {
        this.m_array.set(i,null);
      }
      ;
      this.m_size = it;
    }
    else
    {
      if (fan.sys.ObjUtil.compareGT(it,this.m_size))
      {
        if (fan.sys.ObjUtil.compareGT(it,this.capacity()))
        {
          this.capacity$(it);
        }
        ;
        this.m_size = it;
      }
      ;
    }
    ;
  }
  ;
  return;
}
fan.sys.ArrayList.prototype.capacity = function()
{
  return this.m_array.size();
}
fan.sys.ArrayList.prototype.capacity$ = function(it)
{
  this.modify();
  if (fan.sys.ObjUtil.compareLT(it,this.size()))
  {
    throw fan.sys.ArgErr.make("attempting to set capacity less than size");
  }
  ;
  if (fan.sys.ObjUtil.equals(it,this.m_array.size()))
  {
    return;
  }
  ;
  this.m_array = fan.sys.ObjUtil.coerce(fan.sys.Array.realloc(fan.sys.ObjUtil.coerce(this.m_array,fan.sys.Obj.$type),it),fan.std.Type.find("sys::Array<sys::Obj?>"));
  return;
}
fan.sys.ArrayList.prototype.get = function(index)
{
  if (fan.sys.ObjUtil.compareLT(index,0))
  {
    index = fan.sys.Int.plus(index,this.size());
    if (fan.sys.ObjUtil.compareLT(index,0))
    {
      throw fan.sys.IndexErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("index is out of range. size:",fan.sys.ObjUtil.coerce(this.size(),fan.sys.Obj.$type.toNullable())),", index:"),fan.sys.ObjUtil.coerce(index,fan.sys.Obj.$type.toNullable())));
    }
    ;
  }
  ;
  if (fan.sys.ObjUtil.compareGE(index,this.size()))
  {
    throw fan.sys.IndexErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("index is out of range. size:",fan.sys.ObjUtil.coerce(this.size(),fan.sys.Obj.$type.toNullable())),", index:"),fan.sys.ObjUtil.coerce(index,fan.sys.Obj.$type.toNullable())));
  }
  ;
  return this.m_array.get(index);
}
fan.sys.ArrayList.prototype.getRange = function(r)
{
  var start = r.startIndex(this.size());
  var end = r.endIndex(this.size());
  end = fan.sys.Int.increment(end);
  var len = fan.sys.Int.minus(end,start);
  if (fan.sys.ObjUtil.compareLT(len,0))
  {
    throw fan.sys.IndexErr.make("range illegal");
  }
  ;
  var nlist = fan.sys.ArrayList.make(len);
  fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(this.m_array,fan.sys.Obj.$type),start,fan.sys.ObjUtil.coerce(nlist.m_array,fan.sys.Obj.$type),0,len);
  nlist.m_size = len;
  return fan.sys.ObjUtil.coerce(nlist,fan.std.Type.find("sys::List<sys::ArrayList^V>"));
}
fan.sys.ArrayList.prototype.dup = function()
{
  var nlist = fan.sys.ArrayList.make(this.size());
  fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(this.m_array,fan.sys.Obj.$type),0,fan.sys.ObjUtil.coerce(nlist.m_array,fan.sys.Obj.$type),0,this.size());
  nlist.m_size = this.size();
  return fan.sys.ObjUtil.coerce(nlist,fan.std.Type.find("sys::List<sys::ArrayList^V>"));
}
fan.sys.ArrayList.prototype.set = function(index,item)
{
  this.modify();
  if (fan.sys.ObjUtil.compareLT(index,0))
  {
    index = fan.sys.Int.plus(this.size(),index);
  }
  ;
  if (fan.sys.ObjUtil.compareGE(index,this.size()))
  {
    throw fan.sys.IndexErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("index is out of range. size:",fan.sys.ObjUtil.coerce(this.size(),fan.sys.Obj.$type.toNullable())),", index:"),fan.sys.ObjUtil.coerce(index,fan.sys.Obj.$type.toNullable())));
  }
  ;
  this.m_array.set(index,item);
  return this;
}
fan.sys.ArrayList.prototype.grow = function(desiredSize)
{
  this.modify();
  if (fan.sys.ObjUtil.compareLE(desiredSize,this.capacity()))
  {
    return;
  }
  ;
  var newSize = (function($this) { if (fan.sys.ObjUtil.compareLT($this.capacity(),256)) return fan.sys.Int.plus(fan.sys.Int.mult($this.capacity(),2),10); return fan.sys.Float.toInt(fan.sys.Int.multFloat($this.capacity(),fan.sys.Float.make(1.5))); })(this);
  newSize = fan.sys.Int.max(desiredSize,newSize);
  this.capacity$(newSize);
  return;
}
fan.sys.ArrayList.prototype.add = function(item)
{
  this.modify();
  this.grow(fan.sys.Int.plus(this.size(),1));
  this.m_array.set(this.size(),item);
  this.m_size = fan.sys.Int.plus(this.m_size,1);
  return this;
}
fan.sys.ArrayList.prototype.addAll = function(alist)
{
  this.modify();
  this.grow(fan.sys.Int.plus(this.size(),alist.size()));
  var list = fan.sys.ObjUtil.coerce(alist,fan.std.Type.find("sys::ArrayList<sys::ArrayList^V>"));
  fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(list.m_array,fan.sys.Obj.$type),0,fan.sys.ObjUtil.coerce(this.m_array,fan.sys.Obj.$type),this.size(),list.size());
  this.m_size = fan.sys.Int.plus(this.size(),list.size());
  return this;
}
fan.sys.ArrayList.prototype.insert = function(index,item)
{
  this.modify();
  if (fan.sys.ObjUtil.compareLT(index,0))
  {
    index = fan.sys.Int.plus(index,this.size());
  }
  ;
  if (fan.sys.ObjUtil.compareGT(index,this.size()))
  {
    throw fan.sys.IndexErr.make(fan.sys.Str.plus("index is out of range ",fan.sys.ObjUtil.coerce(index,fan.sys.Obj.$type.toNullable())));
  }
  ;
  this.grow(fan.sys.Int.plus(this.size(),1));
  fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(this.m_array,fan.sys.Obj.$type),index,fan.sys.ObjUtil.coerce(this.m_array,fan.sys.Obj.$type),fan.sys.Int.plus(index,1),fan.sys.Int.minus(this.size(),index));
  this.m_array.set(index,item);
  this.m_size = fan.sys.Int.plus(this.m_size,1);
  return this;
}
fan.sys.ArrayList.prototype.insertAll = function(index,alist)
{
  this.modify();
  if (fan.sys.ObjUtil.compareLT(index,0))
  {
    index = fan.sys.Int.plus(index,this.size());
  }
  ;
  if (fan.sys.ObjUtil.compareGT(index,this.size()))
  {
    throw fan.sys.IndexErr.make("index is out of range");
  }
  ;
  this.grow(fan.sys.Int.plus(this.size(),alist.size()));
  var list = fan.sys.ObjUtil.coerce(alist,fan.std.Type.find("sys::ArrayList<sys::ArrayList^V>"));
  fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(this.m_array,fan.sys.Obj.$type),index,fan.sys.ObjUtil.coerce(this.m_array,fan.sys.Obj.$type),fan.sys.Int.plus(index,list.size()),fan.sys.Int.minus(this.size(),index));
  fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(list.m_array,fan.sys.Obj.$type),0,fan.sys.ObjUtil.coerce(this.m_array,fan.sys.Obj.$type),index,list.size());
  this.m_size = fan.sys.Int.plus(this.size(),list.size());
  return this;
}
fan.sys.ArrayList.prototype.removeAt = function(index)
{
  this.modify();
  if (fan.sys.ObjUtil.compareLT(index,0))
  {
    index = fan.sys.Int.plus(index,this.size());
  }
  ;
  if (fan.sys.ObjUtil.compareGE(index,this.size()))
  {
    throw fan.sys.IndexErr.make(fan.sys.Str.plus("index is out of range ",fan.sys.ObjUtil.coerce(index,fan.sys.Obj.$type.toNullable())));
  }
  ;
  var obj = this.m_array.get(index);
  fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(this.m_array,fan.sys.Obj.$type),fan.sys.Int.plus(index,1),fan.sys.ObjUtil.coerce(this.m_array,fan.sys.Obj.$type),index,fan.sys.Int.minus(fan.sys.Int.minus(this.size(),index),1));
  this.m_array.set(fan.sys.Int.minus(this.size(),1),null);
  this.m_size = fan.sys.Int.minus(this.size(),1);
  return obj;
}
fan.sys.ArrayList.prototype.removeRange = function(r)
{
  this.modify();
  var start = r.startIndex(this.size());
  var end = r.endIndex(this.size());
  end = fan.sys.Int.increment(end);
  var len = fan.sys.Int.minus(end,start);
  if (fan.sys.ObjUtil.compareLT(len,0))
  {
    throw fan.sys.IndexErr.make("range illegal");
  }
  ;
  if (fan.sys.ObjUtil.equals(len,0))
  {
    return this;
  }
  ;
  fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(this.m_array,fan.sys.Obj.$type),end,fan.sys.ObjUtil.coerce(this.m_array,fan.sys.Obj.$type),start,fan.sys.Int.minus(this.size(),end));
  this.m_size = fan.sys.Int.minus(this.size(),len);
  return this;
}
fan.sys.ArrayList.prototype.clear = function()
{
  this.modify();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.size()); i = fan.sys.Int.increment(i))
  {
    this.m_array.set(0,null);
  }
  ;
  this.size$(0);
  return this;
}
fan.sys.ArrayList.prototype.insertSortA = function(left,right,cmopFunc)
{
  var self = this.m_array;
  for (var i = left; fan.sys.ObjUtil.compareLT(i,right); (function($this) { var $_u23 = i; i = fan.sys.Int.increment(i); return $_u23; })(this))
  {
    var curVal = self.get(fan.sys.Int.plus(i,1));
    var j = i;
    while ((fan.sys.ObjUtil.compareGE(j,left) && fan.sys.ObjUtil.compareLT(cmopFunc.call(curVal,self.get(j)),0)))
    {
      self.set(fan.sys.Int.plus(j,1),self.get(j));
      j = fan.sys.Int.decrement(j);
    }
    ;
    self.set(fan.sys.Int.plus(j,1),curVal);
  }
  ;
  return;
}
fan.sys.ArrayList.prototype.quickSortA = function(low,high,cmopFunc)
{
  if (fan.sys.ObjUtil.equals(low,high))
  {
    return;
  }
  ;
  if (!fan.sys.ObjUtil.compareLT(low,high))
  {
    throw fan.sys.Err.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(low,fan.sys.Obj.$type.toNullable()))," >= "),fan.sys.ObjUtil.coerce(high,fan.sys.Obj.$type.toNullable())));
  }
  ;
  if (fan.sys.ObjUtil.compareLT(fan.sys.Int.minus(high,low),5))
  {
    this.insertSortA(low,high,cmopFunc);
    return;
  }
  ;
  var self = this.m_array;
  var i = low;
  var j = high;
  var pivot = fan.sys.Int.div(fan.sys.Int.plus(j,i),2);
  var min = i;
  var max = j;
  if (fan.sys.ObjUtil.compareGT(self.get(i),self.get(j)))
  {
    min = j;
    max = i;
  }
  ;
  if (fan.sys.ObjUtil.compareLT(self.get(pivot),self.get(min)))
  {
    pivot = min;
  }
  else
  {
    if (fan.sys.ObjUtil.compareGT(self.get(pivot),self.get(max)))
    {
      pivot = max;
    }
    ;
  }
  ;
  var pivotVal = self.get(pivot);
  self.set(pivot,self.get(i));
  while (fan.sys.ObjUtil.compareLT(i,j))
  {
    while ((fan.sys.ObjUtil.compareLT(i,j) && fan.sys.ObjUtil.compareLE(cmopFunc.call(pivotVal,self.get(j)),0)))
    {
      j = fan.sys.Int.decrement(j);
    }
    ;
    if (fan.sys.ObjUtil.compareLT(i,j))
    {
      self.set(i,self.get(j));
      i = fan.sys.Int.increment(i);
    }
    ;
    while ((fan.sys.ObjUtil.compareLT(i,j) && fan.sys.ObjUtil.compareLT(cmopFunc.call(self.get(i),pivotVal),0)))
    {
      i = fan.sys.Int.increment(i);
    }
    ;
    if (fan.sys.ObjUtil.compareLT(i,j))
    {
      self.set(j,self.get(i));
      j = fan.sys.Int.decrement(j);
    }
    ;
  }
  ;
  self.set(i,pivotVal);
  if (fan.sys.ObjUtil.compareLT(low,fan.sys.Int.minus(i,1)))
  {
    this.quickSortA(low,fan.sys.Int.minus(i,1),cmopFunc);
  }
  ;
  if (fan.sys.ObjUtil.compareLT(fan.sys.Int.plus(i,1),high))
  {
    this.quickSortA(fan.sys.Int.plus(j,1),high,cmopFunc);
  }
  ;
  return;
}
fan.sys.ArrayList.prototype.sort = function(c)
{
  if (c === undefined) c = null;
  var $this = this;
  this.modify();
  if (fan.sys.ObjUtil.compareLE(this.size(),1))
  {
    return this;
  }
  ;
  if (c == null)
  {
    c = fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
      fan.sys.$clos$_u8,
      function(a,b)
      {
        return fan.sys.ObjUtil.compare(a,b);
      }),fan.std.Type.find("sys::Func<sys::Int,sys::ArrayList^V,sys::ArrayList^V>?"));
  }
  ;
  this.quickSortA(0,fan.sys.Int.minus(this.size(),1),fan.sys.ObjUtil.coerce(c,fan.std.Type.find("sys::Func<sys::Int,sys::ArrayList^V,sys::ArrayList^V>")));
  return this;
}
fan.sys.ArrayList.prototype.bsearchA = function(cmopFunc)
{
  var self = this.m_array;
  var n = this.size();
  if (fan.sys.ObjUtil.equals(n,0))
  {
    return -1;
  }
  ;
  var low = 0;
  var high = fan.sys.Int.minus(n,1);
  while (fan.sys.ObjUtil.compareLE(low,high))
  {
    var mid = fan.sys.Int.div(fan.sys.Int.plus(low,high),2);
    var cond = cmopFunc.call(self.get(mid),fan.sys.ObjUtil.coerce(mid,fan.sys.Obj.$type.toNullable()));
    if (fan.sys.ObjUtil.compareLT(cond,0))
    {
      high = fan.sys.Int.minus(mid,1);
    }
    else
    {
      if (fan.sys.ObjUtil.compareGT(cond,0))
      {
        low = fan.sys.Int.plus(mid,1);
      }
      else
      {
        return mid;
      }
      ;
    }
    ;
  }
  ;
  return fan.sys.Int.negate(fan.sys.Int.plus(low,1));
}
fan.sys.ArrayList.prototype.binarySearch = function(key,c)
{
  if (c === undefined) c = null;
  var $this = this;
  return this.bsearchA(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.sys.$clos$_u9,
    function(b,i)
    {
      if (c == null)
      {
        return fan.sys.ObjUtil.compare(key,b);
      }
      ;
      return c.call(key,b);
    }),fan.std.Type.find("sys::Func<sys::Int,sys::ArrayList^V,sys::Int>")));
}
fan.sys.ArrayList.prototype.binaryFind = function(c)
{
  return this.bsearchA(c);
}
fan.sys.ArrayList.prototype.reverse = function()
{
  this.modify();
  if (fan.sys.ObjUtil.compareLE(this.size(),1))
  {
    return this;
  }
  ;
  var n = this.size();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,n); i = fan.sys.Int.increment(i))
  {
    var j = fan.sys.Int.minus(fan.sys.Int.minus(n,i),1);
    if (fan.sys.ObjUtil.compareGE(i,j))
    {
      break;
    }
    ;
    var a = this.m_array.get(i);
    var b = this.m_array.get(j);
    this.m_array.set(j,a);
    this.m_array.set(i,b);
  }
  ;
  return this;
}
fan.sys.ArrayList.prototype.swap = function(indexA,indexB)
{
  this.modify();
  if (fan.sys.ObjUtil.compareLT(indexA,0))
  {
    indexA = fan.sys.Int.plus(indexA,this.size());
  }
  ;
  if (fan.sys.ObjUtil.compareLT(indexB,0))
  {
    indexB = fan.sys.Int.plus(indexB,this.size());
  }
  ;
  var a = this.m_array.get(indexA);
  var b = this.m_array.get(indexB);
  this.m_array.set(indexB,a);
  this.m_array.set(indexA,b);
  return this;
}
fan.sys.ArrayList.prototype.isRO = function()
{
  return this.m_readOnly;
}
fan.sys.ArrayList.prototype.isImmutable = function()
{
  return this.m_immutable;
}
fan.sys.ArrayList.prototype.m_array = null;
fan.sys.ArrayList.prototype.m_readOnly = false;
fan.sys.ArrayList.prototype.m_immutable = false;
fan.sys.ArrayList.prototype.m_size = 0;
fan.sys.ArrayList.prototype.m_capacity = 0;
fan.sys.Serializable = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.Serializable.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_simple = false;
  this.m_collection = false;
  return;
}
fan.sys.Serializable.prototype.$typeof = function() { return fan.sys.Serializable.$type; }
fan.sys.Serializable.make = function(f) {
  var self = new fan.sys.Serializable();
  fan.sys.Serializable.make$(self,f);
  return self;
  }
fan.sys.Serializable.make$ = function(self,f)
{
  if (f === undefined) f = null;
  ;
  (function($this) { var $_u24 = f; if ($_u24 == null) return null; return $_u24.call($this); })(self);
  return;
}
fan.sys.Serializable.prototype.m_simple = false;
fan.sys.Serializable.prototype.m_collection = false;
fan.sys.Transient = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.Transient.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.Transient.prototype.$typeof = function() { return fan.sys.Transient.$type; }
fan.sys.Transient.make = function() {
  var self = new fan.sys.Transient();
  fan.sys.Transient.make$(self);
  return self;
  }
fan.sys.Transient.make$ = function(self)
{
  return;
}
fan.sys.Transient.static$init = function()
{
  if (fan.sys.Transient.static$inited) return;
  fan.sys.Transient.static$inited = true;
  fan.sys.Transient.m_defVal = fan.sys.Transient.make();
  return;
}
fan.sys.Transient.m_defVal = null;
fan.sys.Js = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.Js.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.Js.prototype.$typeof = function() { return fan.sys.Js.$type; }
fan.sys.Js.make = function() {
  var self = new fan.sys.Js();
  fan.sys.Js.make$(self);
  return self;
  }
fan.sys.Js.make$ = function(self)
{
  return;
}
fan.sys.Js.static$init = function()
{
  if (fan.sys.Js.static$inited) return;
  fan.sys.Js.static$inited = true;
  fan.sys.Js.m_defVal = fan.sys.Js.make();
  return;
}
fan.sys.Js.m_defVal = null;
fan.sys.NoJs = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.NoJs.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.NoJs.prototype.$typeof = function() { return fan.sys.NoJs.$type; }
fan.sys.NoJs.make = function() {
  var self = new fan.sys.NoJs();
  fan.sys.NoJs.make$(self);
  return self;
  }
fan.sys.NoJs.make$ = function(self)
{
  return;
}
fan.sys.NoJs.static$init = function()
{
  if (fan.sys.NoJs.static$inited) return;
  fan.sys.NoJs.static$inited = true;
  fan.sys.NoJs.m_defVal = fan.sys.NoJs.make();
  return;
}
fan.sys.NoJs.m_defVal = null;
fan.sys.NoDoc = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.NoDoc.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.NoDoc.prototype.$typeof = function() { return fan.sys.NoDoc.$type; }
fan.sys.NoDoc.make = function() {
  var self = new fan.sys.NoDoc();
  fan.sys.NoDoc.make$(self);
  return self;
  }
fan.sys.NoDoc.make$ = function(self)
{
  return;
}
fan.sys.NoDoc.static$init = function()
{
  if (fan.sys.NoDoc.static$inited) return;
  fan.sys.NoDoc.static$inited = true;
  fan.sys.NoDoc.m_defVal = fan.sys.NoDoc.make();
  return;
}
fan.sys.NoDoc.m_defVal = null;
fan.sys.Deprecated = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.Deprecated.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_msg = "";
  return;
}
fan.sys.Deprecated.prototype.$typeof = function() { return fan.sys.Deprecated.$type; }
fan.sys.Deprecated.make = function(f) {
  var self = new fan.sys.Deprecated();
  fan.sys.Deprecated.make$(self,f);
  return self;
  }
fan.sys.Deprecated.make$ = function(self,f)
{
  if (f === undefined) f = null;
  ;
  (function($this) { var $_u25 = f; if ($_u25 == null) return null; return $_u25.call($this); })(self);
  return;
}
fan.sys.Deprecated.prototype.m_msg = null;
fan.sys.Operator = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.Operator.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.Operator.prototype.$typeof = function() { return fan.sys.Operator.$type; }
fan.sys.Operator.make = function() {
  var self = new fan.sys.Operator();
  fan.sys.Operator.make$(self);
  return self;
  }
fan.sys.Operator.make$ = function(self)
{
  return;
}
fan.sys.Operator.static$init = function()
{
  if (fan.sys.Operator.static$inited) return;
  fan.sys.Operator.static$inited = true;
  fan.sys.Operator.m_defVal = fan.sys.Operator.make();
  return;
}
fan.sys.Operator.m_defVal = null;
fan.sys.FacetMeta = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.FacetMeta.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_inherited = false;
  return;
}
fan.sys.FacetMeta.prototype.$typeof = function() { return fan.sys.FacetMeta.$type; }
fan.sys.FacetMeta.make = function(f) {
  var self = new fan.sys.FacetMeta();
  fan.sys.FacetMeta.make$(self,f);
  return self;
  }
fan.sys.FacetMeta.make$ = function(self,f)
{
  if (f === undefined) f = null;
  ;
  (function($this) { var $_u26 = f; if ($_u26 == null) return null; return $_u26.call($this); })(self);
  return;
}
fan.sys.FacetMeta.prototype.m_inherited = false;
fan.sys.NoPeer = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.NoPeer.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.NoPeer.prototype.$typeof = function() { return fan.sys.NoPeer.$type; }
fan.sys.NoPeer.make = function() {
  var self = new fan.sys.NoPeer();
  fan.sys.NoPeer.make$(self);
  return self;
  }
fan.sys.NoPeer.make$ = function(self)
{
  return;
}
fan.sys.NoPeer.static$init = function()
{
  if (fan.sys.NoPeer.static$inited) return;
  fan.sys.NoPeer.static$inited = true;
  fan.sys.NoPeer.m_defVal = fan.sys.NoPeer.make();
  return;
}
fan.sys.NoPeer.m_defVal = null;
fan.sys.Extern = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.Extern.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_simple = false;
  return;
}
fan.sys.Extern.prototype.$typeof = function() { return fan.sys.Extern.$type; }
fan.sys.Extern.make = function(f) {
  var self = new fan.sys.Extern();
  fan.sys.Extern.make$(self,f);
  return self;
  }
fan.sys.Extern.make$ = function(self,f)
{
  if (f === undefined) f = null;
  ;
  (function($this) { var $_u27 = f; if ($_u27 == null) return null; return $_u27.call($this); })(self);
  return;
}
fan.sys.Extern.prototype.m_simple = false;
fan.sys.NumDigits = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.NumDigits.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.NumDigits.prototype.$typeof = function() { return fan.sys.NumDigits.$type; }
fan.sys.NumDigits.make = function(s) {
  var self = new fan.sys.NumDigits();
  fan.sys.NumDigits.make$(self,s);
  return self;
  }
fan.sys.NumDigits.make$ = function(self,s)
{
  self.m_digits = fan.sys.Array.make(fan.sys.Int.plus(fan.sys.Str.size(s),16),"sys::Int32");
  var digitsSize = 0;
  var expPos = -1;
  var decimal = -99;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(s)); i = fan.sys.Int.increment(i))
  {
    var c = fan.sys.Str.get(s,i);
    if (fan.sys.ObjUtil.equals(c,45))
    {
      self.m_negative = true;
      continue;
    }
    ;
    if (fan.sys.ObjUtil.equals(c,46))
    {
      decimal = (function($this) { if ($this.m_negative) return fan.sys.Int.minus(i,1); return i; })(self);
      continue;
    }
    ;
    if ((fan.sys.ObjUtil.equals(c,101) || fan.sys.ObjUtil.equals(c,69)))
    {
      expPos = i;
      break;
    }
    ;
    self.m_digits.set(digitsSize,fan.sys.ObjUtil.coerce(c,fan.sys.Int.$type));
    digitsSize = fan.sys.Int.increment(digitsSize);
  }
  ;
  self.m_size = digitsSize;
  if (fan.sys.ObjUtil.compareLT(decimal,0))
  {
    decimal = self.m_size;
  }
  else
  {
    if ((fan.sys.ObjUtil.compareGT(self.m_size,decimal) && fan.sys.ObjUtil.equals(self.m_digits.get(fan.sys.Int.minus(self.m_size,1)),48)))
    {
      (function($this) { var $_u29 = $this.m_size; $this.m_size = fan.sys.Int.decrement($this.m_size); return $_u29; })(self);
    }
    ;
  }
  ;
  if (fan.sys.ObjUtil.compareGE(expPos,0))
  {
    var exp = fan.sys.Str.toInt(fan.sys.Str.getRange(s,fan.sys.Range.make(fan.sys.Int.plus(expPos,1),-1)));
    decimal = fan.sys.Int.plus(decimal,exp);
    if (fan.sys.ObjUtil.compareGE(decimal,self.m_size))
    {
      while (fan.sys.ObjUtil.compareLE(self.m_size,decimal))
      {
        self.m_digits.set((function($this) { var $_u30 = $this.m_size; $this.m_size = fan.sys.Int.increment($this.m_size); return $_u30; })(self),fan.sys.ObjUtil.coerce(48,fan.sys.Int.$type));
      }
      ;
    }
    else
    {
      if (fan.sys.ObjUtil.compareLT(decimal,0))
      {
        fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(self.m_digits,fan.sys.Obj.$type),0,fan.sys.ObjUtil.coerce(self.m_digits,fan.sys.Obj.$type),fan.sys.Int.negate(decimal),self.m_size);
        for (var i = 0; fan.sys.ObjUtil.compareLT(i,fan.sys.Int.negate(decimal)); i = fan.sys.Int.increment(i))
        {
          self.m_digits.set(i,fan.sys.ObjUtil.coerce(48,fan.sys.Int.$type));
        }
        ;
        self.m_size = fan.sys.Int.plus(self.m_size,fan.sys.Int.negate(decimal));
        decimal = 0;
      }
      ;
    }
    ;
  }
  ;
  self.m_decimal = decimal;
  return;
}
fan.sys.NumDigits.makeInt = function(d) {
  var self = new fan.sys.NumDigits();
  fan.sys.NumDigits.makeInt$(self,d);
  return self;
  }
fan.sys.NumDigits.makeInt$ = function(self,d)
{
  if (fan.sys.ObjUtil.compareLT(d,0))
  {
    self.m_negative = true;
    d = fan.sys.Int.negate(d);
  }
  ;
  var s = fan.sys.Int.toStr(d);
  if (fan.sys.ObjUtil.equals(fan.sys.Str.get(s,0),45))
  {
    s = "9223372036854775808";
  }
  ;
  self.m_digits = fan.sys.Str.chars(s);
  self.m_size = self.m_digits.size();
  self.m_decimal = self.m_digits.size();
  return;
}
fan.sys.NumDigits.prototype.intSize = function()
{
  return this.m_decimal;
}
fan.sys.NumDigits.prototype.fracSize = function()
{
  return fan.sys.Int.minus(this.m_size,this.m_decimal);
}
fan.sys.NumDigits.prototype.zeroInt = function()
{
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_decimal); i = fan.sys.Int.increment(i))
  {
    if (fan.sys.ObjUtil.compareNE(this.m_digits.get(i),48))
    {
      return false;
    }
    ;
  }
  ;
  return true;
}
fan.sys.NumDigits.prototype.zeroFrac = function(maxFrac)
{
  var until = fan.sys.Int.plus(this.m_decimal,maxFrac);
  if (fan.sys.ObjUtil.compareGE(until,this.m_digits.size()))
  {
    return true;
  }
  ;
  for (var i = this.m_decimal; fan.sys.ObjUtil.compareLT(i,until); i = fan.sys.Int.increment(i))
  {
    if (fan.sys.ObjUtil.compareNE(this.m_digits.get(i),48))
    {
      return false;
    }
    ;
  }
  ;
  return true;
}
fan.sys.NumDigits.prototype.round = function(maxFrac)
{
  if (fan.sys.ObjUtil.compareLE(this.fracSize(),maxFrac))
  {
    return;
  }
  ;
  if (fan.sys.ObjUtil.compareGE(this.m_digits.get(fan.sys.Int.plus(this.m_decimal,maxFrac)),53))
  {
    var i = fan.sys.Int.minus(fan.sys.Int.plus(this.m_decimal,maxFrac),1);
    while (true)
    {
      if (fan.sys.ObjUtil.compareLT(this.m_digits.get(i),57))
      {
        (function($this) { var $_u33 = $this.m_digits; var $_u34 = i; var $_u31 = fan.sys.Int.increment(fan.sys.ObjUtil.coerce($this.m_digits.get(i),fan.sys.Int.$type)); var $_u32 = $_u33.get($_u34); $_u33.set($_u34,$_u31); return $_u32; })(this);
        break;
      }
      ;
      this.m_digits.set((function($this) { var $_u35 = i; i = fan.sys.Int.decrement(i); return $_u35; })(this),fan.sys.ObjUtil.coerce(48,fan.sys.Int.$type));
      if (fan.sys.ObjUtil.compareLT(i,0))
      {
        fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(this.m_digits,fan.sys.Obj.$type),0,fan.sys.ObjUtil.coerce(this.m_digits,fan.sys.Obj.$type),1,this.m_size);
        this.m_digits.set(0,fan.sys.ObjUtil.coerce(49,fan.sys.Int.$type));
        (function($this) { var $_u36 = $this.m_size; $this.m_size = fan.sys.Int.increment($this.m_size); return $_u36; })(this);
        (function($this) { var $_u37 = $this.m_decimal; $this.m_decimal = fan.sys.Int.increment($this.m_decimal); return $_u37; })(this);
        break;
      }
      ;
    }
    ;
  }
  ;
  this.m_size = fan.sys.Int.plus(this.m_decimal,maxFrac);
  while ((fan.sys.ObjUtil.equals(this.m_digits.get(fan.sys.Int.minus(this.m_size,1)),48) && fan.sys.ObjUtil.compareGT(this.m_size,this.m_decimal)))
  {
    (function($this) { var $_u38 = $this.m_size; $this.m_size = fan.sys.Int.decrement($this.m_size); return $_u38; })(this);
  }
  ;
  return;
}
fan.sys.NumDigits.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.fromChars(this.m_digits,0,this.m_size)," neg="),fan.sys.ObjUtil.coerce(this.m_negative,fan.sys.Obj.$type.toNullable()))," decimal="),fan.sys.ObjUtil.coerce(this.m_decimal,fan.sys.Obj.$type.toNullable()));
}
fan.sys.NumDigits.prototype.digits = function()
{
  return this.m_digits;
}
fan.sys.NumDigits.prototype.digits$ = function(it)
{
  this.m_digits = it;
  return;
}
fan.sys.NumDigits.prototype.decimal = function()
{
  return this.m_decimal;
}
fan.sys.NumDigits.prototype.decimal$ = function(it)
{
  this.m_decimal = it;
  return;
}
fan.sys.NumDigits.prototype.size = function()
{
  return this.m_size;
}
fan.sys.NumDigits.prototype.size$ = function(it)
{
  this.m_size = it;
  return;
}
fan.sys.NumDigits.prototype.negative = function()
{
  return this.m_negative;
}
fan.sys.NumDigits.prototype.negative$ = function(it)
{
  this.m_negative = it;
  return;
}
fan.sys.NumDigits.prototype.m_digits = null;
fan.sys.NumDigits.prototype.m_decimal = 0;
fan.sys.NumDigits.prototype.m_size = 0;
fan.sys.NumDigits.prototype.m_negative = false;
fan.sys.NumPattern = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.NumPattern.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.NumPattern.prototype.$typeof = function() { return fan.sys.NumPattern.$type; }
fan.sys.NumPattern.parse = function(s)
{
  return fan.sys.NumPattern.make(s);
}
fan.sys.NumPattern.make = function(s) {
  var self = new fan.sys.NumPattern();
  fan.sys.NumPattern.make$(self,s);
  return self;
  }
fan.sys.NumPattern.make$ = function(self,s)
{
  var group = ((fan.sys.Int.static$init ? fan.sys.Int.static$init() : null),fan.sys.Int.m_maxVal);
  var optInt = true;
  var comma = false;
  var decimal = false;
  var minInt = 0;
  var minFrac = 0;
  var maxFrac = 0;
  var last = 0;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(s)); i = fan.sys.Int.increment(i))
  {
    var c = fan.sys.Str.get(s,i);
    var $_u39 = c;
    if (fan.sys.ObjUtil.equals($_u39,44))
    {
      comma = true;
      group = 0;
    }
    else if (fan.sys.ObjUtil.equals($_u39,48))
    {
      if (decimal)
      {
        (function($this) { var $_u40 = minFrac; minFrac = fan.sys.Int.increment(minFrac); return $_u40; })(self);
        (function($this) { var $_u41 = maxFrac; maxFrac = fan.sys.Int.increment(maxFrac); return $_u41; })(self);
      }
      else
      {
        (function($this) { var $_u42 = minInt; minInt = fan.sys.Int.increment(minInt); return $_u42; })(self);
        if (comma)
        {
          (function($this) { var $_u43 = group; group = fan.sys.Int.increment(group); return $_u43; })(self);
        }
        ;
      }
      ;
    }
    else if (fan.sys.ObjUtil.equals($_u39,35))
    {
      if (decimal)
      {
        (function($this) { var $_u44 = maxFrac; maxFrac = fan.sys.Int.increment(maxFrac); return $_u44; })(self);
      }
      else
      {
        if (comma)
        {
          (function($this) { var $_u45 = group; group = fan.sys.Int.increment(group); return $_u45; })(self);
        }
        ;
      }
      ;
    }
    else if (fan.sys.ObjUtil.equals($_u39,46))
    {
      decimal = true;
      optInt = fan.sys.ObjUtil.equals(last,35);
    }
    else
    {
      throw fan.sys.ArgErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Invalid pattern char '",fan.sys.ObjUtil.coerce(c,fan.sys.Obj.$type.toNullable())),"': "),s));
    }
    ;
    last = c;
  }
  ;
  if (!decimal)
  {
    optInt = fan.sys.ObjUtil.equals(last,35);
  }
  ;
  self.m_pattern = s;
  self.m_group = group;
  self.m_optInt = optInt;
  self.m_minInt = minInt;
  self.m_minFrac = minFrac;
  self.m_maxFrac = maxFrac;
  return;
}
fan.sys.NumPattern.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(this.m_pattern," group="),fan.sys.ObjUtil.coerce(this.m_group,fan.sys.Obj.$type.toNullable()))," minInt="),fan.sys.ObjUtil.coerce(this.m_minInt,fan.sys.Obj.$type.toNullable()))," maxFrac="),fan.sys.ObjUtil.coerce(this.m_maxFrac,fan.sys.Obj.$type.toNullable()))," minFrac="),fan.sys.ObjUtil.coerce(this.m_minFrac,fan.sys.Obj.$type.toNullable()))," optInt="),fan.sys.ObjUtil.coerce(this.m_optInt,fan.sys.Obj.$type.toNullable()));
}
fan.sys.NumPattern.prototype.m_pattern = null;
fan.sys.NumPattern.prototype.m_group = 0;
fan.sys.NumPattern.prototype.m_optInt = false;
fan.sys.NumPattern.prototype.m_minInt = 0;
fan.sys.NumPattern.prototype.m_minFrac = 0;
fan.sys.NumPattern.prototype.m_maxFrac = 0;
fan.sys.NumFormat = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.NumFormat.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.sys.NumFormat.prototype.$typeof = function() { return fan.sys.NumFormat.$type; }
fan.sys.NumFormat.format = function(p,d)
{
  var s = fan.sys.StrBuf.make();
  if (d.m_negative)
  {
    s.addChar(45);
  }
  ;
  d.round(p.m_maxFrac);
  var start = 0;
  if ((p.m_optInt && d.zeroInt()))
  {
    start = d.m_decimal;
  }
  ;
  if ((fan.sys.ObjUtil.equals(p.m_minFrac,0) && d.zeroFrac(p.m_maxFrac)))
  {
    d.m_size = d.m_decimal;
  }
  ;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,fan.sys.Int.minus(p.m_minInt,d.m_decimal)); i = fan.sys.Int.increment(i))
  {
    s.addChar(48);
  }
  ;
  var decimal = false;
  for (var i = start; fan.sys.ObjUtil.compareLT(i,d.m_size); i = fan.sys.Int.increment(i))
  {
    if (fan.sys.ObjUtil.compareLT(i,d.m_decimal))
    {
      if ((fan.sys.ObjUtil.equals(fan.sys.Int.mod(fan.sys.Int.minus(d.m_decimal,i),p.m_group),0) && fan.sys.ObjUtil.compareGT(i,0)))
      {
        s.addChar(44);
      }
      ;
    }
    else
    {
      if ((fan.sys.ObjUtil.equals(i,d.m_decimal) && fan.sys.ObjUtil.compareGT(p.m_maxFrac,0)))
      {
        s.addChar(46);
        decimal = true;
      }
      ;
      if (fan.sys.ObjUtil.compareGE(fan.sys.Int.minus(i,d.m_decimal),p.m_maxFrac))
      {
        break;
      }
      ;
    }
    ;
    s.addChar(fan.sys.ObjUtil.coerce(d.m_digits.get(i),fan.sys.Int.$type));
  }
  ;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,fan.sys.Int.minus(p.m_minFrac,d.fracSize())); i = fan.sys.Int.increment(i))
  {
    if (!decimal)
    {
      s.addChar(46);
      decimal = true;
    }
    ;
    s.addChar(48);
  }
  ;
  if (fan.sys.ObjUtil.equals(s.size(),0))
  {
    return "0";
  }
  ;
  return s.toStr();
}
fan.sys.NumFormat.formatDigits = function(str,pattern)
{
  var p = fan.sys.NumPattern.parse(pattern);
  var d = fan.sys.NumDigits.make(str);
  return fan.sys.NumFormat.format(p,d);
}
fan.sys.NumFormat.formatInt = function(self,pattern)
{
  if ((pattern != null && fan.sys.ObjUtil.equals(fan.sys.Str.size(pattern),1) && fan.sys.ObjUtil.equals(fan.sys.Str.get(pattern,0),66)))
  {
    return fan.sys.NumFormat.toLocaleBytes(self);
  }
  ;
  if (pattern == null)
  {
    pattern = "#,###";
  }
  ;
  var p = fan.sys.NumPattern.parse(fan.sys.ObjUtil.coerce(pattern,fan.sys.Str.$type));
  var d = fan.sys.NumDigits.makeInt(self);
  return fan.sys.NumFormat.format(p,d);
}
fan.sys.NumFormat.toLocaleBytes = function(b)
{
  if (fan.sys.ObjUtil.compareLT(b,((fan.sys.NumFormat.static$init ? fan.sys.NumFormat.static$init() : null),fan.sys.NumFormat.m_KB)))
  {
    return fan.sys.Str.plus(fan.sys.Int.toStr(b),"B");
  }
  ;
  if (fan.sys.ObjUtil.compareLT(b,fan.sys.Int.mult(10,((fan.sys.NumFormat.static$init ? fan.sys.NumFormat.static$init() : null),fan.sys.NumFormat.m_KB))))
  {
    return fan.sys.Str.plus(fan.sys.NumFormat.formatDigits(fan.sys.Float.toStr(fan.sys.Float.divInt(fan.sys.Int.toFloat(b),((fan.sys.NumFormat.static$init ? fan.sys.NumFormat.static$init() : null),fan.sys.NumFormat.m_KB))),"#.#"),"KB");
  }
  ;
  if (fan.sys.ObjUtil.compareLT(b,((fan.sys.NumFormat.static$init ? fan.sys.NumFormat.static$init() : null),fan.sys.NumFormat.m_MB)))
  {
    return fan.sys.Str.plus(fan.sys.Int.toStr(fan.sys.Float.toInt(fan.sys.Float.plus(fan.sys.Float.divInt(fan.sys.Int.toFloat(b),((fan.sys.NumFormat.static$init ? fan.sys.NumFormat.static$init() : null),fan.sys.NumFormat.m_KB)),fan.sys.Float.make(0.5)))),"KB");
  }
  ;
  if (fan.sys.ObjUtil.compareLT(b,fan.sys.Int.mult(10,((fan.sys.NumFormat.static$init ? fan.sys.NumFormat.static$init() : null),fan.sys.NumFormat.m_MB))))
  {
    return fan.sys.Str.plus(fan.sys.NumFormat.formatDigits(fan.sys.Float.toStr(fan.sys.Float.divInt(fan.sys.Int.toFloat(b),((fan.sys.NumFormat.static$init ? fan.sys.NumFormat.static$init() : null),fan.sys.NumFormat.m_MB))),"#.#"),"MB");
  }
  ;
  if (fan.sys.ObjUtil.compareLT(b,((fan.sys.NumFormat.static$init ? fan.sys.NumFormat.static$init() : null),fan.sys.NumFormat.m_GB)))
  {
    return fan.sys.Str.plus(fan.sys.Int.toStr(fan.sys.Float.toInt(fan.sys.Float.plus(fan.sys.Float.divInt(fan.sys.Int.toFloat(b),((fan.sys.NumFormat.static$init ? fan.sys.NumFormat.static$init() : null),fan.sys.NumFormat.m_MB)),fan.sys.Float.make(0.5)))),"MB");
  }
  ;
  if (fan.sys.ObjUtil.compareLT(b,fan.sys.Int.mult(10,((fan.sys.NumFormat.static$init ? fan.sys.NumFormat.static$init() : null),fan.sys.NumFormat.m_GB))))
  {
    return fan.sys.Str.plus(fan.sys.NumFormat.formatDigits(fan.sys.Float.toStr(fan.sys.Float.divInt(fan.sys.Int.toFloat(b),((fan.sys.NumFormat.static$init ? fan.sys.NumFormat.static$init() : null),fan.sys.NumFormat.m_GB))),"#.#"),"GB");
  }
  ;
  return fan.sys.Str.plus(fan.sys.Int.toStr(fan.sys.Float.toInt(fan.sys.Float.plus(fan.sys.Float.divInt(fan.sys.Int.toFloat(b),((fan.sys.NumFormat.static$init ? fan.sys.NumFormat.static$init() : null),fan.sys.NumFormat.m_GB)),fan.sys.Float.make(0.5)))),"GB");
}
fan.sys.NumFormat.make = function() {
  var self = new fan.sys.NumFormat();
  fan.sys.NumFormat.make$(self);
  return self;
  }
fan.sys.NumFormat.make$ = function(self)
{
  return;
}
fan.sys.NumFormat.static$init = function()
{
  if (fan.sys.NumFormat.static$inited) return;
  fan.sys.NumFormat.static$inited = true;
  fan.sys.NumFormat.m_KB = 1024;
  fan.sys.NumFormat.m_MB = 1048576;
  fan.sys.NumFormat.m_GB = 1073741824;
  return;
}
fan.sys.NumFormat.m_KB = 0;
fan.sys.NumFormat.m_MB = 0;
fan.sys.NumFormat.m_GB = 0;
fan.sys.Enum = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.Enum.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.sys.EnumPeer(this);
  var $this = this;
}
fan.sys.Enum.prototype.$typeof = function() { return fan.sys.Enum.$type; }
fan.sys.Enum.make = function(ordinal,$name) {
  var self = new fan.sys.Enum();
  fan.sys.Enum.make$(self,ordinal,$name);
  return self;
  }
fan.sys.Enum.make$ = function(self,ordinal,$name)
{
  self.m__name = $name;
  self.m__ordinal = ordinal;
  return;
}
fan.sys.Enum.doFromStr = function(type,$name,checked)
{
  return fan.sys.EnumPeer.doFromStr(type,$name,checked);
}
fan.sys.Enum.prototype.equals = function(obj)
{
  return this === obj;
}
fan.sys.Enum.prototype.compare = function(obj)
{
  return fan.sys.ObjUtil.compare(this.ordinal(),fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(obj,fan.sys.Enum.$type).ordinal(),fan.sys.Obj.$type));
}
fan.sys.Enum.prototype.toStr = function()
{
  return this.$name();
}
fan.sys.Enum.prototype.$name = function()
{
  return this.m__name;
}
fan.sys.Enum.prototype.ordinal = function()
{
  return this.m__ordinal;
}
fan.sys.Enum.prototype.m__name = null;
fan.sys.Enum.prototype.m__ordinal = 0;
fan.sys.EnumPeer = function(){}
fan.sys.EnumPeer.doFromStr = function(type, name, checked)
{
  // the compiler marks the value fields with the Enum flag
  var t = fan.std.Type.find(type)
  var slot = t.slot(name, false);
  if (slot != null && (slot.m_flags & fan.sys.FConst.Enum) != 0)
  {
    try
    {
      return slot.get(null);
    }
    catch (err) {}
  }
  if (!checked) return null;
  throw fan.sys.ParseErr.makeStr(t.qname(), name);
}
fan.sys.Bool.m_defVal = false;
fan.sys.Int.m_maxVal = Math.pow(2, 53)
fan.sys.Int.m_minVal = -Math.pow(2, 53)
fan.sys.Int.m_defVal = 0;
fan.sys.Int.Chunk  = 4096;
fan.sys.Float.m_posInf = fan.sys.Float.make(Number.POSITIVE_INFINITY);
fan.sys.Float.m_negInf = fan.sys.Float.make(Number.NEGATIVE_INFINITY);
fan.sys.Float.m_nan    = fan.sys.Float.make(Number.NaN);
fan.sys.Float.m_e      = fan.sys.Float.make(Math.E);
fan.sys.Float.m_pi     = fan.sys.Float.make(Math.PI);
fan.sys.Float.m_defVal = fan.sys.Float.make(0);
fan.sys.Str.m_defVal = "";
fan.sys.initReflect$ = function() {
  fan.sys.$pod = fan.std.Pod.$add('sys');
  with (fan.sys.$pod)
  {
    fan.sys.Obj.$type = $at('Obj',null,[],{'sys::Extern':""},2105857);
    fan.sys.Num.$type = $at('Num','sys::Obj',[],{},8707);
    fan.sys.Int.$type = $at('Int','sys::Num',[],{'sys::Serializable':"sys::Serializable{simple=true;}",'sys::Extern':""},533026);
    fan.sys.Void.$type = $at('Void','sys::Obj',[],{},8738);
    fan.sys.StrBuf.$type = $at('StrBuf','sys::Obj',[],{},8736);
    fan.sys.Func.$type = $at('Func','sys::Obj',[],{'sys::Extern':""},2368000);
    fan.sys.BindFunc.$type = $at('BindFunc','sys::Func',[],{},2359424);
    fan.sys.Err.$type = $at('Err','sys::Obj',[],{},270850);
    fan.sys.Str.$type = $at('Str','sys::Obj',[],{},8738);
    fan.sys.Bool.$type = $at('Bool','sys::Obj',[],{'sys::Serializable':"sys::Serializable{simple=true;}",'sys::Extern':""},533026);
    fan.sys.Ptr.$type = $at('Ptr','sys::Obj',[],{'sys::NoDoc':"",'sys::Extern':""},533026);
    fan.sys.Array.$type = $at('Array','sys::Obj',[],{'sys::Extern':""},270848);
    fan.sys.NativeC.$type = $at('NativeC','sys::Obj',[],{'sys::NoDoc':""},8192);
    fan.sys.Libc.$type = $at('Libc','sys::Obj',[],{'sys::NoDoc':""},8192);
    fan.sys.Float.$type = $at('Float','sys::Num',[],{'sys::Serializable':"sys::Serializable{simple=true;}",'sys::Extern':""},533026);
    fan.sys.Facet.$type = $am('Facet','sys::Obj',[],{},8451);
    fan.sys.ArgErr.$type = $at('ArgErr','sys::Err',[],{},8194);
    fan.sys.CancelledErr.$type = $at('CancelledErr','sys::Err',[],{},8194);
    fan.sys.CastErr.$type = $at('CastErr','sys::Err',[],{},8194);
    fan.sys.ConstErr.$type = $at('ConstErr','sys::Err',[],{},8194);
    fan.sys.FieldNotSetErr.$type = $at('FieldNotSetErr','sys::Err',[],{},8194);
    fan.sys.IndexErr.$type = $at('IndexErr','sys::Err',[],{},8194);
    fan.sys.InterruptedErr.$type = $at('InterruptedErr','sys::Err',[],{},8194);
    fan.sys.IOErr.$type = $at('IOErr','sys::Err',[],{},270338);
    fan.sys.NameErr.$type = $at('NameErr','sys::Err',[],{},8194);
    fan.sys.NotImmutableErr.$type = $at('NotImmutableErr','sys::Err',[],{},8194);
    fan.sys.NullErr.$type = $at('NullErr','sys::Err',[],{},8194);
    fan.sys.ParseErr.$type = $at('ParseErr','sys::Err',[],{},270338);
    fan.sys.ReadonlyErr.$type = $at('ReadonlyErr','sys::Err',[],{},8194);
    fan.sys.UnknownFacetErr.$type = $at('UnknownFacetErr','sys::Err',[],{},8194);
    fan.sys.UnknownKeyErr.$type = $at('UnknownKeyErr','sys::Err',[],{},8194);
    fan.sys.UnknownPodErr.$type = $at('UnknownPodErr','sys::Err',[],{},8194);
    fan.sys.UnknownServiceErr.$type = $at('UnknownServiceErr','sys::Err',[],{},8194);
    fan.sys.UnknownSlotErr.$type = $at('UnknownSlotErr','sys::Err',[],{},8194);
    fan.sys.UnknownTypeErr.$type = $at('UnknownTypeErr','sys::Err',[],{},8194);
    fan.sys.UnresolvedErr.$type = $at('UnresolvedErr','sys::Err',[],{},8194);
    fan.sys.UnsupportedErr.$type = $at('UnsupportedErr','sys::Err',[],{},8194);
    fan.sys.TimeoutErr.$type = $at('TimeoutErr','sys::Err',[],{},8194);
    fan.sys.AssertErr.$type = $at('AssertErr','sys::Err',[],{},8194);
    fan.sys.List.$type = $at('List','sys::Obj',[],{'sys::Serializable':""},2105345);
    fan.sys.ListView.$type = $at('ListView','sys::List',[],{},2359424);
    fan.sys.This.$type = $at('This','sys::Obj',[],{},8226);
    fan.sys.Range.$type = $at('Range','sys::Obj',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},532514);
    fan.sys.ArrayList.$type = $at('ArrayList','sys::List',[],{'sys::NoDoc':""},2367488);
    fan.sys.Serializable.$type = $at('Serializable','sys::Obj',['sys::Facet'],{'sys::FacetMeta':"sys::FacetMeta{inherited=true;}",'sys::Serializable':""},8242);
    fan.sys.Transient.$type = $at('Transient','sys::Obj',['sys::Facet'],{},8242);
    fan.sys.Js.$type = $at('Js','sys::Obj',['sys::Facet'],{'sys::Deprecated':"sys::Deprecated{msg=\"use NoJs\";}"},8242);
    fan.sys.NoJs.$type = $at('NoJs','sys::Obj',['sys::Facet'],{},8242);
    fan.sys.NoDoc.$type = $at('NoDoc','sys::Obj',['sys::Facet'],{},8242);
    fan.sys.Deprecated.$type = $at('Deprecated','sys::Obj',['sys::Facet'],{'sys::Serializable':""},8242);
    fan.sys.Operator.$type = $at('Operator','sys::Obj',['sys::Facet'],{},8242);
    fan.sys.FacetMeta.$type = $at('FacetMeta','sys::Obj',['sys::Facet'],{'sys::Serializable':""},8242);
    fan.sys.NoPeer.$type = $at('NoPeer','sys::Obj',['sys::Facet'],{},8242);
    fan.sys.Extern.$type = $at('Extern','sys::Obj',['sys::Facet'],{'sys::Serializable':""},8242);
    fan.sys.NumDigits.$type = $at('NumDigits','sys::Obj',[],{},262272);
    fan.sys.NumPattern.$type = $at('NumPattern','sys::Obj',[],{},262274);
    fan.sys.NumFormat.$type = $at('NumFormat','sys::Obj',[],{},128);
    fan.sys.Enum.$type = $at('Enum','sys::Obj',[],{},8195);
    fan.sys.Obj.$type.$am('make',4100,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',270336,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('compare',270336,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj',false)], fan.std.Param.$type),{}).$am('hash',270336,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',270336,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('trap',270336,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('args','sys::List<sys::Obj?>?',true)], fan.std.Param.$type),{}).$am('with',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>',false)], fan.std.Param.$type),{}).$am('isImmutable',270336,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toImmutable',270336,'sys::Obj',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('finalize',266240,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('echo',40962,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Obj?',true)], fan.std.Param.$type),{}).$am('assert',40962,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('condition','sys::Bool',false),new fan.std.Param('msg','sys::Str',true)], fan.std.Param.$type),{});
    fan.sys.Num.$type.$am('make',132,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toInt',270337,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toFloat',270337,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.Int.$type.$af('defVal',106498,'sys::Int',{}).$af('maxVal',106498,'sys::Int',{}).$af('minVal',106498,'sys::Int',{}).$am('fromStr',40966,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('radix','sys::Int',true),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('random',40962,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Range?',true)], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('compare',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('negate',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Operator':""}).$am('increment',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Operator':""}).$am('decrement',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Operator':""}).$am('mult',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('multFloat',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('div',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('divFloat',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('mod',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('modFloat',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('plus',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('plusFloat',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('minus',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('minusFloat',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('not',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('and',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('or',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('xor',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('shiftl',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('shiftr',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('shifta',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('abs',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('min',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Int',false)], fan.std.Param.$type),{}).$am('max',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Int',false)], fan.std.Param.$type),{}).$am('pow',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('pow','sys::Int',false)], fan.std.Param.$type),{}).$am('isEven',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isOdd',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isSpace',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isAlpha',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isAlphaNum',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isUpper',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isLower',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('upper',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('lower',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isDigit',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('radix','sys::Int',true)], fan.std.Param.$type),{}).$am('toDigit',8192,'sys::Int?',fan.sys.List.makeFromJs([new fan.std.Param('radix','sys::Int',true)], fan.std.Param.$type),{}).$am('fromDigit',8192,'sys::Int?',fan.sys.List.makeFromJs([new fan.std.Param('radix','sys::Int',true)], fan.std.Param.$type),{}).$am('equalsIgnoreCase',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('ch','sys::Int',false)], fan.std.Param.$type),{}).$am('toLocale',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('pattern','sys::Str?',true)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toHex',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('width','sys::Int',true)], fan.std.Param.$type),{}).$am('toRadix',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('radix','sys::Int',false),new fan.std.Param('width','sys::Int',true)], fan.std.Param.$type),{}).$am('toChar',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toCode',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('base','sys::Int',true)], fan.std.Param.$type),{}).$am('toInt',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toFloat',271360,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('times',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::Int>',false)], fan.std.Param.$type),{});
    fan.sys.Void.$type;
    fan.sys.StrBuf.$type.$af('capacity',74240,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('capacity','sys::Int',true)], fan.std.Param.$type),{}).$am('isEmpty',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('size',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('get',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('getRange',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('range','sys::Range',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('set',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('ch','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('add',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Obj?',false)], fan.std.Param.$type),{}).$am('addChar',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('ch','sys::Int',false)], fan.std.Param.$type),{}).$am('addStr',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('join',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Obj?',false),new fan.std.Param('sep','sys::Str',true)], fan.std.Param.$type),{}).$am('insert',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('x','sys::Obj?',false)], fan.std.Param.$type),{}).$am('remove',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{}).$am('removeRange',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Range',false)], fan.std.Param.$type),{}).$am('replaceRange',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Range',false),new fan.std.Param('str','sys::Str',false)], fan.std.Param.$type),{}).$am('clear',8192,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('finalize',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.Func.$type.$am('make',132,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('callList',270336,'sys::Func^R',fan.sys.List.makeFromJs([new fan.std.Param('args','sys::List<sys::Obj?>?',false)], fan.std.Param.$type),{}).$am('callOn',270336,'sys::Func^R',fan.sys.List.makeFromJs([new fan.std.Param('target','sys::Obj?',false),new fan.std.Param('args','sys::List<sys::Obj?>?',false)], fan.std.Param.$type),{}).$am('call',270336,'sys::Func^R',fan.sys.List.makeFromJs([new fan.std.Param('a','sys::Func^A?',true),new fan.std.Param('b','sys::Func^B?',true),new fan.std.Param('c','sys::Func^C?',true),new fan.std.Param('d','sys::Func^D?',true),new fan.std.Param('e','sys::Func^E?',true),new fan.std.Param('f','sys::Func^F?',true),new fan.std.Param('g','sys::Func^G?',true),new fan.std.Param('h','sys::Func^H?',true)], fan.std.Param.$type),{}).$am('bind',8192,'sys::Func<>',fan.sys.List.makeFromJs([new fan.std.Param('args','sys::List<sys::Obj?>',false)], fan.std.Param.$type),{});
    fan.sys.BindFunc.$type.$af('orig',73730,'sys::Func<>',{}).$af('bound',73730,'sys::List<sys::Obj?>',{}).$af('_isImmutable',67584,'sys::Bool?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('orig','sys::Func<>',false),new fan.std.Param('bound','sys::List<sys::Obj?>',false)], fan.std.Param.$type),{}).$am('isImmutable',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('call',271872,'sys::BindFunc^R',fan.sys.List.makeFromJs([new fan.std.Param('a','sys::BindFunc^A?',true),new fan.std.Param('b','sys::BindFunc^B?',true),new fan.std.Param('c','sys::BindFunc^C?',true),new fan.std.Param('d','sys::BindFunc^D?',true),new fan.std.Param('e','sys::BindFunc^E?',true),new fan.std.Param('f','sys::BindFunc^F?',true),new fan.std.Param('g','sys::BindFunc^G?',true),new fan.std.Param('h','sys::BindFunc^H?',true)], fan.std.Param.$type),{}).$am('callList',271360,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('args','sys::List<sys::Obj?>?',false)], fan.std.Param.$type),{}).$am('callOn',271360,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false),new fan.std.Param('args','sys::List<sys::Obj?>?',false)], fan.std.Param.$type),{});
    fan.sys.Err.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{}).$am('msg',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('cause',8192,'sys::Err?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('trace',8192,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('traceToStr',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.Str.$type.$af('defVal',106498,'sys::Str',{}).$am('fromCStr',40962,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('utf8','sys::Ptr<sys::Int8>',false),new fan.std.Param('byteLen','sys::Int',true)], fan.std.Param.$type),{}).$am('fromChars',40962,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('charPtr','sys::Array<sys::Int32>',false),new fan.std.Param('offset','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('getByte',8192,'sys::Int8',fan.sys.List.makeFromJs([new fan.std.Param('i','sys::Int',false)], fan.std.Param.$type),{}).$am('byteLen',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('equalsIgnoreCase',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('compare',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{}).$am('compareIgnoreCase',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isEmpty',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('size',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('intern',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('startsWith',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('endsWith',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('find',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('offset','sys::Int',true)], fan.std.Param.$type),{}).$am('index',8192,'sys::Int?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('offset','sys::Int',true)], fan.std.Param.$type),{'sys::NoDoc':""}).$am('findr',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('offset','sys::Int',true)], fan.std.Param.$type),{}).$am('indexr',8192,'sys::Int?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('offset','sys::Int',true)], fan.std.Param.$type),{'sys::NoDoc':""}).$am('indexIgnoreCase',8192,'sys::Int?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('offset','sys::Int',true)], fan.std.Param.$type),{}).$am('indexrIgnoreCase',8192,'sys::Int?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('offset','sys::Int',true)], fan.std.Param.$type),{}).$am('contains',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('containsChar',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('ch','sys::Int',false)], fan.std.Param.$type),{}).$am('get',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('toByteIndex',128,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{}).$am('decodeCharAt',128,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('i','sys::Int',false),new fan.std.Param('readSize','sys::Array<sys::Int>?',true)], fan.std.Param.$type),{}).$am('getSafe',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('defV','sys::Int',true)], fan.std.Param.$type),{}).$am('getRange',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('range','sys::Range',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('plus',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('chars',8192,'sys::Array<sys::Int32>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('each',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::Int,sys::Int>',false)], fan.std.Param.$type),{}).$am('eachr',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::Int,sys::Int>',false)], fan.std.Param.$type),{}).$am('any',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Bool,sys::Int,sys::Int>',false)], fan.std.Param.$type),{}).$am('all',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Bool,sys::Int,sys::Int>',false)], fan.std.Param.$type),{}).$am('spaces',40962,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('lower',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('upper',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('trim',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('trimToNull',8192,'sys::Str?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('trimStart',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('trimEnd',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('split',8192,'sys::List<sys::Str>',fan.sys.List.makeFromJs([new fan.std.Param('separator','sys::Int?',true),new fan.std.Param('trimmed','sys::Bool',true)], fan.std.Param.$type),{}).$am('replace',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('from','sys::Str',false),new fan.std.Param('to','sys::Str',false)], fan.std.Param.$type),{}).$am('isAscii',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isSpace',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isUpper',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isLower',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isAlpha',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isAlphaNum',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toBool',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('toInt',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('radix','sys::Int',true),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('toFloat',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('toCode',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('quote','sys::Int',true),new fan.std.Param('escapeUnicode','sys::Bool',true)], fan.std.Param.$type),{}).$am('toUtf8',8192,'sys::Array<sys::Int8>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fromUtf8',40966,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('ba','sys::Array<sys::Int8>',false),new fan.std.Param('offset','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('finalize',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('format',41474,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('format','sys::Str',false),new fan.std.Param('args','sys::List<sys::Obj>',false)], fan.std.Param.$type),{});
    fan.sys.Bool.$type.$af('defVal',106498,'sys::Bool',{}).$am('fromStr',40966,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('not',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('and',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Bool',false)], fan.std.Param.$type),{}).$am('or',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Bool',false)], fan.std.Param.$type),{}).$am('xor',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Bool',false)], fan.std.Param.$type),{}).$am('toCode',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.Ptr.$type.$af('nil',106498,'sys::Ptr<sys::Ptr^T>',{}).$am('stackAlloc',40962,'sys::Ptr<sys::Int8>',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('load',8192,'sys::Ptr^T',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('store',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('v','sys::Ptr^T',false)], fan.std.Param.$type),{}).$am('plus',8192,'sys::Ptr<sys::Ptr^T>',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('set',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('item','sys::Ptr^T',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('get',8192,'sys::Ptr^T',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""});
    fan.sys.Array.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('size',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('get',8192,'sys::Array^T',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('set',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('val','sys::Array^T',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('realloc',40962,'sys::Obj',fan.sys.List.makeFromJs([new fan.std.Param('array','sys::Obj',false),new fan.std.Param('newSize','sys::Int',false)], fan.std.Param.$type),{}).$am('arraycopy',40962,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('src','sys::Obj',false),new fan.std.Param('srcOffset','sys::Int',false),new fan.std.Param('dest','sys::Obj',false),new fan.std.Param('destOffset','sys::Int',false),new fan.std.Param('length','sys::Int',false)], fan.std.Param.$type),{}).$am('fill',40962,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('array','sys::Obj',false),new fan.std.Param('val','sys::Obj?',false),new fan.std.Param('times','sys::Int',false)], fan.std.Param.$type),{}).$am('finalize',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.NativeC.$type.$am('toId',41474,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Obj',false)], fan.std.Param.$type),{}).$am('typeName',41474,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Obj',false)], fan.std.Param.$type),{}).$am('print',41474,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('utf8','sys::Array<sys::Int8>',false)], fan.std.Param.$type),{}).$am('printErr',41474,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('utf8','sys::Array<sys::Int8>',false)], fan.std.Param.$type),{}).$am('stackTrace',41474,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.Libc.$type.$am('strlen',41474,'sys::Int64',fan.sys.List.makeFromJs([new fan.std.Param('cstr','sys::Ptr<sys::Int8>',false)], fan.std.Param.$type),{}).$am('strdup',41474,'sys::Ptr<sys::Int8>',fan.sys.List.makeFromJs([new fan.std.Param('cstr','sys::Ptr<sys::Int8>',false)], fan.std.Param.$type),{}).$am('malloc',41474,'sys::Ptr<sys::Int8>',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int64',false)], fan.std.Param.$type),{}).$am('realloc',41474,'sys::Ptr<sys::Int8>',fan.sys.List.makeFromJs([new fan.std.Param('old','sys::Ptr<sys::Int8>',false),new fan.std.Param('size','sys::Int64',false)], fan.std.Param.$type),{}).$am('free',41474,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Ptr<sys::Int8>',false)], fan.std.Param.$type),{}).$am('memcpy',41474,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('dst','sys::Ptr<sys::Int8>',false),new fan.std.Param('src','sys::Ptr<sys::Int8>',false),new fan.std.Param('len','sys::Int64',false)], fan.std.Param.$type),{}).$am('memmove',41474,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('dst','sys::Ptr<sys::Int8>',false),new fan.std.Param('src','sys::Ptr<sys::Int8>',false),new fan.std.Param('len','sys::Int64',false)], fan.std.Param.$type),{}).$am('puts',41474,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('cstr','sys::Ptr<sys::Int8>',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.Float.$type.$af('defVal',106498,'sys::Float',{}).$af('posInf',106498,'sys::Float',{}).$af('negInf',106498,'sys::Float',{}).$af('nan',106498,'sys::Float',{}).$af('e',106498,'sys::Float',{'sys::NoDoc':""}).$af('pi',106498,'sys::Float',{'sys::NoDoc':""}).$am('makeBits',40962,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('bits','sys::Int',false)], fan.std.Param.$type),{}).$am('makeBits32',40962,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('bits','sys::Int',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('random',40962,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('compare',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{}).$am('isNaN',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isNegZero',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('normNegZero',8192,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('negate',8192,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Operator':""}).$am('increment',8192,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Operator':""}).$am('decrement',8192,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Operator':""}).$am('mult',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('multInt',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('div',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('divInt',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('mod',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('modInt',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('plus',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('plusInt',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('minus',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('minusInt',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('bits',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('bits32',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toCode',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toInt',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toFloat',271360,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toLocale',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('pattern','sys::Str?',true)], fan.std.Param.$type),{});
    fan.sys.ArgErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.CancelledErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.CastErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.ConstErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.FieldNotSetErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.IndexErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.InterruptedErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.IOErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.NameErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.NotImmutableErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.NullErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{}).$am('makeCoerce',40962,'sys::NullErr',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::NoDoc':""});
    fan.sys.ParseErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.ReadonlyErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.UnknownFacetErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.UnknownKeyErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.UnknownPodErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.UnknownServiceErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.UnknownSlotErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.UnknownTypeErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.UnresolvedErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.UnsupportedErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.TimeoutErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.AssertErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.sys.List.$type.$af('defVal',106498,'sys::List<sys::Obj>',{}).$af('size',270337,'sys::Int',{}).$af('capacity',270337,'sys::Int',{}).$am('make',40966,'sys::List<sys::List^V>',fan.sys.List.makeFromJs([new fan.std.Param('capacity','sys::Int',false)], fan.std.Param.$type),{}).$am('makeObj',40962,'sys::List<sys::Obj?>',fan.sys.List.makeFromJs([new fan.std.Param('capacity','sys::Int',true)], fan.std.Param.$type),{'sys::NoDoc':""}).$am('privateMake',4100,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('other','sys::Obj?',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isEmpty',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('sz',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::NoDoc':""}).$am('get',270337,'sys::List^V',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('getSafe',8192,'sys::List^V?',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('defV','sys::List^V?',true)], fan.std.Param.$type),{}).$am('getRange',270337,'sys::List<sys::List^V>',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Range',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('slice',270336,'sys::List<sys::List^V>',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Range',false)], fan.std.Param.$type),{}).$am('contains',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('item','sys::List^V',false)], fan.std.Param.$type),{}).$am('containsSame',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('item','sys::List^V',false)], fan.std.Param.$type),{}).$am('containsAll',270336,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('list','sys::List<sys::List^V>',false)], fan.std.Param.$type),{}).$am('containsAny',270336,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('list','sys::List<sys::List^V>',false)], fan.std.Param.$type),{}).$am('index',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('item','sys::List^V',false),new fan.std.Param('offset','sys::Int',true)], fan.std.Param.$type),{}).$am('indexr',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('item','sys::List^V',false),new fan.std.Param('offset','sys::Int',true)], fan.std.Param.$type),{}).$am('indexSame',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('item','sys::List^V',false),new fan.std.Param('offset','sys::Int',true)], fan.std.Param.$type),{}).$am('first',270336,'sys::List^V?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('last',270336,'sys::List^V?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('dup',270337,'sys::List<sys::List^V>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('set',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('item','sys::List^V',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('add',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('item','sys::List^V',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('addIfNotNull',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('item','sys::List^V?',false)], fan.std.Param.$type),{}).$am('addAll',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('list','sys::List<sys::List^V>',false)], fan.std.Param.$type),{}).$am('insert',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('item','sys::List^V',false)], fan.std.Param.$type),{}).$am('insertAll',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('list','sys::List<sys::List^V>',false)], fan.std.Param.$type),{}).$am('remove',270336,'sys::List^V?',fan.sys.List.makeFromJs([new fan.std.Param('item','sys::List^V',false)], fan.std.Param.$type),{}).$am('removeSame',270336,'sys::List^V?',fan.sys.List.makeFromJs([new fan.std.Param('item','sys::List^V',false)], fan.std.Param.$type),{}).$am('removeAt',270337,'sys::List^V?',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{}).$am('removeRange',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Range',false)], fan.std.Param.$type),{}).$am('removeAll',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('list','sys::List<sys::List^V>',false)], fan.std.Param.$type),{}).$am('clear',270337,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('trim',270336,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fill',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('val','sys::List^V',false),new fan.std.Param('times','sys::Int',false)], fan.std.Param.$type),{}).$am('peek',8192,'sys::List^V?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('pop',270336,'sys::List^V?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('push',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('item','sys::List^V',false)], fan.std.Param.$type),{}).$am('each',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Void,sys::List^V,sys::Int>',false)], fan.std.Param.$type),{}).$am('eachr',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Void,sys::List^V,sys::Int>',false)], fan.std.Param.$type),{}).$am('eachRange',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Range',false),new fan.std.Param('c','sys::Func<sys::Void,sys::List^V,sys::Int>',false)], fan.std.Param.$type),{}).$am('eachWhile',270336,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Obj?,sys::List^V,sys::Int>',false),new fan.std.Param('offset','sys::Int',true)], fan.std.Param.$type),{}).$am('eachrWhile',270336,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Obj?,sys::List^V,sys::Int>',false),new fan.std.Param('offset','sys::Int',true)], fan.std.Param.$type),{}).$am('find',8192,'sys::List^V?',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Bool,sys::List^V,sys::Int>',false)], fan.std.Param.$type),{}).$am('findIndex',270336,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Bool,sys::List^V,sys::Int>',false),new fan.std.Param('offset','sys::Int',true)], fan.std.Param.$type),{}).$am('findrIndex',270336,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Bool,sys::List^V,sys::Int>',false),new fan.std.Param('offset','sys::Int',true)], fan.std.Param.$type),{}).$am('findAll',8192,'sys::List<sys::List^V>',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Bool,sys::List^V,sys::Int>',false)], fan.std.Param.$type),{}).$am('exclude',8192,'sys::List<sys::List^V>',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Bool,sys::List^V,sys::Int>',false)], fan.std.Param.$type),{}).$am('any',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Bool,sys::List^V,sys::Int>',false)], fan.std.Param.$type),{}).$am('all',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Bool,sys::List^V,sys::Int>',false)], fan.std.Param.$type),{}).$am('map',8192,'sys::List<sys::Obj?>',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Obj?,sys::List^V,sys::Int>',false)], fan.std.Param.$type),{}).$am('flatMap',8192,'sys::List<sys::Obj?>',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::List<sys::Obj?>,sys::List^V,sys::Int>',false)], fan.std.Param.$type),{}).$am('reduce',8192,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('init','sys::Obj?',false),new fan.std.Param('c','sys::Func<sys::Obj?,sys::Obj?,sys::List^V,sys::Int>',false)], fan.std.Param.$type),{}).$am('min',8192,'sys::List^V?',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Int,sys::List^V,sys::List^V>?',true)], fan.std.Param.$type),{}).$am('max',8192,'sys::List^V?',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Int,sys::List^V,sys::List^V>?',true)], fan.std.Param.$type),{}).$am('insertSort',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('left','sys::Int',false),new fan.std.Param('right','sys::Int',false),new fan.std.Param('cmopFunc','sys::Func<sys::Int,sys::List^V,sys::List^V>',false)], fan.std.Param.$type),{}).$am('quickSort',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('low','sys::Int',false),new fan.std.Param('high','sys::Int',false),new fan.std.Param('cmopFunc','sys::Func<sys::Int,sys::List^V,sys::List^V>',false)], fan.std.Param.$type),{}).$am('sort',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Int,sys::List^V,sys::List^V>?',true)], fan.std.Param.$type),{}).$am('sortr',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Int,sys::List^V,sys::List^V>?',true)], fan.std.Param.$type),{}).$am('bsearch',2048,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('cmopFunc','sys::Func<sys::Int,sys::List^V,sys::Int>',false)], fan.std.Param.$type),{}).$am('binarySearch',270336,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('key','sys::List^V',false),new fan.std.Param('c','sys::Func<sys::Int,sys::List^V,sys::List^V>?',true)], fan.std.Param.$type),{}).$am('binaryFind',270336,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Int,sys::List^V,sys::Int>',false)], fan.std.Param.$type),{}).$am('reverse',270336,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('swap',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('indexA','sys::Int',false),new fan.std.Param('indexB','sys::Int',false)], fan.std.Param.$type),{}).$am('moveTo',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('item','sys::List^V?',false),new fan.std.Param('toIndex','sys::Int',false)], fan.std.Param.$type),{}).$am('flatten',8192,'sys::List<sys::Obj?>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('random',8192,'sys::List^V?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('shuffle',8192,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('join',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('separator','sys::Str',true),new fan.std.Param('c','sys::Func<sys::Str,sys::List^V,sys::Int>?',true)], fan.std.Param.$type),{}).$am('toCode',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isRO',270337,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isRW',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('ro',270336,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('rw',270336,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isImmutable',271361,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toImmutable',271360,'sys::List<sys::List^V>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.ListView.$type.$af('base',67584,'sys::List<sys::ListView^V>',{}).$af('offset',67586,'sys::Int',{}).$af('size',336896,'sys::Int',{}).$af('capacity',336896,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('base','sys::List<sys::ListView^V>',false),new fan.std.Param('offset','sys::Int',false),new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('get',271360,'sys::ListView^V',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('getRange',271360,'sys::List<sys::ListView^V>',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Range',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('set',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('item','sys::ListView^V',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('add',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('item','sys::ListView^V',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('dup',271360,'sys::List<sys::ListView^V>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('addAll',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('list','sys::List<sys::ListView^V>',false)], fan.std.Param.$type),{}).$am('insert',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('item','sys::ListView^V',false)], fan.std.Param.$type),{}).$am('insertAll',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('list','sys::List<sys::ListView^V>',false)], fan.std.Param.$type),{}).$am('removeAt',271360,'sys::ListView^V?',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{}).$am('removeRange',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Range',false)], fan.std.Param.$type),{}).$am('clear',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isRO',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isImmutable',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.This.$type.$am('make',2052,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.Range.$type.$af('_start',67586,'sys::Int',{}).$af('_end',67586,'sys::Int',{}).$af('_exclusive',67586,'sys::Bool',{}).$am('makeInclusive',40966,'sys::Range',fan.sys.List.makeFromJs([new fan.std.Param('start','sys::Int',false),new fan.std.Param('end','sys::Int',false)], fan.std.Param.$type),{}).$am('makeExclusive',40966,'sys::Range',fan.sys.List.makeFromJs([new fan.std.Param('start','sys::Int',false),new fan.std.Param('end','sys::Int',false)], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('start','sys::Int',false),new fan.std.Param('end','sys::Int',false),new fan.std.Param('exclusive','sys::Bool',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'sys::Range',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('start',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('end',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('lastEnd',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('inclusive',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('exclusive',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isEmpty',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('min',8192,'sys::Int?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('max',8192,'sys::Int?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('first',8192,'sys::Int?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('last',8192,'sys::Int?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('contains',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('i','sys::Int',false)], fan.std.Param.$type),{}).$am('offset',8192,'sys::Range',fan.sys.List.makeFromJs([new fan.std.Param('offset','sys::Int',false)], fan.std.Param.$type),{}).$am('each',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::Int>',false)], fan.std.Param.$type),{}).$am('eachWhile',8192,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Obj?,sys::Int>',false)], fan.std.Param.$type),{}).$am('map',8192,'sys::List<sys::Obj?>',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Obj?,sys::Int>',false)], fan.std.Param.$type),{}).$am('toList',8192,'sys::List<sys::Int>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('random',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('startIndex',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('endIndex',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{});
    fan.sys.ArrayList.$type.$af('array',69632,'sys::Array<sys::Obj?>',{}).$af('readOnly',69632,'sys::Bool',{}).$af('immutable',69632,'sys::Bool',{}).$af('size',336896,'sys::Int',{}).$af('capacity',271360,'sys::Int',{}).$am('modify',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('capacity','sys::Int',false)], fan.std.Param.$type),{}).$am('get',271360,'sys::ArrayList^V',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('getRange',271360,'sys::List<sys::ArrayList^V>',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Range',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('dup',271360,'sys::List<sys::ArrayList^V>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('set',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('item','sys::ArrayList^V',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('grow',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('desiredSize','sys::Int',false)], fan.std.Param.$type),{}).$am('add',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('item','sys::ArrayList^V?',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('addAll',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('alist','sys::List<sys::ArrayList^V>',false)], fan.std.Param.$type),{}).$am('insert',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('item','sys::ArrayList^V?',false)], fan.std.Param.$type),{}).$am('insertAll',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('alist','sys::List<sys::ArrayList^V>',false)], fan.std.Param.$type),{}).$am('removeAt',271360,'sys::ArrayList^V?',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{}).$am('removeRange',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Range',false)], fan.std.Param.$type),{}).$am('clear',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('insertSortA',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('left','sys::Int',false),new fan.std.Param('right','sys::Int',false),new fan.std.Param('cmopFunc','sys::Func<sys::Int,sys::ArrayList^V,sys::ArrayList^V>',false)], fan.std.Param.$type),{}).$am('quickSortA',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('low','sys::Int',false),new fan.std.Param('high','sys::Int',false),new fan.std.Param('cmopFunc','sys::Func<sys::Int,sys::ArrayList^V,sys::ArrayList^V>',false)], fan.std.Param.$type),{}).$am('sort',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Int,sys::ArrayList^V,sys::ArrayList^V>?',true)], fan.std.Param.$type),{}).$am('bsearchA',2048,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('cmopFunc','sys::Func<sys::Int,sys::ArrayList^V,sys::Int>',false)], fan.std.Param.$type),{}).$am('binarySearch',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('key','sys::ArrayList^V',false),new fan.std.Param('c','sys::Func<sys::Int,sys::ArrayList^V,sys::ArrayList^V>?',true)], fan.std.Param.$type),{}).$am('binaryFind',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Int,sys::ArrayList^V,sys::Int>',false)], fan.std.Param.$type),{}).$am('reverse',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('swap',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('indexA','sys::Int',false),new fan.std.Param('indexB','sys::Int',false)], fan.std.Param.$type),{}).$am('isRO',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isImmutable',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.Serializable.$type.$af('simple',73730,'sys::Bool',{}).$af('collection',73730,'sys::Bool',{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::Serializable>?',true)], fan.std.Param.$type),{});
    fan.sys.Transient.$type.$af('defVal',106498,'sys::Transient',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.Js.$type.$af('defVal',106498,'sys::Js',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.NoJs.$type.$af('defVal',106498,'sys::NoJs',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.NoDoc.$type.$af('defVal',106498,'sys::NoDoc',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.Deprecated.$type.$af('msg',73730,'sys::Str',{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::Deprecated>?',true)], fan.std.Param.$type),{});
    fan.sys.Operator.$type.$af('defVal',106498,'sys::Operator',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.FacetMeta.$type.$af('inherited',73730,'sys::Bool',{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::FacetMeta>?',true)], fan.std.Param.$type),{});
    fan.sys.NoPeer.$type.$af('defVal',106498,'sys::NoPeer',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.Extern.$type.$af('simple',73730,'sys::Bool',{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::Extern>?',true)], fan.std.Param.$type),{});
    fan.sys.NumDigits.$type.$af('digits',73728,'sys::Array<sys::Int32>',{}).$af('decimal',73728,'sys::Int',{}).$af('size',73728,'sys::Int',{}).$af('negative',73728,'sys::Bool',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('makeInt',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('d','sys::Int',false)], fan.std.Param.$type),{}).$am('intSize',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fracSize',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('zeroInt',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('zeroFrac',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('maxFrac','sys::Int',false)], fan.std.Param.$type),{}).$am('round',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('maxFrac','sys::Int',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.NumPattern.$type.$af('pattern',73730,'sys::Str',{}).$af('group',73730,'sys::Int',{}).$af('optInt',73730,'sys::Bool',{}).$af('minInt',73730,'sys::Int',{}).$af('minFrac',73730,'sys::Int',{}).$af('maxFrac',73730,'sys::Int',{}).$am('parse',40966,'sys::NumPattern',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('make',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.NumFormat.$type.$af('KB',100354,'sys::Int',{}).$af('MB',100354,'sys::Int',{}).$af('GB',100354,'sys::Int',{}).$am('format',40962,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('p','sys::NumPattern',false),new fan.std.Param('d','sys::NumDigits',false)], fan.std.Param.$type),{}).$am('formatDigits',40962,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('pattern','sys::Str',false)], fan.std.Param.$type),{}).$am('formatInt',40962,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Int',false),new fan.std.Param('pattern','sys::Str?',false)], fan.std.Param.$type),{}).$am('toLocaleBytes',34818,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.sys.Enum.$type.$af('_name',67586,'sys::Str',{}).$af('_ordinal',67586,'sys::Int',{}).$am('make',4100,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('ordinal','sys::Int',false),new fan.std.Param('name','sys::Str',false)], fan.std.Param.$type),{}).$am('doFromStr',37378,'sys::Enum?',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Str',false),new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',false)], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('compare',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('name',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('ordinal',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    m_meta = {};
    m_meta["pod.name"] = "sys";
    m_meta["pod.version"] = "2.0";
    m_meta["pod.depends"] = "";
    m_meta["pod.summary"] = "system core lib";
    m_meta["pod.isScript"] = "false";
    m_meta["fcode.version"] = "1.1.3";
    m_meta["build.host"] = "mywifi.local";
    m_meta["build.user"] = "yangjiandong";
    m_meta["build.ts"] = "2020-04-13T20:44:27.000+08:00 Asia/Harbin";
    m_meta["build.tsKey"] = "200413204427";
    m_meta["build.compiler"] = "1.1";
    m_meta["build.platform"] = "macosx-x86_64";
    m_meta["license.name"] = "Academic Free License 3.0";
    m_meta["pod.docApi"] = "true";
    m_meta["pod.docSrc"] = "false";
    m_meta["pod.native.java"] = "true";
    m_meta["pod.native.jni"] = "false";
    m_meta["pod.native.dotnet"] = "false";
    m_meta["pod.native.js"] = "true";
  }
  fan.sys.$clos$_u2 = new fan.sys.ClosureFuncSpec$("sys::$clos$_u2",fan.sys.Void.$type,["obj","sys::Obj?","false","ignoreparam$1","sys::Int","false"]);
  fan.sys.$clos$_u4 = new fan.sys.ClosureFuncSpec$("sys::$clos$_u4",fan.sys.Bool.$type,["v","sys::Obj?","false","i","sys::Int","false"]);
  fan.sys.$clos$_u6 = new fan.sys.ClosureFuncSpec$("sys::$clos$_u6",fan.sys.Void.$type,["obj","sys::Obj?","false","i","sys::Int","false"]);
  fan.sys.$clos$_u8 = new fan.sys.ClosureFuncSpec$("sys::$clos$_u8",fan.sys.Int.$type,["a","sys::Obj?","false","b","sys::Obj?","false"]);
  fan.sys.$clos$_u9 = new fan.sys.ClosureFuncSpec$("sys::$clos$_u9",fan.sys.Int.$type,["b","sys::Obj?","false","i","sys::Int","false"]);
  fan.sys.$clos$_u10 = new fan.sys.ClosureFuncSpec$("sys::$clos$_u10",fan.sys.Void.$type,["item","sys::Obj?","false","ignoreparam$1","sys::Int","false"]);
  fan.sys.$clos$_u12 = new fan.sys.ClosureFuncSpec$("sys::$clos$_u12",fan.sys.Void.$type,["v","sys::Obj?","false","i","sys::Int","false"]);
  fan.sys.$clos$_u13 = new fan.sys.ClosureFuncSpec$("sys::$clos$_u13",fan.sys.Void.$type,["item","sys::Obj?","false","i","sys::Int","false"]);
  fan.sys.$clos$_u14 = new fan.sys.ClosureFuncSpec$("sys::$clos$_u14",fan.sys.Void.$type,["v","sys::Obj?","false","ignoreparam$1","sys::Int","false"]);
}
fan.sys.initStatic$ = function() {
  fan.sys.List.static$init();
  fan.sys.Transient.static$init();
  fan.sys.Js.static$init();
  fan.sys.NoJs.static$init();
  fan.sys.NoDoc.static$init();
  fan.sys.Operator.static$init();
  fan.sys.NoPeer.static$init();
  fan.sys.NumFormat.static$init();
}
fan.sys.Sys = function(){}
fan.sys.Sys.findType = function(sig, checked) {
  if (checked === undefined) checked = true;
  var len = sig.length;
  var last = len > 1 ? sig.charAt(len-1) : 0;
  if (len < 1) {
    throw fan.sys.ArgErr(signature);
  }
  if (last == '?') {
    var t = fan.sys.Sys.findType(sig.substring(0, len-1), checked);
    return t.toNullable();
  }
  var podName;
  var typeName;
  try
  {
    var colon = sig.indexOf("::");
    podName  = sig.substring(0, colon);
    typeName = sig.substring(colon+2);
    var pos = typeName.indexOf("<");
    if (pos >= 0) {
      typeName = typeName.substring(0, pos);
    }
    if (podName.length == 0 || typeName.length == 0) throw fan.sys.Err.make("");
  }
  catch (err)
  {
    throw fan.sys.ArgErr.make("Invalid type signature '" + sig + "', use <pod>::<type>");
  }
  return fan.sys.Sys.find(podName, typeName, checked);
}
fan.sys.Sys.find = function(podName, typeName, checked)
{
  if (typeName.indexOf('^') != -1) {
    return fan.sys.Sys.find("sys", "Obj", checked);
  }
  if (podName == "sys") {
    if (typeName == "Int8" || typeName == "Int16" ||
        typeName == "Int32"  || typeName == "Int64" ) {
      return fan.sys.Sys.find("sys", "Int", checked);
    }
    else if (typeName == "Float32"  || typeName == "Float64" ) {
      return fan.sys.Sys.find("sys", "Float", checked);
    }
  }
  var pod = fan.std.Pod.find(podName, checked);
  if (pod == null) return null;
  return pod.type(typeName, checked);
}
fan.sys.List.makeFromJs = function(array) {
	var list = fan.sys.List.make(array.length);
	for(var i= 0; i<array.length; ++i){
		list.add(array[i]);
	}
	return list;
}
fan.sys.List.orign_make = fan.sys.List.make;
fan.sys.List.make = function(arg1, arg2) {
	if (arg1 instanceof fan.std.Type) {
		if (arg2 instanceof Array) {
			return fan.sys.List.makeFromJs(arg2);
		}
		else if (arg2 === undefined) {
			return fan.sys.List.orign_make(1);
		}
	}
	return fan.sys.List.orign_make(arg1);
}
fan.sys.List.prototype.toJs = function() {
	return this.m_array.m_array;
}
fan.sys.ObjUtil = function() {};
fan.sys.ObjUtil.hash = function(obj)
{
  if (obj instanceof fan.sys.Obj) return obj.hash();
  var t = typeof obj;
  if (t === "number") return fan.sys.Int.hash(obj);
  if (t === "string") return fan.sys.Str.hash(obj);
  // TODO FIXIT
  return 0;
}
fan.sys.ObjUtil.equals = function(a, b, op)
{
  if (a == null) return b == null;
  if (a instanceof fan.sys.Obj) return a.equals(b);
  var t = typeof a;
  if (t === "number") return fan.sys.Int.equals(a, b);
  if (t === "string") return a === b;
  var f = a.$fanType;
  if (f === fan.sys.Float.$type) return fan.sys.Float.equals(a, b);
  if (f === fan.std.Decimal.$type) return fan.std.Decimal.equals(a, b);
  return a === b;
}
fan.sys.ObjUtil.compare = function(a, b, op)
{
  if (a instanceof fan.sys.Obj)
  {
    if (b == null) return +1;
    return a.compare(b);
  }
  else if (a != null && a.$fanType != null)
  {
    if (op === true && (isNaN(a) || isNaN(b))) return Number.NaN;
    return fan.sys.Float.compare(a, b);
  }
  else
  {
    if (a == null)
    {
      if (b != null) return -1;
      return 0;
    }
    if (b == null) return 1;
    if (a < b) return -1;
    if (a > b) return 1;
    return 0;
  }
}
fan.sys.ObjUtil.compareNE = function(a,b) { return !fan.sys.ObjUtil.equals(a,b); }
fan.sys.ObjUtil.compareLT = function(a,b) { return fan.sys.ObjUtil.compare(a,b,true) <  0; }
fan.sys.ObjUtil.compareLE = function(a,b) { return fan.sys.ObjUtil.compare(a,b,true) <= 0; }
fan.sys.ObjUtil.compareGE = function(a,b) { return fan.sys.ObjUtil.compare(a,b,true) >= 0; }
fan.sys.ObjUtil.compareGT = function(a,b) { return fan.sys.ObjUtil.compare(a,b,true) >  0; }
fan.sys.ObjUtil.is = function(obj, type)
{
  if (obj == null) return false;
  return fan.sys.ObjUtil.$typeof(obj).is(type);
}
fan.sys.ObjUtil.as = function(obj, type)
{
  if (obj == null) return null;
  type = type.toNonNullable();
  var t = fan.sys.ObjUtil.$typeof(obj);
  //if (t.is(fan.sys.Func.$type)) return t.as(obj, type);
  //if (t.is(fan.sys.List.$type)) return t.as(obj, type);
  //if (t.is(fan.std.Map.$type))  return t.as(obj, type);
  if (t.is(type)) return obj;
  return null;
}
fan.sys.ObjUtil.coerce = function(obj, type)
{
  if (obj == null)
  {
    if (type.isNullable()) return obj;
    throw fan.sys.NullErr.make("Coerce to non-null");
  }
  var v = fan.sys.ObjUtil.as(obj, type);
  if (v == null)
  {
    var t = fan.sys.ObjUtil.$typeof(obj);
    throw fan.sys.CastErr.make(t + " cannot be cast to " + type);
  }
  return obj;
}
fan.sys.ObjUtil.$typeof = function(obj)
{
  if (obj instanceof fan.sys.Obj) return obj.$typeof();
  else return fan.std.Type.toFanType(obj);
}
fan.sys.ObjUtil.trap = function(obj, name, args)
{
  if (obj instanceof fan.sys.Obj) return obj.trap(name, args);
  else return fan.sys.ObjUtil.doTrap(obj, name, args, fan.std.Type.toFanType(obj));
}
fan.sys.ObjUtil.doTrap = function(obj, name, args, type)
{
  var slot = type.slot(name, false);
  if (slot == null) {
    if (obj != null && name.equals("typeof")) {
      return fan.std.Type.$typeof(obj);
    }
    throw fan.sys.UnknownSlotErr.make(type.qname()+"."+name);
  }
  if (slot instanceof fan.std.Method)
  {
    return slot.invoke(obj, args);
  }
  else
  {
    var argSize = (args == null) ? 0 : args.size();
    if (argSize == 0) return slot.get(obj);
    if (argSize == 1) // one arg -> setter
    {
      var val = args.get(0);
      slot.set(obj, val);
      return val;
    }
    throw fan.sys.ArgErr.make("Invalid number of args to get or set field '" + name + "'");
  }
}
fan.sys.ObjUtil.isImmutable = function(obj)
{
  if (obj instanceof fan.sys.Obj) return obj.isImmutable();
  else if (obj == null) return true;
  else
  {
    if ((typeof obj) == "boolean" || obj instanceof Boolean) return true;
    if ((typeof obj) == "number"  || obj instanceof Number) return true;
    if ((typeof obj) == "string"  || obj instanceof String) return true;
    if (obj.$fanType != null) return true;
  }
  throw fan.sys.UnknownTypeErr.make("Not a Fantom type: " + obj);
}
fan.sys.ObjUtil.toImmutable = function(obj)
{
  if (obj instanceof fan.sys.Obj) return obj.toImmutable();
  else if (obj == null) return null;
  else
  {
    if ((typeof obj) == "boolean" || obj instanceof Boolean) return obj;
    if ((typeof obj) == "number"  || obj instanceof Number) return obj;
    if ((typeof obj) == "string"  || obj instanceof String) return obj;
    if (obj.$fanType != null) return obj;
  }
  throw fan.sys.UnknownTypeErr.make("Not a Fantom type: " + obj);
}
fan.sys.ObjUtil.$with = function(self, f)
{
  if (self instanceof fan.sys.Obj)
  {
    return self.$with(f);
  }
  else
  {
    f.call(self);
    return self;
  }
}
fan.sys.ObjUtil.toStr = function(obj)
{
  if (obj == null) return "null";
  if (typeof obj == "string") return obj;
  // TODO - can't for the life of me figure how the
  // heck Error.toString would ever try to call Obj.toStr
  // so trap it for now
if (obj.$fanType === fan.sys.Float.$type) return fan.sys.Float.toStr(obj);
  return obj.toString();
}
fan.sys.ObjUtil.echo = function(obj)
{
  if (obj === undefined) obj = "";
  var s = fan.sys.ObjUtil.toStr(obj);
  try { console.log(s); }
  catch (e1)
  {
    try { print(s + "\n"); }
    catch (e2) {} //alert(s); }
  }
}
fan.sys.FConst = function() {};
fan.sys.FConst.Abstract   = 0x00000001;
fan.sys.FConst.Const      = 0x00000002;
fan.sys.FConst.Ctor       = 0x00000004;
fan.sys.FConst.Enum       = 0x00000008;
fan.sys.FConst.Facet      = 0x00000010;
fan.sys.FConst.Final      = 0x00000020;
fan.sys.FConst.Getter     = 0x00000040;
fan.sys.FConst.Internal   = 0x00000080;
fan.sys.FConst.Mixin      = 0x00000100;
fan.sys.FConst.Native     = 0x00000200;
fan.sys.FConst.Override   = 0x00000400;
fan.sys.FConst.Private    = 0x00000800;
fan.sys.FConst.Protected  = 0x00001000;
fan.sys.FConst.Public     = 0x00002000;
fan.sys.FConst.Setter     = 0x00004000;
fan.sys.FConst.Static     = 0x00008000;
fan.sys.FConst.Storage    = 0x00010000;
fan.sys.FConst.Synthetic  = 0x00020000;
fan.sys.FConst.Virtual    = 0x00040000;
fan.sys.FConst.FlagsMask  = 0x0007ffff;
}).call(this);

(function () {
var root=this;
var fan=root.fan;
if (fan === undefined) {
   if (typeof exports !== 'undefined') {
     fan = exports;
   } else {
     fan = root.fan = {};
   }
}
if (!fan.sys && (typeof require !== 'undefined')) fan = require('sys.js');

if (typeof exports !== 'undefined') {
  fan.std = exports;
} else {
  fan.std = root.fan.std = {};
}

fan.std.AtomicInt = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.AtomicInt.prototype.$ctor = function() {}
fan.std.AtomicInt.prototype.$typeof = function() { return fan.std.AtomicInt.$type; }
fan.std.AtomicInt.make = function(v) {
	self = new fan.std.AtomicInt();
	if (v === undefined) v = false;
	self.m_val = v;
	return self;
}
fan.std.AtomicInt.prototype.get = function() {
	return this.m_val;
}
fan.std.AtomicInt.prototype.val = function() {
	return this.m_val;
}
fan.std.AtomicInt.prototype.val$ = function(v) {
	this.m_val = v;
}
fan.std.AtomicInt.prototype.set$ = function(v) {
	this.m_val = v;
}
fan.std.AtomicInt.prototype.getAndSet = function(v) {
	o = this.m_val;
	this.m_val = v;
	return o;
}
fan.std.AtomicInt.prototype.increment = function() {
	++this.m_val;
}
fan.std.AtomicInt.prototype.decrement = function() {
	--this.m_val;
}
fan.std.AtomicInt.prototype.incrementAndGet = function() {
	return ++this.m_val;
}
fan.std.AtomicInt.prototype.decrementAndGet = function() {
	return --this.m_val;
}
fan.std.AtomicInt.prototype.getAndIncrement = function() {
	return this.m_val++;
}
fan.std.AtomicInt.prototype.getAndDecrement = function() {
	return this.m_val--;
}
fan.std.AtomicInt.prototype.compareAndSet = function(expect, update) {
	if (this.m_val == expect) {
		this.m_val = update;
		return true;
	}
	return false;
}
fan.std.Unsafe = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Unsafe.make = function(val)
{
  var self = new fan.std.Unsafe();
  self.m_val = val;
  return self;
}
fan.std.Unsafe.prototype.$ctor = function()
{
}
fan.std.Unsafe.prototype.$typeof = function () {
  return fan.std.Unsafe.$type;
}
fan.std.Unsafe.prototype.val = function() { return this.m_val; }
fan.std.Unsafe.prototype.get = function() { return this.m_val; }
fan.std.Lazy = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Lazy.prototype.$ctor = function() {}
fan.std.Lazy.prototype.$typeof = function() { return fan.std.Lazy.$type; }
fan.std.Lazy.make = function(init) {
	var self = new fan.std.Lazy();
	self.initial = init.toImmutable();
	return self;
}
fan.std.Lazy.prototype.get = function() {
	if (this.m_val == null) {
		v = initial.call();
		this.m_val = fan.sys.ObjUtil.toImmutable(v);
	}
	return this.m_val;
}
fan.std.AtomicRef = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.AtomicRef.prototype.$ctor = function() {}
fan.std.AtomicRef.prototype.$typeof = function() { return fan.std.AtomicRef.$type; }
fan.std.AtomicRef.make = function(v) {
	self = new fan.std.AtomicRef();
	if (v === undefined) v = false;
	self.m_val = v;
	return self;
}
fan.std.AtomicRef.prototype.get = function() {
	return this.m_val;
}
fan.std.AtomicRef.prototype.val = function() {
	return this.m_val;
}
fan.std.AtomicRef.prototype.val$ = function(v) {
	this.m_val = v;
}
fan.std.AtomicRef.prototype.set$ = function(v) {
	this.m_val = v;
}
fan.std.AtomicRef.prototype.getAndSet = function(v) {
	o = this.m_val;
	this.m_val = v;
	return o;
}
fan.std.AtomicRef.prototype.compareAndSet = function(expect, update) {
	if (this.m_val == expect) {
		this.m_val = update;
		return true;
	}
	return false;
}
fan.std.Lock = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Lock.prototype.$ctor = function() {}
fan.std.Lock.prototype.$typeof = function() { return fan.std.Lock.$type; }
fan.std.Lock.make = function() {
	this.m_lock = false;
}
fan.std.Lock.prototype.tryLock = function(nanoTime) {
	if (this.m_lock) {
		return false;
	}
	return true;
}
fan.std.Lock.prototype.lock = function() {
	this.m_lock = true;
}
fan.std.Lock.prototype.unlock = function() {
	this.m_lock = false;
}
fan.std.Lock.prototype.sync = function(c) {
	try {
		this.lock();
		return c.call();
	}
	finally {
		this.unlock();
	}
}
fan.std.SoftRef = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.SoftRef.prototype.$ctor = function() {}
fan.std.SoftRef.prototype.$typeof = function() { return fan.std.SoftRef.$type; }
fan.std.SoftRef.make = function(val) {
	var self = new fan.std.SoftRef();
	self.m_val = val;
	return self;
}
fan.std.SoftRef.prototype.get = function() {
	return this.m_val;
}
fan.std.AtomicBool = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.AtomicBool.prototype.$ctor = function() {}
fan.std.AtomicBool.prototype.$typeof = function() { return fan.std.AtomicBool.$type; }
fan.std.AtomicBool.make = function(v) {
	self = new fan.std.AtomicBool();
	if (v === undefined) v = false;
	self.m_val = v;
	return self;
}
fan.std.AtomicBool.prototype.get = function() {
	return this.m_val;
}
fan.std.AtomicBool.prototype.val = function() {
	return this.m_val;
}
fan.std.AtomicBool.prototype.val$ = function(v) {
	this.m_val = v;
}
fan.std.AtomicBool.prototype.set$ = function(v) {
	this.m_val = v;
}
fan.std.AtomicBool.prototype.getAndSet = function(v) {
	o = this.m_val;
	this.m_val = v;
	return o;
}
fan.std.AtomicBool.prototype.compareAndSet = function(expect, update) {
	if (this.m_val == expect) {
		this.m_val = update;
		return true;
	}
	return false;
}
fan.std.Map = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Map.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_defV = null;
  return;
}
fan.std.Map.prototype.$typeof = function() { return fan.std.Map.$type; }
fan.std.Map.make = function(capacity)
{
  if (capacity === undefined) capacity = 16;
  return fan.sys.ObjUtil.coerce(fan.std.HashMap.make(capacity),fan.std.Type.find("std::Map<std::Map^K,std::Map^V>"));
}
fan.std.Map.privateMake = function() {
  var self = new fan.std.Map();
  fan.std.Map.privateMake$(self);
  return self;
  }
fan.std.Map.privateMake$ = function(self)
{
  ;
  return;
}
fan.std.Map.prototype.equals = function(that)
{
  var $this = this;
  if (this === that)
  {
    return true;
  }
  ;
  if (!fan.sys.ObjUtil.is(that,fan.std.Type.find("std::Map<>")))
  {
    return false;
  }
  ;
  var o = fan.sys.ObjUtil.as(that,fan.std.Type.find("std::Map<std::Map^K,std::Map^V>"));
  if (fan.sys.ObjUtil.compareNE(this.size(),o.size()))
  {
    return false;
  }
  ;
  return this.all(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u0,
    function(v,k)
    {
      if (v == null)
      {
        return (o.get(k) == null && o.containsKey(k));
      }
      ;
      return fan.sys.ObjUtil.equals(o.get(k),v);
    }),fan.std.Type.find("sys::Func<sys::Bool,std::Map^V,std::Map^K>")));
}
fan.std.Map.prototype.hash = function()
{
  var $this = this;
  var h = 0;
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      if (v != null)
      {
        h = fan.sys.Int.plus(h,fan.sys.ObjUtil.hash(v));
      }
      ;
      if (k != null)
      {
        h = fan.sys.Int.plus(h,fan.sys.ObjUtil.hash(k));
      }
      ;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::Map^V,std::Map^K>")));
  return h;
}
fan.std.Map.prototype.isEmpty = function()
{
  return fan.sys.ObjUtil.equals(this.size(),0);
}
fan.std.Map.prototype.getOrThrow = function(key)
{
  return this.getChecked(key,true);
}
fan.std.Map.prototype.getChecked = function(key,checked)
{
  if (checked === undefined) checked = true;
  var l = this.get(key,null);
  if (l == null)
  {
    if ((checked && !this.containsKey(key)))
    {
      throw fan.sys.UnknownKeyErr.make(fan.sys.ObjUtil.coerce(key,fan.sys.Str.$type));
    }
    ;
  }
  ;
  return l;
}
fan.std.Map.prototype.dup = function()
{
  var $this = this;
  var nmap = this.createEmpty();
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      nmap.set(k,v);
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::Map^V,std::Map^K>")));
  nmap.m_defV = this.m_defV;
  return nmap;
}
fan.std.Map.prototype.addIfNotNull = function(key,val)
{
  if (val == null)
  {
    return this;
  }
  ;
  return this.add(key,val);
}
fan.std.Map.prototype.getOrAdd = function(key,valFunc)
{
  var l = this.get(key);
  if (l != null)
  {
    return l;
  }
  ;
  if (this.containsKey(key))
  {
    return null;
  }
  ;
  this.modify();
  var val = valFunc.call(key);
  this.set(key,val);
  return val;
}
fan.std.Map.prototype.setAll = function(m)
{
  var $this = this;
  this.modify();
  m.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      $this.set(k,v);
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::Map^V,std::Map^K>")));
  return this;
}
fan.std.Map.prototype.addAll = function(m)
{
  var $this = this;
  this.modify();
  m.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      $this.add(k,v);
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::Map^V,std::Map^K>")));
  return this;
}
fan.std.Map.prototype.setList = function(list,c)
{
  if (c === undefined) c = null;
  this.modify();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,list.size()); i = fan.sys.Int.increment(i))
  {
    var key = list.get(i);
    var value = key;
    if (c != null)
    {
      key = c.call(value,fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
    }
    ;
    this.set(key,value);
  }
  ;
  return this;
}
fan.std.Map.prototype.addList = function(list,c)
{
  if (c === undefined) c = null;
  this.modify();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,list.size()); i = fan.sys.Int.increment(i))
  {
    var key = list.get(i);
    var value = key;
    if (c != null)
    {
      key = c.call(value,fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
    }
    ;
    this.add(key,value);
  }
  ;
  return this;
}
fan.std.Map.prototype.defV = function()
{
  return this.m_defV;
}
fan.std.Map.prototype.defV$ = function(it)
{
  if (!fan.sys.ObjUtil.isImmutable(it))
  {
    throw fan.sys.NotImmutableErr.make();
  }
  ;
  if (this.isRO())
  {
    throw fan.sys.ReadonlyErr.make();
  }
  ;
  this.m_defV = fan.sys.ObjUtil.toImmutable(it);
  return;
}
fan.std.Map.prototype.toStr = function()
{
  var $this = this;
  if (fan.sys.ObjUtil.equals(this.size(),0))
  {
    return "[:]";
  }
  ;
  var buf = fan.sys.StrBuf.make();
  buf.add("[");
  var first = true;
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      if (!first)
      {
        buf.add(", ");
      }
      else
      {
        first = false;
      }
      ;
      buf.add(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",k),":"),v));
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::Map^V,std::Map^K>")));
  buf.add("]");
  return buf.toStr();
}
fan.std.Map.prototype.join = function(separator,c)
{
  if (c === undefined) c = null;
  var $this = this;
  var buf = fan.sys.StrBuf.make();
  var first = true;
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      if (!first)
      {
        buf.add(separator);
      }
      else
      {
        first = false;
      }
      ;
      if (c != null)
      {
        buf.add(c.call(v,k));
      }
      else
      {
        buf.add(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",k),": "),v));
      }
      ;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::Map^V,std::Map^K>")));
  return buf.toStr();
}
fan.std.Map.prototype.toCode = function()
{
  var $this = this;
  if (fan.sys.ObjUtil.equals(this.size(),0))
  {
    return "[:]";
  }
  ;
  var buf = fan.sys.StrBuf.make();
  buf.add("[");
  var first = true;
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      if (!first)
      {
        buf.add(", ");
      }
      else
      {
        first = false;
      }
      ;
      if (k == null)
      {
        buf.add("null");
      }
      else
      {
        buf.add(fan.sys.ObjUtil.trap(k,"toCode",fan.sys.List.make(fan.sys.Obj.$type.toNullable(),[])));
      }
      ;
      buf.add(":");
      if (v == null)
      {
        buf.add("null");
      }
      else
      {
        buf.add(fan.sys.ObjUtil.trap(v,"toCode",fan.sys.List.make(fan.sys.Obj.$type.toNullable(),[])));
      }
      ;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::Map^V,std::Map^K>")));
  buf.add("]");
  return buf.toStr();
}
fan.std.Map.prototype.find = function(c)
{
  var $this = this;
  var found = null;
  this.eachWhile(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u2,
    function(v,k)
    {
      if (c.call(v,k))
      {
        found = v;
        return fan.sys.ObjUtil.coerce(1,fan.sys.Obj.$type.toNullable());
      }
      ;
      return null;
    }),fan.std.Type.find("sys::Func<sys::Obj?,std::Map^V,std::Map^K>")));
  return found;
}
fan.std.Map.prototype.findAll = function(c)
{
  var $this = this;
  var nmap = this.createEmpty();
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      if (c.call(v,k))
      {
        nmap.set(k,v);
      }
      ;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::Map^V,std::Map^K>")));
  return nmap;
}
fan.std.Map.prototype.exclude = function(c)
{
  var $this = this;
  var nmap = this.createEmpty();
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      if (!c.call(v,k))
      {
        nmap.set(k,v);
      }
      ;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::Map^V,std::Map^K>")));
  return nmap;
}
fan.std.Map.prototype.any = function(c)
{
  var $this = this;
  var found = false;
  this.eachWhile(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u2,
    function(v,k)
    {
      if (c.call(v,k))
      {
        found = true;
        return fan.sys.ObjUtil.coerce(1,fan.sys.Obj.$type.toNullable());
      }
      ;
      return null;
    }),fan.std.Type.find("sys::Func<sys::Obj?,std::Map^V,std::Map^K>")));
  return found;
}
fan.std.Map.prototype.all = function(c)
{
  var $this = this;
  var valid = true;
  this.eachWhile(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u2,
    function(v,k)
    {
      if (!c.call(v,k))
      {
        valid = false;
        return fan.sys.ObjUtil.coerce(1,fan.sys.Obj.$type.toNullable());
      }
      ;
      return null;
    }),fan.std.Type.find("sys::Func<sys::Obj?,std::Map^V,std::Map^K>")));
  return valid;
}
fan.std.Map.prototype.reduce = function(init,c)
{
  var $this = this;
  var reduction = init;
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      reduction = c.call(reduction,v,k);
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::Map^V,std::Map^K>")));
  return reduction;
}
fan.std.Map.prototype.map = function(c)
{
  var $this = this;
  var nmap = this.createEmpty();
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      var nval = c.call(v,k);
      nmap.set(k,nval);
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::Map^V,std::Map^K>")));
  return fan.sys.ObjUtil.coerce(nmap,fan.std.Type.find("std::Map<std::Map^K,sys::Obj?>"));
}
fan.std.Map.prototype.isRW = function()
{
  return !this.isRO();
}
fan.std.Map.static$init = function()
{
  if (fan.std.Map.static$inited) return;
  fan.std.Map.static$inited = true;
  fan.std.Map.m_defVal = fan.sys.ObjUtil.coerce((function($this) { var $_u3 = fan.std.Map.fromLiteral([],[],fan.std.Type.find("sys::Obj"),fan.std.Type.find("sys::Obj")); if ($_u3 == null) return null; return fan.sys.ObjUtil.toImmutable($_u3); })(this),fan.std.Type.find("std::Map<sys::Obj,sys::Obj>"));
  return;
}
fan.std.Map.m_defVal = null;
fan.std.Map.prototype.m_defV = null;
fan.std.HashMap = fan.sys.Obj.$extend(fan.std.Map);
fan.std.HashMap.prototype.$ctor = function()
{
  fan.std.Map.prototype.$ctor.call(this);
  var $this = this;
  this.m_keySafe = true;
  return;
}
fan.std.HashMap.prototype.$typeof = function() { return fan.std.HashMap.$type; }
fan.std.HashMap.prototype.array = function()
{
  return this.m_array;
}
fan.std.HashMap.prototype.array$ = function(it)
{
  this.m_array = it;
  return;
}
fan.std.HashMap.prototype.readOnly = function()
{
  return this.m_readOnly;
}
fan.std.HashMap.prototype.readOnly$ = function(it)
{
  this.m_readOnly = it;
  return;
}
fan.std.HashMap.prototype.immutable = function()
{
  return this.m_immutable;
}
fan.std.HashMap.prototype.immutable$ = function(it)
{
  this.m_immutable = it;
  return;
}
fan.std.HashMap.prototype.loadFactor = function()
{
  return this.m_loadFactor;
}
fan.std.HashMap.prototype.loadFactor$ = function(it)
{
  this.m_loadFactor = it;
  return;
}
fan.std.HashMap.prototype.keySafe = function()
{
  return this.m_keySafe;
}
fan.std.HashMap.prototype.keySafe$ = function(it)
{
  this.m_keySafe = it;
  return;
}
fan.std.HashMap.prototype.modify = function()
{
  if (this.m_readOnly)
  {
    throw fan.sys.ReadonlyErr.make();
  }
  ;
  return;
}
fan.std.HashMap.make = function(capacity,loadFactor) {
  var self = new fan.std.HashMap();
  fan.std.HashMap.make$(self,capacity,loadFactor);
  return self;
  }
fan.std.HashMap.make$ = function(self,capacity,loadFactor)
{
  if (capacity === undefined) capacity = 16;
  if (loadFactor === undefined) loadFactor = fan.sys.Float.make(0.75);
  var $this = self;
  fan.std.Map.privateMake$(self);
  ;
  if (fan.sys.ObjUtil.compareLE(capacity,0))
  {
    capacity = 1;
  }
  ;
  self.m_array = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.sys.List.make(fan.std.MapEntryList.$type.toNullable()),fan.sys.Func.make$closure(
    fan.std.$clos$_u4,
    function(it)
    {
      fan.sys.ObjUtil.trap(it,"size",fan.sys.List.make(fan.sys.Obj.$type.toNullable(),[fan.sys.ObjUtil.coerce(capacity,fan.sys.Obj.$type.toNullable())]));
      return;
    })),fan.std.Type.find("sys::List<std::MapEntryList?>"));
  self.m_loadFactor = loadFactor;
  return;
}
fan.std.HashMap.prototype.size = function()
{
  return this.m_size;
}
fan.std.HashMap.prototype.size$ = function(it)
{
  this.m_size = it;
  return;
}
fan.std.HashMap.prototype.getHash = function(key)
{
  if (key == null)
  {
    return 0;
  }
  ;
  var hash = fan.sys.Int.mod(fan.sys.ObjUtil.hash(key),this.m_array.size());
  return fan.sys.Int.abs(hash);
}
fan.std.HashMap.prototype.rawGet = function(key,defV)
{
  if (defV === undefined) defV = null;
  var hash = this.getHash(key);
  var l = this.m_array.get(hash);
  if (l == null)
  {
    return defV;
  }
  ;
  var entry = l.findByKey(key);
  if (entry != null)
  {
    return entry.value();
  }
  else
  {
    return defV;
  }
  ;
}
fan.std.HashMap.prototype.get = function(key,defValue)
{
  if (defValue === undefined) defValue = fan.std.Map.prototype.defV.call(this);
  return this.rawGet(key,defValue);
}
fan.std.HashMap.prototype.containsKey = function(key)
{
  var hash = this.getHash(key);
  var l = this.m_array.get(hash);
  if (l == null)
  {
    return false;
  }
  ;
  var entry = l.findByKey(key);
  return entry != null;
}
fan.std.HashMap.prototype.keys = function()
{
  var list = fan.sys.List.make(this.size());
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_array.size()); i = fan.sys.Int.increment(i))
  {
    var l = this.m_array.get(i);
    if (l == null)
    {
      continue;
    }
    ;
    var itr = l.begin();
    while (fan.sys.ObjUtil.compareNE(itr,l.end()))
    {
      list.add(itr.m_key);
      itr = fan.sys.ObjUtil.coerce(itr.m_next,fan.std.MapEntry.$type);
    }
    ;
  }
  ;
  return fan.sys.ObjUtil.coerce(list,fan.std.Type.find("sys::List<std::HashMap^K>"));
}
fan.std.HashMap.prototype.vals = function()
{
  var list = fan.sys.List.make(this.size());
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_array.size()); i = fan.sys.Int.increment(i))
  {
    var l = this.m_array.get(i);
    if (l == null)
    {
      continue;
    }
    ;
    var itr = l.begin();
    while (fan.sys.ObjUtil.compareNE(itr,l.end()))
    {
      list.add(itr.value());
      itr = fan.sys.ObjUtil.coerce(itr.m_next,fan.std.MapEntry.$type);
    }
    ;
  }
  ;
  return fan.sys.ObjUtil.coerce(list,fan.std.Type.find("sys::List<std::HashMap^V>"));
}
fan.std.HashMap.prototype.createEmpty = function()
{
  return fan.sys.ObjUtil.coerce(fan.std.HashMap.make(),fan.std.HashMap.$type);
}
fan.std.HashMap.prototype.rehash = function()
{
  var $this = this;
  if (fan.sys.ObjUtil.compareLT(this.size(),fan.sys.Float.toInt(fan.sys.Int.multFloat(this.m_array.size(),this.m_loadFactor))))
  {
    return;
  }
  ;
  this.modify();
  var newSize = (function($this) { if (fan.sys.ObjUtil.compareLT($this.size(),256)) return fan.sys.Int.plus(fan.sys.Int.mult($this.size(),2),8); return fan.sys.Float.toInt(fan.sys.Int.multFloat($this.size(),fan.sys.Float.make(1.5))); })(this);
  var oldArray = this.m_array;
  this.m_array = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.sys.List.make(fan.std.MapEntryList.$type.toNullable()),fan.sys.Func.make$closure(
    fan.std.$clos$_u4,
    function(it)
    {
      fan.sys.ObjUtil.trap(it,"size",fan.sys.List.make(fan.sys.Obj.$type.toNullable(),[fan.sys.ObjUtil.coerce(newSize,fan.sys.Obj.$type.toNullable())]));
      return;
    })),fan.std.Type.find("sys::List<std::MapEntryList?>"));
  this.size$(0);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,oldArray.size()); i = fan.sys.Int.increment(i))
  {
    var l = oldArray.get(i);
    if (l == null)
    {
      continue;
    }
    ;
    var itr = l.begin();
    while (fan.sys.ObjUtil.compareNE(itr,l.end()))
    {
      this.rawSet(itr.m_key,itr.value());
      itr = fan.sys.ObjUtil.coerce(itr.m_next,fan.std.MapEntry.$type);
    }
    ;
  }
  ;
  return;
}
fan.std.HashMap.prototype.rawSet = function(key,val)
{
  this.rehash();
  var hash = this.getHash(key);
  var l = this.m_array.get(hash);
  if (l == null)
  {
    l = fan.std.MapEntryList.make();
    this.m_array.set(hash,l);
  }
  ;
  var old = l.setByKey(key,val);
  if (old == null)
  {
    this.size$(fan.sys.Int.increment(this.size()));
  }
  ;
  return;
}
fan.std.HashMap.prototype.set = function(key,val)
{
  this.modify();
  if ((this.m_keySafe && !fan.sys.ObjUtil.isImmutable(key)))
  {
    throw fan.sys.NotImmutableErr.make(fan.sys.Str.plus("key is not immutable: ",fan.std.Type.$typeof(fan.sys.ObjUtil.coerce(key,fan.sys.Obj.$type))));
  }
  ;
  this.rawSet(key,val);
  return this;
}
fan.std.HashMap.prototype.add = function(key,val)
{
  this.modify();
  if ((this.m_keySafe && !fan.sys.ObjUtil.isImmutable(key)))
  {
    throw fan.sys.NotImmutableErr.make(fan.sys.Str.plus("key is not immutable: ",fan.std.Type.$typeof(fan.sys.ObjUtil.coerce(key,fan.sys.Obj.$type))));
  }
  ;
  this.rehash();
  var hash = this.getHash(key);
  var l = this.m_array.get(hash);
  if (l == null)
  {
    l = fan.std.MapEntryList.make();
    this.m_array.set(hash,l);
  }
  ;
  l.addByKey(key,val);
  this.size$(fan.sys.Int.increment(this.size()));
  return this;
}
fan.std.HashMap.prototype.remove = function(key)
{
  this.modify();
  var hash = this.getHash(key);
  var l = this.m_array.get(hash);
  if (l == null)
  {
    return null;
  }
  ;
  var old = l.removeByKey(key);
  if (old != null)
  {
    this.size$(fan.sys.Int.decrement(this.size()));
  }
  ;
  return old.value();
}
fan.std.HashMap.prototype.clear = function()
{
  this.modify();
  this.size$(0);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_array.size()); i = fan.sys.Int.increment(i))
  {
    var l = this.m_array.get(i);
    (function($this) { var $_u6 = l; if ($_u6 == null) return null; return $_u6.clear(); })(this);
  }
  ;
  this.size$(0);
  return this;
}
fan.std.HashMap.prototype.each = function(c)
{
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_array.size()); i = fan.sys.Int.increment(i))
  {
    var l = this.m_array.get(i);
    if (l == null)
    {
      continue;
    }
    ;
    var itr = l.begin();
    while (fan.sys.ObjUtil.compareNE(itr,l.end()))
    {
      c.call(itr.value(),itr.m_key);
      itr = fan.sys.ObjUtil.coerce(itr.m_next,fan.std.MapEntry.$type);
    }
    ;
  }
  ;
  return;
}
fan.std.HashMap.prototype.eachWhile = function(c)
{
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_array.size()); i = fan.sys.Int.increment(i))
  {
    var l = this.m_array.get(i);
    if (l == null)
    {
      continue;
    }
    ;
    var itr = l.begin();
    while (fan.sys.ObjUtil.compareNE(itr,l.end()))
    {
      var result = c.call(itr.value(),itr.m_key);
      if (result != null)
      {
        return result;
      }
      ;
      itr = fan.sys.ObjUtil.coerce(itr.m_next,fan.std.MapEntry.$type);
    }
    ;
  }
  ;
  return null;
}
fan.std.HashMap.prototype.isRO = function()
{
  return this.m_readOnly;
}
fan.std.HashMap.prototype.ro = function()
{
  if (this.isRO())
  {
    return this;
  }
  ;
  var nmap = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(this.dup(),fan.std.HashMap.$type),fan.std.Type.find("std::HashMap<std::HashMap^K,std::HashMap^V>"));
  nmap.m_readOnly = true;
  return fan.sys.ObjUtil.coerce(nmap,fan.std.HashMap.$type);
}
fan.std.HashMap.prototype.rw = function()
{
  if (this.isRW())
  {
    return this;
  }
  ;
  var nmap = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(this.dup(),fan.std.HashMap.$type),fan.std.Type.find("std::HashMap<std::HashMap^K,std::HashMap^V>"));
  nmap.m_readOnly = false;
  return fan.sys.ObjUtil.coerce(nmap,fan.std.HashMap.$type);
}
fan.std.HashMap.prototype.isImmutable = function()
{
  return this.m_immutable;
}
fan.std.HashMap.prototype.toImmutable = function()
{
  var $this = this;
  if (this.m_immutable)
  {
    return fan.sys.ObjUtil.coerce(this,fan.std.Type.find("std::Map<std::HashMap^K,std::HashMap^V>"));
  }
  ;
  var nmap = fan.sys.ObjUtil.coerce(this.createEmpty(),fan.std.HashMap.$type);
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      nmap.set((function($this) { var $_u7 = k; if ($_u7 == null) return null; return fan.sys.ObjUtil.toImmutable($_u7); })($this),(function($this) { var $_u8 = v; if ($_u8 == null) return null; return fan.sys.ObjUtil.toImmutable($_u8); })($this));
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::HashMap^V,std::HashMap^K>")));
  nmap.defV$(this.defV());
  nmap.m_readOnly = true;
  nmap.m_immutable = true;
  return fan.sys.ObjUtil.coerce(nmap,fan.std.Type.find("std::Map<std::HashMap^K,std::HashMap^V>"));
}
fan.std.HashMap.prototype.m_array = null;
fan.std.HashMap.prototype.m_readOnly = false;
fan.std.HashMap.prototype.m_immutable = false;
fan.std.HashMap.prototype.m_loadFactor = fan.sys.Float.make(0);
fan.std.HashMap.prototype.m_keySafe = false;
fan.std.HashMap.prototype.m_size = 0;
fan.std.OrderedMap = fan.sys.Obj.$extend(fan.std.HashMap);
fan.std.OrderedMap.prototype.$ctor = function()
{
  fan.std.HashMap.prototype.$ctor.call(this);
  var $this = this;
  this.m_list = fan.std.LinkedList.make();
  return;
}
fan.std.OrderedMap.prototype.$typeof = function() { return fan.std.OrderedMap.$type; }
fan.std.OrderedMap.prototype.list = function()
{
  return this.m_list;
}
fan.std.OrderedMap.prototype.list$ = function(it)
{
  this.m_list = it;
  return;
}
fan.std.OrderedMap.make = function(capacity) {
  var self = new fan.std.OrderedMap();
  fan.std.OrderedMap.make$(self,capacity);
  return self;
  }
fan.std.OrderedMap.make$ = function(self,capacity)
{
  if (capacity === undefined) capacity = 16;
  fan.std.HashMap.make$(self,capacity);
  ;
  return;
}
fan.std.OrderedMap.prototype.createEmpty = function()
{
  return fan.sys.ObjUtil.coerce(fan.std.OrderedMap.make(),fan.std.OrderedMap.$type);
}
fan.std.OrderedMap.prototype.set = function(key,val)
{
  this.modify();
  var entry = fan.sys.ObjUtil.coerce(fan.std.HashMap.prototype.rawGet.call(this,key),fan.std.MapEntry.$type.toNullable());
  if (entry != null)
  {
    entry.m_val = val;
    return this;
  }
  ;
  entry = fan.std.MapEntry.make();
  entry.m_val = val;
  entry.m_key = key;
  fan.std.HashMap.prototype.set.call(this,key,entry);
  this.m_list.add(fan.sys.ObjUtil.coerce(entry,fan.std.LinkedElem.$type));
  return this;
}
fan.std.OrderedMap.prototype.add = function(key,val)
{
  var entry = fan.std.MapEntry.make();
  entry.m_val = val;
  entry.m_key = key;
  fan.std.HashMap.prototype.add.call(this,key,entry);
  this.m_list.add(entry);
  return this;
}
fan.std.OrderedMap.prototype.get = function(key,defValue)
{
  if (defValue === undefined) defValue = fan.std.HashMap.prototype.defV.call(this);
  var entry = fan.sys.ObjUtil.coerce(fan.std.HashMap.prototype.get.call(this,key,null),fan.std.MapEntry.$type.toNullable());
  if (entry == null)
  {
    return defValue;
  }
  ;
  return entry.m_val;
}
fan.std.OrderedMap.prototype.each = function(c)
{
  var itr = this.m_list.first();
  var end = this.m_list.end();
  while (itr !== end)
  {
    var entry = fan.sys.ObjUtil.coerce(itr,fan.std.MapEntry.$type);
    c.call(entry.m_val,entry.m_key);
    itr = fan.sys.ObjUtil.coerce(itr.m_next,fan.std.LinkedElem.$type);
  }
  ;
  return;
}
fan.std.OrderedMap.prototype.eachWhile = function(c)
{
  var itr = this.m_list.first();
  var end = this.m_list.end();
  while (itr !== end)
  {
    var entry = fan.sys.ObjUtil.coerce(itr,fan.std.MapEntry.$type);
    var result = c.call(entry.m_val,entry.m_key);
    if (result != null)
    {
      return result;
    }
    ;
    itr = fan.sys.ObjUtil.coerce(itr.m_next,fan.std.LinkedElem.$type);
  }
  ;
  return null;
}
fan.std.OrderedMap.prototype.keys = function()
{
  var list = fan.sys.List.make(this.size());
  var itr = this.m_list.first();
  var end = this.m_list.end();
  while (itr !== end)
  {
    var entry = fan.sys.ObjUtil.coerce(itr,fan.std.MapEntry.$type);
    list.add(entry.m_key);
    itr = fan.sys.ObjUtil.coerce(itr.m_next,fan.std.LinkedElem.$type);
  }
  ;
  return fan.sys.ObjUtil.coerce(list,fan.std.Type.find("sys::List<std::OrderedMap^K>"));
}
fan.std.OrderedMap.prototype.vals = function()
{
  var list = fan.sys.List.make(this.size());
  var itr = this.m_list.first();
  var end = this.m_list.end();
  while (itr !== end)
  {
    var entry = fan.sys.ObjUtil.coerce(itr,fan.std.MapEntry.$type);
    list.add(entry.m_val);
    itr = fan.sys.ObjUtil.coerce(itr.m_next,fan.std.LinkedElem.$type);
  }
  ;
  return fan.sys.ObjUtil.coerce(list,fan.std.Type.find("sys::List<std::OrderedMap^V>"));
}
fan.std.OrderedMap.prototype.remove = function(key)
{
  var entry = fan.sys.ObjUtil.coerce(fan.std.HashMap.prototype.remove.call(this,key),fan.std.MapEntry.$type.toNullable());
  if (entry != null)
  {
    this.m_list.remove(fan.sys.ObjUtil.coerce(entry,fan.std.LinkedElem.$type));
    return entry.m_val;
  }
  ;
  return null;
}
fan.std.OrderedMap.prototype.clear = function()
{
  fan.std.HashMap.prototype.clear.call(this);
  this.m_list.clear();
  return this;
}
fan.std.OrderedMap.prototype.m_list = null;
fan.std.Set = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Set.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_map = fan.std.Map.fromLiteral([],[],fan.std.Type.find("std::Set^T"),fan.std.Type.find("sys::Obj?"));
  return;
}
fan.std.Set.prototype.$typeof = function() { return fan.std.Set.$type; }
fan.std.Set.prototype.map = function()
{
  return this.m_map;
}
fan.std.Set.prototype.map$ = function(it)
{
  this.m_map = it;
  return;
}
fan.std.Set.make = function() {
  var self = new fan.std.Set();
  fan.std.Set.make$(self);
  return self;
  }
fan.std.Set.make$ = function(self)
{
  ;
  return;
}
fan.std.Set.prototype.add = function(k)
{
  this.m_map.set(k,null);
  return;
}
fan.std.Set.prototype.contains = function(k)
{
  return this.m_map.containsKey(k);
}
fan.std.Set.prototype.size = function()
{
  return this.m_map.size();
}
fan.std.Set.prototype.each = function(f)
{
  var $this = this;
  this.m_map.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      f.call(k);
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,sys::Obj?,std::Set^T>")));
  return;
}
fan.std.Set.prototype.m_map = null;
fan.std.AvlNode = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.AvlNode.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.AvlNode.prototype.$typeof = function() { return fan.std.AvlNode.$type; }
fan.std.AvlNode.prototype.key = function()
{
  return this.m_key;
}
fan.std.AvlNode.prototype.key$ = function(it)
{
  this.m_key = it;
  return;
}
fan.std.AvlNode.prototype.val = function()
{
  return this.m_val;
}
fan.std.AvlNode.prototype.val$ = function(it)
{
  this.m_val = it;
  return;
}
fan.std.AvlNode.prototype.height = function()
{
  return this.m_height;
}
fan.std.AvlNode.prototype.height$ = function(it)
{
  this.m_height = it;
  return;
}
fan.std.AvlNode.prototype.right = function()
{
  return this.m_right;
}
fan.std.AvlNode.prototype.right$ = function(it)
{
  this.m_right = it;
  return;
}
fan.std.AvlNode.prototype.left = function()
{
  return this.m_left;
}
fan.std.AvlNode.prototype.left$ = function(it)
{
  this.m_left = it;
  return;
}
fan.std.AvlNode.make = function(key,val) {
  var self = new fan.std.AvlNode();
  fan.std.AvlNode.make$(self,key,val);
  return self;
  }
fan.std.AvlNode.make$ = function(self,key,val)
{
  self.m_height = 0;
  self.m_right = null;
  self.m_left = null;
  self.m_key = key;
  self.m_val = val;
  return;
}
fan.std.AvlNode.prototype.resetHeight = function()
{
  this.m_height = fan.sys.Int.plus(fan.sys.Int.max(fan.std.TreeMap.getHeight(this.m_left),fan.std.TreeMap.getHeight(this.m_right)),1);
  return;
}
fan.std.AvlNode.prototype.isBalanced = function()
{
  return fan.sys.ObjUtil.compareLT(fan.sys.Int.abs(fan.sys.Int.minus(fan.std.TreeMap.getHeight(this.m_left),fan.std.TreeMap.getHeight(this.m_right))),2);
}
fan.std.AvlNode.prototype.m_key = null;
fan.std.AvlNode.prototype.m_val = null;
fan.std.AvlNode.prototype.m_height = 0;
fan.std.AvlNode.prototype.m_right = null;
fan.std.AvlNode.prototype.m_left = null;
fan.std.TreeMap = fan.sys.Obj.$extend(fan.std.Map);
fan.std.TreeMap.prototype.$ctor = function()
{
  fan.std.Map.prototype.$ctor.call(this);
  var $this = this;
  this.m_root = null;
  this.m_keySafe = true;
  return;
}
fan.std.TreeMap.prototype.$typeof = function() { return fan.std.TreeMap.$type; }
fan.std.TreeMap.prototype.root = function()
{
  return this.m_root;
}
fan.std.TreeMap.prototype.root$ = function(it)
{
  this.m_root = it;
  return;
}
fan.std.TreeMap.prototype.readOnly = function()
{
  return this.m_readOnly;
}
fan.std.TreeMap.prototype.readOnly$ = function(it)
{
  this.m_readOnly = it;
  return;
}
fan.std.TreeMap.prototype.immutable = function()
{
  return this.m_immutable;
}
fan.std.TreeMap.prototype.immutable$ = function(it)
{
  this.m_immutable = it;
  return;
}
fan.std.TreeMap.prototype.keySafe = function()
{
  return this.m_keySafe;
}
fan.std.TreeMap.prototype.keySafe$ = function(it)
{
  this.m_keySafe = it;
  return;
}
fan.std.TreeMap.prototype.modify = function()
{
  if (this.m_readOnly)
  {
    throw fan.sys.ReadonlyErr.make();
  }
  ;
  return;
}
fan.std.TreeMap.make = function() {
  var self = new fan.std.TreeMap();
  fan.std.TreeMap.make$(self);
  return self;
  }
fan.std.TreeMap.make$ = function(self)
{
  fan.std.Map.privateMake$(self);
  ;
  return;
}
fan.std.TreeMap.prototype.size = function()
{
  return this.m_size;
}
fan.std.TreeMap.prototype.size$ = function(it)
{
  this.m_size = it;
  return;
}
fan.std.TreeMap.getHeight = function(N)
{
  if (N == null)
  {
    return -1;
  }
  ;
  return N.m_height;
}
fan.std.TreeMap.max = function(a,b)
{
  return fan.sys.Int.max(a,b);
}
fan.std.TreeMap.prototype.LL = function(K2)
{
  var K1 = K2.m_left;
  K2.m_left = K1.m_right;
  K1.m_right = K2;
  K2.resetHeight();
  K1.resetHeight();
  return fan.sys.ObjUtil.coerce(K1,fan.std.AvlNode.$type);
}
fan.std.TreeMap.prototype.RR = function(K1)
{
  var K2 = K1.m_right;
  K1.m_right = K2.m_left;
  K2.m_left = K1;
  K1.resetHeight();
  K2.resetHeight();
  return fan.sys.ObjUtil.coerce(K2,fan.std.AvlNode.$type);
}
fan.std.TreeMap.prototype.LR = function(K3)
{
  K3.m_left = this.RR(fan.sys.ObjUtil.coerce(K3.m_left,fan.std.AvlNode.$type));
  return this.LL(K3);
}
fan.std.TreeMap.prototype.RL = function(K1)
{
  K1.m_right = this.LL(fan.sys.ObjUtil.coerce(K1.m_right,fan.std.AvlNode.$type));
  return this.RR(K1);
}
fan.std.TreeMap.prototype.insertAt = function(k,v,T,overwrite)
{
  if (T == null)
  {
    T = fan.std.AvlNode.make(k,v);
    this.size$(fan.sys.Int.increment(this.size()));
  }
  else
  {
    if (fan.sys.ObjUtil.compareLT(k,T.m_key))
    {
      T.m_left = this.insertAt(k,v,T.m_left,overwrite);
      if (!T.isBalanced())
      {
        if (fan.sys.ObjUtil.compareLT(k,T.m_left.m_key))
        {
          T = this.LL(fan.sys.ObjUtil.coerce(T,fan.std.AvlNode.$type));
        }
        else
        {
          T = this.LR(fan.sys.ObjUtil.coerce(T,fan.std.AvlNode.$type));
        }
        ;
      }
      ;
    }
    else
    {
      if (fan.sys.ObjUtil.compareGT(k,T.m_key))
      {
        T.m_right = this.insertAt(k,v,T.m_right,overwrite);
        if (!T.isBalanced())
        {
          if (fan.sys.ObjUtil.compareGT(k,T.m_right.m_key))
          {
            T = this.RR(fan.sys.ObjUtil.coerce(T,fan.std.AvlNode.$type));
          }
          else
          {
            T = this.RL(fan.sys.ObjUtil.coerce(T,fan.std.AvlNode.$type));
          }
          ;
        }
        ;
      }
      else
      {
        if (overwrite)
        {
          T.m_key = k;
          T.m_val = v;
        }
        else
        {
          throw fan.sys.ArgErr.make(fan.sys.Str.plus(fan.sys.Str.plus("",v)," already exits"));
        }
        ;
      }
      ;
    }
    ;
  }
  ;
  T.resetHeight();
  return fan.sys.ObjUtil.coerce(T,fan.std.AvlNode.$type);
}
fan.std.TreeMap.prototype.set = function(key,val)
{
  this.modify();
  if ((this.m_keySafe && !fan.sys.ObjUtil.isImmutable(key)))
  {
    throw fan.sys.NotImmutableErr.make(fan.sys.Str.plus("key is not immutable: ",fan.std.Type.$typeof(fan.sys.ObjUtil.coerce(key,fan.sys.Obj.$type))));
  }
  ;
  this.m_root = this.insertAt(key,val,this.m_root,true);
  return this;
}
fan.std.TreeMap.prototype.deleteAt = function(k,T,old)
{
  if (T == null)
  {
    return null;
  }
  ;
  if (fan.sys.ObjUtil.compareLT(k,T.m_key))
  {
    T.m_left = this.deleteAt(k,T.m_left,old);
    if (!T.isBalanced())
    {
      if (fan.sys.ObjUtil.compareGT(fan.std.TreeMap.getHeight(T.m_right.m_left),fan.std.TreeMap.getHeight(T.m_right.m_right)))
      {
        T = this.RL(fan.sys.ObjUtil.coerce(T,fan.std.AvlNode.$type));
      }
      else
      {
        T = this.RR(fan.sys.ObjUtil.coerce(T,fan.std.AvlNode.$type));
      }
      ;
    }
    ;
  }
  else
  {
    if (fan.sys.ObjUtil.compareGT(k,T.m_key))
    {
      T.m_right = this.deleteAt(k,T.m_right,old);
      if (!T.isBalanced())
      {
        if (fan.sys.ObjUtil.compareGT(fan.std.TreeMap.getHeight(T.m_left.m_right),fan.std.TreeMap.getHeight(T.m_left.m_left)))
        {
          T = this.LR(fan.sys.ObjUtil.coerce(T,fan.std.AvlNode.$type));
        }
        else
        {
          T = this.LL(fan.sys.ObjUtil.coerce(T,fan.std.AvlNode.$type));
        }
        ;
      }
      ;
    }
    else
    {
      if (fan.sys.ObjUtil.equals(k,T.m_key))
      {
        if ((T.m_left != null && T.m_right != null))
        {
          var temp = T.m_right;
          while (temp.m_left != null)
          {
            temp = temp.m_left;
          }
          ;
          if (old != null)
          {
            old.m_val = T.m_val;
            old.m_key = T.m_key;
          }
          ;
          T.m_key = temp.m_key;
          T.m_val = temp.m_val;
          T.m_right = this.deleteAt(temp.m_key,T.m_right,null);
          if (!T.isBalanced())
          {
            if (fan.sys.ObjUtil.compareGT(fan.std.TreeMap.getHeight(T.m_left.m_right),fan.std.TreeMap.getHeight(T.m_left.m_left)))
            {
              T = this.LR(fan.sys.ObjUtil.coerce(T,fan.std.AvlNode.$type));
            }
            else
            {
              T = this.LL(fan.sys.ObjUtil.coerce(T,fan.std.AvlNode.$type));
            }
            ;
          }
          ;
        }
        else
        {
          if ((T.m_left != null && T.m_right == null))
          {
            T = T.m_left;
          }
          else
          {
            if ((T.m_left == null && T.m_right != null))
            {
              T = T.m_right;
            }
            else
            {
              T = null;
            }
            ;
          }
          ;
        }
        ;
      }
      ;
    }
    ;
  }
  ;
  if (T != null)
  {
    T.resetHeight();
  }
  ;
  return T;
}
fan.std.TreeMap.prototype.remove = function(e)
{
  this.modify();
  var old = fan.std.AvlNode.make(null,null);
  var root = this.deleteAt(e,this.m_root,old);
  if (fan.sys.ObjUtil.equals(root.m_key,e))
  {
    (function($this) { var $_u9 = $this.size(); $this.size$(fan.sys.Int.decrement($this.size())); return $_u9; })(this);
  }
  ;
  return old.m_val;
}
fan.std.TreeMap.prototype.searchAt = function(x,T)
{
  if (T == null)
  {
    return null;
  }
  ;
  if (fan.sys.ObjUtil.equals(T.m_key,x))
  {
    return T;
  }
  ;
  if (fan.sys.ObjUtil.compareLT(x,T.m_key))
  {
    return this.searchAt(x,T.m_left);
  }
  ;
  if (fan.sys.ObjUtil.compareGT(x,T.m_key))
  {
    return this.searchAt(x,T.m_right);
  }
  ;
  return null;
}
fan.std.TreeMap.prototype.get = function(k,defValue)
{
  if (defValue === undefined) defValue = fan.std.Map.prototype.defV.call(this);
  var node = this.searchAt(k,this.m_root);
  if (node == null)
  {
    return defValue;
  }
  ;
  return node.m_val;
}
fan.std.TreeMap.prototype.containsKey = function(k)
{
  var node = this.searchAt(k,this.m_root);
  return node != null;
}
fan.std.TreeMap.prototype.add = function(key,val)
{
  this.modify();
  if ((this.m_keySafe && !fan.sys.ObjUtil.isImmutable(key)))
  {
    throw fan.sys.NotImmutableErr.make(fan.sys.Str.plus("key is not immutable: ",fan.std.Type.$typeof(fan.sys.ObjUtil.coerce(key,fan.sys.Obj.$type))));
  }
  ;
  this.m_root = this.insertAt(key,val,this.m_root,false);
  return this;
}
fan.std.TreeMap.prototype.travel = function(f,T)
{
  if (T == null)
  {
    return;
  }
  ;
  this.travel(f,T.m_left);
  f.call(T.m_val,T.m_key);
  this.travel(f,T.m_right);
  return;
}
fan.std.TreeMap.prototype.each = function(f)
{
  this.travel(f,this.m_root);
  return;
}
fan.std.TreeMap.prototype.clear = function()
{
  this.modify();
  this.size$(0);
  this.m_root = null;
  return this;
}
fan.std.TreeMap.prototype.travelWhile = function(f,T)
{
  if (T == null)
  {
    return null;
  }
  ;
  var res = this.travelWhile(f,T.m_left);
  if (res != null)
  {
    return res;
  }
  ;
  res = f.call(T.m_val,T.m_key);
  if (res != null)
  {
    return res;
  }
  ;
  res = this.travelWhile(f,T.m_right);
  return res;
}
fan.std.TreeMap.prototype.eachWhile = function(c)
{
  return this.travelWhile(c,this.m_root);
}
fan.std.TreeMap.prototype.keys = function()
{
  var $this = this;
  var list = fan.sys.List.make(this.size());
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      list.add(k);
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::TreeMap^V,std::TreeMap^K>")));
  return fan.sys.ObjUtil.coerce(list,fan.std.Type.find("sys::List<std::TreeMap^K>"));
}
fan.std.TreeMap.prototype.vals = function()
{
  var $this = this;
  var list = fan.sys.List.make(this.size());
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      list.add(v);
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::TreeMap^V,std::TreeMap^K>")));
  return fan.sys.ObjUtil.coerce(list,fan.std.Type.find("sys::List<std::TreeMap^V>"));
}
fan.std.TreeMap.prototype.createEmpty = function()
{
  return fan.sys.ObjUtil.coerce(fan.std.TreeMap.make(),fan.std.TreeMap.$type);
}
fan.std.TreeMap.prototype.isRO = function()
{
  return this.m_readOnly;
}
fan.std.TreeMap.prototype.ro = function()
{
  if (this.isRO())
  {
    return this;
  }
  ;
  var nmap = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(this.dup(),fan.std.TreeMap.$type),fan.std.Type.find("std::TreeMap<std::TreeMap^K,std::TreeMap^V>"));
  nmap.m_readOnly = true;
  return fan.sys.ObjUtil.coerce(nmap,fan.std.TreeMap.$type);
}
fan.std.TreeMap.prototype.rw = function()
{
  if (this.isRW())
  {
    return this;
  }
  ;
  var nmap = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(this.dup(),fan.std.TreeMap.$type),fan.std.Type.find("std::TreeMap<std::TreeMap^K,std::TreeMap^V>"));
  nmap.m_readOnly = false;
  return fan.sys.ObjUtil.coerce(nmap,fan.std.TreeMap.$type);
}
fan.std.TreeMap.prototype.isImmutable = function()
{
  return this.m_immutable;
}
fan.std.TreeMap.prototype.toImmutable = function()
{
  var $this = this;
  if (this.m_immutable)
  {
    return fan.sys.ObjUtil.coerce(this,fan.std.Type.find("std::Map<std::TreeMap^K,std::TreeMap^V>"));
  }
  ;
  var nmap = fan.sys.ObjUtil.coerce(this.createEmpty(),fan.std.TreeMap.$type);
  this.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u1,
    function(v,k)
    {
      nmap.set((function($this) { var $_u10 = k; if ($_u10 == null) return null; return fan.sys.ObjUtil.toImmutable($_u10); })($this),(function($this) { var $_u11 = v; if ($_u11 == null) return null; return fan.sys.ObjUtil.toImmutable($_u11); })($this));
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::TreeMap^V,std::TreeMap^K>")));
  nmap.defV$(this.defV());
  nmap.m_readOnly = true;
  nmap.m_immutable = true;
  return fan.sys.ObjUtil.coerce(nmap,fan.std.Type.find("std::Map<std::TreeMap^K,std::TreeMap^V>"));
}
fan.std.TreeMap.prototype.m_root = null;
fan.std.TreeMap.prototype.m_readOnly = false;
fan.std.TreeMap.prototype.m_immutable = false;
fan.std.TreeMap.prototype.m_keySafe = false;
fan.std.TreeMap.prototype.m_size = 0;
fan.std.LinkedElem = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.LinkedElem.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.LinkedElem.prototype.$typeof = function() { return fan.std.LinkedElem.$type; }
fan.std.LinkedElem.prototype.next = function()
{
  return this.m_next;
}
fan.std.LinkedElem.prototype.next$ = function(it)
{
  this.m_next = it;
  return;
}
fan.std.LinkedElem.prototype.previous = function()
{
  return this.m_previous;
}
fan.std.LinkedElem.prototype.previous$ = function(it)
{
  this.m_previous = it;
  return;
}
fan.std.LinkedElem.prototype.val = function()
{
  return this.m_val;
}
fan.std.LinkedElem.prototype.val$ = function(it)
{
  this.m_val = it;
  return;
}
fan.std.LinkedElem.make = function(v) {
  var self = new fan.std.LinkedElem();
  fan.std.LinkedElem.make$(self,v);
  return self;
  }
fan.std.LinkedElem.make$ = function(self,v)
{
  if (v === undefined) v = null;
  self.m_val = v;
  return;
}
fan.std.LinkedElem.prototype.remove = function()
{
  this.m_previous.m_next = this.m_next;
  this.m_next.m_previous = this.m_previous;
  this.m_next = null;
  this.m_previous = null;
  return;
}
fan.std.LinkedElem.prototype.toStr = function()
{
  return fan.sys.Str.plus("-",this.m_val);
}
fan.std.LinkedElem.prototype.m_next = null;
fan.std.LinkedElem.prototype.m_previous = null;
fan.std.LinkedElem.prototype.m_val = null;
fan.std.LinkedList = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.LinkedList.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_head = fan.std.LinkedElem.make("LinkedList.head");
  return;
}
fan.std.LinkedList.prototype.$typeof = function() { return fan.std.LinkedList.$type; }
fan.std.LinkedList.prototype.head = function()
{
  return this.m_head;
}
fan.std.LinkedList.prototype.head$ = function(it)
{
  this.m_head = it;
  return;
}
fan.std.LinkedList.make = function() {
  var self = new fan.std.LinkedList();
  fan.std.LinkedList.make$(self);
  return self;
  }
fan.std.LinkedList.make$ = function(self)
{
  ;
  self.m_head.m_previous = self.m_head;
  self.m_head.m_next = self.m_head;
  return;
}
fan.std.LinkedList.prototype.clear = function()
{
  this.m_head.m_previous = this.m_head;
  this.m_head.m_next = this.m_head;
  return;
}
fan.std.LinkedList.prototype.remove = function(e)
{
  if (e === this.m_head)
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("Try remove a invalide LinkedElem: ",e.m_val));
  }
  ;
  e.remove();
  return;
}
fan.std.LinkedList.prototype.first = function()
{
  return fan.sys.ObjUtil.coerce(this.m_head.m_next,fan.std.LinkedElem.$type);
}
fan.std.LinkedList.prototype.last = function()
{
  return fan.sys.ObjUtil.coerce(this.m_head.m_previous,fan.std.LinkedElem.$type);
}
fan.std.LinkedList.prototype.end = function()
{
  return this.m_head;
}
fan.std.LinkedList.prototype.add = function(e)
{
  var last = this.m_head.m_previous;
  last.m_next = e;
  e.m_previous = last;
  e.m_next = this.m_head;
  this.m_head.m_previous = e;
  return;
}
fan.std.LinkedList.prototype.insertBefore = function(e,other)
{
  if (other === undefined) other = this.first();
  e.m_next = other;
  other.m_previous = e;
  this.m_head.m_next = e;
  e.m_previous = this.m_head;
  return;
}
fan.std.LinkedList.prototype.isEmpty = function()
{
  return fan.sys.ObjUtil.equals(this.m_head.m_next,this.m_head);
}
fan.std.LinkedList.prototype.m_head = null;
fan.std.MapEntry = fan.sys.Obj.$extend(fan.std.LinkedElem);
fan.std.MapEntry.prototype.$ctor = function()
{
  fan.std.LinkedElem.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.MapEntry.prototype.$typeof = function() { return fan.std.MapEntry.$type; }
fan.std.MapEntry.prototype.key = function()
{
  return this.m_key;
}
fan.std.MapEntry.prototype.key$ = function(it)
{
  this.m_key = it;
  return;
}
fan.std.MapEntry.prototype.value = function()
{
  return fan.std.LinkedElem.prototype.val.call(this);
}
fan.std.MapEntry.prototype.value$ = function(it)
{
  fan.std.LinkedElem.prototype.val$.call(this,it);
  return;
}
fan.std.MapEntry.make = function(v) {
  var self = new fan.std.MapEntry();
  fan.std.MapEntry.make$(self,v);
  return self;
  }
fan.std.MapEntry.make$ = function(self,v)
{
  if (v === undefined) v = null;
  fan.std.LinkedElem.make$(self,v);
  return;
}
fan.std.MapEntry.prototype.m_key = null;
fan.std.MapEntry.prototype.m_value = null;
fan.std.MapEntryList = fan.sys.Obj.$extend(fan.std.LinkedList);
fan.std.MapEntryList.prototype.$ctor = function()
{
  fan.std.LinkedList.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.MapEntryList.prototype.$typeof = function() { return fan.std.MapEntryList.$type; }
fan.std.MapEntryList.make = function() {
  var self = new fan.std.MapEntryList();
  fan.std.MapEntryList.make$(self);
  return self;
  }
fan.std.MapEntryList.make$ = function(self)
{
  fan.std.LinkedList.make$(self);
  self.m_head = fan.std.MapEntry.make("MapEntryList.head");
  self.m_head.m_previous = self.m_head;
  self.m_head.m_next = self.m_head;
  return;
}
fan.std.MapEntryList.prototype.begin = function()
{
  return fan.sys.ObjUtil.coerce(this.first(),fan.std.MapEntry.$type);
}
fan.std.MapEntryList.prototype.findByKey = function(key)
{
  var entry = this.begin();
  while (fan.sys.ObjUtil.compareNE(entry,this.end()))
  {
    if (fan.sys.ObjUtil.equals(entry.m_key,key))
    {
      return entry;
    }
    ;
    entry = fan.sys.ObjUtil.coerce(entry.m_next,fan.std.MapEntry.$type);
  }
  ;
  return null;
}
fan.std.MapEntryList.prototype.removeByKey = function(key)
{
  var entry = this.findByKey(key);
  if (entry == null)
  {
    return null;
  }
  ;
  this.remove(fan.sys.ObjUtil.coerce(entry,fan.std.LinkedElem.$type));
  return entry;
}
fan.std.MapEntryList.prototype.setByKey = function(key,value)
{
  var entry = this.findByKey(key);
  if (entry == null)
  {
    entry = fan.std.MapEntry.make();
    entry.m_key = key;
    entry.value$(value);
    this.add(fan.sys.ObjUtil.coerce(entry,fan.std.LinkedElem.$type));
    return null;
  }
  ;
  entry.value$(value);
  return entry;
}
fan.std.MapEntryList.prototype.addByKey = function(key,value)
{
  var entry = this.findByKey(key);
  if (entry == null)
  {
    entry = fan.std.MapEntry.make();
    entry.m_key = key;
    entry.value$(value);
    this.add(fan.sys.ObjUtil.coerce(entry,fan.std.LinkedElem.$type));
    return;
  }
  else
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus(fan.sys.Str.plus("",key)," already exits"));
  }
  ;
}
fan.std.Tuple = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Tuple.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_immutable = false;
  return;
}
fan.std.Tuple.prototype.$typeof = function() { return fan.std.Tuple.$type; }
fan.std.Tuple.make1 = function(a) {
  var self = new fan.std.Tuple();
  fan.std.Tuple.make1$(self,a);
  return self;
  }
fan.std.Tuple.make1$ = function(self,a)
{
  ;
  self.m_first = a;
  return;
}
fan.std.Tuple.make2 = function(a,b) {
  var self = new fan.std.Tuple();
  fan.std.Tuple.make2$(self,a,b);
  return self;
  }
fan.std.Tuple.make2$ = function(self,a,b)
{
  ;
  self.m_first = a;
  self.m_second = b;
  return;
}
fan.std.Tuple.make3 = function(a,b,c) {
  var self = new fan.std.Tuple();
  fan.std.Tuple.make3$(self,a,b,c);
  return self;
  }
fan.std.Tuple.make3$ = function(self,a,b,c)
{
  ;
  self.m_first = a;
  self.m_second = b;
  self.m_third = c;
  return;
}
fan.std.Tuple.makeConst = function(a,b,c) {
  var self = new fan.std.Tuple();
  fan.std.Tuple.makeConst$(self,a,b,c);
  return self;
  }
fan.std.Tuple.makeConst$ = function(self,a,b,c)
{
  ;
  self.m_first = (function($this) { var $_u12 = a; if ($_u12 == null) return null; return fan.sys.ObjUtil.toImmutable($_u12); })(self);
  self.m_second = (function($this) { var $_u13 = b; if ($_u13 == null) return null; return fan.sys.ObjUtil.toImmutable($_u13); })(self);
  self.m_third = (function($this) { var $_u14 = c; if ($_u14 == null) return null; return fan.sys.ObjUtil.toImmutable($_u14); })(self);
  self.m_immutable = true;
  return;
}
fan.std.Tuple.prototype.isImmutable = function()
{
  return this.m_immutable;
}
fan.std.Tuple.prototype.toImmutable = function()
{
  if (this.m_immutable)
  {
    return fan.sys.ObjUtil.coerce(this,fan.std.Type.find("std::Tuple<std::Tuple^A,std::Tuple^B,std::Tuple^C>"));
  }
  ;
  var t = fan.std.Tuple.makeConst(this.m_first,this.m_second,this.m_third);
  return t;
}
fan.std.Tuple.prototype.m_immutable = false;
fan.std.Tuple.prototype.m_first = null;
fan.std.Tuple.prototype.m_second = null;
fan.std.Tuple.prototype.m_third = null;
fan.std.CIKey = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.CIKey.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.CIKey.prototype.$typeof = function() { return fan.std.CIKey.$type; }
fan.std.CIKey.make = function(key) {
  var self = new fan.std.CIKey();
  fan.std.CIKey.make$(self,key);
  return self;
  }
fan.std.CIKey.make$ = function(self,key)
{
  self.m_key = (function($this) { var $_u15 = key; if ($_u15 == null) return null; return fan.sys.ObjUtil.toImmutable($_u15); })(self);
  self.m_k = fan.sys.Str.lower(fan.sys.ObjUtil.toStr(key));
  return;
}
fan.std.CIKey.prototype.toStr = function()
{
  return fan.sys.ObjUtil.toStr(this.m_key);
}
fan.std.CIKey.prototype.hash = function()
{
  return fan.sys.Str.hash(this.m_k);
}
fan.std.CIKey.prototype.equals = function(obj)
{
  if (!fan.sys.ObjUtil.is(obj,fan.std.CIKey.$type))
  {
    return false;
  }
  ;
  return fan.sys.ObjUtil.equals(this.m_k,fan.sys.ObjUtil.coerce(obj,fan.std.CIKey.$type).m_k);
}
fan.std.CIKey.prototype.compare = function(obj)
{
  return fan.sys.ObjUtil.compare(this.m_k,fan.sys.ObjUtil.coerce(obj,fan.std.CIKey.$type).m_k);
}
fan.std.CIKey.prototype.m_k = null;
fan.std.CIKey.prototype.m_key = null;
fan.std.CaseInsensitiveMap = fan.sys.Obj.$extend(fan.std.Map);
fan.std.CaseInsensitiveMap.prototype.$ctor = function()
{
  fan.std.Map.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.CaseInsensitiveMap.prototype.$typeof = function() { return fan.std.CaseInsensitiveMap.$type; }
fan.std.CaseInsensitiveMap.make = function(capacity) {
  var self = new fan.std.CaseInsensitiveMap();
  fan.std.CaseInsensitiveMap.make$(self,capacity);
  return self;
  }
fan.std.CaseInsensitiveMap.make$ = function(self,capacity)
{
  if (capacity === undefined) capacity = 16;
  fan.std.Map.privateMake$(self);
  self.m__map = fan.std.HashMap.make(capacity);
  return;
}
fan.std.CaseInsensitiveMap.privateMake = function(m) {
  var self = new fan.std.CaseInsensitiveMap();
  fan.std.CaseInsensitiveMap.privateMake$(self,m);
  return self;
  }
fan.std.CaseInsensitiveMap.privateMake$ = function(self,m)
{
  fan.std.Map.privateMake$(self);
  self.m__map = m;
  return;
}
fan.std.CaseInsensitiveMap.prototype.createEmpty = function()
{
  return fan.sys.ObjUtil.coerce(fan.std.CaseInsensitiveMap.make(),fan.std.CaseInsensitiveMap.$type);
}
fan.std.CaseInsensitiveMap.prototype.size = function()
{
  return this.m__map.size();
}
fan.std.CaseInsensitiveMap.prototype.set = function(key,val)
{
  if (!fan.sys.ObjUtil.is(key,fan.sys.Str.$type))
  {
    throw fan.sys.UnsupportedErr.make(fan.sys.Str.plus("CI Map not keyed by Str: ",fan.std.Type.$typeof(fan.sys.ObjUtil.coerce(key,fan.sys.Obj.$type))));
  }
  ;
  var k = fan.std.CIKey.make(fan.sys.ObjUtil.coerce(key,fan.sys.Obj.$type));
  this.m__map.set(k,val);
  return this;
}
fan.std.CaseInsensitiveMap.prototype.add = function(key,val)
{
  if (!fan.sys.ObjUtil.is(key,fan.sys.Str.$type))
  {
    throw fan.sys.UnsupportedErr.make(fan.sys.Str.plus("CI Map not keyed by Str: ",fan.std.Type.$typeof(fan.sys.ObjUtil.coerce(key,fan.sys.Obj.$type))));
  }
  ;
  var k = fan.std.CIKey.make(fan.sys.ObjUtil.coerce(key,fan.sys.Obj.$type));
  this.m__map.add(k,val);
  return this;
}
fan.std.CaseInsensitiveMap.prototype.get = function(key,defValue)
{
  if (defValue === undefined) defValue = fan.std.Map.prototype.defV.call(this);
  if (!fan.sys.ObjUtil.is(key,fan.sys.Str.$type))
  {
    throw fan.sys.UnsupportedErr.make(fan.sys.Str.plus("CI Map not keyed by Str: ",fan.std.Type.$typeof(fan.sys.ObjUtil.coerce(key,fan.sys.Obj.$type))));
  }
  ;
  var k = fan.std.CIKey.make(fan.sys.ObjUtil.coerce(key,fan.sys.Obj.$type));
  return this.m__map.get(k,defValue);
}
fan.std.CaseInsensitiveMap.prototype.containsKey = function(key)
{
  var k = fan.std.CIKey.make(fan.sys.ObjUtil.coerce(key,fan.sys.Obj.$type));
  return this.m__map.containsKey(k);
}
fan.std.CaseInsensitiveMap.prototype.remove = function(key)
{
  var k = fan.std.CIKey.make(fan.sys.ObjUtil.coerce(key,fan.sys.Obj.$type));
  return this.m__map.remove(k);
}
fan.std.CaseInsensitiveMap.prototype.each = function(c)
{
  var $this = this;
  this.m__map.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u16,
    function(v,k)
    {
      c.call(v,k.m_key);
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,std::CaseInsensitiveMap^V,std::CIKey>")));
  return;
}
fan.std.CaseInsensitiveMap.prototype.eachWhile = function(c)
{
  var $this = this;
  return this.m__map.eachWhile(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u17,
    function(v,k)
    {
      return c.call(v,k.m_key);
    }),fan.std.Type.find("sys::Func<sys::Obj?,std::CaseInsensitiveMap^V,std::CIKey>")));
}
fan.std.CaseInsensitiveMap.prototype.keys = function()
{
  var $this = this;
  return fan.sys.ObjUtil.coerce(this.m__map.keys().map(fan.sys.Func.make$closure(
    fan.std.$clos$_u18,
    function(it,ignoreparam$1)
    {
      return it.m_key;
    })),fan.std.Type.find("sys::List<std::CaseInsensitiveMap^K>"));
}
fan.std.CaseInsensitiveMap.prototype.clear = function()
{
  this.m__map.clear();
  return this;
}
fan.std.CaseInsensitiveMap.prototype.vals = function()
{
  return this.m__map.vals();
}
fan.std.CaseInsensitiveMap.prototype.isRO = function()
{
  return this.m__map.isRO();
}
fan.std.CaseInsensitiveMap.prototype.modify = function()
{
  this.m__map.modify();
  return;
}
fan.std.CaseInsensitiveMap.prototype.ro = function()
{
  if (this.isRO())
  {
    return this;
  }
  ;
  return fan.std.CaseInsensitiveMap.privateMake(fan.sys.ObjUtil.coerce(this.m__map.ro(),fan.std.Type.find("std::HashMap<std::CIKey,std::CaseInsensitiveMap^V>")));
}
fan.std.CaseInsensitiveMap.prototype.rw = function()
{
  if (this.isRW())
  {
    return this;
  }
  ;
  return fan.std.CaseInsensitiveMap.privateMake(fan.sys.ObjUtil.coerce(this.m__map.rw(),fan.std.Type.find("std::HashMap<std::CIKey,std::CaseInsensitiveMap^V>")));
}
fan.std.CaseInsensitiveMap.prototype.isImmutable = function()
{
  return this.m__map.isImmutable();
}
fan.std.CaseInsensitiveMap.prototype.toImmutable = function()
{
  if (this.isImmutable())
  {
    return fan.sys.ObjUtil.coerce(this,fan.std.Type.find("std::Map<std::CaseInsensitiveMap^K,std::CaseInsensitiveMap^V>"));
  }
  ;
  return fan.sys.ObjUtil.coerce(fan.std.CaseInsensitiveMap.privateMake(fan.sys.ObjUtil.coerce(this.m__map.toImmutable(),fan.std.Type.find("std::HashMap<std::CIKey,std::CaseInsensitiveMap^V>"))),fan.std.Type.find("std::Map<std::CaseInsensitiveMap^K,std::CaseInsensitiveMap^V>"));
}
fan.std.CaseInsensitiveMap.prototype.m__map = null;
fan.std.ConcurrentMap = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.ConcurrentMap.make = function(capacity)
{
  var self = new fan.std.ConcurrentMap();
  self.m_map = fan.std.Map.make(fan.sys.Obj.$type, fan.sys.Obj.$type)
  return self;
}
fan.std.ConcurrentMap.prototype.$ctor = function() {}
fan.std.ConcurrentMap.prototype.$typeof = function() { return fan.std.ConcurrentMap.$type; }
fan.std.ConcurrentMap.prototype.isEmpty = function() { return this.m_map.isEmpty(); }
fan.std.ConcurrentMap.prototype.size = function() { return this.m_map.size(); }
fan.std.ConcurrentMap.prototype.get = function(key) { return this.m_map.get(key); }
fan.std.ConcurrentMap.prototype.set = function(key, val)
{
  this.m_map.set(key, this.$checkImmutable(val));
}
fan.std.ConcurrentMap.prototype.add = function(key, val)
{
  if (this.containsKey(key)) throw fan.sys.Err("Key already mapped: " + key);
  this.m_map.add(key, this.$checkImmutable(val));
  console.log(this.m_map.toStr());
}
fan.std.ConcurrentMap.prototype.getOrAdd = function(key, defVal)
{
  var val = this.m_map.get(key);
  if (val == null) { this.m_map.add(key, this.$checkImmutable(val = defVal)); }
  return val;
}
fan.std.ConcurrentMap.prototype.setAll = function(m)
{
  if (m.isImmutable()) this.m_map.setAll(m);
  else
  {
    var vals = m.vals();
    for (i=0; i<vals.size(); ++i) { this.$checkImmutable(vals.get(i)); }
    this.m_map.setAll(m);
  }
  return this;
}
fan.std.ConcurrentMap.prototype.remove = function(key) { return this.m_map.remove(key); }
fan.std.ConcurrentMap.prototype.clear = function() { this.m_map.clear(); }
fan.std.ConcurrentMap.prototype.each = function(f) { this.m_map.each(f); }
fan.std.ConcurrentMap.prototype.eachWhile = function(f) { return this.m_map.eachWhile(f); }
fan.std.ConcurrentMap.prototype.containsKey = function(key) { return this.m_map.containsKey(key); }
fan.std.ConcurrentMap.prototype.keys = function(of)
{
  var array = [];
  this.m_map.$each(function(b) { array.push(b.key); });
  return fan.sys.List.make(of, array);
}
fan.std.ConcurrentMap.prototype.vals = function(of)
{
  var array = [];
  this.m_map.$each(function(b) { array.push(b.val); });
  return fan.sys.List.make(of, array);
}
fan.std.ConcurrentMap.prototype.$checkImmutable = function(val)
{
  if (fan.sys.ObjUtil.isImmutable(val)) return val;
  else throw fan.sys.NotImmutableErr.make();
}
fan.std.CacheItem = fan.sys.Obj.$extend(fan.std.LinkedElem);
fan.std.CacheItem.prototype.$ctor = function()
{
  fan.std.LinkedElem.prototype.$ctor.call(this);
  var $this = this;
  this.m_cacheCount = 0;
  return;
}
fan.std.CacheItem.prototype.$typeof = function() { return fan.std.CacheItem.$type; }
fan.std.CacheItem.prototype.key = function()
{
  return this.m_key;
}
fan.std.CacheItem.prototype.key$ = function(it)
{
  this.m_key = it;
  return;
}
fan.std.CacheItem.prototype.cacheCount = function()
{
  return this.m_cacheCount;
}
fan.std.CacheItem.prototype.cacheCount$ = function(it)
{
  this.m_cacheCount = it;
  return;
}
fan.std.CacheItem.make = function() {
  var self = new fan.std.CacheItem();
  fan.std.CacheItem.make$(self);
  return self;
  }
fan.std.CacheItem.make$ = function(self)
{
  fan.std.LinkedElem.make$(self);
  ;
  return;
}
fan.std.CacheItem.prototype.m_key = null;
fan.std.CacheItem.prototype.m_cacheCount = 0;
fan.std.Cache = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Cache.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_map = fan.std.Map.fromLiteral([],[],fan.std.Type.find("sys::Obj"),fan.std.Type.find("std::CacheItem"));
  this.m_list = fan.std.LinkedList.make();
  this.m_maxCount = 4;
  return;
}
fan.std.Cache.prototype.$typeof = function() { return fan.std.Cache.$type; }
fan.std.Cache.prototype.map = function()
{
  return this.m_map;
}
fan.std.Cache.prototype.map$ = function(it)
{
  this.m_map = it;
  return;
}
fan.std.Cache.prototype.list = function()
{
  return this.m_list;
}
fan.std.Cache.prototype.list$ = function(it)
{
  this.m_list = it;
  return;
}
fan.std.Cache.prototype.max = function()
{
  return this.m_max;
}
fan.std.Cache.prototype.max$ = function(it)
{
  this.m_max = it;
  return;
}
fan.std.Cache.prototype.onRemoveItem = function()
{
  return this.m_onRemoveItem;
}
fan.std.Cache.prototype.onRemoveItem$ = function(it)
{
  this.m_onRemoveItem = it;
  return;
}
fan.std.Cache.prototype.canRemoveItem = function()
{
  return this.m_canRemoveItem;
}
fan.std.Cache.prototype.canRemoveItem$ = function(it)
{
  this.m_canRemoveItem = it;
  return;
}
fan.std.Cache.prototype.maxCount = function()
{
  return this.m_maxCount;
}
fan.std.Cache.prototype.maxCount$ = function(it)
{
  this.m_maxCount = it;
  return;
}
fan.std.Cache.make = function(size) {
  var self = new fan.std.Cache();
  fan.std.Cache.make$(self,size);
  return self;
  }
fan.std.Cache.make$ = function(self,size)
{
  ;
  self.m_max = size;
  return;
}
fan.std.Cache.prototype.getItem = function(key)
{
  var item = this.m_map.get(key);
  if (item != null)
  {
    this.update(fan.sys.ObjUtil.coerce(item,fan.std.CacheItem.$type));
    return item;
  }
  ;
  return null;
}
fan.std.Cache.prototype.each = function(f)
{
  var item = this.m_list.first();
  while (fan.sys.ObjUtil.compareNE(item,this.m_list.end()))
  {
    if (item.m_val != null)
    {
      f.call(fan.sys.ObjUtil.coerce(item.m_val,fan.sys.Obj.$type));
    }
    ;
    item = fan.sys.ObjUtil.coerce(item.m_next,fan.std.LinkedElem.$type);
  }
  ;
  return;
}
fan.std.Cache.prototype.get = function(key)
{
  var item = this.m_map.get(key);
  if (item != null)
  {
    this.update(fan.sys.ObjUtil.coerce(item,fan.std.CacheItem.$type));
    return item.m_val;
  }
  ;
  return null;
}
fan.std.Cache.prototype.newItem = function()
{
  return fan.std.CacheItem.make();
}
fan.std.Cache.prototype.update = function(item)
{
  if (item.m_previous != null)
  {
    if (fan.sys.ObjUtil.compareLT(item.m_cacheCount,this.m_maxCount))
    {
      (function($this) { var $_u19 = item.m_cacheCount; item.m_cacheCount = fan.sys.Int.increment(item.m_cacheCount); return $_u19; })(this);
    }
    ;
    item.remove();
  }
  ;
  this.m_list.insertBefore(item);
  return;
}
fan.std.Cache.prototype.clean = function()
{
  if (fan.sys.ObjUtil.compareLE(this.m_map.size(),this.m_max))
  {
    return null;
  }
  ;
  var item = this.m_list.last();
  while (fan.sys.ObjUtil.compareNE(item,this.m_list.end()))
  {
    var pre = item.m_previous;
    var citem = fan.sys.ObjUtil.coerce(item,fan.std.CacheItem.$type);
    if (fan.sys.ObjUtil.compareGT(citem.m_cacheCount,0))
    {
      citem.m_cacheCount = fan.sys.Int.minus(citem.m_cacheCount,1);
      item.remove();
      this.m_list.insertBefore(item);
    }
    else
    {
      var canRemove = true;
      if ((this.m_canRemoveItem != null && item.m_val != null))
      {
        canRemove = this.m_canRemoveItem.call(fan.sys.ObjUtil.coerce(item.m_val,fan.sys.Obj.$type));
      }
      ;
      if (canRemove)
      {
        this.m_map.remove(fan.sys.ObjUtil.coerce(citem.m_key,fan.sys.Obj.$type));
        item.remove();
        this.onReomove(fan.sys.ObjUtil.coerce(item,fan.std.CacheItem.$type));
        citem.m_cacheCount = 0;
        return fan.sys.ObjUtil.coerce(item,fan.std.CacheItem.$type.toNullable());
      }
      ;
    }
    ;
    item = fan.sys.ObjUtil.coerce(pre,fan.std.LinkedElem.$type);
  }
  ;
  return null;
}
fan.std.Cache.prototype.clear = function()
{
  var item = this.m_list.last();
  while (fan.sys.ObjUtil.compareNE(item,this.m_list.end()))
  {
    var pre = item.m_previous;
    item.remove();
    this.onReomove(fan.sys.ObjUtil.coerce(item,fan.std.CacheItem.$type));
    item = fan.sys.ObjUtil.coerce(pre,fan.std.LinkedElem.$type);
  }
  ;
  this.m_list.clear();
  this.m_map.clear();
  return;
}
fan.std.Cache.prototype.set = function(key,val)
{
  var item = this.m_map.get(key);
  if (item == null)
  {
    item = this.clean();
    if (item == null)
    {
      item = this.newItem();
    }
    ;
  }
  ;
  item.m_val = val;
  item.m_key = key;
  this.update(fan.sys.ObjUtil.coerce(item,fan.std.CacheItem.$type));
  this.m_map.set(key,fan.sys.ObjUtil.coerce(item,fan.std.CacheItem.$type));
  return;
}
fan.std.Cache.prototype.onReomove = function(e)
{
  if ((this.m_onRemoveItem != null && e.m_val != null))
  {
    this.m_onRemoveItem.call(fan.sys.ObjUtil.coerce(e.m_val,fan.sys.Obj.$type));
  }
  ;
  return;
}
fan.std.Cache.prototype.m_map = null;
fan.std.Cache.prototype.m_list = null;
fan.std.Cache.prototype.m_max = 0;
fan.std.Cache.prototype.m_onRemoveItem = null;
fan.std.Cache.prototype.m_canRemoveItem = null;
fan.std.Cache.prototype.m_maxCount = 0;
fan.std.ListExt = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.ListExt.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.ListExt.prototype.$typeof = function() { return fan.std.ListExt.$type; }
fan.std.ListExt.unique = function(self)
{
  var $this = this;
  if (fan.sys.ObjUtil.equals(self.size(),0))
  {
    return self.dup();
  }
  ;
  var map = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.std.HashMap.make(),fan.sys.Func.make$closure(
    fan.std.$clos$_u20,
    function(it)
    {
      it.m_keySafe = false;
      return;
    })),fan.std.Type.find("std::HashMap<sys::Obj?,sys::Obj?>"));
  var res = fan.sys.List.make(fan.sys.Obj.$type.toNullable());
  self.each(fan.sys.Func.make$closure(
    fan.std.$clos$_u21,
    function(v,ignoreparam$1)
    {
      if (!map.containsKey(v))
      {
        map.set(v,fan.sys.ObjUtil.coerce(1,fan.sys.Obj.$type.toNullable()));
        res.add(v);
      }
      ;
      return;
    }));
  return res;
}
fan.std.ListExt.union = function(self,that)
{
  var $this = this;
  var map = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.std.HashMap.make(),fan.sys.Func.make$closure(
    fan.std.$clos$_u20,
    function(it)
    {
      it.m_keySafe = false;
      return;
    })),fan.std.Type.find("std::HashMap<sys::Obj?,sys::Obj?>"));
  var res = fan.sys.List.make(fan.sys.Obj.$type.toNullable());
  self.each(fan.sys.Func.make$closure(
    fan.std.$clos$_u21,
    function(v,ignoreparam$1)
    {
      if (!map.containsKey(v))
      {
        map.set(v,fan.sys.ObjUtil.coerce(1,fan.sys.Obj.$type.toNullable()));
        res.add(v);
      }
      ;
      return;
    }));
  that.each(fan.sys.Func.make$closure(
    fan.std.$clos$_u21,
    function(v,ignoreparam$1)
    {
      if (!map.containsKey(v))
      {
        map.set(v,fan.sys.ObjUtil.coerce(1,fan.sys.Obj.$type.toNullable()));
        res.add(v);
      }
      ;
      return;
    }));
  return res;
}
fan.std.ListExt.intersection = function(self,that)
{
  var $this = this;
  var map = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.std.HashMap.make(),fan.sys.Func.make$closure(
    fan.std.$clos$_u20,
    function(it)
    {
      it.m_keySafe = false;
      return;
    })),fan.std.Type.find("std::HashMap<sys::Obj?,sys::Obj?>"));
  var res = fan.sys.List.make(fan.sys.Obj.$type.toNullable());
  that.each(fan.sys.Func.make$closure(
    fan.std.$clos$_u21,
    function(v,ignoreparam$1)
    {
      map.set(v,fan.sys.ObjUtil.coerce(1,fan.sys.Obj.$type.toNullable()));
      return;
    }));
  self.each(fan.sys.Func.make$closure(
    fan.std.$clos$_u21,
    function(v,ignoreparam$1)
    {
      if (map.containsKey(v))
      {
        res.add(v);
        map.remove(v);
      }
      ;
      return;
    }));
  return res;
}
fan.std.ListExt.findType = function(self,t)
{
  var $this = this;
  var nlist = fan.sys.List.make(8);
  self.each(fan.sys.Func.make$closure(
    fan.std.$clos$_u22,
    function(obj,ignoreparam$1)
    {
      if (obj == null)
      {
        return;
      }
      ;
      var result = fan.std.Type.$typeof(fan.sys.ObjUtil.coerce(obj,fan.sys.Obj.$type)).fits(t);
      if (result)
      {
        nlist.add(obj);
      }
      ;
      return;
    }));
  return nlist;
}
fan.std.ListExt.make = function() {
  var self = new fan.std.ListExt();
  fan.std.ListExt.make$(self);
  return self;
  }
fan.std.ListExt.make$ = function(self)
{
  return;
}
fan.std.Math = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Math.prototype.$ctor = function() {}
fan.std.Math.prototype.$typeof = function() { return fan.std.Math.$type; }
fan.std.Math.pi = function() {
	return Math.PI;
}
fan.std.Math.e = function() {
	return Math.E;
}
fan.std.Math.abs = function(self) { return fan.sys.Float.make(Math.abs(self)); }
fan.std.Math.approx = function(self, that, tolerance)
{
  // need this to check +inf, -inf, and nan
  if (fan.sys.Float.compare(self, that) == 0) return true;
  var t = tolerance == null
    ? Math.min(Math.abs(self/1e6), Math.abs(that/1e6))
    : tolerance;
  return Math.abs(self - that) <= t;
}
fan.std.Math.ceil  = function(self) { return fan.sys.Float.make(Math.ceil(self)); }
fan.std.Math.exp   = function(self) { return fan.sys.Float.make(Math.exp(self)); }
fan.std.Math.floor = function(self) { return fan.sys.Float.make(Math.floor(self)); }
fan.std.Math.log   = function(self) { return fan.sys.Float.make(Math.log(self)); }
fan.std.Math.log10 = function(self) { return fan.sys.Float.make(Math.log(self) / Math.LN10); }
fan.std.Math.min   = function(self, that) { return fan.sys.Float.make(Math.min(self, that)); }
fan.std.Math.max   = function(self, that) { return fan.sys.Float.make(Math.max(self, that)); }
fan.std.Math.negate = function(self) { return fan.sys.Float.make(-self); }
fan.std.Math.pow   = function(self, exp) { return fan.sys.Float.make(Math.pow(self, exp)); }
fan.std.Math.round = function(self) { return fan.sys.Float.make(Math.round(self)); }
fan.std.Math.sqrt  = function(self) { return fan.sys.Float.make(Math.sqrt(self)); }
fan.std.Math.random = function() { return fan.sys.Float.make(Math.random()); }
fan.std.Math.plus     = function(a,b) { return fan.sys.Float.make(a+b); }
fan.std.Math.plusInt  = function(a,b) { return fan.sys.Float.make(a+b); }
fan.std.Math.plusDecimal = function(a,b) { return fan.sys.Decimal.make(a+b); }
fan.std.Math.minus        = function(a,b) { return fan.sys.Float.make(a-b); }
fan.std.Math.minusInt     = function(a,b) { return fan.sys.Float.make(a-b); }
fan.std.Math.minusDecimal = function(a,b) { return fan.sys.Decimal.make(a-b); }
fan.std.Math.mult        = function(a,b) { return fan.sys.Float.make(a*b); }
fan.std.Math.multInt     = function(a,b) { return fan.sys.Float.make(a*b); }
fan.std.Math.multDecimal = function(a,b) { return fan.sys.Decimal.make(a*b); }
fan.std.Math.div        = function(a,b) { return fan.sys.Float.make(a/b); }
fan.std.Math.divInt     = function(a,b) { return fan.sys.Float.make(a/b); }
fan.std.Math.divDecimal = function(a,b) { return fan.sys.Decimal.make(a/b); }
fan.std.Math.mod        = function(a,b) { return fan.sys.Float.make(a%b); }
fan.std.Math.modInt     = function(a,b) { return fan.sys.Float.make(a%b); }
fan.std.Math.modDecimal = function(a,b) { return fan.sys.Decimal.make(a%b); }
fan.std.Math.increment = function(self) { return fan.sys.Float.make(self+1); }
fan.std.Math.decrement = function(self) { return fan.sys.Float.make(self-1); }
fan.std.Math.acos  = function(self) { return fan.sys.Float.make(Math.acos(self)); }
fan.std.Math.asin  = function(self) { return fan.sys.Float.make(Math.asin(self)); }
fan.std.Math.atan  = function(self) { return fan.sys.Float.make(Math.atan(self)); }
fan.std.Math.atan2 = function(y, x) { return fan.sys.Float.make(Math.atan2(y, x)); }
fan.std.Math.cos   = function(self) { return fan.sys.Float.make(Math.cos(self)); }
fan.std.Math.sin   = function(self) { return fan.sys.Float.make(Math.sin(self)); }
fan.std.Math.tan   = function(self) { return fan.sys.Float.make(Math.tan(self)); }
fan.std.Math.toDegrees = function(self) { return fan.sys.Float.make(self * 180 / Math.PI); }
fan.std.Math.toRadians = function(self) { return fan.sys.Float.make(self * Math.PI / 180); }
fan.std.Math.cosh  = function(self) { return fan.sys.Float.make(0.5 * (Math.exp(self) + Math.exp(-self))); }
fan.std.Math.sinh  = function(self) { return fan.sys.Float.make(0.5 * (Math.exp(self) - Math.exp(-self))); }
fan.std.Math.tanh  = function(self) { return fan.sys.Float.make((Math.exp(2*self)-1) / (Math.exp(2*self)+1)); }
fan.std.Test = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Test.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_failVerifyCount = 0;
  this.m_verifyCount = 0;
  return;
}
fan.std.Test.prototype.$typeof = function() { return fan.std.Test.$type; }
fan.std.Test.prototype.failVerifyCount = function()
{
  return this.m_failVerifyCount;
}
fan.std.Test.prototype.failVerifyCount$ = function(it)
{
  this.m_failVerifyCount = it;
  return;
}
fan.std.Test.prototype.verifyCount = function()
{
  return this.m_verifyCount;
}
fan.std.Test.prototype.verifyCount$ = function(it)
{
  this.m_verifyCount = it;
  return;
}
fan.std.Test.make = function() {
  var self = new fan.std.Test();
  fan.std.Test.make$(self);
  return self;
  }
fan.std.Test.make$ = function(self)
{
  ;
  return;
}
fan.std.Test.prototype.curTestMethod = function()
{
  return this.m_curTestMethod;
}
fan.std.Test.prototype.curTestMethod$ = function(it)
{
  this.m_curTestMethod = it;
  return;
}
fan.std.Test.prototype.setup = function()
{
  return;
}
fan.std.Test.prototype.teardown = function()
{
  return;
}
fan.std.Test.toS = function(obj)
{
  if (obj == null)
  {
    return "null";
  }
  ;
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",obj)," ["),fan.std.Type.$typeof(fan.sys.ObjUtil.coerce(obj,fan.sys.Obj.$type))),"]");
}
fan.std.Test.prototype.verify = function(cond,msg)
{
  if (msg === undefined) msg = null;
  this.m_verifyCount = fan.sys.Int.increment(this.m_verifyCount);
  if (!cond)
  {
    this.fail(msg);
  }
  ;
  return;
}
fan.std.Test.prototype.verifyFalse = function(cond,msg)
{
  if (msg === undefined) msg = null;
  this.verify(!cond,msg);
  return;
}
fan.std.Test.prototype.verifyNull = function(a,msg)
{
  if (msg === undefined) msg = null;
  if (msg == null)
  {
    msg = fan.sys.Str.plus(fan.sys.Str.plus("",fan.std.Test.toS(a))," is not null");
  }
  ;
  this.verify(a == null,msg);
  return;
}
fan.std.Test.prototype.verifyNotNull = function(a,msg)
{
  if (msg === undefined) msg = null;
  if (msg == null)
  {
    msg = fan.sys.Str.plus(fan.sys.Str.plus("",fan.std.Test.toS(a))," is null");
  }
  ;
  this.verify(a != null,msg);
  return;
}
fan.std.Test.prototype.verifyEq = function(a,b,msg)
{
  if (msg === undefined) msg = null;
  if (msg == null)
  {
    msg = fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.std.Test.toS(a))," != "),fan.std.Test.toS(b));
  }
  ;
  this.verify(fan.sys.ObjUtil.equals(a,b),msg);
  return;
}
fan.std.Test.prototype.verifyNotEq = function(a,b,msg)
{
  if (msg === undefined) msg = null;
  if (msg == null)
  {
    msg = fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.std.Test.toS(a))," == "),fan.std.Test.toS(b));
  }
  ;
  this.verify(fan.sys.ObjUtil.compareNE(a,b),msg);
  return;
}
fan.std.Test.prototype.verifySame = function(a,b,msg)
{
  if (msg === undefined) msg = null;
  if (msg == null)
  {
    msg = fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.std.Test.toS(a))," !== "),fan.std.Test.toS(b));
  }
  ;
  this.verify(a === b,msg);
  return;
}
fan.std.Test.prototype.verifyNotSame = function(a,b,msg)
{
  if (msg === undefined) msg = null;
  if (msg == null)
  {
    msg = fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.std.Test.toS(a))," === "),fan.std.Test.toS(b));
  }
  ;
  this.verify(a !== b,msg);
  return;
}
fan.std.Test.prototype.verifyTrue = function(cond,msg)
{
  if (msg === undefined) msg = null;
  this.verify(cond,msg);
  return;
}
fan.std.Test.prototype.verifyType = function(obj,t)
{
  this.verify(fan.sys.ObjUtil.equals(fan.std.Type.$typeof(obj),t),fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.std.Type.$typeof(obj))," == "),t));
  return;
}
fan.std.Test.prototype.verifyIsType = function(obj,t)
{
  this.verify(fan.std.Type.$typeof(obj).fits(t),fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.std.Type.$typeof(obj))," not fits "),t));
  return;
}
fan.std.Test.prototype.verifyErr = function(errType,c)
{
  try
  {
    c.call(this);
    this.fail(fan.sys.Str.plus("No err thrown, expected ",errType));
  }
  catch ($_u23)
  {
    $_u23 = fan.sys.Err.make($_u23);
    if ($_u23 instanceof fan.sys.Err)
    {
      var err = $_u23;
      var err;
      if (errType != null)
      {
        if (fan.sys.ObjUtil.compareNE(fan.std.Type.$typeof(err),errType))
        {
          err.trace();
        }
        ;
        this.verifyType(err,fan.sys.ObjUtil.coerce(errType,fan.std.Type.$type));
      }
      else
      {
        this.verifyNotNull(err);
      }
      ;
    }
    else
    {
      throw $_u23;
    }
  }
  ;
  return;
}
fan.std.Test.prototype.verifyErrMsg = function(errType,errMsg,c)
{
  try
  {
    c.call(this);
    this.fail(fan.sys.Str.plus("No err thrown, expected ",errType));
  }
  catch ($_u24)
  {
    $_u24 = fan.sys.Err.make($_u24);
    if ($_u24 instanceof fan.sys.Err)
    {
      var err = $_u24;
      var err;
      this.verifyType(err,errType);
      this.verifyEq(errMsg,err.msg());
    }
    else
    {
      throw $_u24;
    }
  }
  ;
  return;
}
fan.std.Test.prototype.fail = function(msg)
{
  if (msg === undefined) msg = null;
  this.m_failVerifyCount = fan.sys.Int.increment(this.m_failVerifyCount);
  if (msg == null)
  {
    throw fan.std.TestErr.make("Test failed");
  }
  ;
  throw fan.std.TestErr.make(fan.sys.Str.plus("Test failed: ",msg));
}
fan.std.Test.prototype.tempDir = function()
{
  if (this.m_tempDir == null)
  {
    this.m_tempDir = fan.std.Env.cur().tempDir().plus(fan.std.Uri.fromStr("test/"),false);
    this.m_tempDir.$delete();
    this.m_tempDir.create();
  }
  ;
  return this.m_tempDir;
}
fan.std.Test.prototype.tempDir$ = function(it)
{
  this.m_tempDir = it;
  return;
}
fan.std.Test.main = function(args)
{
  var arg = args.get(0);
  return fan.std.TestRunner.make(arg).run();
}
fan.std.Test.static$init = function()
{
  if (fan.std.Test.static$inited) return;
  fan.std.Test.static$inited = true;
  fan.std.Test.m_isJs = fan.sys.ObjUtil.equals(fan.std.Env.cur().runtime(),"js");
  return;
}
fan.std.Test.prototype.m_failVerifyCount = 0;
fan.std.Test.prototype.m_verifyCount = 0;
fan.std.Test.prototype.m_curTestMethod = null;
fan.std.Test.prototype.m_tempDir = null;
fan.std.Test.m_isJs = false;
fan.std.TestRunner = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.TestRunner.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_method = null;
  this.m_failures = 0;
  this.m_verifyCount = 0;
  this.m_failureNames = fan.sys.List.make(fan.sys.Str.$type);
  return;
}
fan.std.TestRunner.prototype.$typeof = function() { return fan.std.TestRunner.$type; }
fan.std.TestRunner.prototype.pod = function()
{
  return this.m_pod;
}
fan.std.TestRunner.prototype.pod$ = function(it)
{
  this.m_pod = it;
  return;
}
fan.std.TestRunner.prototype.types = function()
{
  return this.m_types;
}
fan.std.TestRunner.prototype.types$ = function(it)
{
  this.m_types = it;
  return;
}
fan.std.TestRunner.prototype.method = function()
{
  return this.m_method;
}
fan.std.TestRunner.prototype.method$ = function(it)
{
  this.m_method = it;
  return;
}
fan.std.TestRunner.prototype.failures = function()
{
  return this.m_failures;
}
fan.std.TestRunner.prototype.failures$ = function(it)
{
  this.m_failures = it;
  return;
}
fan.std.TestRunner.prototype.verifyCount = function()
{
  return this.m_verifyCount;
}
fan.std.TestRunner.prototype.verifyCount$ = function(it)
{
  this.m_verifyCount = it;
  return;
}
fan.std.TestRunner.prototype.failureNames = function()
{
  return this.m_failureNames;
}
fan.std.TestRunner.prototype.failureNames$ = function(it)
{
  this.m_failureNames = it;
  return;
}
fan.std.TestRunner.make = function(arg) {
  var self = new fan.std.TestRunner();
  fan.std.TestRunner.make$(self,arg);
  return self;
  }
fan.std.TestRunner.make$ = function(self,arg)
{
  ;
  var pos = fan.sys.Str.find(arg,"::");
  if (fan.sys.ObjUtil.compareNE(pos,-1))
  {
    var podName = fan.sys.Str.getRange(arg,fan.sys.Range.make(0,pos,true));
    var typeName = fan.sys.Str.getRange(arg,fan.sys.Range.make(fan.sys.Int.plus(pos,2),-1));
    var methName = null;
    var dot = fan.sys.Str.find(typeName,".");
    if (fan.sys.ObjUtil.compareNE(dot,-1))
    {
      methName = fan.sys.Str.getRange(typeName,fan.sys.Range.make(fan.sys.Int.plus(dot,1),-1));
      typeName = fan.sys.Str.getRange(typeName,fan.sys.Range.make(0,dot,true));
    }
    ;
    self.m_pod = fan.sys.ObjUtil.coerce(fan.std.Pod.find(podName),fan.std.Pod.$type);
    var type = self.m_pod.type(typeName);
    self.m_types = fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.std.Type.$type.toNullable(), [type]),fan.std.Type.find("sys::List<std::Type>"));
    if (methName != null)
    {
      self.m_method = type.method(fan.sys.ObjUtil.coerce(methName,fan.sys.Str.$type));
    }
    ;
  }
  else
  {
    var podName = arg;
    self.m_pod = fan.sys.ObjUtil.coerce(fan.std.Pod.find(podName),fan.std.Pod.$type);
    self.m_types = self.m_pod.types();
  }
  ;
  return;
}
fan.std.TestRunner.prototype.run = function()
{
  var $this = this;
  if (this.m_method != null)
  {
    this.runTest(fan.sys.ObjUtil.coerce(this.m_types.first(),fan.std.Type.$type),fan.sys.ObjUtil.coerce(this.m_method,fan.std.Method.$type));
  }
  else
  {
    this.m_types.each(fan.sys.Func.make$closure(
      fan.std.$clos$_u25,
      function(type,ignoreparam$1)
      {
        if (!type.fits(fan.std.Test.$type))
        {
          return;
        }
        ;
        type.methods().each(fan.sys.Func.make$closure(
          fan.std.$clos$_u26,
          function(m,ignoreparam$1)
          {
            if (fan.sys.Str.startsWith(m.$name(),"test"))
            {
              $this.runTest(type,m);
            }
            ;
            return;
          }));
        return;
      }));
  }
  ;
  if (fan.sys.ObjUtil.compareGT(this.m_failureNames.size(),0))
  {
    fan.sys.ObjUtil.echo("Failed:");
    this.m_failureNames.each(fan.sys.Func.make$closure(
      fan.std.$clos$_u27,
      function(it,ignoreparam$1)
      {
        fan.sys.ObjUtil.echo(fan.sys.Str.plus("  ",it));
        return;
      }));
    fan.sys.ObjUtil.echo("");
  }
  ;
  fan.sys.ObjUtil.echo("***");
  if (fan.sys.ObjUtil.equals(this.m_failures,0))
  {
    fan.sys.ObjUtil.echo(fan.sys.Str.plus("All tests passed! totalVerifyCount:",fan.sys.ObjUtil.coerce(this.m_verifyCount,fan.sys.Obj.$type.toNullable())));
    fan.sys.ObjUtil.echo("***");
    return 0;
  }
  else
  {
    fan.sys.ObjUtil.echo(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(this.m_failures,fan.sys.Obj.$type.toNullable()))," FAILURES, totalVerifyCount:"),fan.sys.ObjUtil.coerce(this.m_verifyCount,fan.sys.Obj.$type.toNullable())));
    fan.sys.ObjUtil.echo("***");
    return -1;
  }
  ;
}
fan.std.TestRunner.prototype.runTest = function(type,meth)
{
  var obj = null;
  try
  {
    fan.sys.ObjUtil.echo(fan.sys.Str.plus(fan.sys.Str.plus("-- Run:  ",meth),"..."));
    obj = fan.sys.ObjUtil.coerce(type.make(),fan.std.Test.$type.toNullable());
    obj.m_curTestMethod = meth;
    obj.setup();
    meth.callOn(obj,null);
    this.m_verifyCount = fan.sys.Int.plus(this.m_verifyCount,obj.m_verifyCount);
    if (fan.sys.ObjUtil.compareGT(obj.m_failVerifyCount,0))
    {
      this.m_failures = fan.sys.Int.increment(this.m_failures);
      this.m_failureNames.add(meth.qname());
    }
    else
    {
      fan.sys.ObjUtil.echo(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Pass ",meth)," ["),fan.sys.ObjUtil.coerce(obj.m_verifyCount,fan.sys.Obj.$type.toNullable())),"]"));
    }
    ;
  }
  catch ($_u28)
  {
    $_u28 = fan.sys.Err.make($_u28);
    if ($_u28 instanceof fan.sys.Err)
    {
      var e = $_u28;
      var e;
      this.m_failures = fan.sys.Int.increment(this.m_failures);
      this.m_failureNames.add(meth.qname());
      e.trace();
    }
    else
    {
      throw $_u28;
    }
  }
  finally
  {
    (function($this) { var $_u29 = obj; if ($_u29 == null) return null; return $_u29.teardown(); })(this);
  }
  ;
  return;
}
fan.std.TestRunner.prototype.m_pod = null;
fan.std.TestRunner.prototype.m_types = null;
fan.std.TestRunner.prototype.m_method = null;
fan.std.TestRunner.prototype.m_failures = 0;
fan.std.TestRunner.prototype.m_verifyCount = 0;
fan.std.TestRunner.prototype.m_failureNames = null;
fan.std.TestErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.std.TestErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.TestErr.prototype.$typeof = function() { return fan.std.TestErr.$type; }
fan.std.TestErr.make = function(msg,cause) {
  var self = new fan.std.TestErr();
  fan.std.TestErr.make$(self,msg,cause);
  return self;
  }
fan.std.TestErr.make$ = function(self,msg,cause)
{
  if (msg === undefined) msg = null;
  if (cause === undefined) cause = null;
  fan.sys.Err.make$(self,fan.sys.ObjUtil.coerce(msg,fan.sys.Str.$type),cause);
  return;
}
fan.std.Process = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Process.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.std.ProcessPeer(this);
  var $this = this;
  this.m_mergeErr = true;
  this.m_out = fan.std.Env.cur().out();
  this.m_err = fan.std.Env.cur().err();
  this.m_$in = null;
  return;
}
fan.std.Process.prototype.$typeof = function() { return fan.std.Process.$type; }
fan.std.Process.make = function(cmd,dir) {
  var self = new fan.std.Process();
  fan.std.Process.make$(self,cmd,dir);
  return self;
  }
fan.std.Process.make$ = function(self,cmd,dir)
{
  if (cmd === undefined) cmd = fan.sys.List.make(fan.sys.Str.$type);
  if (dir === undefined) dir = null;
  ;
  self.m_command = cmd;
  self.m_dir = dir;
  return;
}
fan.std.Process.prototype.command = function()
{
  return this.m_command;
}
fan.std.Process.prototype.command$ = function(it)
{
  this.m_command = it;
  return;
}
fan.std.Process.prototype.env = function()
{
  return this.peer.env(this);
}
fan.std.Process.prototype.dir = function()
{
  return this.m_dir;
}
fan.std.Process.prototype.dir$ = function(it)
{
  this.m_dir = it;
  return;
}
fan.std.Process.prototype.mergeErr = function()
{
  return this.m_mergeErr;
}
fan.std.Process.prototype.mergeErr$ = function(it)
{
  this.m_mergeErr = it;
  return;
}
fan.std.Process.prototype.out = function()
{
  return this.m_out;
}
fan.std.Process.prototype.out$ = function(it)
{
  this.m_out = it;
  return;
}
fan.std.Process.prototype.err = function()
{
  return this.m_err;
}
fan.std.Process.prototype.err$ = function(it)
{
  this.m_err = it;
  return;
}
fan.std.Process.prototype.$in = function()
{
  return this.m_$in;
}
fan.std.Process.prototype.$in$ = function(it)
{
  this.m_$in = it;
  return;
}
fan.std.Process.prototype.run = function()
{
  return this.peer.run(this);
}
fan.std.Process.prototype.join = function()
{
  return this.peer.join(this);
}
fan.std.Process.prototype.kill = function()
{
  return this.peer.kill(this);
}
fan.std.Process.prototype.m_command = null;
fan.std.Process.prototype.m_dir = null;
fan.std.Process.prototype.m_mergeErr = false;
fan.std.Process.prototype.m_out = null;
fan.std.Process.prototype.m_err = null;
fan.std.Process.prototype.m_$in = null;
fan.std.ProcessPeer = function(){}
fan.std.ProcessPeer.make = function(self) {
	return new fan.std.ProcessPeer();
}
fan.std.Decimal = fan.sys.Obj.$extend(fan.sys.Num);
fan.std.Decimal.prototype.$ctor = function() {}
fan.std.Decimal.make = function(val)
{
  var x = new Number(val);
  x.$fanType = fan.std.Decimal.$type;
  return x;
}
fan.std.Decimal.fromStr = function(s, checked)
{
  if (checked === undefined) checked = true;
  try
  {
    // TODO FIXIT
    for (var i=0; i<s.length; i++)
      if (!fan.sys.Int.isDigit(s.charCodeAt(i)) && s[i] !== '.')
        throw new Error();
    return fan.std.Decimal.make(parseFloat(s));
  }
  catch (e)
  {
    if (!checked) return null;
    throw fan.sys.ParseErr.make("Decimal",  s);
  }
}
fan.std.Decimal.toFloat = function(self)
{
  return fan.sys.Float.make(self.valueOf());
}
fan.std.Decimal.negate = function(self)
{
  return fan.std.Decimal.make(-self.valueOf());
}
fan.std.Decimal.equals = function(self, that)
{
  if (that != null && self.$fanType === that.$fanType)
  {
    if (isNaN(self) || isNaN(that)) return false;
    return self.valueOf() == that.valueOf();
  }
  return false;
}
fan.std.Decimal.hash = function(self)
{
  fan.sys.Str.hash(self.toString());
}
fan.std.Decimal.encode = function(self, out)
{
  out.w(""+self).w("d");
}
fan.std.Decimal.toCode = function(self)
{
  return "" + self + "d";
}
fan.std.Decimal.toLocale = function(self, pattern, locale)
{
  if (locale === undefined || locale == null) locale = fan.sys.Locale.cur();
  if (pattern === undefined) pattern = null;
  // TODO: for now we just route to Float.toLocale
  return fan.sys.Float.toLocale(self, pattern, locale);
  // get current locale
  // var locale = fan.sys.Locale.cur();
  // java.text.DecimalFormatSymbols df = locale.decimal();
  //
  // // get default pattern if necessary
  // if (pattern == null)
  //   pattern = Env.cur().locale(Sys.sysPod, "decimal", "#,###.0##");
  //
  // // parse pattern and get digits
  // NumPattern p = NumPattern.parse(pattern);
  // NumDigits d = new NumDigits(self);
  //
  // // route to common FanNum method
  // return FanNum.toLocale(p, d, df);
}
fan.std.Extension = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Extension.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.std.ExtensionPeer(this);
  var $this = this;
}
fan.std.Extension.prototype.$typeof = function() { return fan.std.Extension.$type; }
fan.std.Extension.readObj = function($in,close,options)
{
  if (close === undefined) close = true;
  if (options === undefined) options = null;
  try
  {
    return fan.std.ObjDecoder.make($in,options).readRootObj();
  }
  finally
  {
    $in.close();
  }
  ;
}
fan.std.Extension.writeObj = function(out,obj,close,options)
{
  if (close === undefined) close = true;
  if (options === undefined) options = null;
  try
  {
    fan.std.ObjEncoder.make(out,options).writeObj(obj);
  }
  finally
  {
    out.close();
  }
  ;
  return out;
}
fan.std.Extension.traceTo = function(self,out,options)
{
  if (out === undefined) out = fan.std.Env.cur().out();
  if (options === undefined) options = null;
  return fan.std.ExtensionPeer.traceTo(self,out,options);
}
fan.std.Extension.make = function() {
  var self = new fan.std.Extension();
  fan.std.Extension.make$(self);
  return self;
  }
fan.std.Extension.make$ = function(self)
{
  return;
}
fan.std.ExtensionPeer = function(){}
fan.std.ExtensionPeer.trace = function(self, out, options) {
	self.trace(out, options);
	return self;
}
fan.std.LogRec = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.LogRec.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.LogRec.prototype.$typeof = function() { return fan.std.LogRec.$type; }
fan.std.LogRec.make = function(time,level,logName,message,err) {
  var self = new fan.std.LogRec();
  fan.std.LogRec.make$(self,time,level,logName,message,err);
  return self;
  }
fan.std.LogRec.make$ = function(self,time,level,logName,message,err)
{
  if (err === undefined) err = null;
  self.m_time = time;
  self.m_level = level;
  self.m_logName = logName;
  self.m_msg = message;
  self.m_err = err;
  return;
}
fan.std.LogRec.prototype.toStr = function()
{
  var ts = this.m_time.toLocale("YYYY-MM-DD hh:mm:ss");
  var s = fan.sys.StrBuf.make();
  s.addChar(91).add(ts).addChar(93).addChar(32).addChar(91).add(this.m_level).addChar(93).addChar(32).addChar(91).add(this.m_logName).addChar(93).addChar(32).add(this.m_msg);
  if (this.m_err != null)
  {
    s.addChar(58).add(this.m_err.traceToStr());
  }
  ;
  return s.toStr();
}
fan.std.LogRec.prototype.print = function(out)
{
  if (out === undefined) out = fan.std.Env.cur().out();
  fan.std.Log.printLogRec(this,out);
  return;
}
fan.std.LogRec.prototype.m_time = null;
fan.std.LogRec.prototype.m_level = null;
fan.std.LogRec.prototype.m_logName = null;
fan.std.LogRec.prototype.m_msg = null;
fan.std.LogRec.prototype.m_err = null;
fan.std.LogMgr = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.LogMgr.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_map = fan.std.Map.fromLiteral([],[],fan.std.Type.find("sys::Str"),fan.std.Type.find("std::Log"));
  this.m_handlers = fan.sys.List.make(fan.std.Type.find("sys::Func<sys::Void,std::LogRec>"));
  this.m_lock = fan.std.Lock.make();
  return;
}
fan.std.LogMgr.prototype.$typeof = function() { return fan.std.LogMgr.$type; }
fan.std.LogMgr.prototype.map = function()
{
  return this.m_map;
}
fan.std.LogMgr.prototype.map$ = function(it)
{
  this.m_map = it;
  return;
}
fan.std.LogMgr.prototype.handlers = function()
{
  return this.m_handlers;
}
fan.std.LogMgr.prototype.handlers$ = function(it)
{
  this.m_handlers = it;
  return;
}
fan.std.LogMgr.prototype.lock = function()
{
  return this.m_lock;
}
fan.std.LogMgr.prototype.lock$ = function(it)
{
  this.m_lock = it;
  return;
}
fan.std.LogMgr.make = function() {
  var self = new fan.std.LogMgr();
  fan.std.LogMgr.make$(self);
  return self;
  }
fan.std.LogMgr.make$ = function(self)
{
  var $this = self;
  ;
  self.m_handlers.add(fan.sys.Func.make$closure(
    fan.std.$clos$_u30,
    function(r)
    {
      r.print();
      return;
    }));
  return;
}
fan.std.LogMgr.prototype.handlersDup = function()
{
  var $this = this;
  return fan.sys.ObjUtil.coerce(this.m_lock.sync(fan.sys.Func.make$closure(
    fan.std.$clos$_u31,
    function(it)
    {
      return fan.sys.ObjUtil.coerce($this.m_handlers.dup(),fan.sys.Obj.$type.toNullable());
    })),fan.std.Type.find("sys::List<sys::Func<sys::Void,std::LogRec>>"));
}
fan.std.LogMgr.prototype.logs = function()
{
  var $this = this;
  return fan.sys.ObjUtil.coerce(this.m_lock.sync(fan.sys.Func.make$closure(
    fan.std.$clos$_u31,
    function(it)
    {
      return fan.sys.ObjUtil.coerce($this.m_map.vals(),fan.sys.Obj.$type.toNullable());
    })),fan.std.Type.find("sys::List<std::Log>"));
}
fan.std.LogMgr.prototype.find = function($name,checked)
{
  var $this = this;
  var res = this.m_lock.sync(fan.sys.Func.make$closure(
    fan.std.$clos$_u31,
    function(it)
    {
      return $this.m_map.get($name);
    }));
  if ((checked && res == null))
  {
    throw fan.sys.Err.make();
  }
  ;
  return fan.sys.ObjUtil.coerce(res,fan.std.Log.$type.toNullable());
}
fan.std.LogMgr.prototype.doRegister = function(log)
{
  var $this = this;
  this.m_lock.sync(fan.sys.Func.make$closure(
    fan.std.$clos$_u32,
    function()
    {
      if ($this.m_map.containsKey(log.m_$name))
      {
        throw fan.sys.ArgErr.make(fan.sys.Str.plus("Duplicate log name: ",log.m_$name));
      }
      ;
      $this.m_map.set(log.m_$name,log);
      return null;
    }));
  return;
}
fan.std.LogMgr.prototype.m_map = null;
fan.std.LogMgr.prototype.m_handlers = null;
fan.std.LogMgr.prototype.m_lock = null;
fan.std.LogLevel = fan.sys.Obj.$extend(fan.sys.Enum);
fan.std.LogLevel.prototype.$ctor = function()
{
  fan.sys.Enum.prototype.$ctor.call(this);
  this.peer = new fan.sys.EnumPeer(this);
  var $this = this;
}
fan.std.LogLevel.prototype.$typeof = function() { return fan.std.LogLevel.$type; }
fan.std.LogLevel.make = function($ordinal,$name) {
  var self = new fan.std.LogLevel();
  fan.std.LogLevel.make$(self,$ordinal,$name);
  return self;
  }
fan.std.LogLevel.make$ = function(self,$ordinal,$name)
{
  fan.sys.Enum.make$(self,$ordinal,$name);
  return;
}
fan.std.LogLevel.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.sys.Enum.doFromStr("std::LogLevel",$name,checked),fan.std.LogLevel.$type.toNullable());
}
fan.std.LogLevel.static$init = function()
{
  if (fan.std.LogLevel.static$inited) return;
  fan.std.LogLevel.static$inited = true;
  fan.std.LogLevel.m_debug = fan.std.LogLevel.make(0,"debug");
  fan.std.LogLevel.m_info = fan.std.LogLevel.make(1,"info");
  fan.std.LogLevel.m_warn = fan.std.LogLevel.make(2,"warn");
  fan.std.LogLevel.m_err = fan.std.LogLevel.make(3,"err");
  fan.std.LogLevel.m_silent = fan.std.LogLevel.make(4,"silent");
  fan.std.LogLevel.m_vals = fan.sys.ObjUtil.coerce((function($this) { var $_u33 = fan.sys.List.make(fan.std.LogLevel.$type, [((fan.std.LogLevel.static$init ? fan.std.LogLevel.static$init() : null),fan.std.LogLevel.m_debug),((fan.std.LogLevel.static$init ? fan.std.LogLevel.static$init() : null),fan.std.LogLevel.m_info),((fan.std.LogLevel.static$init ? fan.std.LogLevel.static$init() : null),fan.std.LogLevel.m_warn),((fan.std.LogLevel.static$init ? fan.std.LogLevel.static$init() : null),fan.std.LogLevel.m_err),((fan.std.LogLevel.static$init ? fan.std.LogLevel.static$init() : null),fan.std.LogLevel.m_silent)]); if ($_u33 == null) return null; return fan.sys.ObjUtil.toImmutable($_u33); })(this),fan.std.Type.find("sys::List<std::LogLevel>"));
  if (true)
  {
  }
  ;
  return;
}
fan.std.LogLevel.m_debug = null;
fan.std.LogLevel.m_info = null;
fan.std.LogLevel.m_warn = null;
fan.std.LogLevel.m_err = null;
fan.std.LogLevel.m_silent = null;
fan.std.LogLevel.m_vals = null;
fan.std.Log = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Log.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.std.LogPeer(this);
  var $this = this;
}
fan.std.Log.prototype.$typeof = function() { return fan.std.Log.$type; }
fan.std.Log.logMgr = function()
{
  return ((fan.std.Log.static$init ? fan.std.Log.static$init() : null),fan.std.Log.m_unsafeLogMgr).val();
}
fan.std.Log.prototype.isImmutable = function()
{
  return true;
}
fan.std.Log.prototype.toImmutable = function()
{
  return this;
}
fan.std.Log.list = function()
{
  return fan.std.Log.logMgr().logs();
}
fan.std.Log.find = function($name,checked)
{
  if (checked === undefined) checked = true;
  return fan.std.Log.logMgr().find($name,checked);
}
fan.std.Log.get = function($name)
{
  fan.std.Uri.checkName($name);
  var l = fan.std.Log.find($name,false);
  if (l == null)
  {
    l = fan.std.Log.make($name,true);
  }
  ;
  return fan.sys.ObjUtil.coerce(l,fan.std.Log.$type);
}
fan.std.Log.make = function($name,register) {
  var self = new fan.std.Log();
  fan.std.Log.make$(self,$name,register);
  return self;
  }
fan.std.Log.make$ = function(self,$name,register)
{
  fan.std.Uri.checkName($name);
  self.m_$name = $name;
  var val = fan.std.Env.cur().props(fan.sys.ObjUtil.coerce(fan.sys.Int.$type.pod(),fan.std.Pod.$type),fan.std.Uri.fromStr("log.props"),fan.std.Duration.fromStr("1min")).get($name);
  if (val != null)
  {
    self.level$(fan.sys.ObjUtil.coerce(fan.std.LogLevel.fromStr(fan.sys.ObjUtil.coerce(val,fan.sys.Str.$type)),fan.std.LogLevel.$type));
  }
  else
  {
    self.level$(((fan.std.LogLevel.static$init ? fan.std.LogLevel.static$init() : null),fan.std.LogLevel.m_info));
  }
  ;
  if (register)
  {
    fan.std.Log.doRegister(self);
  }
  ;
  return;
}
fan.std.Log.doRegister = function(log)
{
  fan.std.Log.logMgr().doRegister(log);
  return;
}
fan.std.Log.prototype.toStr = function()
{
  return this.m_$name;
}
fan.std.Log.prototype.level = function()
{
  var $this = this;
  return fan.sys.ObjUtil.coerce(fan.std.Log.logMgr().m_lock.sync(fan.sys.Func.make$closure(
    fan.std.$clos$_u31,
    function(it)
    {
      return $this.m_level;
    })),fan.std.LogLevel.$type);
}
fan.std.Log.prototype.level$ = function(it)
{
  var $this = this;
  var t = it;
  fan.std.Log.logMgr().m_lock.sync(fan.sys.Func.make$closure(
    fan.std.$clos$_u31,
    function(it)
    {
      return (function($this) { var $_u34 = t; $this.m_level = $_u34; return $_u34; })($this);
    }));
  return;
}
fan.std.Log.prototype.isEnabled = function(level)
{
  return fan.sys.ObjUtil.compareLE(this.level().ordinal(),level.ordinal());
}
fan.std.Log.prototype.isErr = function()
{
  return this.isEnabled(((fan.std.LogLevel.static$init ? fan.std.LogLevel.static$init() : null),fan.std.LogLevel.m_err));
}
fan.std.Log.prototype.isWarn = function()
{
  return this.isEnabled(((fan.std.LogLevel.static$init ? fan.std.LogLevel.static$init() : null),fan.std.LogLevel.m_warn));
}
fan.std.Log.prototype.isInfo = function()
{
  return this.isEnabled(((fan.std.LogLevel.static$init ? fan.std.LogLevel.static$init() : null),fan.std.LogLevel.m_info));
}
fan.std.Log.prototype.isDebug = function()
{
  return this.isEnabled(((fan.std.LogLevel.static$init ? fan.std.LogLevel.static$init() : null),fan.std.LogLevel.m_debug));
}
fan.std.Log.prototype.err = function(msg,err)
{
  if (err === undefined) err = null;
  this.log(fan.std.LogRec.make(fan.std.DateTime.now(),((fan.std.LogLevel.static$init ? fan.std.LogLevel.static$init() : null),fan.std.LogLevel.m_err),this.m_$name,msg,err));
  return;
}
fan.std.Log.prototype.warn = function(msg,err)
{
  if (err === undefined) err = null;
  this.log(fan.std.LogRec.make(fan.std.DateTime.now(),((fan.std.LogLevel.static$init ? fan.std.LogLevel.static$init() : null),fan.std.LogLevel.m_warn),this.m_$name,msg,err));
  return;
}
fan.std.Log.prototype.info = function(msg,err)
{
  if (err === undefined) err = null;
  this.log(fan.std.LogRec.make(fan.std.DateTime.now(),((fan.std.LogLevel.static$init ? fan.std.LogLevel.static$init() : null),fan.std.LogLevel.m_info),this.m_$name,msg,err));
  return;
}
fan.std.Log.prototype.debug = function(msg,err)
{
  if (err === undefined) err = null;
  this.log(fan.std.LogRec.make(fan.std.DateTime.now(),((fan.std.LogLevel.static$init ? fan.std.LogLevel.static$init() : null),fan.std.LogLevel.m_debug),this.m_$name,msg,err));
  return;
}
fan.std.Log.prototype.log = function(rec)
{
  var $this = this;
  if (!this.isEnabled(rec.m_level))
  {
    return;
  }
  ;
  fan.std.Log.logMgr().m_lock.lock();
  fan.std.Log.logMgr().m_handlers.each(fan.sys.Func.make$closure(
    fan.std.$clos$_u35,
    function(h,ignoreparam$1)
    {
      h.call(rec);
      return;
    }));
  fan.std.Log.logMgr().m_lock.unlock();
  return;
}
fan.std.Log.handlers = function()
{
  return fan.std.Log.logMgr().handlersDup();
}
fan.std.Log.addHandler = function(handler)
{
  if (!fan.sys.ObjUtil.isImmutable(handler))
  {
    throw fan.sys.NotImmutableErr.make();
  }
  ;
  fan.std.Log.logMgr().m_handlers.add(handler);
  return;
}
fan.std.Log.removeHandler = function(handler)
{
  fan.std.Log.logMgr().m_handlers.remove(handler);
  return;
}
fan.std.Log.printLogRec = function(rec,out)
{
  return fan.std.LogPeer.printLogRec(rec,out);
}
fan.std.Log.static$init = function()
{
  if (fan.std.Log.static$inited) return;
  fan.std.Log.static$inited = true;
  fan.std.Log.m_unsafeLogMgr = fan.sys.ObjUtil.coerce(fan.std.Unsafe.make(fan.std.LogMgr.make()),fan.std.Type.find("std::Unsafe<std::LogMgr>"));
  return;
}
fan.std.Log.m_unsafeLogMgr = null;
fan.std.Log.prototype.m_$name = null;
fan.std.Log.prototype.m_level = null;
fan.std.LogPeer = function(){}
fan.std.LogPeer.make = function(self) {
	var t = fan.std.LogPeer();
	self.m_level = LogLevel.info;
	return t;
}
fan.std.LogPeer.m_byName = [];
fan.std.LogPeer.list = function()
{
  var list = fan.sys.List.make(fan.std.LogPeer.m_byName.length, fan.std.LogPeer.$typ);
  for (var k in fan.std.LogPeer.m_byName) {
  	list.add(fan.std.LogPeer.m_byName[k]);
  }
  return list.ro();
}
fan.std.LogPeer.find = function(name, checked)
{
  if (checked === undefined) checked = true;
  var log = fan.std.LogPeer.m_byName[name];
  if (log != null) return log;
  if (checked) throw fan.sys.Err.make("Unknown log: " + name);
  return null;
}
fan.std.LogPeer.doRegister = function(self)
{
  	var name = self.m_name;
	// verify unique
	if (fan.std.LogPeer.m_byName[name] != null)
	  throw fan.sys.ArgErr.make("Duplicate log name: " + name);
	// init and put into map
	fan.std.LogPeer.m_byName[name] = self;
}
fan.std.LogPeer.level = function(self) {
	return self.m_level;
}
fan.std.LogPeer.level$ = function(self, l) {
	self.m_level = l;
}
fan.std.LogPeer.slog = function(name, rec) {
  for (var i=0; i<fan.std.LogPeer.m_handlers.length; ++i)
  {
    try { fan.std.LogPeer.m_handlers[i].call(rec); }
    catch (e) { fan.sys.Err.make(e).trace(); }
  }
}
fan.std.LogPeer.log = function(self, rec) {
  if (!self.enabled(rec.m_level)) return;
  for (var i=0; i<fan.std.LogPeer.m_handlers.length; ++i)
  {
    try { fan.std.LogPeer.m_handlers[i].call(rec); }
    catch (e) { fan.sys.Err.make(e).trace(); }
  }
}
fan.std.LogPeer.printLogRec = function(rec, out) {
    //out.printLine(rec.toStr());
    fan.sys.ObjUtil.echo(rec);
}
fan.std.LogPeer.handlers = function()
{
  return fan.sys.List.make(fan.sys.Func.$type, fan.std.LogPeer.m_handlers).ro();
}
fan.std.LogPeer.addHandler = function(func)
{
  if (!func.isImmutable()) throw fan.sys.NotImmutableErr.make("handler must be immutable");
  fan.std.LogPeer.m_handlers.push(func);
}
fan.std.LogPeer.removeHandler = function(func)
{
  var index = null;
  for (var i=0; i<fan.std.LogPeer.m_handlers.length; i++)
    if (fan.std.LogPeer.m_handlers[i] == func) { index=i; break }
  if (index == null) return;
  fan.std.LogPeer.m_handlers.splice(index, 1);
}
fan.std.LogPeer.m_handlers = [];
fan.std.Regex = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Regex.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.std.RegexPeer(this);
  var $this = this;
}
fan.std.Regex.prototype.$typeof = function() { return fan.std.Regex.$type; }
fan.std.Regex.prototype.init = function()
{
  return this.peer.init(this);
}
fan.std.Regex.fromStr = function(pattern)
{
  return fan.std.Regex.make(pattern);
}
fan.std.Regex.glob = function(pattern)
{
  var s = fan.sys.StrBuf.make();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(pattern)); i = fan.sys.Int.increment(i))
  {
    var c = fan.sys.Str.get(pattern,i);
    if (fan.sys.Int.isAlphaNum(c))
    {
      s.addChar(c);
    }
    else
    {
      if (fan.sys.ObjUtil.equals(c,63))
      {
        s.addChar(46);
      }
      else
      {
        if (fan.sys.ObjUtil.equals(c,42))
        {
          s.addChar(46).addChar(42);
        }
        else
        {
          s.addChar(92).addChar(c);
        }
        ;
      }
      ;
    }
    ;
  }
  ;
  return fan.std.Regex.make(s.toStr());
}
fan.std.Regex.quote = function(str)
{
  var s = fan.sys.StrBuf.make();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(str)); i = fan.sys.Int.increment(i))
  {
    var c = fan.sys.Str.get(str,i);
    if (fan.sys.Int.isAlphaNum(c))
    {
      s.addChar(c);
    }
    else
    {
      s.addChar(92).addChar(c);
    }
    ;
  }
  ;
  return fan.std.Regex.make(s.toStr());
}
fan.std.Regex.make = function(source) {
  var self = new fan.std.Regex();
  fan.std.Regex.make$(self,source);
  return self;
  }
fan.std.Regex.make$ = function(self,source)
{
  self.m_source = source;
  self.init();
  return;
}
fan.std.Regex.prototype.equals = function(obj)
{
  if (fan.sys.ObjUtil.is(obj,fan.std.Regex.$type))
  {
    return fan.sys.ObjUtil.equals(fan.sys.ObjUtil.coerce(obj,fan.std.Regex.$type).m_source,this.m_source);
  }
  else
  {
    return false;
  }
  ;
}
fan.std.Regex.prototype.hash = function()
{
  return fan.sys.Str.hash(this.m_source);
}
fan.std.Regex.prototype.toStr = function()
{
  return this.m_source;
}
fan.std.Regex.prototype.matches = function(s)
{
  return this.peer.matches(this,s);
}
fan.std.Regex.prototype.matcher = function(s)
{
  return this.peer.matcher(this,s);
}
fan.std.Regex.prototype.split = function(s,limit)
{
  if (limit === undefined) limit = 0;
  return this.peer.split(this,s,limit);
}
fan.std.Regex.static$init = function()
{
  if (fan.std.Regex.static$inited) return;
  fan.std.Regex.static$inited = true;
  fan.std.Regex.m_defVal = fan.std.Regex.make("");
  return;
}
fan.std.Regex.prototype.m_source = null;
fan.std.Regex.m_defVal = null;
fan.std.RegexPeer = function(){}
fan.std.RegexPeer.make = function(self) {
  return new fan.std.RegexPeer();
}
fan.std.RegexPeer.prototype.init = function(self) {
    self.m_regexp = new RegExp(self.m_source);
}
fan.std.RegexPeer.prototype.matches = function(self, s)
{
  return this.matcher(self, s).matches();
}
fan.std.RegexPeer.prototype.matcher = function(self, s)
{
  return new fan.std.RegexMatcher(self.m_regexp, self.m_source, s);
}
fan.std.RegexPeer.prototype.split = function(self, s, limit)
{
  if (limit === undefined) limit = 0;
  if (limit === 1)
    return fan.sys.List.make(fan.sys.Str.$type, [s]);
  var array = [];
  var re = self.m_regexp;
  while (true)
  {
    var m = s.match(re);
    if (m == null || (limit != 0 && array.length == limit -1))
    {
      array.push(s);
      break;
    }
    array.push(s.substring(0, m.index));
    s = s.substring(m.index + m[0].length);
  }
  // remove trailing empty strings
  if (limit == 0)
  {
    while (array[array.length-1] == "") { array.pop(); }
  }
  return fan.sys.List.make(fan.sys.Str.$type, array);
}
fan.std.CachedScript = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.CachedScript.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.CachedScript.prototype.$typeof = function() { return fan.std.CachedScript.$type; }
fan.std.CachedScript.make = function(file,t) {
  var self = new fan.std.CachedScript();
  fan.std.CachedScript.make$(self,file,t);
  return self;
  }
fan.std.CachedScript.make$ = function(self,file,t)
{
  self.m_modified = fan.sys.ObjUtil.coerce(file.modified(),fan.std.TimePoint.$type);
  self.m_size = file.size();
  self.m_typeName = t.qname();
  return;
}
fan.std.CachedScript.prototype.m_modified = null;
fan.std.CachedScript.prototype.m_size = 0;
fan.std.CachedScript.prototype.m_typeName = null;
fan.std.ScriptCompiler = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.ScriptCompiler.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_cache = fan.sys.ObjUtil.coerce(fan.std.ConcurrentMap.make(16),fan.std.Type.find("std::ConcurrentMap<sys::Str,std::CachedScript>"));
  return;
}
fan.std.ScriptCompiler.prototype.$typeof = function() { return fan.std.ScriptCompiler.$type; }
fan.std.ScriptCompiler.prototype.compile = function(file,options)
{
  if (options === undefined) options = null;
  var $this = this;
  file = file.normalize();
  if ((options == null || !fan.sys.ObjUtil.coerce(options.get("force",fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable())),fan.sys.Bool.$type)))
  {
    var c = this.m_cache.get(file.toStr());
    if ((c != null && fan.sys.ObjUtil.equals(c.m_modified,file.modified()) && fan.sys.ObjUtil.equals(c.m_size,file.size())))
    {
      var t = fan.std.Type.find(c.m_typeName,false);
      if (t != null)
      {
        return fan.sys.ObjUtil.coerce(t,fan.std.Type.$type);
      }
      ;
    }
    ;
  }
  ;
  var pod = this.compileFile(file,options);
  var t = pod.types().find(fan.sys.Func.make$closure(
    fan.std.$clos$_u36,
    function(it,ignoreparam$1)
    {
      return it.isPublic();
    }));
  if (t == null)
  {
    throw fan.sys.Err.make(fan.sys.Str.plus("Script file defines no public classes: ",file));
  }
  ;
  this.m_cache.set(file.toStr(),fan.std.CachedScript.make(file,fan.sys.ObjUtil.coerce(t,fan.std.Type.$type)));
  return fan.sys.ObjUtil.coerce(t,fan.std.Type.$type);
}
fan.std.ScriptCompiler.prototype.compileFile = function(file,options)
{
  var podName = fan.sys.Str.plus(file.basename(),fan.sys.ObjUtil.coerce(fan.std.TimePoint.nowUnique(),fan.sys.Obj.$type.toNullable()));
  var m = fan.std.Slot.findMethod("compiler::Main.compileScript",true);
  var pod = m.call(podName,file,fan.sys.ObjUtil.coerce(options,fan.sys.Obj.$type.toNullable()));
  return fan.sys.ObjUtil.coerce(pod,fan.std.Pod.$type);
}
fan.std.ScriptCompiler.prototype.execute = function(fileName,args)
{
  var $this = this;
  var file = fan.std.Uri.toUri(fileName).toFile();
  var options = null;
  if ((args != null && args.any(fan.sys.Func.make$closure(
    fan.std.$clos$_u37,
    function(it,ignoreparam$1)
    {
      return fan.sys.ObjUtil.equals(it,"-fcodeDump");
    }))))
  {
    options = fan.sys.ObjUtil.coerce(fan.std.Map.fromLiteral(["fcodeDump"],[fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable())],fan.std.Type.find("sys::Str"),fan.std.Type.find("sys::Bool")),fan.std.Type.find("std::Map<sys::Str,sys::Obj>?"));
  }
  ;
  var pod = this.compileFile(file,options);
  var types = pod.types();
  var t = null;
  var m = null;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,types.size()); i = fan.sys.Int.increment(i))
  {
    t = types.get(i);
    m = t.method("main",false);
    if (m != null)
    {
      break;
    }
    ;
  }
  ;
  if (m == null)
  {
    fan.std.Env.cur().err().printLine(fan.sys.Str.plus(fan.sys.Str.plus("ERROR: missing main method: ",pod.types().first().$name()),".main"));
    return -1;
  }
  ;
  var funcArgs = null;
  if ((fan.sys.ObjUtil.compareGT(m.params().size(),0) && args != null && fan.sys.ObjUtil.compareGT(args.size(),0)))
  {
    funcArgs = fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.std.Type.find("sys::List<sys::Str>?"), [args]),fan.std.Type.find("sys::List<sys::Obj?>?"));
  }
  ;
  var res = null;
  if (m.isStatic())
  {
    res = m.callList(funcArgs);
  }
  else
  {
    res = m.callOn(t.make(),funcArgs);
  }
  ;
  return fan.sys.ObjUtil.coerce((function($this) { var $_u38 = fan.sys.ObjUtil.as(res,fan.sys.Int.$type); if ($_u38 != null) return $_u38; return fan.sys.ObjUtil.coerce(0,fan.sys.Int.$type.toNullable()); })(this),fan.sys.Int.$type);
}
fan.std.ScriptCompiler.make = function() {
  var self = new fan.std.ScriptCompiler();
  fan.std.ScriptCompiler.make$(self);
  return self;
  }
fan.std.ScriptCompiler.make$ = function(self)
{
  ;
  return;
}
fan.std.ScriptCompiler.static$init = function()
{
  if (fan.std.ScriptCompiler.static$inited) return;
  fan.std.ScriptCompiler.static$inited = true;
  fan.std.ScriptCompiler.m_cur = fan.std.ScriptCompiler.make();
  return;
}
fan.std.ScriptCompiler.prototype.m_cache = null;
fan.std.ScriptCompiler.m_cur = null;
fan.std.RegexMatcher = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.RegexMatcher.prototype.$ctor = function(regexp, source, str)
{
  this.m_regexp = regexp;
  this.m_source = source;
  this.m_str = str + "";
  this.m_match = null;
}
fan.std.RegexMatcher.prototype.equals = function(that) { return this === that; }
fan.std.RegexMatcher.prototype.toStr = function() { return this.m_source; }
fan.std.RegexMatcher.prototype.$typeof = function() { return fan.std.RegexMatcher.$type; }
fan.std.RegexMatcher.prototype.matches = function()
{
  if (!this.m_regexpForMatching)
    this.m_regexpForMatching = fan.std.RegexMatcher.recompile(this.m_regexp, true);
  this.m_match = this.m_regexpForMatching.exec(this.m_str);
  this.m_wasMatch = this.m_match != null && this.m_match[0].length === this.m_str.length;
  return this.m_wasMatch;
}
fan.std.RegexMatcher.prototype.find = function()
{
  if (!this.m_regexpForMatching)
    this.m_regexpForMatching = fan.std.RegexMatcher.recompile(this.m_regexp, true);
  this.m_match = this.m_regexpForMatching.exec(this.m_str);
  this.m_wasMatch = this.m_match != null;
  return this.m_wasMatch;
}
fan.std.RegexMatcher.prototype.replaceFirst = function(replacement)
{
  return this.m_str.replace(fan.std.RegexMatcher.recompile(this.m_regexp, false), replacement);
}
fan.std.RegexMatcher.prototype.replaceAll = function(replacement)
{
  return this.m_str.replace(fan.std.RegexMatcher.recompile(this.m_regexp, true), replacement);
}
fan.std.RegexMatcher.prototype.groupCount = function()
{
  if (!this.m_wasMatch)
    return 0;
  return this.m_match.length - 1;
}
fan.std.RegexMatcher.prototype.group = function(group)
{
  if (group === undefined) group = 0;
  if (!this.m_wasMatch)
    throw fan.sys.Err.make("No match found");
  if (group < 0 || group > this.groupCount())
    throw fan.sys.IndexErr.make(group);
  return this.m_match[group];
}
fan.std.RegexMatcher.prototype.start = function(group)
{
  if (!this.m_wasMatch)
    throw fan.sys.Err.make("No match found");
  if (group === undefined) group = 0;
  if (group < 0 || group > this.groupCount())
    throw fan.sys.IndexErr.make(group);
  if (group === 0)
    return this.m_match.index;
  throw fan.sys.UnsupportedErr.make("Not implemented in javascript");
}
fan.std.RegexMatcher.prototype.end = function(group)
{
  if (!this.m_wasMatch)
    throw fan.sys.Err.make("No match found");
  if (group === undefined) group = 0;
  if (group < 0 || group > this.groupCount())
    throw fan.sys.IndexErr.make(group);
  if (group === 0)
    return this.m_match.index + this.m_match[group].length;
  throw fan.sys.UnsupportedErr.make("Not implemented in javascript");
}
fan.std.RegexMatcher.recompile = function(regexp, global)
{
  var flags = global ? "g" : "";
  if (regexp.ignoreCase) flags += "i";
  if (regexp.multiline)  flags += "m";
  if (regexp.unicode)    flags += "u";
  return new RegExp(regexp.source, flags);
}
fan.std.EnvProps = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.EnvProps.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_cache = fan.std.Map.fromLiteral([],[],fan.std.Type.find("std::Uri"),fan.std.Type.find("std::FileProps"));
  this.m_lock = fan.std.Lock.make();
  return;
}
fan.std.EnvProps.prototype.$typeof = function() { return fan.std.EnvProps.$type; }
fan.std.EnvProps.prototype.cache = function()
{
  return this.m_cache;
}
fan.std.EnvProps.prototype.cache$ = function(it)
{
  this.m_cache = it;
  return;
}
fan.std.EnvProps.prototype.lock = function()
{
  return this.m_lock;
}
fan.std.EnvProps.prototype.lock$ = function(it)
{
  this.m_lock = it;
  return;
}
fan.std.EnvProps.prototype.get = function(pod,path,maxAge)
{
  var $this = this;
  return fan.sys.ObjUtil.coerce(this.m_lock.sync(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u39,
    function()
    {
      return fan.sys.ObjUtil.coerce($this.getUnSafe(pod,path,maxAge),fan.sys.Obj.$type);
    }),fan.std.Type.find("sys::Func<sys::Obj?>"))),fan.std.Type.find("std::Map<sys::Str,sys::Str>"));
}
fan.std.EnvProps.prototype.getUnSafe = function(pod,path,maxAge)
{
  var uri = fan.std.Uri.toUri(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("etc/",pod.$name()),"/"),path));
  var props = this.m_cache.get(fan.sys.ObjUtil.coerce(uri,fan.std.Uri.$type));
  if ((props == null || fan.sys.ObjUtil.compareGT(fan.std.TimePoint.now().minusDateTime(props.m_readTime),maxAge)))
  {
    var files = this.getFiles(pod,path,fan.sys.ObjUtil.coerce(uri,fan.std.Uri.$type));
    if (props != null)
    {
      if (!props.isStale(files))
      {
        return props.m_props;
      }
      ;
    }
    ;
    props = fan.std.FileProps.make();
    props.loadAll(files);
    this.m_cache.set(fan.sys.ObjUtil.coerce(uri,fan.std.Uri.$type),fan.sys.ObjUtil.coerce(props,fan.std.FileProps.$type));
  }
  ;
  return props.m_props;
}
fan.std.EnvProps.prototype.getFiles = function(pod,path,uri)
{
  var files = fan.std.Env.cur().findAllFiles(uri);
  var f = pod.file(fan.sys.ObjUtil.coerce(fan.std.Uri.toUri(fan.sys.Str.plus("/",path)),fan.std.Uri.$type),false);
  if (f != null)
  {
    files.add(fan.sys.ObjUtil.coerce(f,fan.std.File.$type));
  }
  ;
  return files;
}
fan.std.EnvProps.make = function() {
  var self = new fan.std.EnvProps();
  fan.std.EnvProps.make$(self);
  return self;
  }
fan.std.EnvProps.make$ = function(self)
{
  ;
  return;
}
fan.std.EnvProps.prototype.m_cache = null;
fan.std.EnvProps.prototype.m_lock = null;
fan.std.FileProps = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.FileProps.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_props = fan.std.Map.fromLiteral([],[],fan.std.Type.find("sys::Str"),fan.std.Type.find("sys::Str"));
  return;
}
fan.std.FileProps.prototype.$typeof = function() { return fan.std.FileProps.$type; }
fan.std.FileProps.prototype.props = function()
{
  return this.m_props;
}
fan.std.FileProps.prototype.props$ = function(it)
{
  this.m_props = it;
  return;
}
fan.std.FileProps.prototype.readTime = function()
{
  return this.m_readTime;
}
fan.std.FileProps.prototype.readTime$ = function(it)
{
  this.m_readTime = it;
  return;
}
fan.std.FileProps.prototype.modified = function()
{
  return this.m_modified;
}
fan.std.FileProps.prototype.modified$ = function(it)
{
  this.m_modified = it;
  return;
}
fan.std.FileProps.make = function() {
  var self = new fan.std.FileProps();
  fan.std.FileProps.make$(self);
  return self;
  }
fan.std.FileProps.make$ = function(self)
{
  ;
  self.m_readTime = fan.std.TimePoint.now();
  return;
}
fan.std.FileProps.prototype.loadAll = function(files)
{
  var $this = this;
  this.m_modified = fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.std.TimePoint.$type),fan.std.Type.find("sys::List<std::TimePoint>?"));
  var props = fan.sys.ObjUtil.coerce(fan.std.Map.fromLiteral([],[],fan.std.Type.find("sys::Obj"),fan.std.Type.find("sys::Obj?")),fan.std.Type.find("std::Map<sys::Str,sys::Str>"));
  files.each(fan.sys.Func.make$closure(
    fan.std.$clos$_u40,
    function(f,ignoreparam$1)
    {
      fan.std.FileProps.load(props,f);
      $this.m_modified.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(f.modified(),fan.std.TimePoint.$type),fan.sys.Obj.$type.toNullable()));
      return;
    }));
  this.m_props = props.toImmutable();
  return;
}
fan.std.FileProps.prototype.isStale = function(x)
{
  if (fan.sys.ObjUtil.compareNE(this.m_modified.size(),x.size()))
  {
    return true;
  }
  ;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,x.size()); i = fan.sys.Int.increment(i))
  {
    if (fan.sys.ObjUtil.compareNE(this.m_modified.get(i),x.get(i).modified()))
    {
      return true;
    }
    ;
  }
  ;
  return false;
}
fan.std.FileProps.load = function(props,f)
{
  var $this = this;
  try
  {
    var t = fan.std.Props.readProps(f.$in());
    t.each(fan.sys.Func.make$closure(
      fan.std.$clos$_u41,
      function(v,k)
      {
        if (props.containsKey(k))
        {
          return;
        }
        ;
        props.set(k,v);
        return;
      }));
  }
  catch ($_u42)
  {
    $_u42 = fan.sys.Err.make($_u42);
    if ($_u42 instanceof fan.sys.Err)
    {
      var e = $_u42;
      var e;
      fan.std.Env.cur().err().printLine(fan.sys.Str.plus("ERROR: Cannot load props ",f));
      fan.std.Env.cur().err().printLine(fan.sys.Str.plus("  ",e));
    }
    else
    {
      throw $_u42;
    }
  }
  ;
  return;
}
fan.std.FileProps.prototype.m_props = null;
fan.std.FileProps.prototype.m_readTime = null;
fan.std.FileProps.prototype.m_modified = null;
fan.std.Uuid = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Uuid.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.std.UuidPeer(this);
  var $this = this;
}
fan.std.Uuid.prototype.$typeof = function() { return fan.std.Uuid.$type; }
fan.std.Uuid.make = function()
{
  return fan.std.UuidPeer.make();
}
fan.std.Uuid.makeBits = function(hi,lo) {
  var self = new fan.std.Uuid();
  fan.std.Uuid.makeBits$(self,hi,lo);
  return self;
  }
fan.std.Uuid.makeBits$ = function(self,hi,lo)
{
  self.m_hi = hi;
  self.m_lo = lo;
  return;
}
fan.std.Uuid.fromStr = function(str)
{
  try
  {
    if ((fan.sys.ObjUtil.compareNE(fan.sys.Str.size(str),36) || fan.sys.ObjUtil.compareNE(fan.sys.Str.get(str,8),45) || fan.sys.ObjUtil.compareNE(fan.sys.Str.get(str,13),45) || fan.sys.ObjUtil.compareNE(fan.sys.Str.get(str,18),45) || fan.sys.ObjUtil.compareNE(fan.sys.Str.get(str,23),45)))
    {
      throw fan.sys.ParseErr.make(str);
    }
    ;
    var a = fan.sys.Int.fromStr(fan.sys.Str.getRange(str,fan.sys.Range.make(0,8,true)),16);
    var b = fan.sys.Int.fromStr(fan.sys.Str.getRange(str,fan.sys.Range.make(9,13,true)),16);
    var c = fan.sys.Int.fromStr(fan.sys.Str.getRange(str,fan.sys.Range.make(14,18,true)),16);
    var d = fan.sys.Int.fromStr(fan.sys.Str.getRange(str,fan.sys.Range.make(19,23,true)),16);
    var e = fan.sys.Int.fromStr(fan.sys.Str.getRange(str,fan.sys.Range.make(24,-1)),16);
    return fan.std.Uuid.makeBits(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.shiftl(a,32),fan.sys.Int.shiftl(b,16)),c),fan.sys.Int.or(fan.sys.Int.shiftl(d,48),e));
  }
  catch ($_u43)
  {
    $_u43 = fan.sys.Err.make($_u43);
    if ($_u43 instanceof fan.sys.Err)
    {
      var e = $_u43;
      var e;
      throw fan.sys.ParseErr.make(fan.sys.Str.plus("Uuid:",str));
    }
    else
    {
      throw $_u43;
    }
  }
  ;
}
fan.std.Uuid.prototype.bitsHi = function()
{
  return this.m_hi;
}
fan.std.Uuid.prototype.bitsLo = function()
{
  return this.m_lo;
}
fan.std.Uuid.prototype.equals = function(that)
{
  if (!fan.sys.ObjUtil.is(that,fan.std.Uuid.$type))
  {
    return false;
  }
  ;
  var x = fan.sys.ObjUtil.as(that,fan.std.Uuid.$type);
  return (fan.sys.ObjUtil.equals(x.m_hi,this.m_hi) && fan.sys.ObjUtil.equals(x.m_lo,this.m_lo));
}
fan.std.Uuid.prototype.hash = function()
{
  return fan.sys.Int.xor(this.m_hi,this.m_lo);
}
fan.std.Uuid.prototype.compare = function(that)
{
  var x = fan.sys.ObjUtil.coerce(that,fan.std.Uuid.$type);
  if (fan.sys.ObjUtil.compareNE(this.m_hi,x.m_hi))
  {
    return (function($this) { if (fan.sys.ObjUtil.compareLT($this.m_hi,x.m_hi)) return -1; return 1; })(this);
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_lo,x.m_lo))
  {
    return 0;
  }
  ;
  return (function($this) { if (fan.sys.ObjUtil.compareLT($this.m_lo,x.m_lo)) return -1; return 1; })(this);
}
fan.std.Uuid.prototype.toStr = function()
{
  var s = fan.sys.StrBuf.make(36);
  fan.std.Uuid.append(s,fan.sys.Int.and(fan.sys.Int.shiftr(this.m_hi,32),4294967295),8);
  s.addChar(45);
  fan.std.Uuid.append(s,fan.sys.Int.and(fan.sys.Int.shiftr(this.m_hi,16),65535),4);
  s.addChar(45);
  fan.std.Uuid.append(s,fan.sys.Int.and(this.m_hi,65535),4);
  s.addChar(45);
  fan.std.Uuid.append(s,fan.sys.Int.and(fan.sys.Int.shiftr(this.m_lo,48),65535),4);
  s.addChar(45);
  fan.std.Uuid.append(s,fan.sys.Int.and(this.m_lo,281474976710655),12);
  return s.toStr();
}
fan.std.Uuid.append = function(s,val,width)
{
  var str = fan.sys.Int.toHex(val,width);
  s.add(str);
  return;
}
fan.std.Uuid.prototype.m_hi = 0;
fan.std.Uuid.prototype.m_lo = 0;
fan.std.UuidPeer = function(){}
fan.std.UuidPeer.make = function()
{
  throw fan.sys.UnsupportedErr.make("Uuid.make not implemented in Js env");
}
fan.std.Env = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Env.cur = function()
{
  if (fan.std.Env.$cur == null) fan.std.Env.$cur = new fan.std.Env();
  return fan.std.Env.$cur;
}
fan.std.Env.prototype.$ctor = function()
{
  this.m_args = fan.sys.List.make(8, fan.sys.Str.$type).toImmutable();
  this.m_index = fan.std.Map.make();
  this.m_index = this.m_index.toImmutable();
  this.m_vars = fan.std.CaseInsensitiveMap.make(16);
  //this.m_vars.caseInsensitive$(true);
  this.m_vars = this.m_vars.toImmutable();
  // pod props map, keyed by pod.name
  this.m_props = fan.std.Map.make();
  // env.out
  this.m_out = new fan.std.ConsoleOutStream();
}
fan.std.Env.prototype.$setIndex = function(index)
{
  if (!fan.sys.ObjUtil.is(index, fan.std.Type.find("std::Map"))) throw fan.sys.ArgErr.make("Invalid type");
  this.m_index = index.toImmutable();
}
fan.std.Env.prototype.$setVars = function(vars)
{
  //if (vars.$typeof().qname() != "std::Map") throw fan.sys.ArgErr.make("Invalid type");
  if (!fan.sys.ObjUtil.is(vars, fan.std.Type.find("std::CaseInsensitiveMap"))) throw fan.sys.ArgErr.make("Map must be caseInsensitive");
  this.m_vars = vars.toImmutable();
}
fan.std.Env.noDef = "_Env_nodef_";
fan.std.Env.localeTestMode = false;
fan.std.Env.$nodejs = this.window !== this;
fan.std.Env.prototype.$typeof = function() { return fan.std.Env.$type; }
fan.std.Env.prototype.toStr = function() { return this.$typeof().toString(); }
fan.std.Env.prototype.runtime = function() { return "js"; }
fan.std.Env.prototype.javaVersion = function() { return 0; }
fan.std.Env.prototype.args = function() { return this.m_args; }
fan.std.Env.prototype.vars = function() { return this.m_vars; }
fan.std.Env.prototype.diagnostics = function()
{
  var map = fan.std.Map.make(fan.sys.Str.$type, fan.sys.Obj.$type);
  return map;
}
fan.std.Env.prototype.out = function() { return this.m_out; }
fan.std.Env.prototype.homeDir = function() { return this.m_homeDir; }
fan.std.Env.prototype.workDir = function() { return this.m_workDir; }
fan.std.Env.prototype.tempDir = function() { return this.m_tempDir; }
fan.std.Env.prototype.index = function(key)
{
  return this.m_index.get(key, fan.sys.Str.$type.emptyList());
}
fan.std.Env.prototype.props = function(pod, uri, maxAge)
{
  var key = pod.$name() + ':' + uri.toStr();
  return this.$props(key);
}
fan.std.Env.prototype.config = function(pod, key, def)
{
  if (def === undefined) def = null;
  return this.props(pod, fan.std.Env.m_configProps, fan.std.Duration.m_oneMin).get(key, def);
}
fan.std.Env.prototype.locale = function(pod, key, def, locale)
{
  // if in test mode return pod::key
  if (fan.std.Env.localeTestMode &&
      key.indexOf(".browser") == -1 &&
      key.indexOf(".icon") == -1 &&
      key.indexOf(".accelerator") == -1 &&
      pod.$name() != "sys")
    return pod + "::" + key;
  if (def === undefined) def = fan.std.Env.noDef;
  if (locale === undefined) locale = fan.std.Locale.cur();
  var val;
  var maxAge = fan.std.Duration.m_maxVal;
  // 1. 'props(pod, `locale/{locale}.props`)'
  val = this.props(pod, locale.m_strProps, maxAge).get(key, null);
  if (val != null) return val;
  // 2. 'props(pod, `locale/{lang}.props`)'
  val = this.props(pod, locale.m_langProps, maxAge).get(key, null);
  if (val != null) return val;
  // 3. 'props(pod, `locale/en.props`)'
  val = this.props(pod, fan.std.Env.m_localeEnProps, maxAge).get(key, null);
  if (val != null) return val;
  // 4. Fallback to 'pod::key' unless 'def' specified
  if (def === fan.std.Env.noDef) return pod + "::" + key;
  return def;
}
fan.std.Env.prototype.$props = function(key)
{
  var map = this.m_props.get(key);
  if (map == null)
  {
    map = fan.std.Map.make()
    this.m_props.add(key, map);
  }
  return map;
}
fan.std.FacetData = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.FacetData.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.FacetData.prototype.$typeof = function() { return fan.std.FacetData.$type; }
fan.std.FacetData.make = function(type,val) {
  var self = new fan.std.FacetData();
  fan.std.FacetData.make$(self,type,val);
  return self;
  }
fan.std.FacetData.make$ = function(self,type,val)
{
  self.m_type = type;
  self.m_val = val;
  return;
}
fan.std.FacetData.prototype.m_val = null;
fan.std.FacetData.prototype.m_type = null;
fan.std.FacetList = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.FacetList.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_facetsData = fan.sys.List.make(fan.std.FacetData.$type);
  return;
}
fan.std.FacetList.prototype.$typeof = function() { return fan.std.FacetList.$type; }
fan.std.FacetList.prototype.facetsData = function()
{
  return this.m_facetsData;
}
fan.std.FacetList.prototype.facetsData$ = function(it)
{
  this.m_facetsData = it;
  return;
}
fan.std.FacetList.prototype._facets = function()
{
  return this.m__facets;
}
fan.std.FacetList.prototype._facets$ = function(it)
{
  this.m__facets = it;
  return;
}
fan.std.FacetList.prototype.addFacet = function(type,val)
{
  this.m_facetsData.add(fan.std.FacetData.make(type,val));
  return;
}
fan.std.FacetList.prototype.facets = function()
{
  var $this = this;
  if (this.m__facets != null)
  {
    return fan.sys.ObjUtil.coerce(this.m__facets,fan.std.Type.find("sys::List<sys::Facet>"));
  }
  ;
  this.m__facets = fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type.toNullable()),fan.std.Type.find("sys::List<sys::Facet>?"));
  this.m_facetsData.each(fan.sys.Func.make$closure(
    fan.std.$clos$_u46,
    function(f,ignoreparam$1)
    {
      try
      {
        $this.m__facets.add($this.decode(f));
      }
      catch ($_u47)
      {
        $_u47 = fan.sys.Err.make($_u47);
        if ($_u47 instanceof fan.sys.Err)
        {
          var e = $_u47;
          var e;
          e.trace();
        }
        else
        {
          throw $_u47;
        }
      }
      ;
      return;
    }));
  return fan.sys.ObjUtil.coerce(this.m__facets,fan.std.Type.find("sys::List<sys::Facet>"));
}
fan.std.FacetList.prototype.decode = function(f)
{
  var t = fan.std.Type.find(f.m_type);
  if (fan.sys.ObjUtil.equals(fan.sys.Str.size(f.m_val),0))
  {
    return fan.sys.ObjUtil.coerce(t.make(),fan.sys.Facet.$type);
  }
  ;
  return fan.sys.ObjUtil.coerce(fan.std.ObjDecoder.decode(f.m_val),fan.sys.Facet.$type);
}
fan.std.FacetList.prototype.getFacet = function(type,checked)
{
  if (checked === undefined) checked = true;
  var $this = this;
  var res = this.m__facets.find(fan.sys.Func.make$closure(
    fan.std.$clos$_u48,
    function(f,ignoreparam$1)
    {
      return fan.sys.ObjUtil.equals(fan.std.Type.$typeof(f),type);
    }));
  if ((checked && res == null))
  {
    throw fan.sys.UnknownFacetErr.make(type.qname());
  }
  ;
  return res;
}
fan.std.FacetList.prototype.hasFacet = function(type)
{
  return this.getFacet(type,false) != null;
}
fan.std.FacetList.make = function() {
  var self = new fan.std.FacetList();
  fan.std.FacetList.make$(self);
  return self;
  }
fan.std.FacetList.make$ = function(self)
{
  ;
  return;
}
fan.std.FacetList.prototype.m_facetsData = null;
fan.std.FacetList.prototype.m__facets = null;
fan.std.Pod = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Pod.of = function(obj)
{
  return fan.std.Type.of(obj).pod();
}
fan.std.Pod.list = function()
{
  if (fan.std.Pod.$list == null)
  {
    var pods = fan.std.Pod.$pods;
    var list = fan.sys.List.make(32, fan.std.Pod.$type);
    for (var n in pods) list.add(pods[n]);
    fan.std.Pod.$list = list.sort().toImmutable();
  }
  return fan.std.Pod.$list;
}
fan.std.Pod.prototype.$ctor = function(name)
{
  this.m_name  = name;
  this.m_types = [];
  this.m_meta = [];
  this.m_version = fan.std.Version.m_defVal;
}
fan.std.Pod.prototype.isImmutable = function()
{
  return true;
}
fan.std.Pod.prototype.toImmutable = function()
{
  return this;
}
fan.std.Pod.prototype.$typeof = function() { return fan.std.Pod.$type; }
fan.std.Pod.prototype.$name = function()
{
  return this.m_name;
}
fan.std.Pod.prototype.meta = function()
{
  return this.m_meta;
}
fan.std.Pod.prototype.version = function()
{
  if (this.m_version === undefined) {
    this.m_version = fan.std.Version.fromStr(this.m_meta["version"]);
  }
  return this.m_version;
}
fan.std.Pod.prototype.uri = function()
{
  if (this.m_uri == null) this.m_uri = fan.std.Uri.fromStr("fan://" + this.m_name);
  return this.m_uri;
}
fan.std.Pod.prototype.toStr = function() { return this.m_name; }
fan.std.Pod.prototype.types = function()
{
  if (this.$typesArray == null)
  {
    var arr = [];
    for (p in this.m_types) arr.push(this.m_types[p]);
    this.$typesArray = fan.sys.List.make(fan.std.Type.$type, arr);
  }
  return this.$typesArray;
}
fan.std.Pod.prototype.type = function(name, checked)
{
  if (checked === undefined) checked = true;
  var t = this.m_types[name];
  if (t == null && checked)
  {
    //fan.sys.ObjUtil.echo("UnknownType: " + this.m_name + "::" + name);
    //print("# UnknownType: " + this.m_name + "::" + name + "\n");
    throw fan.sys.UnknownTypeErr.make(this.m_name + "::" + name);
  }
  return t;
}
fan.std.Pod.prototype.locale = function(key, def)
{
  return fan.std.Env.cur().locale(this, key, def);
}
fan.std.Pod.prototype.$at = function(name, baseQname, mixins, facets, flags)
{
  var qname = this.m_name + "::" + name;
  if (this.m_types[name] != null)
    throw fan.sys.Err.make("Type already exists " + qname);
  var t = new fan.std.Type(qname, baseQname, mixins, facets, flags);
  this.m_types[name] = t;
  return t;
}
fan.std.Pod.prototype.$am = function(name, baseQname, mixins, facets, flags)
{
  var t = this.$at(name, baseQname, mixins, facets, flags);
  t.m_isMixin = true;
  return t;
}
fan.std.Pod.find = function(name, checked)
{
  if (checked === undefined) checked = true;
  var p = fan.std.Pod.$pods[name];
  if (p == null && checked) {
    //console.log("not find Pod :"+name+" in " + fan.std.Pod.$pods);
    throw fan.sys.UnknownPodErr.make(name);
  }
  return p;
}
fan.std.Pod.$add = function(name)
{
  if (fan.std.Pod.$pods[name] != null)
    throw fan.sys.Err.make("Pod already exists " + name);
  var p = new fan.std.Pod(name);
  fan.std.Pod.$pods[name] = p;
  //console.log("add Pod :"+name);
  return p;
}
fan.std.Pod.$pods = [];
fan.std.Pod.prototype.log = function()
{
  if (this.m_log == null) this.m_log = fan.sys.Log.get(this.m_name);
  return this.m_log;
}
fan.std.Version = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Version.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.Version.prototype.$typeof = function() { return fan.std.Version.$type; }
fan.std.Version.fromStr = function(version,checked)
{
  if (checked === undefined) checked = true;
  var $this = this;
  try
  {
    var fs = fan.sys.Str.split(version,fan.sys.ObjUtil.coerce(46,fan.sys.Int.$type.toNullable()),false);
    var seg = fan.sys.List.make(fan.sys.Int.$type);
    fs.each(fan.sys.Func.make$closure(
      fan.std.$clos$_u49,
      function(p,ignoreparam$1)
      {
        seg.add(fan.sys.ObjUtil.coerce(fan.sys.Str.toInt(p),fan.sys.Obj.$type.toNullable()));
        return;
      }));
    return fan.std.Version.make(seg);
  }
  catch ($_u50)
  {
    $_u50 = fan.sys.Err.make($_u50);
    if ($_u50 instanceof fan.sys.Err)
    {
      var e = $_u50;
      var e;
      if (checked)
      {
        throw fan.sys.ParseErr.make(version,e);
      }
      ;
      return ((fan.std.Version.static$init ? fan.std.Version.static$init() : null),fan.std.Version.m_defVal);
    }
    else
    {
      throw $_u50;
    }
  }
  ;
}
fan.std.Version.make = function(segments) {
  var self = new fan.std.Version();
  fan.std.Version.make$(self,segments);
  return self;
  }
fan.std.Version.make$ = function(self,segments)
{
  var $this = self;
  if (fan.sys.ObjUtil.equals(segments.size(),0))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(segments,fan.sys.Obj.$type.toNullable())));
  }
  ;
  if (segments.any(fan.sys.Func.make$closure(
    fan.std.$clos$_u51,
    function(it,ignoreparam$1)
    {
      return fan.sys.ObjUtil.compareLT(it,0);
    })))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(segments,fan.sys.Obj.$type.toNullable())));
  }
  ;
  self.m_segments = fan.sys.ObjUtil.coerce((function($this) { var $_u52 = segments; if ($_u52 == null) return null; return fan.sys.ObjUtil.toImmutable($_u52); })(self),fan.std.Type.find("sys::List<sys::Int>"));
  self.m_str = segments.join(".");
  return;
}
fan.std.Version.prototype.equals = function(obj)
{
  if (!fan.sys.ObjUtil.is(obj,fan.std.Version.$type))
  {
    return false;
  }
  ;
  return fan.sys.ObjUtil.equals(this.m_str,fan.sys.ObjUtil.coerce(obj,fan.std.Version.$type).m_str);
}
fan.std.Version.prototype.compare = function(obj)
{
  var that = fan.sys.ObjUtil.coerce(obj,fan.std.Version.$type);
  var a = this.m_segments;
  var b = that.m_segments;
  for (var i = 0; (fan.sys.ObjUtil.compareLT(i,a.size()) && fan.sys.ObjUtil.compareLT(i,b.size())); i = fan.sys.Int.increment(i))
  {
    var ai = a.get(i);
    var bi = b.get(i);
    if (fan.sys.ObjUtil.compareLT(ai,bi))
    {
      return -1;
    }
    ;
    if (fan.sys.ObjUtil.compareGT(ai,bi))
    {
      return 1;
    }
    ;
  }
  ;
  if (fan.sys.ObjUtil.compareLT(a.size(),b.size()))
  {
    return -1;
  }
  ;
  if (fan.sys.ObjUtil.compareGT(a.size(),b.size()))
  {
    return 1;
  }
  ;
  return 0;
}
fan.std.Version.prototype.hash = function()
{
  return fan.sys.Str.hash(this.m_str);
}
fan.std.Version.prototype.toStr = function()
{
  return this.m_str;
}
fan.std.Version.prototype.major = function()
{
  return this.m_segments.get(0);
}
fan.std.Version.prototype.minor = function()
{
  return this.m_segments.getSafe(1);
}
fan.std.Version.prototype.build = function()
{
  return this.m_segments.getSafe(2);
}
fan.std.Version.prototype.patch = function()
{
  return this.m_segments.getSafe(3);
}
fan.std.Version.static$init = function()
{
  if (fan.std.Version.static$inited) return;
  fan.std.Version.static$inited = true;
  fan.std.Version.m_defVal = fan.std.Version.fromStr("0");
  return;
}
fan.std.Version.prototype.m_str = null;
fan.std.Version.m_defVal = null;
fan.std.Version.prototype.m_segments = null;
fan.std.Depend = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Depend.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.Depend.prototype.$typeof = function() { return fan.std.Depend.$type; }
fan.std.Depend.fromStr = function(s)
{
  var pos = fan.sys.Str.find(s," ");
  if ((fan.sys.ObjUtil.compareLE(pos,0) || fan.sys.ObjUtil.compareGE(pos,fan.sys.Int.minus(fan.sys.Str.size(s),1))))
  {
    throw fan.sys.ParseErr.make(fan.sys.Str.plus("Invalid Depend :",s));
  }
  ;
  var $name = fan.sys.Str.getRange(s,fan.sys.Range.make(0,pos,true));
  var end = fan.sys.Str.find(s,"+");
  if (fan.sys.ObjUtil.equals(end,-1))
  {
    end = fan.sys.Str.find(s,",");
  }
  ;
  var ver = fan.std.Version.fromStr(fan.sys.Str.getRange(s,fan.sys.Range.make(fan.sys.Int.plus(pos,1),end)));
  return fan.std.Depend.privateMake($name,ver);
}
fan.std.Depend.privateMake = function($name,ver) {
  var self = new fan.std.Depend();
  fan.std.Depend.privateMake$(self,$name,ver);
  return self;
  }
fan.std.Depend.privateMake$ = function(self,$name,ver)
{
  self.m_$name = $name;
  self.m_version = ver;
  self.m_str = fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",$name)," "),self.m_version);
  return;
}
fan.std.Depend.prototype.equals = function(that)
{
  if (!fan.sys.ObjUtil.is(that,fan.std.Depend.$type))
  {
    return false;
  }
  ;
  return fan.sys.ObjUtil.equals(this.m_str,fan.sys.ObjUtil.coerce(that,fan.std.Depend.$type).m_str);
}
fan.std.Depend.prototype.hash = function()
{
  return fan.sys.Str.hash(this.m_str);
}
fan.std.Depend.prototype.toStr = function()
{
  return this.m_str;
}
fan.std.Depend.prototype.match = function(v)
{
  if (fan.sys.ObjUtil.compareGT(this.m_version.m_segments.size(),v.m_segments.size()))
  {
    return false;
  }
  ;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_version.m_segments.size()); i = fan.sys.Int.increment(i))
  {
    if (fan.sys.ObjUtil.compareNE(this.m_version.m_segments.get(i),v.m_segments.get(i)))
    {
      return false;
    }
    ;
  }
  ;
  return true;
}
fan.std.Depend.prototype.m_str = null;
fan.std.Depend.prototype.m_$name = null;
fan.std.Depend.prototype.m_version = null;
fan.std.ConstFlags = function() {}
fan.std.ConstFlags.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.ConstFlags.prototype.$typeof = function() { return fan.std.ConstFlags.$type; }
fan.std.ConstFlags.static$init = function()
{
  if (fan.std.ConstFlags.static$inited) return;
  fan.std.ConstFlags.static$inited = true;
  fan.std.ConstFlags.m_Abstract = 1;
  fan.std.ConstFlags.m_Const = 2;
  fan.std.ConstFlags.m_Ctor = 4;
  fan.std.ConstFlags.m_Enum = 8;
  fan.std.ConstFlags.m_Facet = 16;
  fan.std.ConstFlags.m_Final = 32;
  fan.std.ConstFlags.m_Getter = 64;
  fan.std.ConstFlags.m_Internal = 128;
  fan.std.ConstFlags.m_Mixin = 256;
  fan.std.ConstFlags.m_Native = 512;
  fan.std.ConstFlags.m_Override = 1024;
  fan.std.ConstFlags.m_Private = 2048;
  fan.std.ConstFlags.m_Protected = 4096;
  fan.std.ConstFlags.m_Public = 8192;
  fan.std.ConstFlags.m_Setter = 16384;
  fan.std.ConstFlags.m_Static = 32768;
  fan.std.ConstFlags.m_Storage = 65536;
  fan.std.ConstFlags.m_Synthetic = 131072;
  fan.std.ConstFlags.m_Virtual = 262144;
  fan.std.ConstFlags.m_Struct = 524288;
  fan.std.ConstFlags.m_Extension = 1048576;
  fan.std.ConstFlags.m_RuntimeConst = 2097152;
  fan.std.ConstFlags.m_Readonly = 4194304;
  fan.std.ConstFlags.m_Async = 8388608;
  fan.std.ConstFlags.m_Overload = 16777216;
  fan.std.ConstFlags.m_FlagsMask = 268435455;
  return;
}
fan.std.ConstFlags.m_Abstract = 0;
fan.std.ConstFlags.m_Const = 0;
fan.std.ConstFlags.m_Ctor = 0;
fan.std.ConstFlags.m_Enum = 0;
fan.std.ConstFlags.m_Facet = 0;
fan.std.ConstFlags.m_Final = 0;
fan.std.ConstFlags.m_Getter = 0;
fan.std.ConstFlags.m_Internal = 0;
fan.std.ConstFlags.m_Mixin = 0;
fan.std.ConstFlags.m_Native = 0;
fan.std.ConstFlags.m_Override = 0;
fan.std.ConstFlags.m_Private = 0;
fan.std.ConstFlags.m_Protected = 0;
fan.std.ConstFlags.m_Public = 0;
fan.std.ConstFlags.m_Setter = 0;
fan.std.ConstFlags.m_Static = 0;
fan.std.ConstFlags.m_Storage = 0;
fan.std.ConstFlags.m_Synthetic = 0;
fan.std.ConstFlags.m_Virtual = 0;
fan.std.ConstFlags.m_Struct = 0;
fan.std.ConstFlags.m_Extension = 0;
fan.std.ConstFlags.m_RuntimeConst = 0;
fan.std.ConstFlags.m_Readonly = 0;
fan.std.ConstFlags.m_Async = 0;
fan.std.ConstFlags.m_Overload = 0;
fan.std.ConstFlags.m_FlagsMask = 0;
fan.std.Type = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Type.prototype.$ctor = function(qname, base, mixins, facets, flags)
{
  // workaround for inhertiance
  if (qname === undefined) return;
  // mixins
  if (fan.std.Type.$type != null)
  {
    var acc = fan.sys.List.make(fan.std.Type.$type, []);
    for (var i=0; i<mixins.length; i++)
      acc.add(fan.std.Type.find(mixins[i]));
    acc.m_readOnly = true;
    this.m_mixins = acc;
  }
  var s = qname.split("::");
  this.m_qname    = qname;
  this.m_pod      = fan.std.Pod.find(s[0]);
  this.m_name     = s[1];
  this.m_base     = base == null ? null : fan.std.Type.find(base);
  this.m_myFacets = new fan.std.Facets(facets);
  this.m_flags    = flags;
  this.m_$qname   = 'fan.' + this.m_pod + '.' + this.m_name;
  this.m_isMixin  = false;
  this.m_nullable = new fan.std.NullableType(this);
  this.m_slotsInfo   = [];   // $af/$am
  this.m_slotsByName = null; // doReflect Str:Slot
}
fan.std.Type.prototype.isImmutable = function()
{
  return true;
}
fan.std.Type.prototype.toImmutable = function()
{
  return this;
}
fan.std.Type.prototype.pod = function() { return this.m_pod; }
fan.std.Type.prototype.$name = function() { return this.m_name; }
fan.std.Type.prototype.qname = function() { return this.m_qname; }
fan.std.Type.prototype.signature = function() { return this.m_qname; }
fan.std.Type.prototype.isAbstract  = function() { return (this.flags() & fan.sys.FConst.Abstract) != 0; }
fan.std.Type.prototype.isClass     = function() { return (this.flags() & (fan.sys.FConst.Enum|fan.sys.FConst.Mixin)) == 0; }
fan.std.Type.prototype.isConst     = function() { return (this.flags() & fan.sys.FConst.Const) != 0; }
fan.std.Type.prototype.isEnum      = function() { return (this.flags() & fan.sys.FConst.Enum) != 0; }
fan.std.Type.prototype.isFacet     = function() { return (this.flags() & fan.sys.FConst.Facet) != 0; }
fan.std.Type.prototype.isFinal     = function() { return (this.flags() & fan.sys.FConst.Final) != 0; }
fan.std.Type.prototype.isInternal  = function() { return (this.flags() & fan.sys.FConst.Internal) != 0; }
fan.std.Type.prototype.isMixin     = function() { return (this.flags() & fan.sys.FConst.Mixin) != 0; }
fan.std.Type.prototype.isPublic    = function() { return (this.flags() & fan.sys.FConst.Public) != 0; }
fan.std.Type.prototype.isSynthetic = function() { return (this.flags() & fan.sys.FConst.Synthetic) != 0; }
fan.std.Type.prototype.flags = function() { return this.m_flags; };
fan.std.Type.prototype.trap = function(name, args)
{
  // private undocumented access
  if (name == "flags") return this.flags();
  return fan.sys.Obj.prototype.trap.call(this, name, args);
}
fan.std.Type.prototype.equals = function(that)
{
  if (that instanceof fan.std.Type)
    return this.signature() === that.signature();
  else
    return false;
}
fan.std.Type.prototype.isVal = function()
{
  return this === fan.sys.Bool.$type ||
         this === fan.sys.Int.$type ||
         this === fan.sys.Float.$type;
}
fan.std.Type.prototype.isClass = function()   { return !this.m_isMixin && this.m_base.m_qname != "sys::Enum"; }
fan.std.Type.prototype.isEnum = function()    { return this.m_base != null && this.m_base.m_qname == "sys::Enum"; }
fan.std.Type.prototype.isMixin = function()   { return this.m_isMixin; }
fan.std.Type.prototype.log = function()       { return fan.std.Log.get(this.m_pod.m_name); }
fan.std.Type.prototype.toStr = function()     { return this.signature(); }
fan.std.Type.prototype.toLocale = function()  { return this.signature(); }
fan.std.Type.prototype.$typeof = function()   { return fan.std.Type.$type; }
fan.std.Type.prototype.$literalEncode = function(out)  { out.w(this.signature()).w("#"); }
fan.std.Type.prototype.isNullable = function() { return false; }
fan.std.Type.prototype.toNonNullable = function() { return this; }
fan.std.Type.prototype.toNullable = function() { return this.m_nullable; }
fan.std.Type.prototype.toNonNullable = function() { return this; }
fan.std.Type.prototype.emptyList = function()
{
  if (this.$emptyList == null) {
    this.$emptyList = fan.sys.List.make(0, this).toImmutable();
    //this.$emptyList.m_readOnly = true;
    //this.$emptyList.m_immutable = true;
  }
  return this.$emptyList;
}
fan.std.Type.prototype.make = function(args)
{
  if (args === undefined) args = null;
  var make = this.method("make", false);
  if (make != null && make.isPublic())
  {
    if (this.isAbstract() && !make.isStatic())
      throw fan.sys.Err.make("Cannot instantiate abstract class: " + this.m_qname);
    var numArgs = args == null ? 0 : args.size();
    var params = make.params();
    if ((numArgs == params.size()) ||
        (numArgs < params.size() && params.get(numArgs).hasDefault()))
      return make.invoke(null, args);
  }
  var defVal = this.slot("defVal", false);
  if (defVal != null && defVal.isPublic())
  {
    if (defVal instanceof fan.std.Field) return defVal.get(null);
    if (defVal instanceof fan.std.Method) return defVal.invoke(null, null);
  }
  throw fan.sys.Err.make("Type missing 'make' or 'defVal' slots: " + this);
}
fan.std.Type.prototype.slots   = function() { return this.reflect().m_slotList.ro(); }
fan.std.Type.prototype.methods = function() { return this.reflect().m_methodList.ro(); }
fan.std.Type.prototype.fields  = function() { return this.reflect().m_fieldList.ro(); }
fan.std.Type.prototype.slot = function(name, checked)
{
  if (checked === undefined) checked = true;
  var slot = this.reflect().m_slotsByName[name];
  if (slot != null) return slot;
  if (checked) throw fan.sys.UnknownSlotErr.make(this.m_qname + "." + name);
  return null;
}
fan.std.Type.prototype.method = function(name, checked)
{
  var slot = this.slot(name, checked);
  if (slot == null) return null;
  return fan.sys.ObjUtil.coerce(slot, fan.std.Method.$type);
}
fan.std.Type.prototype.field = function(name, checked)
{
  var slot = this.slot(name, checked);
  if (slot == null) return null;
  return fan.sys.ObjUtil.coerce(slot, fan.std.Field.$type);
}
fan.std.Type.prototype.$am = function(name, flags, returns, params, facets)
{
  var r = fan.std.Type.find(returns);
  var m = new fan.std.Method(this, name, flags, r, params, facets);
  this.m_slotsInfo.push(m);
  return this;
}
fan.std.Type.prototype.$af = function(name, flags, of, facets)
{
  var t = fan.std.Type.find(of);
  var f = new fan.std.Field(this, name, flags, t, facets);
  this.m_slotsInfo.push(f);
  return this;
}
fan.std.Type.prototype.hasFacet = function(type)
{
  return this.facet(type, false) != null;
}
fan.std.Type.prototype.facets = function()
{
  if (this.m_inheritedFacets == null) this.loadFacets();
  return this.m_inheritedFacets.list();
}
fan.std.Type.prototype.facet = function(type, checked)
{
  if (checked === undefined) checked = true;
  if (this.m_inheritedFacets == null) this.loadFacets();
  return this.m_inheritedFacets.get(type, checked);
}
fan.std.Type.prototype.loadFacets = function()
{
  var f = this.m_myFacets.dup();
  var inheritance = this.inheritance();
  for (var i=0; i<inheritance.size(); ++i)
  {
    var x = inheritance.get(i);
    if (x === this) continue;
    if (x.qname() == "sys::Obj") continue;
    if (x.m_myFacets) f.inherit(x.m_myFacets);
  }
  this.m_inheritedFacets = f;
}
fan.std.Type.prototype.reflect = function()
{
  if (this.m_slotsByName != null) return this;
  this.doReflect();
  return this;
}
fan.std.Type.prototype.doReflect = function()
{
  // these are working accumulators used to build the
  // data structures of my defined and inherited slots
  var slots = [];
  var nameToSlot  = {};   // String -> Slot
  var nameToIndex = {};   // String -> Int
  // merge in base class and mixin classes
  if (this.m_mixins) {
    for (var i=0; i<this.m_mixins.size(); i++) this.$mergeType(this.m_mixins.get(i), slots, nameToSlot, nameToIndex);
  }
  this.$mergeType(this.m_base, slots, nameToSlot, nameToIndex);
  // merge in all my slots
  for (var i=0; i<this.m_slotsInfo.length; i++)
  {
    var slot = this.m_slotsInfo[i]
    this.$mergeSlot(slot, slots, nameToSlot, nameToIndex);
  }
  // break out into fields and methods
  var fields  = [];
  var methods = [];
  for (var i=0; i<slots.length; i++)
  {
    var slot = slots[i];
    if (slot instanceof fan.std.Field) fields.push(slot);
    else methods.push(slot);
  }
  // set lists
  this.m_slotList    = fan.sys.List.make(fan.std.Slot.$type, slots);
  this.m_fieldList   = fan.sys.List.make(fan.std.Field.$type, fields);
  this.m_methodList  = fan.sys.List.make(fan.std.Method.$type, methods);
  this.m_slotsByName = nameToSlot;
}
fan.std.Type.prototype.$mergeType = function(inheritedType, slots, nameToSlot, nameToIndex)
{
  if (inheritedType == null) return;
  var inheritedSlots = inheritedType.reflect().slots();
  for (var i=0; i<inheritedSlots.size(); i++)
    this.$mergeSlot(inheritedSlots.get(i), slots, nameToSlot, nameToIndex);
}
fan.std.Type.prototype.$mergeSlot = function(slot, slots, nameToSlot, nameToIndex)
{
  // skip constructors which aren't mine
  if (slot.isCtor() && slot.m_parent != this) return;
  var name = slot.m_name;
  var dup  = nameToIndex[name];
  if (dup != null)
  {
    // if the slot is inherited from Obj, then we can
    // safely ignore it as an override - the dup is most
    // likely already the same Object method inherited from
    // a mixin; but the dup might actually be a more specific
    // override in which case we definitely don't want to
    // override with the sys::Object version
    if (slot.parent() == fan.sys.Obj.$type)
      return;
    // if given the choice between two *inherited* slots where
    // one is concrete and abstract, then choose the concrete one
    var dupSlot = slots[dup];
    if (slot.parent() != this && slot.isAbstract() && !dupSlot.isAbstract())
      return;
    // check if this is a Getter or Setter, in which case the Field
    // trumps and we need to cache the method on the Field
    // Note: this works because we assume the compiler always generates
    // the field before the getter and setter in fcode
    if ((slot.m_flags & (fan.sys.FConst.Getter | fan.sys.FConst.Setter)) != 0)
    {
      var field = slots[dup];
      if ((slot.m_flags & fan.sys.FConst.Getter) != 0)
        field.m_getter = slot;
      else
        field.m_setter = slot;
      return;
    }
    nameToSlot[name] = slot;
    slots[dup] = slot;
  }
  else
  {
    nameToSlot[name] = slot;
    slots.push(slot);
    nameToIndex[name] = slots.length-1;
  }
}
fan.std.Type.prototype.base = function()
{
  return this.m_base;
}
fan.std.Type.prototype.mixins = function()
{
  // lazy-build mxins list for Obj and Type
  if (this.m_mixins == null)
    this.m_mixins = fan.std.Type.$type.emptyList();
  return this.m_mixins;
}
fan.std.Type.prototype.inheritance = function()
{
  if (this.m_inheritance == null) this.m_inheritance = fan.std.Type.$inheritance(this);
  return this.m_inheritance;
}
fan.std.Type.$inheritance = function(self)
{
  var map = {};
  var acc = fan.sys.List.make(8, fan.std.Type.$type);
  // handle Void as a special case
  if (self == fan.sys.Void.$type)
  {
    acc.add(self);
    return acc.trim().ro();
  }
  // add myself
  map[self.qname()] = self;
  acc.add(self);
  // add my direct inheritance inheritance
  fan.std.Type.addInheritance(self.base(), acc, map);
  var mixins = self.mixins();
  for (var i=0; i<mixins.size(); ++i)
    fan.std.Type.addInheritance(mixins.get(i), acc, map);
  return acc.trim().ro();
}
fan.std.Type.addInheritance = function(t, acc, map)
{
  if (t == null) return;
  var ti = t.inheritance();
  for (var i=0; i<ti.size(); ++i)
  {
    var x = ti.get(i);
    if (map[x.qname()] == null)
    {
      map[x.qname()] = x;
      acc.add(x);
    }
  }
}
fan.std.Type.prototype.fits = function(that) { return this.toNonNullable().is(that.toNonNullable()); }
fan.std.Type.prototype.is = function(that)
{
  // we don't take nullable into account for fits
  if (that instanceof fan.std.NullableType)
    that = that.m_root;
  if (this.equals(that)) return true;
  // check for void
  if (this === fan.sys.Void.$type) return false;
  // check base class
  var base = this.m_base;
  while (base != null)
  {
    if (base.equals(that)) return true;
    base = base.m_base;
  }
  // check mixins
  var t = this;
  while (t != null)
  {
    var m = t.mixins();
    for (var i=0; i<m.size(); i++)
      if (fan.std.Type.checkMixin(m.get(i), that)) return true;
    t = t.m_base;
  }
  return false;
}
fan.std.Type.checkMixin = function(mixin, that)
{
  if (mixin.equals(that)) return true;
  var m = mixin.mixins();
  for (var i=0; i<m.size(); i++)
    if (fan.std.Type.checkMixin(m.get(i), that))
      return true;
  return false;
}
fan.std.Type.find = function(sig, checked)
{
  return fan.sys.Sys.findType(sig, checked);
}
fan.std.Type.of = function(obj)
{
  if (obj instanceof fan.sys.Obj)
    return obj.$typeof();
  else
    return fan.std.Type.toFanType(obj);
}
fan.std.Type.$typeof = function(obj)
{
  return fan.std.Type.of(obj);
}
fan.std.Type.toFanType = function(obj)
{
  if (obj == null) throw fan.sys.Err.make("std::Type.toFanType: obj is null");
  if (obj.$fanType != undefined) return obj.$fanType;
  if ((typeof obj) == "boolean" || obj instanceof Boolean) return fan.sys.Bool.$type;
  if ((typeof obj) == "number"  || obj instanceof Number)  return fan.sys.Int.$type;
  if ((typeof obj) == "string"  || obj instanceof String)  return fan.sys.Str.$type;
  throw fan.sys.Err.make("std::Type.toFanType: Not a Fantom type: " + obj);
}
fan.std.Type.common = function(objs)
{
  if (objs.length == 0) return fan.sys.Obj.$type.toNullable();
  var nullable = false;
  var best = null;
  for (var i=0; i<objs.length; i++)
  {
    var obj = objs[i];
    if (obj == null) { nullable = true; continue; }
    var t = fan.sys.ObjUtil.$typeof(obj);
    if (best == null) { best = t; continue; }
    while (!t.is(best))
    {
      best = best.base();
      if (best == null) return nullable ? fan.sys.Obj.$type.toNullable() : fan.sys.Obj.$type;
    }
  }
  if (best == null) best = fan.sys.Obj.$type;
  return nullable ? best.toNullable() : best;
}
fan.std.NullableType = fan.sys.Obj.$extend(fan.std.Type)
fan.std.NullableType.prototype.$ctor = function(root)
{
  this.m_root = root;
  this.m_signature = root.signature() + "?";
}
fan.std.NullableType.prototype.podName = function() { return this.m_root.podName(); }
fan.std.NullableType.prototype.pod = function() { return this.m_root.pod(); }
fan.std.NullableType.prototype.name = function() { return this.m_root.name(); }
fan.std.NullableType.prototype.qname = function() { return this.m_root.qname(); }
fan.std.NullableType.prototype.signature = function() { return this.m_signature; }
fan.std.NullableType.prototype.flags = function() { return this.m_root.flags(); }
fan.std.NullableType.prototype.base = function() { return this.m_root.base(); }
fan.std.NullableType.prototype.mixins = function() { return this.m_root.mixins(); }
fan.std.NullableType.prototype.inheritance = function() { return this.m_root.inheritance(); }
fan.std.NullableType.prototype.is = function(type) { return this.m_root.is(type); }
fan.std.NullableType.prototype.isVal = function() { return this.m_root.isVal(); }
fan.std.NullableType.prototype.isNullable = function() { return true; }
fan.std.NullableType.prototype.toNullable = function() { return this; }
fan.std.NullableType.prototype.toNonNullable = function() { return this.m_root; }
fan.std.NullableType.prototype.isGenericType = function() { return this.m_root.isGenericType(); }
fan.std.NullableType.prototype.isGenericInstance = function() { return this.m_root.isGenericInstance(); }
fan.std.NullableType.prototype.isGenericParameter = function() { return this.m_root.isGenericParameter(); }
fan.std.NullableType.prototype.getRawType = function() { return this.m_root.getRawType(); }
fan.std.NullableType.prototype.params = function() { return this.m_root.params(); }
fan.std.NullableType.prototype.parameterize = function(params) { return this.m_root.parameterize(params).toNullable(); }
fan.std.NullableType.prototype.fields = function() { return this.m_root.fields(); }
fan.std.NullableType.prototype.methods = function() { return this.m_root.methods(); }
fan.std.NullableType.prototype.slots = function() { return this.m_root.slots(); }
fan.std.NullableType.prototype.slot = function(name, checked) { return this.m_root.slot(name, checked); }
fan.std.NullableType.prototype.facets = function() { return this.m_root.facets(); }
fan.std.NullableType.prototype.facet = function(type, checked) { return this.m_root.facet(type, checked); }
fan.std.NullableType.prototype.doc = function() { return this.m_root.doc(); }
fan.std.Slot = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Slot.prototype.$ctor = function()
{
  this.m_parent = null;
  this.m_qname  = null;
  this.m_name   = null;
  this.m_flags  = null;
  this.m_facets = null;
}
fan.std.Slot.prototype.isImmutable = function()
{
  return true;
}
fan.std.Slot.prototype.toImmutable = function()
{
  return this;
}
fan.std.Slot.prototype.$typeof = function() { return fan.std.Slot.$type; }
fan.std.Slot.prototype.toStr = function() { return this.m_qname; }
fan.std.Slot.prototype.$literalEncode = function(out)
{
  this.m_parent.$literalEncode(out);
  out.w(this.m_name);
}
fan.std.Slot.findMethod = function(qname, checked)
{
  if (checked === undefined) checked = true;
  var slot = fan.std.Slot.find(qname, checked);
  if (slot instanceof fan.std.Method || checked)
    return fan.sys.ObjUtil.coerce(slot, fan.std.Method.$type);
  return null;
}
fan.std.Slot.findField = function(qname, checked)
{
  if (checked === undefined) checked = true;
  var slot = fan.std.Slot.find(qname, checked);
  if (slot instanceof fan.std.Field || checked)
    return fan.sys.ObjUtil.coerce(slot, fan.std.Field.$type);
  return null;
}
fan.std.Slot.find = function(qname, checked)
{
  if (checked === undefined) checked = true;
  var typeName, slotName;
  try
  {
    var dot = qname.indexOf('.');
    typeName = qname.substring(0, dot);
    slotName = qname.substring(dot+1);
  }
  catch (e)
  {
    throw fan.sys.Err.make("Invalid slot qname \"" + qname + "\", use <pod>::<type>.<slot>");
  }
  var type = fan.std.Type.find(typeName, checked);
  if (type == null) return null;
  return type.slot(slotName, checked);
}
fan.std.Slot.findFunc = function(qname, checked)
{
  if (checked === undefined) checked = true;
  var m = fan.std.Slot.find(qname, checked);
  if (m == null) return null;
  return m.m_func;
}
fan.std.Slot.prototype.parent = function() { return this.m_parent; }
fan.std.Slot.prototype.qname = function() { return this.m_qname; }
fan.std.Slot.prototype.$name = function() { return this.m_name; }
fan.std.Slot.prototype.isField = function() { return this instanceof fan.std.Field; }
fan.std.Slot.prototype.isMethod = function() { return this instanceof fan.std.Method; }
fan.std.Slot.prototype.isAbstract = function()  { return (this.m_flags & fan.sys.FConst.Abstract)  != 0; }
fan.std.Slot.prototype.isConst = function()     { return (this.m_flags & fan.sys.FConst.Const)     != 0; }
fan.std.Slot.prototype.isCtor = function()      { return (this.m_flags & fan.sys.FConst.Ctor)      != 0; }
fan.std.Slot.prototype.isInternal = function()  { return (this.m_flags & fan.sys.FConst.Internal)  != 0; }
fan.std.Slot.prototype.isNative = function()    { return (this.m_flags & fan.sys.FConst.Native)    != 0; }
fan.std.Slot.prototype.isOverride = function()  { return (this.m_flags & fan.sys.FConst.Override)  != 0; }
fan.std.Slot.prototype.isPrivate = function()   { return (this.m_flags & fan.sys.FConst.Private)   != 0; }
fan.std.Slot.prototype.isProtected = function() { return (this.m_flags & fan.sys.FConst.Protected) != 0; }
fan.std.Slot.prototype.isPublic = function()    { return (this.m_flags & fan.sys.FConst.Public)    != 0; }
fan.std.Slot.prototype.isStatic = function()    { return (this.m_flags & fan.sys.FConst.Static)    != 0; }
fan.std.Slot.prototype.isSynthetic = function() { return (this.m_flags & fan.sys.FConst.Synthetic) != 0; }
fan.std.Slot.prototype.isVirtual = function()   { return (this.m_flags & fan.sys.FConst.Virtual)   != 0; }
fan.std.Slot.prototype.facets = function() { return this.m_facets.list(); }
fan.std.Slot.prototype.hasFacet = function(type) { return this.facet(type, false) != null; }
fan.std.Slot.prototype.facet = function(type, checked)
{
  if (checked === undefined) checked = true;
  return this.m_facets.get(type, checked);
}
fan.std.Slot.prototype.$$name = function(n)
{
  // must keep in sync with compilerJs::JsNode
  switch (n)
  {
    case "char":   return "$char";
    case "delete": return "$delete";
    case "enum":   return "$enum";
    case "export": return "$export";
    case "fan":    return "$fan";
    case "float":  return "$float";
    case "import": return "$import";
    case "in":     return "$in";
    case "int":    return "$int";
    case "name":   return "$name";
    case "typeof": return "$typeof";
    case "var":    return "$var";
    case "with":   return "$with";
  }
  return n;
}
fan.std.Facets = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Facets.prototype.$ctor = function(map)
{
  this.m_map = map;
  this.m_list = null;
}
fan.std.Facets.empty = function()
{
  var x = fan.std.Facets.m_emptyVal;
  if (x == null) x = fan.std.Facets.m_emptyVal = new fan.std.Facets({});
  return x;
}
fan.std.Facets.makeTransient = function()
{
  var x = fan.std.Facets.m_transientVal;
  if (x == null)
  {
    var m = {};
    m[fan.sys.Transient.$type.qname()] = "";
    x = fan.std.Facets.m_transientVal = new fan.std.Facets(m);
  }
  return x;
}
fan.std.Facets.prototype.list = function()
{
  if (this.m_list == null)
  {
    this.m_list = fan.sys.List.make(8, fan.sys.Facet.$type);
    for (var key in this.m_map)
    {
      var type = fan.std.Type.find(key);
      this.m_list.add(this.get(type, true));
    }
    this.m_list = this.m_list.toImmutable();
  }
  return this.m_list;
}
fan.std.Facets.prototype.get = function(type, checked)
{
  var val = this.m_map[type.qname()];
  if (typeof val == "string")
  {
    var f = this.decode(type, val);
    this.m_map[type.qname()] = f;
    return f;
  }
  //if (val instanceof fan.sys.Facet)
  if (val != null) return val;
  if (checked) throw fan.sys.UnknownFacetErr.make(type.qname());
  return null;
}
fan.std.Facets.prototype.decode = function(type, s)
{
  try
  {
    // if no string use make/defVal
    if (s.length == 0) return type.make();
    // decode using normal Fantom serialization
    return fan.std.ObjDecoder.decode(s);
  }
  catch (e)
  {
    var msg = "ERROR: Cannot decode facet " + type + ": " + s;
    fan.sys.ObjUtil.echo(msg);
    delete this.m_map[type.qname()];
    throw fan.sys.IOErr.make(msg);
  }
}
fan.std.Facets.prototype.dup = function()
{
  var dup = {};
  for (key in this.m_map) dup[key] = this.m_map[key];
  return new fan.std.Facets(dup);
}
fan.std.Facets.prototype.inherit = function(facets)
{
  var keys = [];
  for (key in facets.m_map) keys.push(key);
  if (keys.length == 0) return;
  this.m_list = null;
  for (var i=0; i<keys.length; i++)
  {
    var key = keys[i];
    // if already mapped skipped
    if (this.m_map[key] != null) continue;
    // if not an inherited facet skip it
    var type = fan.std.Type.find(key);
    var meta = type.facet(fan.sys.FacetMeta.$type, false);
    if (meta == null || !meta.m_inherited) continue;
    // inherit
    this.m_map[key] = facets.m_map[key];
  }
}
fan.std.Facets.m_emptyVal = null;
fan.std.Facets.m_transientVal = null;
fan.std.Field = fan.sys.Obj.$extend(fan.std.Slot);
fan.std.Field.makeSetFunc = function(map)
{
  return fan.sys.Func.make(
    fan.sys.List.make(8, fan.std.Param.$type),
    fan.sys.Void.$type,
    function(obj)
    {
      var keys = map.keys();
      for (var i=0; i<keys.size(); i++)
      {
        var field = keys.get(i);
        var val = map.get(field);
        field.set(obj, val, false); //, obj != inCtor);
      }
    });
}
fan.std.Field.prototype.$ctor = function(parent, name, flags, type, facets)
{
  this.m_parent = parent;
  this.m_name   = name;
  this.m_qname  = parent.qname() + "." + name;
  this.m_flags  = flags;
  this.m_type   = type;
  this.m_$name  = this.$$name(name);
  this.m_$qname = this.m_parent.m_$qname + '.m_' + this.m_$name;
  this.m_getter = null;
  this.m_setter = null;
  this.m_facets = new fan.std.Facets(facets);
}
fan.std.Field.prototype.trap = function(name, args)
{
  // private undocumented access
  if (name == "getter") return this.m_getter;
  if (name == "setter") return this.m_setter;
  return fan.sys.Obj.prototype.trap.call(this, name, args);
}
fan.std.Field.prototype.type = function() { return this.m_type; }
fan.std.Field.prototype.get = function(instance)
{
  if (this.isStatic())
  {
    return eval(this.m_$qname);
  }
  else
  {
    var target = instance;
    if ((this.m_flags & fan.sys.FConst.Native) != 0)
      target = instance.peer;
    var getter = target[this.m_$name];
    if (getter != null)
      return getter.call(target);
    else
      return target["m_"+this.m_$name]
  }
}
fan.std.Field.prototype.set = function(instance, value, checkConst)
{
  if (checkConst === undefined) checkConst = true;
  // check const
  if ((this.m_flags & fan.sys.FConst.Const) != 0)
  {
    if (checkConst)
      throw fan.sys.ReadonlyErr.make("Cannot set const field " + this.m_qname);
    else if (value != null && !fan.sys.ObjUtil.isImmutable(value))
      throw fan.sys.ReadonlyErr.make("Cannot set const field " + this.m_qname + " with mutable value");
  }
  // check static
  if ((this.m_flags & fan.sys.FConst.Static) != 0) // && !parent.isJava())
    throw fan.sys.ReadonlyErr.make("Cannot set static field " + this.m_qname);
  // check type
  if (value != null && !fan.sys.ObjUtil.$typeof(value).is(this.m_type.toNonNullable()))
    throw fan.sys.ArgErr.make("Wrong type for field " + this.m_qname + ": " + this.m_type + " != " + fan.sys.ObjUtil.$typeof(value));
  // TODO
  //if (setter != null)
  //{
  //  setter.invoke(instance, new Object[] { value });
  //  return;
  //}
  if ((this.m_flags & fan.sys.FConst.Native) != 0)
  {
    var peer = instance.peer;
    var setter = peer[this.m_$name + "$"];
    setter.call(peer, instance, value);
  }
  else
  {
    var setter = instance[this.m_$name + "$"];
    if (setter != null)
      setter.call(instance, value);
    else
      instance["m_"+this.m_$name] = value;
  }
}
fan.std.Field.prototype.$typeof = function() { return fan.std.Field.$type; }
fan.std.Method = fan.sys.Obj.$extend(fan.std.Slot);
fan.std.Method.prototype.$ctor = function(parent, name, flags, returns, params, facets, generic)
{
  if (generic === undefined) generic = null;
  this.m_parent  = parent;
  this.m_name    = name;
  this.m_qname   = parent.qname() + "." + name;
  this.m_flags   = flags;
  this.m_returns = returns;
  this.m_params  = params;
  this.m_func    = new fan.std.MethodFunc(this, returns);
  this.m_$name   = this.$$name(name);
  this.m_$qname  = this.m_parent.m_$qname + '.' + this.m_$name;
  this.m_facets  = new fan.std.Facets(facets);
  this.m_mask    = 0;//(generic != null) ? 0 : fan.std.Method.toMask(parent, returns, params);
  this.m_generic = generic;
}
fan.std.Method.prototype.invoke = function(instance, args)
{
  var func = (this.isCtor() || this.isStatic())
    ? eval(this.m_$qname)
    : instance[this.m_$name];
  var vals = args==null ? [] : args.toJs();
  // if not found, assume this is primitive that needs
  // to map into a static call
  if (func == null && instance != null)
  {
    // Obj maps to ObjUtil
    qname = this.m_$qname;
    if (this.m_parent.m_qname === "sys::Obj")
      qname = "fan.sys.ObjUtil." + this.m_$name;
    func = eval(qname);
    vals.splice(0, 0, instance);
    instance = null;
  }
if (func == null) fan.sys.ObjUtil.echo("### Method.invoke missing: " + this.m_$qname);
  return func.apply(instance, vals);
}
fan.std.Method.prototype.$typeof = function() { return fan.std.Method.$type; }
fan.std.Method.prototype.returns = function() { return this.m_returns; }
fan.std.Method.prototype.params  = function() { return this.m_params.ro(); }
fan.std.Method.prototype.func = function() { return this.m_func; }
fan.std.Method.prototype.isGenericMethod = function() { return (this.m_mask & fan.std.Method.GENERIC) != 0; }
fan.std.Method.prototype.isGenericInstance = function() { return this.m_generic != null; }
fan.std.Method.prototype.getGenericMethod = function() { return this.m_generic; }
fan.std.Method.prototype.callOn = function(target, args) { return this.invoke(target, args); }
fan.std.Method.prototype.call = function()
{
  var instance = null;
  var args = arguments;
  if (!this.isCtor() && !this.isStatic())
  {
    instance = args[0];
    args = Array.prototype.slice.call(args).slice(1);
  }
  return this.invoke(instance, fan.sys.List.make(fan.sys.Obj.$type, args));
}
fan.std.Method.prototype.callList = function(args)
{
  var instance = null;
  if (!this.isCtor() && !this.isStatic())
  {
    instance = args.get(0);
    args = args.getRange(new fan.sys.Range(1, -1));
  }
  return this.invoke(instance, args);
}
fan.std.MethodFunc = fan.sys.Obj.$extend(fan.sys.Func);
fan.std.MethodFunc.prototype.$ctor = function(method, returns)
{
  this.m_method = method;
  this.m_returns = returns;
  this.m_type = null;
}
fan.std.MethodFunc.prototype.returns = function() { return this.m_returns; }
fan.std.MethodFunc.prototype.arity = function() { return this.params().size(); }
fan.std.MethodFunc.prototype.params = function()
{
  // lazy load functions param
  if (this.m_fparams == null)
  {
    var mparams = this.m_method.m_params;
    var fparams = mparams;
    if ((this.m_method.m_flags & (fan.sys.FConst.Static|fan.sys.FConst.Ctor)) == 0)
    {
      var temp = [];
      temp[0] = new fan.std.Param("this", this.m_method.m_parent, 0);
      fparams = fan.sys.List.make(fan.std.Param.$type, temp.concat(mparams.toJs()));
    }
    this.m_fparams = fparams.ro();
  }
  return this.m_fparams;
}
fan.std.MethodFunc.prototype.method = function() { return this.m_method; }
fan.std.MethodFunc.prototype.isImmutable = function() { return true; }
fan.std.MethodFunc.prototype.$typeof = function()
{
  // lazy load type and params
  if (this.m_type == null)
  {
    this.m_type = fan.Sys.find("sys", "Func", true);
  }
  return this.m_type;
}
fan.std.MethodFunc.prototype.call = function()
{
  return this.m_method.call.apply(this.m_method, arguments);
}
fan.std.MethodFunc.prototype.callList = function(args)
{
  return this.m_method.callList.apply(this.m_method, arguments);
}
fan.std.MethodFunc.prototype.callOn = function(obj, args)
{
  return this.m_method.callOn.apply(this.m_method, arguments);
}
fan.std.Param = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Param.prototype.$ctor = function(name, type, hasDefault)
{
  this.m_name = name;
  this.m_type = (type instanceof fan.std.Type) ? type : fan.std.Type.find(type);
  this.m_hasDefault = hasDefault;
}
fan.std.Param.prototype.$name = function() { return this.m_name; }
fan.std.Param.prototype.type = function() { return this.m_type; }
fan.std.Param.prototype.hasDefault = function() { return this.m_hasDefault; }
fan.std.Param.prototype.$typeof = function() { return fan.std.Param.$type; }
fan.std.Param.prototype.toStr = function() { return this.m_type.toStr() + " " + this.m_name; }
fan.std.BufCrypto = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.BufCrypto.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.std.BufCryptoPeer(this);
  var $this = this;
}
fan.std.BufCrypto.prototype.$typeof = function() { return fan.std.BufCrypto.$type; }
fan.std.BufCrypto.toBase64 = function(buf)
{
  return fan.std.BufCrypto.doBase64(buf,((fan.std.BufCrypto.static$init ? fan.std.BufCrypto.static$init() : null),fan.std.BufCrypto.m_base64chars),true);
}
fan.std.BufCrypto.toBase64Uri = function(buf)
{
  return fan.std.BufCrypto.doBase64(buf,((fan.std.BufCrypto.static$init ? fan.std.BufCrypto.static$init() : null),fan.std.BufCrypto.m_base64UriChars),false);
}
fan.std.BufCrypto.doBase64 = function(self,table,pad)
{
  var buf = self.unsafeArray();
  var size = self.size();
  var s = fan.sys.StrBuf.make(fan.sys.Int.mult(size,2));
  var i = 0;
  var end = fan.sys.Int.minus(size,2);
  for (; fan.sys.ObjUtil.compareLT(i,end); i = fan.sys.Int.plus(i,3))
  {
    var n = fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.shiftl(fan.sys.Int.and(fan.sys.ObjUtil.coerce(buf.get(i),fan.sys.Int.$type),255),16),fan.sys.Int.shiftl(fan.sys.Int.and(fan.sys.ObjUtil.coerce(buf.get(fan.sys.Int.plus(i,1)),fan.sys.Int.$type),255),8)),fan.sys.Int.and(fan.sys.ObjUtil.coerce(buf.get(fan.sys.Int.plus(i,2)),fan.sys.Int.$type),255));
    s.addChar(fan.sys.Str.get(table,fan.sys.Int.and(fan.sys.Int.shiftr(n,18),63))).addChar(fan.sys.Str.get(table,fan.sys.Int.and(fan.sys.Int.shiftr(n,12),63))).addChar(fan.sys.Str.get(table,fan.sys.Int.and(fan.sys.Int.shiftr(n,6),63))).addChar(fan.sys.Str.get(table,fan.sys.Int.and(n,63)));
  }
  ;
  var rem = fan.sys.Int.minus(size,i);
  if (fan.sys.ObjUtil.compareGT(rem,0))
  {
    var n = fan.sys.Int.or(fan.sys.Int.shiftl(fan.sys.Int.and(fan.sys.ObjUtil.coerce(buf.get(i),fan.sys.Int.$type),255),10),(function($this) { if (fan.sys.ObjUtil.equals(rem,2)) return fan.sys.Int.shiftl(fan.sys.Int.and(fan.sys.ObjUtil.coerce(buf.get(fan.sys.Int.minus(size,1)),fan.sys.Int.$type),255),2); return 0; })(this));
    s.addChar(fan.sys.Str.get(table,fan.sys.Int.and(fan.sys.Int.shiftr(n,12),63))).addChar(fan.sys.Str.get(table,fan.sys.Int.and(fan.sys.Int.shiftr(n,6),63)));
    if (fan.sys.ObjUtil.equals(rem,2))
    {
      s.addChar(fan.sys.Str.get(table,fan.sys.Int.and(n,63)));
    }
    else
    {
      if (pad)
      {
        s.addChar(61);
      }
      ;
    }
    ;
    if (pad)
    {
      s.addChar(61);
    }
    ;
  }
  ;
  return s.toStr();
}
fan.std.BufCrypto.fromBase64 = function(s)
{
  var slen = fan.sys.Str.size(s);
  var si = 0;
  var max = fan.sys.Int.div(fan.sys.Int.mult(slen,6),8);
  var buf = fan.sys.Array.make(max,"sys::Int8");
  var size = 0;
  while (fan.sys.ObjUtil.compareLT(si,slen))
  {
    var n = 0;
    var v = 0;
    for (var j = 0; (fan.sys.ObjUtil.compareLT(j,4) && fan.sys.ObjUtil.compareLT(si,slen)); )
    {
      var ch = fan.sys.Str.get(s,(function($this) { var $_u54 = si; si = fan.sys.Int.increment(si); return $_u54; })(this));
      var c = (function($this) { if (fan.sys.ObjUtil.compareLT(ch,128)) return ((fan.std.BufCrypto.static$init ? fan.std.BufCrypto.static$init() : null),fan.std.BufCrypto.m_base64inv).get(ch); return -1; })(this);
      if (fan.sys.ObjUtil.compareGE(c,0))
      {
        n = fan.sys.Int.or(n,fan.sys.Int.shiftl(c,fan.sys.Int.minus(18,fan.sys.Int.mult((function($this) { var $_u56 = j; j = fan.sys.Int.increment(j); return $_u56; })(this),6))));
        if (fan.sys.ObjUtil.compareNE(ch,61))
        {
          (function($this) { var $_u57 = v; v = fan.sys.Int.increment(v); return $_u57; })(this);
        }
        ;
      }
      ;
    }
    ;
    if (fan.sys.ObjUtil.compareGT(v,1))
    {
      buf.set((function($this) { var $_u58 = size; size = fan.sys.Int.increment(size); return $_u58; })(this),fan.sys.ObjUtil.coerce(fan.sys.Int.shiftr(n,16),fan.sys.Int.$type));
    }
    ;
    if (fan.sys.ObjUtil.compareGT(v,2))
    {
      buf.set((function($this) { var $_u59 = size; size = fan.sys.Int.increment(size); return $_u59; })(this),fan.sys.ObjUtil.coerce(fan.sys.Int.shiftr(n,8),fan.sys.Int.$type));
    }
    ;
    if (fan.sys.ObjUtil.compareGT(v,3))
    {
      buf.set((function($this) { var $_u60 = size; size = fan.sys.Int.increment(size); return $_u60; })(this),fan.sys.ObjUtil.coerce(n,fan.sys.Int.$type));
    }
    ;
  }
  ;
  return fan.std.MemBuf.makeBuf(buf,size);
}
fan.std.BufCrypto.toDigest = function(buf,algorithm)
{
  return fan.std.BufCryptoPeer.toDigest(buf,algorithm);
}
fan.std.BufCrypto.crc = function(buf,algorithm)
{
  return fan.std.BufCryptoPeer.crc(buf,algorithm);
}
fan.std.BufCrypto.hmac = function(buf,algorithm,key)
{
  return fan.std.BufCryptoPeer.hmac(buf,algorithm,key);
}
fan.std.BufCrypto.pbk = function(algorithm,password,salt,iterations,keyLen)
{
  return fan.std.BufCryptoPeer.pbk(algorithm,password,salt,iterations,keyLen);
}
fan.std.BufCrypto.make = function() {
  var self = new fan.std.BufCrypto();
  fan.std.BufCrypto.make$(self);
  return self;
  }
fan.std.BufCrypto.make$ = function(self)
{
  return;
}
fan.std.BufCrypto.static$init = function()
{
  if (fan.std.BufCrypto.static$inited) return;
  fan.std.BufCrypto.static$inited = true;
  fan.std.BufCrypto.m_base64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  fan.std.BufCrypto.m_base64UriChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
  if (true)
  {
    var t = fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Int.$type).fill(fan.sys.ObjUtil.coerce(-1,fan.sys.Obj.$type.toNullable()),128),fan.std.Type.find("sys::List<sys::Int>"));
    for (var i = 0; fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(((fan.std.BufCrypto.static$init ? fan.std.BufCrypto.static$init() : null),fan.std.BufCrypto.m_base64chars))); i = fan.sys.Int.increment(i))
    {
      t.set(fan.sys.Str.get(((fan.std.BufCrypto.static$init ? fan.std.BufCrypto.static$init() : null),fan.std.BufCrypto.m_base64chars),i),fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
    }
    ;
    t.set(45,fan.sys.ObjUtil.coerce(62,fan.sys.Obj.$type.toNullable()));
    t.set(95,fan.sys.ObjUtil.coerce(63,fan.sys.Obj.$type.toNullable()));
    t.set(61,fan.sys.ObjUtil.coerce(0,fan.sys.Obj.$type.toNullable()));
    fan.std.BufCrypto.m_base64inv = fan.sys.ObjUtil.coerce((function($this) { var $_u61 = t; if ($_u61 == null) return null; return fan.sys.ObjUtil.toImmutable($_u61); })(this),fan.std.Type.find("sys::List<sys::Int>"));
  }
  ;
  return;
}
fan.std.BufCrypto.m_base64chars = null;
fan.std.BufCrypto.m_base64UriChars = null;
fan.std.BufCrypto.m_base64inv = null;
fan.std.BufCryptoPeer = function(){}
fan.std.BufCryptoPeer.CRC16_ODD_PARITY = [ 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 ];
fan.std.BufCryptoPeer.CRC32_a_table =
  "00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 " +
  "0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 " +
  "1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 " +
  "136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 " +
  "3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B " +
  "35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 " +
  "26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F " +
  "2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D " +
  "76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 " +
  "7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 " +
  "6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 " +
  "65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 " +
  "4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB " +
  "4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 " +
  "5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F " +
  "5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD " +
  "EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 " +
  "E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 " +
  "F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 " +
  "FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 " +
  "D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B " +
  "D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 " +
  "CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F " +
  "C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D " +
  "9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 " +
  "95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 " +
  "86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 " +
  "88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 " +
  "A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB " +
  "AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 " +
  "BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF " +
  "B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D ";
fan.std.BufCryptoPeer.CRC32_b_table = fan.std.BufCryptoPeer.CRC32_a_table.split(' ').map(function(s){ return parseInt(s,16) });
fan.std.BufCryptoPeer.crc = function(buf, algorithm)
{
  if (algorithm == "CRC-16") return fan.std.BufCryptoPeer.crc16(buf);
  if (algorithm == "CRC-32") return fan.std.BufCryptoPeer.crc32(buf);
  if (algorithm == "CRC-32-Adler") return this.crcAdler32(buf);
  throw fan.sys.ArgErr.make("Unknown CRC algorthm: " + algorithm);
}
fan.std.BufCryptoPeer.crc16 = function(buf)
{
  var array = buf.unsafeArray();
  var size = buf.size();
  var seed = 0xffff;
  for (var i=0; i<size; ++i) seed = fan.std.BufCryptoPeer.$crc16(array[i], seed);
  return seed;
}
fan.std.BufCryptoPeer.$crc16 = function(dataToCrc, seed)
{
  var dat = ((dataToCrc ^ (seed & 0xFF)) & 0xFF);
  seed = (seed & 0xFFFF) >>> 8;
  var index1 = (dat & 0x0F);
  var index2 = (dat >>> 4);
  if ((fan.std.BufCryptoPeer.CRC16_ODD_PARITY[index1] ^ fan.std.BufCryptoPeer.CRC16_ODD_PARITY[index2]) == 1)
    seed ^= 0xC001;
  dat  <<= 6;
  seed ^= dat;
  dat  <<= 1;
  seed ^= dat;
  return seed;
}
fan.std.BufCryptoPeer.crc32 = function(buf)
{
  // From StackOverflow:
  // https://stackoverflow.com/questions/18638900/javascript-crc32#answer-18639975
  var array = buf.unsafeArray();
  var crc = -1;
  for (var i=0, iTop=array.length; i<iTop; i++)
  {
    crc = ( crc >>> 8 ) ^ fan.std.BufCryptoPeer.CRC32_b_table[(crc ^ array[i]) & 0xFF];
  }
  return (crc ^ (-1)) >>> 0;
};
fan.std.BufCryptoPeer.crcAdler32 = function(buf, seed)
{
  // https://github.com/SheetJS/js-adler32
  //
  // Copyright (C) 2014-present  SheetJS
  // Licensed under Apache 2.0
  var array = buf.unsafeArray();
  var a = 1, b = 0, L = array.length, M = 0;
  if (typeof seed === 'number') { a = seed & 0xFFFF; b = (seed >>> 16) & 0xFFFF; }
  for(var i=0; i<L;)
  {
    M = Math.min(L-i, 3850) + i;
    for(; i<M; i++)
    {
      a += array[i] & 0xFF;
      b += a;
    }
    a = (15 * (a >>> 16) + (a & 65535));
    b = (15 * (b >>> 16) + (b & 65535));
  }
  return ((b % 65521) << 16) | (a % 65521);
}
fan.std.BufCryptoPeer.toDigest = function(buf, algorithm)
{
  // trim buf to content
  var buf = buf.unsafeArray().m_array.slice(0, buf.unsafeArray().m_size);
  var digest = null;
  switch (algorithm)
  {
    case "MD5":
      digest = fan.std.Buf_Md5(buf);  break;
    case "SHA1":
    case "SHA-1":
      // fall-through
      digest = fan.sys.buf_sha1.digest(buf); break;
    case "SHA-256":
      digest = fan.sys.buf_sha256.digest(buf); break;
    default: throw fan.sys.ArgErr.make("Unknown digest algorithm " + algorithm);
  }
  return fan.sys.MemBuf.makeBytes(digest);
}
fan.std.BufCryptoPeer.hmac = function(buf, algorithm, keyBuf)
{
  // trim buf to content
  var buf = buf.unsafeArray().m_array.slice(0, buf.unsafeArray().m_size);
  var key = keyBuf.unsafeArray().m_array.slice(0, keyBuf.unsafeArray().m_size);
  var digest = null;
  switch (algorithm)
  {
    case "MD5":
      digest = fan.std.Buf_Md5(buf, key);  break;
    case "SHA1":
    case "SHA-1":
      // fall thru
      digest = fan.sys.buf_sha1.digest(buf, key); break;
    case "SHA-256":
      digest = fan.sys.buf_sha256.digest(buf, key); break;
    default: throw fan.sys.ArgErr.make("Unknown digest algorithm " + algorithm);
  }
  return fan.sys.MemBuf.makeBytes(digest);
}
fan.std.BufCryptoPeer.pbk = function(algorithm, password, salt, iterations, keyLen)
{
  var digest = null;
  var passBuf = fan.sys.Str.toBuf(password);
  // trim buf to content
  passBytes = passBuf.unsafeArray().m_array.slice(0, passBuf.unsafeArray().m_size);
  saltBytes = salt.m_buf.slice(0, salt.m_size);
  switch(algorithm)
  {
    case "PBKDF2WithHmacSHA1":
      digest = fan.sys.buf_sha1.pbkdf2(passBytes, saltBytes, iterations, keyLen); break;
    case "PBKDF2WithHmacSHA256":
      digest = fan.sys.buf_sha256.pbkdf2(passBytes, saltBytes, iterations, keyLen); break;
    default: throw fan.sys.Err.make("Unsupported algorithm: " + algorithm);
  }
  return fan.sys.MemBuf.makeBytes(digest);
}
fan.std.UriParser = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.UriParser.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_pathStr = "";
  return;
}
fan.std.UriParser.prototype.$typeof = function() { return fan.std.UriParser.$type; }
fan.std.UriParser.prototype.scheme = function()
{
  return this.m_scheme;
}
fan.std.UriParser.prototype.scheme$ = function(it)
{
  this.m_scheme = it;
  return;
}
fan.std.UriParser.prototype.userInfo = function()
{
  return this.m_userInfo;
}
fan.std.UriParser.prototype.userInfo$ = function(it)
{
  this.m_userInfo = it;
  return;
}
fan.std.UriParser.prototype.host = function()
{
  return this.m_host;
}
fan.std.UriParser.prototype.host$ = function(it)
{
  this.m_host = it;
  return;
}
fan.std.UriParser.prototype.port = function()
{
  return this.m_port;
}
fan.std.UriParser.prototype.port$ = function(it)
{
  this.m_port = it;
  return;
}
fan.std.UriParser.prototype.pathStr = function()
{
  return this.m_pathStr;
}
fan.std.UriParser.prototype.pathStr$ = function(it)
{
  this.m_pathStr = it;
  return;
}
fan.std.UriParser.prototype.query = function()
{
  return this.m_query;
}
fan.std.UriParser.prototype.query$ = function(it)
{
  this.m_query = it;
  return;
}
fan.std.UriParser.prototype.frag = function()
{
  return this.m_frag;
}
fan.std.UriParser.prototype.frag$ = function(it)
{
  this.m_frag = it;
  return;
}
fan.std.UriParser.prototype.toStr = function()
{
  var sb = fan.sys.StrBuf.make();
  sb.add("scheme:").add(this.m_scheme).add(",userInfo:").add(this.m_userInfo).add(",host:").add(this.m_host).add(",port:").add(fan.sys.ObjUtil.coerce(this.m_port,fan.sys.Obj.$type.toNullable())).add(",pathStr:").add(this.m_pathStr).add(",query:").add(fan.sys.ObjUtil.coerce(this.m_query,fan.sys.Obj.$type.toNullable())).add(",frag:").add(this.m_frag);
  return sb.toStr();
}
fan.std.UriParser.prototype.normalize = function()
{
  if (fan.sys.ObjUtil.equals(this.m_pathStr,""))
  {
  }
  else
  {
    if (fan.sys.Str.startsWith(this.m_pathStr,"./"))
    {
      this.m_pathStr = fan.sys.Str.getRange(this.m_pathStr,fan.sys.Range.make(2,-1));
    }
    ;
  }
  ;
  if (this.m_host != null)
  {
    if (!fan.sys.Str.startsWith(this.m_pathStr,"/"))
    {
      this.m_pathStr = fan.sys.Str.plus("/",this.m_pathStr);
    }
    ;
  }
  ;
  return;
}
fan.std.UriParser.parseQuery = function(s,decode)
{
  var query = fan.std.OrderedMap.make();
  var start = 0;
  var eq = 0;
  var k = "";
  var v = "";
  var i = 0;
  for (; fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(s)); i = fan.sys.Int.increment(i))
  {
    var ch = fan.sys.Str.get(s,i);
    if (fan.sys.ObjUtil.equals(ch,61))
    {
      eq = i;
    }
    ;
    if ((fan.sys.ObjUtil.compareNE(ch,38) && fan.sys.ObjUtil.compareNE(ch,59)))
    {
      continue;
    }
    ;
    if (fan.sys.ObjUtil.compareLT(start,i))
    {
      if ((fan.sys.ObjUtil.equals(start,eq) && fan.sys.ObjUtil.compareNE(fan.sys.Str.get(s,start),61)))
      {
        k = fan.sys.Str.getRange(s,fan.sys.Range.make(start,i,true));
        v = "";
      }
      else
      {
        k = fan.sys.Str.getRange(s,fan.sys.Range.make(start,eq,true));
        v = fan.sys.Str.getRange(s,fan.sys.Range.make(fan.sys.Int.plus(eq,1),i,true));
      }
      ;
      if (decode)
      {
        var ek = fan.std.Uri.decodeToken(k,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionQuery));
        var ev = fan.std.Uri.decodeToken(v,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionQuery));
        query.set(ek,ev);
      }
      else
      {
        query.set(k,v);
      }
      ;
    }
    ;
    start = fan.sys.Int.plus(i,1);
    eq = start;
  }
  ;
  if (fan.sys.ObjUtil.compareLT(start,i))
  {
    if ((fan.sys.ObjUtil.equals(start,eq) && fan.sys.ObjUtil.compareNE(fan.sys.Str.get(s,start),61)))
    {
      k = fan.sys.Str.getRange(s,fan.sys.Range.make(start,i,true));
      v = "";
    }
    else
    {
      k = fan.sys.Str.getRange(s,fan.sys.Range.make(start,eq,true));
      v = fan.sys.Str.getRange(s,fan.sys.Range.make(fan.sys.Int.plus(eq,1),i,true));
    }
    ;
    if (decode)
    {
      var ek = fan.std.Uri.decodeToken(k,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionQuery));
      var ev = fan.std.Uri.decodeToken(v,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionQuery));
      query.set(ek,ev);
    }
    else
    {
      query.set(k,v);
    }
    ;
  }
  ;
  return fan.sys.ObjUtil.coerce(query,fan.std.Type.find("std::Map<sys::Str,sys::Str>"));
}
fan.std.UriParser.prototype.parse = function(str)
{
  var len = fan.sys.Str.size(str);
  var pos = 0;
  var hasUpper = false;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,len); i = fan.sys.Int.increment(i))
  {
    var ch = fan.sys.Str.get(str,i);
    if ((fan.sys.Int.isAlphaNum(ch) || fan.sys.ObjUtil.equals(ch,95)))
    {
      if (fan.sys.Int.isUpper(ch))
      {
        hasUpper = true;
      }
      ;
      continue;
    }
    ;
    if (fan.sys.ObjUtil.compareNE(ch,58))
    {
      break;
    }
    ;
    pos = fan.sys.Int.plus(i,1);
    this.m_scheme = fan.sys.Str.getRange(str,fan.sys.Range.make(0,i,true));
    if (hasUpper)
    {
      this.m_scheme = fan.sys.Str.lower(this.m_scheme);
    }
    ;
    break;
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(fan.sys.Int.plus(pos,1),len) && fan.sys.ObjUtil.equals(fan.sys.Str.get(str,pos),47) && fan.sys.ObjUtil.equals(fan.sys.Str.get(str,fan.sys.Int.plus(pos,1)),47)))
  {
    var authStart = fan.sys.Int.plus(pos,2);
    var authEnd = len;
    var at = -1;
    var colon = -1;
    for (var i = authStart; fan.sys.ObjUtil.compareLT(i,len); i = fan.sys.Int.increment(i))
    {
      var c = fan.sys.Str.get(str,i);
      if ((fan.sys.ObjUtil.equals(c,47) || fan.sys.ObjUtil.equals(c,63) || fan.sys.ObjUtil.equals(c,35)))
      {
        authEnd = i;
        break;
      }
      else
      {
        if ((fan.sys.ObjUtil.equals(c,64) && fan.sys.ObjUtil.compareLT(at,0)))
        {
          at = i;
          colon = -1;
        }
        else
        {
          if (fan.sys.ObjUtil.equals(c,58))
          {
            colon = i;
          }
          else
          {
            if (fan.sys.ObjUtil.equals(c,93))
            {
              colon = -1;
            }
            ;
          }
          ;
        }
        ;
      }
      ;
    }
    ;
    var hostStart = authStart;
    var hostEnd = authEnd;
    if (fan.sys.ObjUtil.compareGT(at,0))
    {
      this.m_userInfo = fan.sys.Str.getRange(str,fan.sys.Range.make(authStart,at,true));
      hostStart = fan.sys.Int.plus(at,1);
    }
    ;
    if (fan.sys.ObjUtil.compareGT(colon,0))
    {
      this.m_port = fan.sys.ObjUtil.coerce(fan.sys.Str.toInt(fan.sys.Str.getRange(str,fan.sys.Range.make(fan.sys.Int.plus(colon,1),authEnd,true))),fan.sys.Int.$type.toNullable());
      hostEnd = colon;
    }
    ;
    this.m_host = fan.sys.Str.getRange(str,fan.sys.Range.make(hostStart,hostEnd,true));
    pos = authEnd;
  }
  ;
  var pathStart = pos;
  var pathEnd = len;
  var numSegs = 1;
  var prev = 0;
  for (var i = pathStart; fan.sys.ObjUtil.compareLT(i,len); i = fan.sys.Int.increment(i))
  {
    var c = fan.sys.Str.get(str,i);
    if (fan.sys.ObjUtil.compareNE(prev,92))
    {
      if ((fan.sys.ObjUtil.equals(c,63) || fan.sys.ObjUtil.equals(c,35)))
      {
        pathEnd = i;
        break;
      }
      ;
      if ((fan.sys.ObjUtil.compareNE(i,pathStart) && fan.sys.ObjUtil.equals(c,47)))
      {
        numSegs = fan.sys.Int.increment(numSegs);
      }
      ;
      prev = c;
    }
    else
    {
      prev = (function($this) { if (fan.sys.ObjUtil.compareNE(c,92)) return c; return 0; })(this);
    }
    ;
  }
  ;
  this.m_pathStr = fan.sys.Str.getRange(str,fan.sys.Range.make(pathStart,pathEnd,true));
  pos = pathEnd;
  if ((fan.sys.ObjUtil.compareLT(pos,len) && fan.sys.ObjUtil.equals(fan.sys.Str.get(str,pos),63)))
  {
    var queryStart = fan.sys.Int.plus(pos,1);
    var queryEnd = len;
    prev = 0;
    for (var i = queryStart; fan.sys.ObjUtil.compareLT(i,len); i = fan.sys.Int.increment(i))
    {
      var c = fan.sys.Str.get(str,i);
      if (fan.sys.ObjUtil.compareNE(prev,92))
      {
        if (fan.sys.ObjUtil.equals(c,35))
        {
          queryEnd = i;
          break;
        }
        ;
        prev = c;
      }
      else
      {
        prev = (function($this) { if (fan.sys.ObjUtil.compareNE(c,92)) return c; return 0; })(this);
      }
      ;
    }
    ;
    var queryStr = fan.sys.Str.getRange(str,fan.sys.Range.make(queryStart,queryEnd,true));
    this.m_query = fan.sys.ObjUtil.coerce(fan.std.UriParser.parseQuery(queryStr,false),fan.std.Type.find("std::Map<sys::Str,sys::Str>?"));
    pos = queryEnd;
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(pos,len) && fan.sys.ObjUtil.equals(fan.sys.Str.get(str,pos),35)))
  {
    this.m_frag = fan.sys.Str.getRange(str,fan.sys.Range.make(fan.sys.Int.plus(pos,1),len,true));
  }
  ;
  this.normalize();
  return;
}
fan.std.UriParser.make = function() {
  var self = new fan.std.UriParser();
  fan.std.UriParser.make$(self);
  return self;
  }
fan.std.UriParser.make$ = function(self)
{
  ;
  return;
}
fan.std.UriParser.prototype.m_scheme = null;
fan.std.UriParser.prototype.m_userInfo = null;
fan.std.UriParser.prototype.m_host = null;
fan.std.UriParser.prototype.m_port = null;
fan.std.UriParser.prototype.m_pathStr = null;
fan.std.UriParser.prototype.m_query = null;
fan.std.UriParser.prototype.m_frag = null;
fan.std.Uri = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Uri.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.Uri.prototype.$typeof = function() { return fan.std.Uri.$type; }
fan.std.Uri.fromStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  var res = fan.std.Uri.decode(s,checked);
  if (res == null)
  {
    return ((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_defVal);
  }
  ;
  return fan.sys.ObjUtil.coerce(res,fan.std.Uri.$type);
}
fan.std.Uri.decode = function(s,checked)
{
  if (checked === undefined) checked = true;
  var $this = this;
  try
  {
    if (fan.sys.ObjUtil.equals(s,""))
    {
      return fan.std.Uri.privateMake(null,null,null,null,"",null,null);
    }
    ;
    var parser = fan.std.UriParser.make();
    parser.parse(s);
    if (parser.m_userInfo != null)
    {
      parser.m_userInfo = fan.std.Uri.decodeToken(fan.sys.ObjUtil.coerce(parser.m_userInfo,fan.sys.Str.$type),((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionPath));
    }
    ;
    if (parser.m_host != null)
    {
      parser.m_host = fan.std.Uri.decodeToken(fan.sys.ObjUtil.coerce(parser.m_host,fan.sys.Str.$type),((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionPath));
    }
    ;
    if (fan.sys.ObjUtil.compareGT(fan.sys.Str.size(parser.m_pathStr),0))
    {
      parser.m_pathStr = fan.std.Uri.decodeToken(parser.m_pathStr,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionPath));
    }
    ;
    if (parser.m_query != null)
    {
      var query2 = fan.std.OrderedMap.make();
      parser.m_query.each(fan.sys.Func.make$closure(
        fan.std.$clos$_u41,
        function(v,k)
        {
          query2.set(fan.std.Uri.decodeToken(k,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionQuery)),fan.std.Uri.decodeToken(v,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionQuery)));
          return;
        }));
      parser.m_query = fan.sys.ObjUtil.coerce(query2,fan.std.Type.find("std::Map<sys::Str,sys::Str>?"));
    }
    ;
    if (parser.m_frag != null)
    {
      parser.m_frag = fan.std.Uri.decodeToken(fan.sys.ObjUtil.coerce(parser.m_frag,fan.sys.Str.$type),((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionFrag));
    }
    ;
    return fan.std.Uri.privateMake(parser.m_scheme,parser.m_userInfo,parser.m_host,parser.m_port,parser.m_pathStr,parser.m_query,parser.m_frag);
  }
  catch ($_u64)
  {
    $_u64 = fan.sys.Err.make($_u64);
    if ($_u64 instanceof fan.sys.Err)
    {
      var e = $_u64;
      var e;
      if (checked)
      {
        throw fan.sys.ParseErr.make(fan.sys.Str.plus("uri:",s),e);
      }
      ;
      return null;
    }
    else
    {
      throw $_u64;
    }
  }
  ;
}
fan.std.Uri.privateMake = function(scheme,userInfo,host,port,pathStr,query,frag) {
  var self = new fan.std.Uri();
  fan.std.Uri.privateMake$(self,scheme,userInfo,host,port,pathStr,query,frag);
  return self;
  }
fan.std.Uri.privateMake$ = function(self,scheme,userInfo,host,port,pathStr,query,frag)
{
  self.m_scheme = scheme;
  self.m_userInfo = userInfo;
  self.m_host = host;
  self.m_port = port;
  self.m_pathStr = pathStr;
  self.m_query = fan.sys.ObjUtil.coerce((function($this) { var $_u65 = fan.sys.ObjUtil.coerce((function($this) { var $_u66 = query; if ($_u66 != null) return $_u66; return fan.sys.ObjUtil.coerce(((fan.std.Map.static$init ? fan.std.Map.static$init() : null),fan.std.Map.m_defVal),fan.std.Map.$type.toNullable()); })($this),fan.std.Type.find("std::Map<sys::Str,sys::Str>")); if ($_u65 == null) return null; return fan.sys.ObjUtil.toImmutable($_u65); })(self),fan.std.Type.find("std::Map<sys::Str,sys::Str>"));
  self.m_frag = frag;
  self.m_str = fan.std.Uri.partsToStr(scheme,userInfo,host,port,pathStr,query,frag,false);
  return;
}
fan.std.Uri.partsToStr = function(scheme,userInfo,host,port,path,query,frag,encode)
{
  var $this = this;
  var buf = fan.sys.StrBuf.make();
  if (scheme != null)
  {
    buf.add(scheme).add(":");
  }
  ;
  if ((userInfo != null || host != null || port != null))
  {
    buf.add("//");
    if (userInfo != null)
    {
      userInfo = (function($this) { if (encode) return fan.std.Uri.encodeToken(fan.sys.ObjUtil.coerce(userInfo,fan.sys.Str.$type),((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionPath)); return fan.std.Uri.escapeToken(fan.sys.ObjUtil.coerce(userInfo,fan.sys.Str.$type),((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionPath)); })(this);
      buf.add(userInfo).addChar(64);
    }
    ;
    if (host != null)
    {
      host = (function($this) { if (encode) return fan.std.Uri.encodeToken(fan.sys.ObjUtil.coerce(host,fan.sys.Str.$type),((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionPath)); return fan.std.Uri.escapeToken(fan.sys.ObjUtil.coerce(host,fan.sys.Str.$type),((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionPath)); })(this);
      buf.add(host);
    }
    ;
    if (port != null)
    {
      buf.addChar(58).add(fan.sys.Int.toStr(fan.sys.ObjUtil.coerce(port,fan.sys.Int.$type)));
    }
    ;
  }
  ;
  if (path != null)
  {
    path = (function($this) { if (encode) return fan.std.Uri.encodeToken(fan.sys.ObjUtil.coerce(path,fan.sys.Str.$type),((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionPath)); return fan.std.Uri.escapeToken(fan.sys.ObjUtil.coerce(path,fan.sys.Str.$type),((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionPath)); })(this);
    buf.add(path);
  }
  ;
  if ((query != null && fan.sys.ObjUtil.compareGT(query.size(),0)))
  {
    if (path != null)
    {
      buf.addChar(63);
    }
    ;
    var i = 0;
    query.each(fan.sys.Func.make$closure(
      fan.std.$clos$_u41,
      function(v,k)
      {
        if (fan.sys.ObjUtil.compareGT(i,0))
        {
          buf.addChar(38);
        }
        ;
        k = (function($this) { if (encode) return fan.std.Uri.encodeToken(k,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionQuery)); return fan.std.Uri.escapeToken(k,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionQuery)); })($this);
        if (fan.sys.ObjUtil.compareGT(fan.sys.Str.size(v),0))
        {
          v = (function($this) { if (encode) return fan.std.Uri.encodeToken(v,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionQuery)); return fan.std.Uri.escapeToken(v,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionQuery)); })($this);
        }
        ;
        if (fan.sys.ObjUtil.equals(fan.sys.Str.size(v),0))
        {
          buf.add(k);
        }
        else
        {
          buf.add(k).addChar(61).add(v);
        }
        ;
        i = fan.sys.Int.increment(i);
        return;
      }));
  }
  ;
  if (frag != null)
  {
    frag = (function($this) { if (encode) return fan.std.Uri.encodeToken(fan.sys.ObjUtil.coerce(frag,fan.sys.Str.$type),((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionFrag)); return fan.std.Uri.escapeToken(fan.sys.ObjUtil.coerce(frag,fan.sys.Str.$type),((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionFrag)); })(this);
    buf.addChar(35).add(frag);
  }
  ;
  return buf.toStr();
}
fan.std.Uri.percentEncodeByte = function(buf,c)
{
  buf.addChar(37);
  var hi = fan.sys.Int.and(fan.sys.Int.shiftr(c,4),15);
  var lo = fan.sys.Int.and(c,15);
  buf.addChar((function($this) { if (fan.sys.ObjUtil.compareLT(hi,10)) return fan.sys.Int.plus(48,hi); return fan.sys.Int.plus(65,fan.sys.Int.minus(hi,10)); })(this));
  buf.addChar((function($this) { if (fan.sys.ObjUtil.compareLT(lo,10)) return fan.sys.Int.plus(48,lo); return fan.sys.Int.plus(65,fan.sys.Int.minus(lo,10)); })(this));
  return;
}
fan.std.Uri.decodeToken = function(s,section)
{
  var sb = fan.sys.StrBuf.make();
  var ba = fan.sys.Array.make(fan.sys.Str.size(s),"sys::Int8");
  var bp = 0;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(s)); i = fan.sys.Int.increment(i))
  {
    var ch = fan.sys.Str.get(s,i);
    if (fan.sys.ObjUtil.equals(ch,37))
    {
      var hi = fan.sys.Str.get(s,i = fan.sys.Int.increment(i));
      var lo = fan.sys.Str.get(s,i = fan.sys.Int.increment(i));
      var h = fan.sys.Int.fromDigit(hi,16);
      var l = fan.sys.Int.fromDigit(lo,16);
      var c = fan.sys.Int.or(fan.sys.Int.shiftl(fan.sys.ObjUtil.coerce(h,fan.sys.Int.$type),4),fan.sys.ObjUtil.coerce(l,fan.sys.Int.$type));
      ba.set(bp,fan.sys.ObjUtil.coerce(c,fan.sys.Int.$type));
      bp = fan.sys.Int.increment(bp);
      continue;
    }
    ;
    if (fan.sys.ObjUtil.compareGT(bp,0))
    {
      var t = fan.sys.Str.fromUtf8(ba,0,bp);
      bp = 0;
      sb.add(t);
    }
    ;
    if ((fan.sys.ObjUtil.equals(section,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionQuery)) && fan.sys.ObjUtil.equals(ch,43)))
    {
      sb.addChar(32);
    }
    else
    {
      sb.addChar(ch);
    }
    ;
  }
  ;
  if (fan.sys.ObjUtil.compareGT(bp,0))
  {
    var t = fan.sys.Str.fromUtf8(ba,0,bp);
    bp = 0;
    sb.add(t);
  }
  ;
  return sb.toStr();
}
fan.std.Uri.encodeToken = function(s,section)
{
  var sb = fan.sys.StrBuf.make();
  var ba = fan.sys.Str.toUtf8(s);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,ba.size()); i = fan.sys.Int.increment(i))
  {
    var ch = ba.get(i);
    if (fan.sys.ObjUtil.compareLT(ch,127))
    {
      if ((fan.sys.Int.isAlphaNum(fan.sys.ObjUtil.coerce(ch,fan.sys.Int.$type)) || fan.sys.ObjUtil.equals(ch,45) || fan.sys.ObjUtil.equals(ch,95) || fan.sys.ObjUtil.equals(ch,46) || fan.sys.ObjUtil.equals(ch,126) || fan.sys.ObjUtil.equals(ch,36)))
      {
        sb.addChar(fan.sys.ObjUtil.coerce(ch,fan.sys.Int.$type));
        continue;
      }
      ;
      if (fan.sys.ObjUtil.equals(section,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionPath)))
      {
        if ((fan.sys.ObjUtil.equals(ch,58) || fan.sys.ObjUtil.equals(ch,32) || fan.sys.ObjUtil.equals(ch,47) || fan.sys.ObjUtil.equals(ch,92) || fan.sys.ObjUtil.equals(ch,64) || fan.sys.ObjUtil.equals(ch,59)))
        {
          sb.addChar(fan.sys.ObjUtil.coerce(ch,fan.sys.Int.$type));
        }
        ;
        continue;
      }
      ;
      if ((fan.sys.ObjUtil.equals(section,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionQuery)) && fan.sys.ObjUtil.equals(ch,32)))
      {
        sb.addChar(43);
        continue;
      }
      ;
    }
    ;
    fan.std.Uri.percentEncodeByte(sb,fan.sys.ObjUtil.coerce(ch,fan.sys.Int.$type));
  }
  ;
  return sb.toStr();
}
fan.std.Uri.escapeToken = function(s,section)
{
  var sb = fan.sys.StrBuf.make();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(s)); i = fan.sys.Int.increment(i))
  {
    var ch = fan.sys.Str.get(s,i);
    if (fan.sys.ObjUtil.compareLT(ch,127))
    {
      if ((fan.sys.Int.isAlphaNum(ch) || fan.sys.ObjUtil.equals(ch,45) || fan.sys.ObjUtil.equals(ch,95) || fan.sys.ObjUtil.equals(ch,46) || fan.sys.ObjUtil.equals(ch,126) || fan.sys.ObjUtil.equals(ch,36)))
      {
        sb.addChar(ch);
        continue;
      }
      ;
      if (fan.sys.ObjUtil.equals(section,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionPath)))
      {
        if ((fan.sys.ObjUtil.equals(ch,58) || fan.sys.ObjUtil.equals(ch,32) || fan.sys.ObjUtil.equals(ch,47) || fan.sys.ObjUtil.equals(ch,92) || fan.sys.ObjUtil.equals(ch,64) || fan.sys.ObjUtil.equals(ch,59)))
        {
          sb.addChar(ch);
        }
        ;
        continue;
      }
      ;
      if ((fan.sys.ObjUtil.equals(section,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionQuery)) && fan.sys.ObjUtil.equals(ch,32)))
      {
        sb.addChar(43);
        continue;
      }
      ;
      fan.std.Uri.percentEncodeByte(sb,ch);
      continue;
    }
    ;
    sb.addChar(ch);
  }
  ;
  return sb.toStr();
}
fan.std.Uri.decodeQuery = function(s)
{
  return fan.std.UriParser.parseQuery(s,true);
}
fan.std.Uri.encodeQuery = function(q)
{
  var $this = this;
  var buf = fan.sys.StrBuf.make();
  var first = true;
  q.each(fan.sys.Func.make$closure(
    fan.std.$clos$_u41,
    function(v,k)
    {
      var ks = fan.std.Uri.encodeToken(k,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionQuery));
      var vs = fan.std.Uri.encodeToken(v,((fan.std.Uri.static$init ? fan.std.Uri.static$init() : null),fan.std.Uri.m_sectionQuery));
      if (first)
      {
        first = false;
      }
      else
      {
        buf.addChar(38);
      }
      ;
      if (fan.sys.ObjUtil.equals(v,""))
      {
        buf.add(ks);
      }
      else
      {
        buf.add(ks).addChar(61).add(vs);
      }
      ;
      return;
    }));
  return buf.toStr();
}
fan.std.Uri.isName = function($name)
{
  var $this = this;
  return fan.sys.Str.all($name,fan.sys.Func.make$closure(
    fan.std.$clos$_u75,
    function(ch,ignoreparam$1)
    {
      return (fan.sys.Int.isAlphaNum(ch) || fan.sys.ObjUtil.equals(ch,45) || fan.sys.ObjUtil.equals(ch,95) || fan.sys.ObjUtil.equals(ch,46) || fan.sys.ObjUtil.equals(ch,126));
    }));
}
fan.std.Uri.checkName = function($name)
{
  if (!fan.std.Uri.isName($name))
  {
    throw fan.sys.NameErr.make($name);
  }
  ;
  return;
}
fan.std.Uri.prototype.equals = function(that)
{
  if (fan.sys.ObjUtil.is(that,fan.std.Uri.$type))
  {
    return fan.sys.ObjUtil.equals(this.m_str,fan.sys.ObjUtil.coerce(that,fan.std.Uri.$type).m_str);
  }
  ;
  return false;
}
fan.std.Uri.prototype.hash = function()
{
  return fan.sys.Str.hash(this.m_str);
}
fan.std.Uri.prototype.toStr = function()
{
  return this.m_str;
}
fan.std.Uri.prototype.toLocale = function()
{
  return this.toStr();
}
fan.std.Uri.prototype.encode = function()
{
  return fan.std.Uri.partsToStr(this.m_scheme,this.m_userInfo,this.m_host,this.m_port,this.m_pathStr,fan.sys.ObjUtil.coerce(this.m_query,fan.std.Type.find("std::Map<sys::Str,sys::Str>?")),this.m_frag,true);
}
fan.std.Uri.prototype.isAbs = function()
{
  return this.m_scheme != null;
}
fan.std.Uri.prototype.isRel = function()
{
  return !this.isAbs();
}
fan.std.Uri.prototype.isDir = function()
{
  var p = this.m_pathStr;
  if (fan.sys.ObjUtil.compareGT(fan.sys.Str.size(p),0))
  {
    var len = fan.sys.Str.size(p);
    if ((fan.sys.ObjUtil.compareGT(len,0) && fan.sys.ObjUtil.equals(fan.sys.Str.get(p,fan.sys.Int.minus(len,1)),47)))
    {
      return true;
    }
    ;
  }
  ;
  return false;
}
fan.std.Uri.prototype.auth = function()
{
  if (this.m_host == null)
  {
    return null;
  }
  ;
  if (this.m_port == null)
  {
    if (this.m_userInfo == null)
    {
      return this.m_host;
    }
    else
    {
      return fan.sys.Str.plus(fan.sys.Str.plus(this.m_userInfo,"@"),this.m_host);
    }
    ;
  }
  else
  {
    if (this.m_userInfo == null)
    {
      return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",this.m_host),":"),fan.sys.ObjUtil.coerce(this.m_port,fan.sys.Obj.$type.toNullable()));
    }
    else
    {
      return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",this.m_userInfo),"@"),this.m_host),":"),fan.sys.ObjUtil.coerce(this.m_port,fan.sys.Obj.$type.toNullable()));
    }
    ;
  }
  ;
}
fan.std.Uri.prototype.path = function()
{
  if (fan.sys.ObjUtil.equals(fan.sys.Str.size(this.m_pathStr),0))
  {
    return fan.sys.ObjUtil.coerce(((fan.sys.List.static$init ? fan.sys.List.static$init() : null),fan.sys.List.m_defVal),fan.std.Type.find("sys::List<sys::Str>"));
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_pathStr,"/"))
  {
    return fan.sys.ObjUtil.coerce(((fan.sys.List.static$init ? fan.sys.List.static$init() : null),fan.sys.List.m_defVal),fan.std.Type.find("sys::List<sys::Str>"));
  }
  ;
  var ps = fan.sys.Str.split(this.m_pathStr,fan.sys.ObjUtil.coerce(47,fan.sys.Int.$type.toNullable()));
  if (fan.sys.ObjUtil.equals(ps.get(0),""))
  {
    ps.removeAt(0);
  }
  ;
  if (fan.sys.ObjUtil.equals(ps.last(),""))
  {
    ps.removeAt(fan.sys.Int.minus(ps.size(),1));
  }
  ;
  return ps.toImmutable();
}
fan.std.Uri.prototype.isPathAbs = function()
{
  if (fan.sys.ObjUtil.equals(fan.sys.Str.size(this.m_pathStr),0))
  {
    return false;
  }
  else
  {
    return fan.sys.ObjUtil.equals(fan.sys.Str.get(this.m_pathStr,0),47);
  }
  ;
}
fan.std.Uri.prototype.isPathRel = function()
{
  return !this.isPathAbs();
}
fan.std.Uri.prototype.isPathOnly = function()
{
  return (this.m_scheme == null && this.m_host == null && this.m_port == null && this.m_userInfo == null && fan.sys.ObjUtil.equals(this.m_query.size(),0) && this.m_frag == null);
}
fan.std.Uri.prototype.$name = function()
{
  var len = fan.sys.Str.size(this.m_pathStr);
  if (fan.sys.ObjUtil.equals(len,0))
  {
    return "";
  }
  ;
  var start = 0;
  var endsSlash = fan.sys.ObjUtil.equals(fan.sys.Str.get(this.m_pathStr,fan.sys.Int.minus(len,1)),47);
  if (endsSlash)
  {
    start = fan.sys.Str.findr(this.m_pathStr,"/",-2);
  }
  else
  {
    start = fan.sys.Str.findr(this.m_pathStr,"/");
  }
  ;
  if (fan.sys.ObjUtil.compareNE(start,-1))
  {
    start = fan.sys.Int.plus(start,1);
  }
  else
  {
    start = 0;
  }
  ;
  var end = len;
  if (endsSlash)
  {
    end = fan.sys.Int.minus(len,1);
  }
  ;
  return fan.sys.Str.getRange(this.m_pathStr,fan.sys.Range.make(start,end,true));
}
fan.std.Uri.prototype.basename = function()
{
  var n = this.$name();
  var dot = fan.sys.Str.indexr(n,".");
  if (fan.sys.ObjUtil.compareLT(dot,2))
  {
    if (fan.sys.ObjUtil.compareLT(dot,0))
    {
      return n;
    }
    ;
    if (fan.sys.ObjUtil.equals(n,"."))
    {
      return n;
    }
    ;
    if (fan.sys.ObjUtil.equals(n,".."))
    {
      return n;
    }
    ;
  }
  ;
  return fan.sys.Str.getRange(n,fan.sys.Range.make(0,fan.sys.ObjUtil.coerce(dot,fan.sys.Int.$type),true));
}
fan.std.Uri.prototype.ext = function()
{
  var n = this.$name();
  var dot = fan.sys.Str.indexr(n,".");
  if (fan.sys.ObjUtil.compareLT(dot,2))
  {
    if (fan.sys.ObjUtil.compareLT(dot,0))
    {
      return null;
    }
    ;
    if (fan.sys.ObjUtil.equals(n,"."))
    {
      return null;
    }
    ;
    if (fan.sys.ObjUtil.equals(n,".."))
    {
      return null;
    }
    ;
  }
  ;
  return fan.sys.Str.getRange(n,fan.sys.Range.make(fan.sys.Int.plus(fan.sys.ObjUtil.coerce(dot,fan.sys.Int.$type),1),-1));
}
fan.std.Uri.prototype.mimeType = function()
{
  if (this.isDir())
  {
    return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_dir);
  }
  ;
  var e = this.ext();
  if (e == null)
  {
    return null;
  }
  ;
  return fan.std.MimeType.forExt(fan.sys.ObjUtil.coerce(this.ext(),fan.sys.Str.$type));
}
fan.std.Uri.prototype.queryStr = function()
{
  if (fan.sys.ObjUtil.equals(this.m_query.size(),0))
  {
    return null;
  }
  ;
  return fan.std.Uri.encodeQuery(this.m_query);
}
fan.std.Uri.prototype.parent = function()
{
  var p = this.parentPathStr(this.m_pathStr);
  if (p == null)
  {
    return null;
  }
  ;
  return fan.std.Uri.privateMake(this.m_scheme,this.m_userInfo,this.m_host,this.m_port,fan.sys.ObjUtil.coerce(p,fan.sys.Str.$type),null,null);
}
fan.std.Uri.prototype.parentPathStr = function(pathStr)
{
  var len = fan.sys.Str.size(pathStr);
  if ((fan.sys.ObjUtil.equals(len,0) || fan.sys.ObjUtil.equals(pathStr,"/")))
  {
    return null;
  }
  ;
  var end = fan.sys.Str.findr(pathStr,"/",-2);
  if (fan.sys.ObjUtil.equals(end,-1))
  {
    return null;
  }
  ;
  return fan.sys.Str.getRange(pathStr,fan.sys.Range.make(0,end));
}
fan.std.Uri.prototype.pathOnly = function()
{
  if ((this.m_scheme == null && this.m_userInfo == null && this.m_host == null && this.m_port == null && this.queryStr() == null && this.m_frag == null))
  {
    return this;
  }
  ;
  return fan.std.Uri.privateMake(null,null,null,null,this.m_pathStr,null,null);
}
fan.std.Uri.prototype.plus = function(toAppend)
{
  if ((toAppend.m_scheme != null || toAppend.m_host != null))
  {
    return toAppend;
  }
  ;
  var toAppPath = toAppend.m_pathStr;
  var resPath = null;
  var query = toAppend.m_query;
  if ((toAppend.m_query.isEmpty() && (fan.sys.ObjUtil.equals(toAppPath,"/") || fan.sys.ObjUtil.equals(toAppPath,""))))
  {
    query = this.m_query;
  }
  ;
  if ((fan.sys.ObjUtil.equals(toAppPath,"") || fan.sys.ObjUtil.equals(toAppPath,"/")))
  {
    resPath = this.m_pathStr;
  }
  else
  {
    if (fan.sys.Str.startsWith(toAppPath,"/"))
    {
      resPath = toAppPath;
    }
    else
    {
      if (this.isDir())
      {
        resPath = fan.sys.Str.plus(this.m_pathStr,toAppPath);
      }
      else
      {
        var p = this.parentPathStr(this.m_pathStr);
        if (p == null)
        {
          p = "/";
        }
        ;
        resPath = fan.sys.Str.plus(p,toAppPath);
      }
      ;
    }
    ;
  }
  ;
  return fan.std.Uri.privateMake(this.m_scheme,this.m_userInfo,this.m_host,this.m_port,fan.sys.ObjUtil.coerce(resPath,fan.sys.Str.$type),fan.sys.ObjUtil.coerce(query,fan.std.Type.find("std::Map<sys::Str,sys::Str>?")),toAppend.m_frag);
}
fan.std.Uri.prototype.plusName = function($name,asDir)
{
  if (asDir === undefined) asDir = false;
  if ((asDir && !fan.sys.Str.endsWith($name,"/")))
  {
    $name = fan.sys.Str.plus($name,"/");
  }
  ;
  if (this.isDir())
  {
    return fan.std.Uri.privateMake(this.m_scheme,this.m_userInfo,this.m_host,this.m_port,fan.sys.Str.plus(this.m_pathStr,$name),null,null);
  }
  ;
  var p = this.parentPathStr(this.m_pathStr);
  if (p == null)
  {
    p = (function($this) { if ($this.isPathAbs()) return "/"; return ""; })(this);
  }
  ;
  return fan.std.Uri.privateMake(this.m_scheme,this.m_userInfo,this.m_host,this.m_port,fan.sys.Str.plus(p,$name),null,null);
}
fan.std.Uri.prototype.plusSlash = function()
{
  if (this.isDir())
  {
    return this;
  }
  ;
  return fan.std.Uri.privateMake(this.m_scheme,this.m_userInfo,this.m_host,this.m_port,fan.sys.Str.plus(this.m_pathStr,"/"),fan.sys.ObjUtil.coerce(this.m_query,fan.std.Type.find("std::Map<sys::Str,sys::Str>?")),this.m_frag);
}
fan.std.Uri.prototype.plusQuery = function(query)
{
  var $this = this;
  if ((query == null || fan.sys.ObjUtil.equals(query.size(),0)))
  {
    return this;
  }
  ;
  var nq = fan.std.OrderedMap.make();
  this.m_query.each(fan.sys.Func.make$closure(
    fan.std.$clos$_u41,
    function(v,k)
    {
      nq.set(k,v);
      return;
    }));
  query.each(fan.sys.Func.make$closure(
    fan.std.$clos$_u41,
    function(v,k)
    {
      nq.set(k,v);
      return;
    }));
  return fan.std.Uri.privateMake(this.m_scheme,this.m_userInfo,this.m_host,this.m_port,this.m_pathStr,fan.sys.ObjUtil.coerce(nq,fan.std.Type.find("std::Map<sys::Str,sys::Str>?")),this.m_frag);
}
fan.std.Uri.prototype.relTo = function(base)
{
  var same = ((fan.sys.ObjUtil.equals(this.m_scheme,base.m_scheme) || this.m_scheme == null) && fan.sys.ObjUtil.equals(this.m_userInfo,base.m_userInfo) && fan.sys.ObjUtil.equals(this.m_host,base.m_host) && fan.sys.ObjUtil.equals(this.m_port,base.m_port));
  var baseStr = base.m_pathStr;
  if (base.isDir())
  {
    baseStr = fan.sys.Str.getRange(baseStr,fan.sys.Range.make(0,-1,true));
  }
  ;
  var pos = fan.sys.Str.find(this.m_pathStr,baseStr);
  var path = this.m_pathStr;
  if (fan.sys.ObjUtil.equals(pos,0))
  {
    var pos2 = fan.sys.Str.size(baseStr);
    path = fan.sys.Str.getRange(this.m_pathStr,fan.sys.Range.make(pos2,-1));
    if ((fan.sys.ObjUtil.compareGT(fan.sys.Str.size(path),0) && fan.sys.ObjUtil.equals(fan.sys.Str.get(path,0),47)))
    {
      path = fan.sys.Str.getRange(path,fan.sys.Range.make(1,-1));
    }
    ;
  }
  else
  {
    if (!same)
    {
      return this;
    }
    ;
  }
  ;
  if (!same)
  {
    if (!fan.sys.Str.startsWith(path,"/"))
    {
      path = fan.sys.Str.plus("/",path);
    }
    ;
    return fan.std.Uri.privateMake(this.m_scheme,this.m_userInfo,this.m_host,this.m_port,path,fan.sys.ObjUtil.coerce(this.m_query,fan.std.Type.find("std::Map<sys::Str,sys::Str>?")),this.m_frag);
  }
  ;
  return fan.std.Uri.privateMake(null,null,null,null,path,fan.sys.ObjUtil.coerce(this.m_query,fan.std.Type.find("std::Map<sys::Str,sys::Str>?")),this.m_frag);
}
fan.std.Uri.prototype.relToAuth = function()
{
  if ((this.m_scheme == null && this.m_host == null && this.m_port == null && this.m_userInfo == null))
  {
    return this;
  }
  ;
  return fan.std.Uri.privateMake(null,null,null,null,this.m_pathStr,fan.sys.ObjUtil.coerce(this.m_query,fan.std.Type.find("std::Map<sys::Str,sys::Str>?")),this.m_frag);
}
fan.std.Uri.prototype.toFile = function()
{
  return fan.std.File.make(this);
}
fan.std.Uri.prototype.get = function(base,checked)
{
  if (base === undefined) base = null;
  if (checked === undefined) checked = true;
  try
  {
    var uri = this;
    if (base != null)
    {
      var baseUri = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.trap(base,"uri",fan.sys.List.make(fan.sys.Obj.$type.toNullable(),[])),fan.std.Uri.$type);
      uri = baseUri.plus(this);
    }
    ;
    var us = fan.std.UriScheme.find(fan.sys.ObjUtil.coerce(uri.m_scheme,fan.sys.Str.$type),checked);
    return us.get(this,base);
  }
  catch ($_u77)
  {
    $_u77 = fan.sys.Err.make($_u77);
    if ($_u77 instanceof fan.sys.Err)
    {
      var e = $_u77;
      var e;
      if (checked)
      {
        throw fan.sys.UnresolvedErr.make(fan.sys.Str.plus("resolve uri: ",this),e);
      }
      ;
      return null;
    }
    else
    {
      throw $_u77;
    }
  }
  ;
}
fan.std.Uri.prototype.toCode = function()
{
  return fan.sys.Str.plus(fan.sys.Str.plus("`",this),"`");
}
fan.std.Uri.toUri = function(str)
{
  return (function($this) { if (str == null) return null; return fan.std.Uri.fromStr(fan.sys.ObjUtil.coerce(str,fan.sys.Str.$type)); })(this);
}
fan.std.Uri.static$init = function()
{
  if (fan.std.Uri.static$inited) return;
  fan.std.Uri.static$inited = true;
  fan.std.Uri.m_defVal = fan.std.Uri.fromStr("");
  fan.std.Uri.m_sectionPath = 1;
  fan.std.Uri.m_sectionQuery = 2;
  fan.std.Uri.m_sectionFrag = 3;
  return;
}
fan.std.Uri.prototype.m_str = null;
fan.std.Uri.m_defVal = null;
fan.std.Uri.m_sectionPath = 0;
fan.std.Uri.m_sectionQuery = 0;
fan.std.Uri.m_sectionFrag = 0;
fan.std.Uri.prototype.m_scheme = null;
fan.std.Uri.prototype.m_host = null;
fan.std.Uri.prototype.m_userInfo = null;
fan.std.Uri.prototype.m_port = null;
fan.std.Uri.prototype.m_pathStr = null;
fan.std.Uri.prototype.m_query = null;
fan.std.Uri.prototype.m_frag = null;
fan.std.Buf = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Buf.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_out$Store = "_once_";
  this.m_in$Store = "_once_";
  return;
}
fan.std.Buf.prototype.$typeof = function() { return fan.std.Buf.$type; }
fan.std.Buf.make = function(capacity)
{
  if (capacity === undefined) capacity = 1024;
  return fan.std.MemBuf.make(capacity);
}
fan.std.Buf.privateMake = function() {
  var self = new fan.std.Buf();
  fan.std.Buf.privateMake$(self);
  return self;
  }
fan.std.Buf.privateMake$ = function(self)
{
  ;
  return;
}
fan.std.Buf.random = function(size)
{
  var x = fan.std.Buf.make(size);
  x.size$(size);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,size); i = fan.sys.Int.increment(i))
  {
    x.set(i,fan.sys.Int.random(fan.sys.ObjUtil.coerce(fan.sys.Range.make(0,255),fan.sys.Range.$type.toNullable())));
  }
  ;
  return x;
}
fan.std.Buf.prototype.equals = function(that)
{
  return this === that;
}
fan.std.Buf.prototype.bytesEqual = function(that)
{
  if (fan.sys.ObjUtil.equals(this,that))
  {
    return true;
  }
  ;
  if (fan.sys.ObjUtil.compareNE(this.size(),that.size()))
  {
    return false;
  }
  ;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.size()); i = fan.sys.Int.increment(i))
  {
    if (fan.sys.ObjUtil.compareNE(this.getByte(i),that.getByte(i)))
    {
      return false;
    }
    ;
  }
  ;
  return true;
}
fan.std.Buf.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.sys.ObjUtil.toStr(fan.sys.Obj.prototype),fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("(pos=",fan.sys.ObjUtil.coerce(this.pos(),fan.sys.Obj.$type.toNullable()))," size="),fan.sys.ObjUtil.coerce(this.size(),fan.sys.Obj.$type.toNullable())),")"));
}
fan.std.Buf.prototype.isEmpty = function()
{
  return fan.sys.ObjUtil.equals(this.size(),0);
}
fan.std.Buf.prototype.remaining = function()
{
  return fan.sys.Int.minus(this.size(),this.pos());
}
fan.std.Buf.prototype.more = function()
{
  return fan.sys.ObjUtil.compareGT(this.remaining(),0);
}
fan.std.Buf.prototype.seek = function(pos)
{
  var size = this.size();
  if (fan.sys.ObjUtil.compareLT(pos,0))
  {
    pos = fan.sys.Int.plus(size,pos);
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(pos,0) || fan.sys.ObjUtil.compareGT(pos,size)))
  {
    throw fan.sys.IndexErr.make(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(pos,fan.sys.Obj.$type.toNullable())));
  }
  ;
  this.pos$(pos);
  return this;
}
fan.std.Buf.prototype.flip = function()
{
  this.size$(this.pos());
  this.pos$(0);
  return this;
}
fan.std.Buf.prototype.get = function(pos)
{
  var size = this.size();
  if (fan.sys.ObjUtil.compareLT(pos,0))
  {
    pos = fan.sys.Int.plus(size,pos);
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(pos,0) || fan.sys.ObjUtil.compareGE(pos,size)))
  {
    throw fan.sys.IndexErr.make(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(pos,fan.sys.Obj.$type.toNullable())));
  }
  ;
  return this.getByte(pos);
}
fan.std.Buf.prototype.getRange = function(range)
{
  var size = this.size();
  var s = range.startIndex(size);
  var e = range.endIndex(size);
  var n = fan.sys.Int.plus(fan.sys.Int.minus(e,s),1);
  if (fan.sys.ObjUtil.compareLT(n,0))
  {
    throw fan.sys.IndexErr.make(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(range,fan.sys.Obj.$type.toNullable())));
  }
  ;
  var a = fan.sys.Array.make(n,"sys::Int8");
  this.getBytes(s,a,0,n);
  var buf = fan.std.MemBuf.makeBuf(a);
  buf.charset$(this.charset());
  return buf;
}
fan.std.Buf.prototype.dup = function()
{
  var size = this.size();
  var a = fan.sys.Array.make(size,"sys::Int8");
  this.getBytes(0,a,0,size);
  return fan.std.MemBuf.makeBuf(a);
}
fan.std.Buf.prototype.set = function(pos,byte)
{
  var size = this.size();
  if (fan.sys.ObjUtil.compareLT(pos,0))
  {
    pos = fan.sys.Int.plus(size,pos);
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(pos,0) || fan.sys.ObjUtil.compareGE(pos,size)))
  {
    throw fan.sys.IndexErr.make(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(pos,fan.sys.Obj.$type.toNullable())));
  }
  ;
  this.setByte(pos,byte);
  return this;
}
fan.std.Buf.prototype.clear = function()
{
  this.pos$(0);
  this.size$(0);
  return this;
}
fan.std.Buf.prototype.trim = function()
{
  if (fan.sys.ObjUtil.compareNE(this.size(),this.capacity()))
  {
    this.capacity$(this.size());
  }
  ;
  return this;
}
fan.std.Buf.prototype.fill = function(b,times)
{
  if (fan.sys.ObjUtil.compareLT(this.capacity(),fan.sys.Int.plus(this.size(),times)))
  {
    this.capacity$(fan.sys.Int.plus(this.size(),times));
  }
  ;
  var out = this.out();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,times); i = fan.sys.Int.increment(i))
  {
    out.write(b);
  }
  ;
  return this;
}
fan.std.Buf.prototype.out = function()
{
  if (this.m_out$Store === "_once_")
  {
    this.m_out$Store = this.out$Once$Buf();
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_out$Store,fan.std.OutStream.$type);
}
fan.std.Buf.prototype.write = function(byte)
{
  this.out().write(byte);
  return this;
}
fan.std.Buf.prototype.writeBuf = function(buf,n)
{
  if (n === undefined) n = buf.remaining();
  this.out().writeBuf(buf,n);
  return this;
}
fan.std.Buf.prototype.writeI2 = function(n)
{
  this.out().writeI2(n);
  return this;
}
fan.std.Buf.prototype.writeI4 = function(n)
{
  this.out().writeI4(n);
  return this;
}
fan.std.Buf.prototype.writeI8 = function(n)
{
  this.out().writeI8(n);
  return this;
}
fan.std.Buf.prototype.writeF4 = function(r)
{
  this.out().writeF4(r);
  return this;
}
fan.std.Buf.prototype.writeF8 = function(r)
{
  this.out().writeF8(r);
  return this;
}
fan.std.Buf.prototype.writeBool = function(b)
{
  this.out().writeBool(b);
  return this;
}
fan.std.Buf.prototype.writeUtf = function(s)
{
  this.out().writeUtf(s);
  return this;
}
fan.std.Buf.prototype.writeChar = function($char)
{
  this.out().writeChar($char);
  return this;
}
fan.std.Buf.prototype.writeChars = function(str,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = fan.sys.Int.minus(fan.sys.Str.size(str),off);
  this.out().writeChars(str,off,len);
  return this;
}
fan.std.Buf.prototype.print = function(s)
{
  this.out().print(s);
  return this;
}
fan.std.Buf.prototype.printLine = function(obj)
{
  if (obj === undefined) obj = "";
  this.out().printLine(obj);
  return this;
}
fan.std.Buf.prototype.$in = function()
{
  if (this.m_in$Store === "_once_")
  {
    this.m_in$Store = this.in$Once$Buf();
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_in$Store,fan.std.InStream.$type);
}
fan.std.Buf.prototype.privateIn = function()
{
  return this.$in();
}
fan.std.Buf.prototype.read = function()
{
  return this.privateIn().read();
}
fan.std.Buf.prototype.readBuf = function(buf,n)
{
  return fan.sys.ObjUtil.coerce(this.privateIn().readBuf(buf,n),fan.sys.Int.$type.toNullable());
}
fan.std.Buf.prototype.unread = function(b)
{
  this.privateIn().unread(b);
  return this;
}
fan.std.Buf.prototype.readAllBuf = function()
{
  return this.privateIn().readAllBuf();
}
fan.std.Buf.prototype.readBufFully = function(buf,n)
{
  return this.privateIn().readBufFully(buf,n);
}
fan.std.Buf.prototype.peek = function()
{
  return this.privateIn().peek();
}
fan.std.Buf.prototype.readU1 = function()
{
  return this.privateIn().readU1();
}
fan.std.Buf.prototype.readS1 = function()
{
  return this.privateIn().readS1();
}
fan.std.Buf.prototype.readU2 = function()
{
  return this.privateIn().readU2();
}
fan.std.Buf.prototype.readS2 = function()
{
  return this.privateIn().readS2();
}
fan.std.Buf.prototype.readU4 = function()
{
  return this.privateIn().readU4();
}
fan.std.Buf.prototype.readS4 = function()
{
  return this.privateIn().readS4();
}
fan.std.Buf.prototype.readS8 = function()
{
  return this.privateIn().readS8();
}
fan.std.Buf.prototype.readF4 = function()
{
  return this.privateIn().readF4();
}
fan.std.Buf.prototype.readF8 = function()
{
  return this.privateIn().readF8();
}
fan.std.Buf.prototype.readBool = function()
{
  return this.privateIn().readBool();
}
fan.std.Buf.prototype.readUtf = function()
{
  return this.privateIn().readUtf();
}
fan.std.Buf.prototype.readChar = function()
{
  return this.privateIn().readChar();
}
fan.std.Buf.prototype.unreadChar = function(b)
{
  this.privateIn().unreadChar(b);
  return this;
}
fan.std.Buf.prototype.peekChar = function()
{
  return this.privateIn().peekChar();
}
fan.std.Buf.prototype.readChars = function(n)
{
  return this.privateIn().readChars(n);
}
fan.std.Buf.prototype.readLine = function(max)
{
  if (max === undefined) max = -1;
  return this.privateIn().readLine(max);
}
fan.std.Buf.prototype.readStrToken = function(max,c)
{
  if (max === undefined) max = fan.sys.ObjUtil.coerce(-1,fan.sys.Int.$type.toNullable());
  if (c === undefined) c = null;
  return this.privateIn().readStrToken(fan.sys.ObjUtil.coerce(max,fan.sys.Int.$type),c);
}
fan.std.Buf.prototype.readAllLines = function()
{
  return this.privateIn().readAllLines();
}
fan.std.Buf.prototype.eachLine = function(f)
{
  this.privateIn().eachLine(f);
  return;
}
fan.std.Buf.prototype.readAllStr = function(normalizeNewlines)
{
  if (normalizeNewlines === undefined) normalizeNewlines = true;
  return this.privateIn().readAllStr(normalizeNewlines);
}
fan.std.Buf.prototype.unsafeArray = function()
{
  return null;
}
fan.std.Buf.prototype.safeArray = function()
{
  var ba = fan.sys.Array.make(this.size(),"sys::Int8");
  this.getBytes(0,ba,0,this.size());
  return ba;
}
fan.std.Buf.prototype.toHex = function()
{
  var buf = this.unsafeArray();
  if (buf != null)
  {
    var sb = fan.sys.StrBuf.make(fan.sys.Int.mult(this.size(),2));
    this.memToHex(fan.sys.ObjUtil.coerce(buf,fan.std.Type.find("sys::Array<sys::Int8>")),this.size(),sb);
    return sb.toStr();
  }
  ;
  var oldPos = this.pos();
  var temp = fan.sys.Array.make(1024,"sys::Int8");
  var total = 0;
  var $in = this.$in();
  var size = this.size();
  var sb = fan.sys.StrBuf.make(fan.sys.Int.mult(size,2));
  this.pos$(0);
  while (fan.sys.ObjUtil.compareLT(total,size))
  {
    var n = $in.readBytes(temp,0,fan.sys.Int.min(temp.size(),fan.sys.Int.minus(size,total)));
    if (fan.sys.ObjUtil.compareLT(n,0))
    {
      break;
    }
    ;
    this.memToHex(temp,n,sb);
    total = fan.sys.Int.plus(total,n);
  }
  ;
  this.pos$(oldPos);
  return sb.toStr();
}
fan.std.Buf.prototype.memToHex = function(temp,n,sb)
{
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,n); i = fan.sys.Int.increment(i))
  {
    var b = fan.sys.Int.and(fan.sys.ObjUtil.coerce(temp.get(i),fan.sys.Int.$type),255);
    var h = fan.sys.Int.shiftr(b,4);
    var l = fan.sys.Int.and(b,15);
    sb.addChar(fan.sys.Str.get(((fan.std.Buf.static$init ? fan.std.Buf.static$init() : null),fan.std.Buf.m_hexChars),h)).addChar(fan.sys.Str.get(((fan.std.Buf.static$init ? fan.std.Buf.static$init() : null),fan.std.Buf.m_hexChars),l));
  }
  ;
  return;
}
fan.std.Buf.parseHex = function(ch)
{
  var nib = -1;
  if ((fan.sys.ObjUtil.compareLE(48,ch) && fan.sys.ObjUtil.compareLE(ch,57)))
  {
    nib = fan.sys.Int.minus(ch,48);
  }
  else
  {
    if ((fan.sys.ObjUtil.compareLE(97,ch) && fan.sys.ObjUtil.compareLE(ch,102)))
    {
      nib = fan.sys.Int.minus(fan.sys.Int.plus(10,ch),97);
    }
    else
    {
      if ((fan.sys.ObjUtil.compareLE(65,ch) && fan.sys.ObjUtil.compareLE(ch,70)))
      {
        nib = fan.sys.Int.minus(fan.sys.Int.plus(10,ch),65);
      }
      ;
    }
    ;
  }
  ;
  return nib;
}
fan.std.Buf.fromHex = function(s)
{
  var slen = fan.sys.Str.size(s);
  var buf = fan.sys.Array.make(fan.sys.Int.div(slen,2),"sys::Int8");
  var size = 0;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,slen); i = fan.sys.Int.increment(i))
  {
    var c0 = fan.sys.Str.get(s,i);
    var n0 = fan.std.Buf.parseHex(c0);
    if (fan.sys.ObjUtil.compareLT(n0,0))
    {
      continue;
    }
    ;
    var n1 = -1;
    if (fan.sys.ObjUtil.compareLT(i = fan.sys.Int.increment(i),slen))
    {
      var c1 = fan.sys.Str.get(s,i);
      n1 = fan.std.Buf.parseHex(c1);
    }
    ;
    if (fan.sys.ObjUtil.compareLT(n1,0))
    {
      throw fan.sys.IOErr.make("Invalid hex str");
    }
    ;
    buf.set((function($this) { var $_u79 = size; size = fan.sys.Int.increment(size); return $_u79; })(this),fan.sys.ObjUtil.coerce(fan.sys.Int.or(fan.sys.Int.shiftl(n0,4),n1),fan.sys.Int.$type));
  }
  ;
  return fan.std.MemBuf.makeBuf(buf,size);
}
fan.std.Buf.prototype.pipeTo = function(out,len)
{
  var temp = fan.sys.Array.make(1024,"sys::Int8");
  var total = 0;
  var $in = this.$in();
  while (fan.sys.ObjUtil.compareLT(total,len))
  {
    var n = $in.readBytes(temp,0,fan.sys.Int.min(temp.size(),fan.sys.Int.minus(len,total)));
    if (fan.sys.ObjUtil.compareLT(n,0))
    {
      break;
    }
    ;
    out.writeBytes(temp,0,n);
    total = fan.sys.Int.plus(total,n);
  }
  ;
  return;
}
fan.std.Buf.prototype.pipeFrom = function($in,len)
{
  var total = 0;
  var ba = fan.sys.Array.make(1024,"sys::Int8");
  while (fan.sys.ObjUtil.compareLT(total,len))
  {
    var n = $in.readBytes(ba,0,fan.sys.Int.min(ba.size(),fan.sys.Int.minus(len,total)));
    if (fan.sys.ObjUtil.compareLT(n,0))
    {
      return (function($this) { if (fan.sys.ObjUtil.equals(total,0)) return -1; return total; })(this);
    }
    ;
    this.setBytes(this.pos(),ba,0,n);
    this.pos$(fan.sys.Int.plus(this.pos(),n));
    total = fan.sys.Int.plus(total,n);
  }
  ;
  return total;
}
fan.std.Buf.prototype.toFile = function(uri)
{
  throw fan.sys.UnsupportedErr.make("Only supported on memory buffers");
}
fan.std.Buf.prototype.out$Once$Buf = function()
{
  return fan.std.BufOutStream.make(this);
}
fan.std.Buf.prototype.in$Once$Buf = function()
{
  return fan.std.BufInStream.make(this);
}
fan.std.Buf.static$init = function()
{
  if (fan.std.Buf.static$inited) return;
  fan.std.Buf.static$inited = true;
  fan.std.Buf.m_hexChars = "0123456789abcdef";
  return;
}
fan.std.Buf.prototype.m_size = 0;
fan.std.Buf.prototype.m_capacity = 0;
fan.std.Buf.prototype.m_pos = 0;
fan.std.Buf.prototype.m_endian = null;
fan.std.Buf.prototype.m_charset = null;
fan.std.Buf.m_hexChars = null;
fan.std.Buf.prototype.m_out$Store = null;
fan.std.Buf.prototype.m_in$Store = null;
fan.std.ConstBuf = fan.sys.Obj.$extend(fan.std.Buf);
fan.std.ConstBuf.prototype.$ctor = function()
{
  fan.std.Buf.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.ConstBuf.prototype.$typeof = function() { return fan.std.ConstBuf.$type; }
fan.std.ConstBuf.prototype.buf = function()
{
  return this.m_buf;
}
fan.std.ConstBuf.prototype.buf$ = function(it)
{
  this.m_buf = it;
  return;
}
fan.std.ConstBuf.prototype.err = function()
{
  return fan.sys.ReadonlyErr.make();
}
fan.std.ConstBuf.makeBuf = function(buf,size,e,c) {
  var self = new fan.std.ConstBuf();
  fan.std.ConstBuf.makeBuf$(self,buf,size,e,c);
  return self;
  }
fan.std.ConstBuf.makeBuf$ = function(self,buf,size,e,c)
{
  fan.std.Buf.privateMake$(self);
  self.m_buf = buf;
  self.m_size = size;
  self.m_endian = e;
  self.m_charset = c;
  return;
}
fan.std.ConstBuf.prototype.unsafeArray = function()
{
  return fan.sys.ObjUtil.coerce(this.m_buf,fan.std.Type.find("sys::Array<sys::Int8>?"));
}
fan.std.ConstBuf.prototype.size = function()
{
  return this.m_size;
}
fan.std.ConstBuf.prototype.size$ = function(it)
{
  throw this.err();
}
fan.std.ConstBuf.prototype.capacity = function()
{
  throw this.err();
}
fan.std.ConstBuf.prototype.capacity$ = function(it)
{
  throw this.err();
}
fan.std.ConstBuf.prototype.pos = function()
{
  return 0;
}
fan.std.ConstBuf.prototype.pos$ = function(it)
{
  throw this.err();
}
fan.std.ConstBuf.prototype.getBytes = function(pos,dst,off,len)
{
  fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(this.m_buf,fan.sys.Obj.$type),pos,fan.sys.ObjUtil.coerce(dst,fan.sys.Obj.$type),off,len);
  return len;
}
fan.std.ConstBuf.prototype.setBytes = function(pos,src,off,len)
{
  throw this.err();
}
fan.std.ConstBuf.prototype.getByte = function(index)
{
  return fan.sys.ObjUtil.coerce(this.m_buf.get(index),fan.sys.Int.$type);
}
fan.std.ConstBuf.prototype.setByte = function(index,byte)
{
  throw this.err();
}
fan.std.ConstBuf.prototype.trim = function()
{
  throw this.err();
}
fan.std.ConstBuf.prototype.close = function()
{
  return true;
}
fan.std.ConstBuf.prototype.sync = function()
{
  throw this.err();
}
fan.std.ConstBuf.prototype.endian = function()
{
  return this.m_endian;
}
fan.std.ConstBuf.prototype.endian$ = function(it)
{
  throw this.err();
}
fan.std.ConstBuf.prototype.charset = function()
{
  return this.m_charset;
}
fan.std.ConstBuf.prototype.charset$ = function(it)
{
  throw this.err();
}
fan.std.ConstBuf.prototype.fill = function(byte,times)
{
  throw this.err();
}
fan.std.ConstBuf.prototype.out = function()
{
  throw this.err();
}
fan.std.ConstBuf.prototype.$in = function()
{
  return fan.std.ConstBufInStream.make(this);
}
fan.std.ConstBuf.prototype.privateIn = function()
{
  throw this.err();
}
fan.std.ConstBuf.prototype.pipeTo = function(out,len)
{
  if (fan.sys.ObjUtil.compareGT(fan.sys.Int.plus(this.pos(),len),this.size()))
  {
    throw fan.sys.IOErr.make("Not enough bytes to write");
  }
  ;
  out.writeBytes(this.m_buf,this.pos(),len);
  return;
}
fan.std.ConstBuf.prototype.pipeFrom = function($in,len)
{
  throw this.err();
}
fan.std.ConstBuf.prototype.isImmutable = function()
{
  return true;
}
fan.std.ConstBuf.prototype.toImmutable = function()
{
  return this;
}
fan.std.ConstBuf.prototype.toFile = function(uri)
{
  return fan.std.MemFile.make(this,uri);
}
fan.std.ConstBuf.prototype.m_buf = null;
fan.std.ConstBuf.prototype.m_size = 0;
fan.std.ConstBuf.prototype.m_capacity = 0;
fan.std.ConstBuf.prototype.m_pos = 0;
fan.std.ConstBuf.prototype.m_endian = null;
fan.std.ConstBuf.prototype.m_charset = null;
fan.std.InStream = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.InStream.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.InStream.prototype.$typeof = function() { return fan.std.InStream.$type; }
fan.std.InStream.prototype.avail = function()
{
  return 0;
}
fan.std.InStream.prototype.r = function()
{
  return this.read();
}
fan.std.InStream.prototype.readBuf = function(buf,n)
{
  return buf.pipeFrom(this,n);
}
fan.std.InStream.prototype.readBytes = function(ba,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = ba.size();
  var i = 0;
  for (; fan.sys.ObjUtil.compareLT(i,len); i = fan.sys.Int.increment(i))
  {
    var c = this.read();
    if (fan.sys.ObjUtil.equals(c,-1))
    {
      break;
    }
    ;
    ba.set(fan.sys.Int.plus(off,i),fan.sys.ObjUtil.coerce(c,fan.sys.Int.$type));
  }
  ;
  return i;
}
fan.std.InStream.prototype.unread = function(b)
{
  throw fan.sys.UnsupportedErr.make("unread");
}
fan.std.InStream.prototype.close = function()
{
  return true;
}
fan.std.InStream.prototype.skip = function(n)
{
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,n); i = fan.sys.Int.increment(i))
  {
    if (fan.sys.ObjUtil.compareLT(this.r(),0))
    {
      return i;
    }
    ;
  }
  ;
  return n;
}
fan.std.InStream.prototype.readAllBuf = function()
{
  try
  {
    var size = ((fan.std.InStream.static$init ? fan.std.InStream.static$init() : null),fan.std.InStream.m_chunkSize);
    var buf = fan.std.Buf.make(size);
    while (fan.sys.ObjUtil.compareNE(this.readBuf(buf,size),-1))
    {
    }
    ;
    buf.flip();
    return buf;
  }
  finally
  {
    try
    {
      this.close();
    }
    catch ($_u81)
    {
      $_u81 = fan.sys.Err.make($_u81);
      if ($_u81 instanceof fan.sys.Err)
      {
        var e = $_u81;
        var e;
        e.trace();
      }
      else
      {
        throw $_u81;
      }
    }
    ;
  }
  ;
}
fan.std.InStream.prototype.readBufFully = function(buf,n)
{
  if (buf == null)
  {
    buf = fan.std.Buf.make(n);
  }
  ;
  var total = n;
  var got = 0;
  while (fan.sys.ObjUtil.compareLT(got,total))
  {
    var r = this.readBuf(fan.sys.ObjUtil.coerce(buf,fan.std.Buf.$type),fan.sys.Int.minus(total,got));
    if (fan.sys.ObjUtil.equals(r,-1))
    {
      throw fan.sys.IOErr.make("Unexpected end of stream");
    }
    ;
    got = fan.sys.Int.plus(got,r);
  }
  ;
  buf.flip();
  return fan.sys.ObjUtil.coerce(buf,fan.std.Buf.$type);
}
fan.std.InStream.prototype.bigEndian = function()
{
  return fan.sys.ObjUtil.equals(this.endian(),((fan.std.Endian.static$init ? fan.std.Endian.static$init() : null),fan.std.Endian.m_big));
}
fan.std.InStream.prototype.peek = function()
{
  var x = this.r();
  if (fan.sys.ObjUtil.compareNE(x,-1))
  {
    this.unread(x);
  }
  ;
  return x;
}
fan.std.InStream.prototype.readU1 = function()
{
  var c = this.r();
  if (fan.sys.ObjUtil.compareLT(c,0))
  {
    throw fan.sys.IOErr.make("Unexpected end of stream");
  }
  ;
  return c;
}
fan.std.InStream.prototype.readS1 = function()
{
  var x = this.readU1();
  return fan.std.SysInStream.toSigned(x,1);
}
fan.std.InStream.prototype.readU2 = function()
{
  var c1 = this.r();
  var c2 = this.r();
  if (fan.sys.ObjUtil.compareLT(fan.sys.Int.or(c1,c2),0))
  {
    throw fan.sys.IOErr.make("Unexpected end of stream");
  }
  ;
  if (this.bigEndian())
  {
    return fan.sys.Int.or(fan.sys.Int.shiftl(c1,8),c2);
  }
  else
  {
    return fan.sys.Int.or(fan.sys.Int.shiftl(c2,8),c1);
  }
  ;
}
fan.std.InStream.prototype.readS2 = function()
{
  var x = this.readU2();
  return fan.std.SysInStream.toSigned(x,2);
}
fan.std.InStream.prototype.readU4 = function()
{
  var c1 = this.r();
  var c2 = this.r();
  var c3 = this.r();
  var c4 = this.r();
  if (fan.sys.ObjUtil.compareLT(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.or(c1,c2),c3),c4),0))
  {
    throw fan.sys.IOErr.make("Unexpected end of stream");
  }
  ;
  if (this.bigEndian())
  {
    return fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.shiftl(c1,24),fan.sys.Int.shiftl(c2,16)),fan.sys.Int.shiftl(c3,8)),c4);
  }
  else
  {
    return fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.shiftl(c4,24),fan.sys.Int.shiftl(c3,16)),fan.sys.Int.shiftl(c2,8)),c1);
  }
  ;
}
fan.std.InStream.prototype.readS4 = function()
{
  var x = this.readU4();
  return fan.std.SysInStream.toSigned(x,4);
}
fan.std.InStream.prototype.readS8 = function()
{
  var c1 = this.r();
  var c2 = this.r();
  var c3 = this.r();
  var c4 = this.r();
  var c5 = this.r();
  var c6 = this.r();
  var c7 = this.r();
  var c8 = this.r();
  if (fan.sys.ObjUtil.compareLT(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.or(c1,c2),c3),c4),c5),c6),c7),c8),0))
  {
    throw fan.sys.IOErr.make("Unexpected end of stream");
  }
  ;
  if (this.bigEndian())
  {
    return fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.shiftl(c1,56),fan.sys.Int.shiftl(c2,48)),fan.sys.Int.shiftl(c3,40)),fan.sys.Int.shiftl(c4,32)),fan.sys.Int.shiftl(c5,24)),fan.sys.Int.shiftl(c6,16)),fan.sys.Int.shiftl(c7,8)),c8);
  }
  else
  {
    return fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.shiftl(c8,56),fan.sys.Int.shiftl(c7,48)),fan.sys.Int.shiftl(c6,40)),fan.sys.Int.shiftl(c5,32)),fan.sys.Int.shiftl(c4,24)),fan.sys.Int.shiftl(c3,16)),fan.sys.Int.shiftl(c2,8)),c1);
  }
  ;
}
fan.std.InStream.prototype.readF4 = function()
{
  return fan.sys.Float.makeBits32(this.readS4());
}
fan.std.InStream.prototype.readF8 = function()
{
  return fan.sys.Float.makeBits(this.readS8());
}
fan.std.InStream.prototype.readBool = function()
{
  var n = this.r();
  if (fan.sys.ObjUtil.compareLT(n,0))
  {
    throw fan.sys.IOErr.make("Unexpected end of stream");
  }
  ;
  return fan.sys.ObjUtil.compareNE(n,0);
}
fan.std.InStream.prototype.readUtf = function()
{
  var sz = this.readS2();
  var ba = fan.sys.Array.make(sz,"sys::Int8");
  this.readBytes(ba);
  return fan.sys.Str.fromUtf8(ba);
}
fan.std.InStream.prototype.readChar = function()
{
  return this.charset().decode(this);
}
fan.std.InStream.prototype.unreadChar = function(b)
{
  var ba = fan.sys.Array.make(8,"sys::Int8");
  var n = this.charset().encodeArray(b,ba,0);
  for (var i = fan.sys.Int.minus(n,1); fan.sys.ObjUtil.compareGE(i,0); i = fan.sys.Int.decrement(i))
  {
    this.unread(fan.sys.ObjUtil.coerce(ba.get(i),fan.sys.Int.$type));
  }
  ;
  return this;
}
fan.std.InStream.prototype.peekChar = function()
{
  var x = this.readChar();
  if (fan.sys.ObjUtil.compareNE(x,-1))
  {
    this.unreadChar(x);
  }
  ;
  return x;
}
fan.std.InStream.prototype.readChars = function(n)
{
  if (fan.sys.ObjUtil.compareLT(n,0))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("readChars n < 0: ",fan.sys.ObjUtil.coerce(n,fan.sys.Obj.$type.toNullable())));
  }
  ;
  if (fan.sys.ObjUtil.equals(n,0))
  {
    return "";
  }
  ;
  var buf = fan.sys.StrBuf.make();
  for (var i = n; fan.sys.ObjUtil.compareGT(i,0); i = fan.sys.Int.decrement(i))
  {
    var ch = this.readChar();
    if (fan.sys.ObjUtil.compareLT(ch,0))
    {
      throw fan.sys.IOErr.make("Unexpected end of stream");
    }
    ;
    buf.addChar(ch);
  }
  ;
  return buf.toStr();
}
fan.std.InStream.prototype.readLine = function(max)
{
  if (max === undefined) max = -1;
  if (fan.sys.ObjUtil.compareLT(max,0))
  {
    max = ((fan.sys.Int.static$init ? fan.sys.Int.static$init() : null),fan.sys.Int.m_maxVal);
  }
  ;
  if (fan.sys.ObjUtil.equals(max,0))
  {
    return "";
  }
  ;
  var buf = fan.sys.StrBuf.make();
  for (var i = max; fan.sys.ObjUtil.compareGT(i,0); i = fan.sys.Int.decrement(i))
  {
    var c = this.readChar();
    if (fan.sys.ObjUtil.compareLT(c,0))
    {
      if (fan.sys.ObjUtil.equals(buf.size(),0))
      {
        return null;
      }
      ;
      break;
    }
    else
    {
      if (fan.sys.ObjUtil.equals(c,10))
      {
        break;
      }
      else
      {
        if (fan.sys.ObjUtil.equals(c,13))
        {
          c = this.readChar();
          if ((fan.sys.ObjUtil.compareGE(c,0) && fan.sys.ObjUtil.compareNE(c,10)))
          {
            this.unreadChar(c);
          }
          ;
          break;
        }
        ;
      }
      ;
    }
    ;
    buf.addChar(c);
  }
  ;
  return buf.toStr();
}
fan.std.InStream.prototype.readStrToken = function(max,callback)
{
  if (max === undefined) max = -1;
  if (callback === undefined) callback = null;
  if (fan.sys.ObjUtil.equals(max,-1))
  {
    max = ((fan.sys.Int.static$init ? fan.sys.Int.static$init() : null),fan.sys.Int.m_maxVal);
  }
  ;
  var sb = fan.sys.StrBuf.make();
  while (fan.sys.ObjUtil.compareLT(sb.size(),max))
  {
    var c = this.readChar();
    if (fan.sys.ObjUtil.compareLT(c,0))
    {
      if (fan.sys.ObjUtil.equals(sb.size(),0))
      {
        return null;
      }
      ;
      break;
    }
    ;
    var terminate = false;
    if (callback == null)
    {
      terminate = fan.sys.Int.isSpace(c);
    }
    else
    {
      terminate = callback.call(fan.sys.ObjUtil.coerce(c,fan.sys.Obj.$type.toNullable()));
    }
    ;
    if (terminate)
    {
      this.unreadChar(c);
      break;
    }
    ;
    sb.addChar(c);
  }
  ;
  return sb.toStr();
}
fan.std.InStream.prototype.readNullTerminatedStr = function(max)
{
  if (max === undefined) max = -1;
  if (fan.sys.ObjUtil.compareLT(max,0))
  {
    max = ((fan.sys.Int.static$init ? fan.sys.Int.static$init() : null),fan.sys.Int.m_maxVal);
  }
  ;
  var buf = fan.sys.StrBuf.make();
  while (fan.sys.ObjUtil.compareLT(buf.size(),max))
  {
    var ch = this.readChar();
    if (fan.sys.ObjUtil.compareLT(ch,0))
    {
      if (fan.sys.ObjUtil.equals(buf.size(),0))
      {
        return null;
      }
      ;
      break;
    }
    ;
    if (fan.sys.ObjUtil.equals(ch,0))
    {
      break;
    }
    ;
    buf.addChar(ch);
  }
  ;
  return buf.toStr();
}
fan.std.InStream.prototype.readAllLines = function()
{
  try
  {
    var res = fan.sys.List.make(fan.sys.Str.$type);
    var line = null;
    while (line = this.readLine() != null)
    {
      res.add(fan.sys.ObjUtil.coerce(line,fan.sys.Str.$type));
    }
    ;
    return res;
  }
  finally
  {
    this.close();
  }
  ;
}
fan.std.InStream.prototype.eachLine = function(f)
{
  try
  {
    var line = null;
    while (line = this.readLine() != null)
    {
      f.call(fan.sys.ObjUtil.coerce(line,fan.sys.Str.$type));
    }
    ;
  }
  finally
  {
    this.close();
  }
  ;
  return;
}
fan.std.InStream.prototype.readAllStr = function(normalizeNewlines)
{
  if (normalizeNewlines === undefined) normalizeNewlines = true;
  try
  {
    var buf = fan.sys.StrBuf.make();
    var last = -1;
    while (true)
    {
      var ch = this.readChar();
      if (fan.sys.ObjUtil.compareLT(ch,0))
      {
        break;
      }
      ;
      if (normalizeNewlines)
      {
        if ((fan.sys.ObjUtil.equals(last,13) && fan.sys.ObjUtil.equals(ch,10)))
        {
          last = -1;
          continue;
        }
        ;
        last = ch;
        if (fan.sys.ObjUtil.equals(ch,13))
        {
          ch = 10;
        }
        ;
      }
      ;
      buf.addChar(ch);
    }
    ;
    return buf.toStr();
  }
  finally
  {
    this.close();
  }
  ;
}
fan.std.InStream.prototype.pipe = function(out,toPipe,close)
{
  if (toPipe === undefined) toPipe = -1;
  if (close === undefined) close = true;
  try
  {
    var bufSize = ((fan.std.InStream.static$init ? fan.std.InStream.static$init() : null),fan.std.InStream.m_chunkSize);
    var buf = fan.std.Buf.make(bufSize);
    var total = 0;
    if (fan.sys.ObjUtil.equals(toPipe,-1))
    {
      while (true)
      {
        var n = this.readBuf(buf.clear(),bufSize);
        if (fan.sys.ObjUtil.compareLT(n,0))
        {
          break;
        }
        ;
        out.writeBuf(buf.flip(),buf.remaining());
        total = fan.sys.Int.plus(total,n);
      }
      ;
    }
    else
    {
      var toPipeVal = toPipe;
      while (fan.sys.ObjUtil.compareLT(total,toPipeVal))
      {
        if (fan.sys.ObjUtil.compareLT(fan.sys.Int.minus(toPipeVal,total),bufSize))
        {
          bufSize = fan.sys.Int.minus(toPipeVal,total);
        }
        ;
        var n = this.readBuf(buf.clear(),bufSize);
        if (fan.sys.ObjUtil.compareLT(n,0))
        {
          throw fan.sys.IOErr.make("Unexpected end of stream");
        }
        ;
        out.writeBuf(buf.flip(),buf.remaining());
        total = fan.sys.Int.plus(total,n);
      }
      ;
    }
    ;
    return total;
  }
  finally
  {
    if (close)
    {
      this.close();
    }
    ;
  }
  ;
}
fan.std.InStream.prototype.use = function(f)
{
  try
  {
    f.call(this);
  }
  finally
  {
    this.close();
  }
  ;
  return;
}
fan.std.InStream.prototype.readProps = function()
{
  return fan.std.Props.readProps(this);
}
fan.std.InStream.prototype.readPropsListVals = function()
{
  return fan.std.Props.readPropsListVals(this);
}
fan.std.InStream.make = function() {
  var self = new fan.std.InStream();
  fan.std.InStream.make$(self);
  return self;
  }
fan.std.InStream.make$ = function(self)
{
  return;
}
fan.std.InStream.static$init = function()
{
  if (fan.std.InStream.static$inited) return;
  fan.std.InStream.static$inited = true;
  fan.std.InStream.m_chunkSize = 4096;
  return;
}
fan.std.InStream.m_chunkSize = 0;
fan.std.InStream.prototype.m_endian = null;
fan.std.InStream.prototype.m_charset = null;
fan.std.ConstBufInStream = fan.sys.Obj.$extend(fan.std.InStream);
fan.std.ConstBufInStream.prototype.$ctor = function()
{
  fan.std.InStream.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.ConstBufInStream.prototype.$typeof = function() { return fan.std.ConstBufInStream.$type; }
fan.std.ConstBufInStream.prototype.endian = function()
{
  return this.m_endian;
}
fan.std.ConstBufInStream.prototype.endian$ = function(it)
{
  this.m_endian = it;
  return;
}
fan.std.ConstBufInStream.prototype.charset = function()
{
  return this.m_charset;
}
fan.std.ConstBufInStream.prototype.charset$ = function(it)
{
  this.m_charset = it;
  return;
}
fan.std.ConstBufInStream.prototype.buf = function()
{
  return this.m_buf;
}
fan.std.ConstBufInStream.prototype.buf$ = function(it)
{
  this.m_buf = it;
  return;
}
fan.std.ConstBufInStream.prototype.pos = function()
{
  return this.m_pos;
}
fan.std.ConstBufInStream.prototype.pos$ = function(it)
{
  this.m_pos = it;
  return;
}
fan.std.ConstBufInStream.make = function(buf) {
  var self = new fan.std.ConstBufInStream();
  fan.std.ConstBufInStream.make$(self,buf);
  return self;
  }
fan.std.ConstBufInStream.make$ = function(self,buf)
{
  fan.std.InStream.make$(self);
  self.endian$(buf.endian());
  self.charset$(buf.charset());
  self.m_buf = buf;
  self.m_pos = 0;
  return;
}
fan.std.ConstBufInStream.prototype.avail = function()
{
  return fan.sys.Int.minus(this.m_buf.size(),this.m_pos);
}
fan.std.ConstBufInStream.prototype.read = function()
{
  if (fan.sys.ObjUtil.compareGE(this.m_pos,this.m_buf.size()))
  {
    return -1;
  }
  ;
  return this.m_buf.get((function($this) { var $_u82 = $this.m_pos; $this.m_pos = fan.sys.Int.increment($this.m_pos); return $_u82; })(this));
}
fan.std.ConstBufInStream.prototype.skip = function(n)
{
  var pos = fan.sys.Int.plus(this.m_pos,n);
  if (fan.sys.ObjUtil.compareGT(pos,this.m_buf.size()))
  {
    pos = this.m_buf.size();
    n = fan.sys.Int.minus(pos,this.m_pos);
  }
  ;
  this.m_pos = pos;
  return n;
}
fan.std.ConstBufInStream.prototype.readBytes = function(ba,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = ba.size();
  var m = this.avail();
  if (fan.sys.ObjUtil.compareLE(m,0))
  {
    return -1;
  }
  ;
  len = fan.sys.Int.min(len,m);
  this.m_buf.getBytes(this.m_buf.pos(),ba,off,len);
  this.m_pos = fan.sys.Int.plus(this.m_pos,len);
  return len;
}
fan.std.ConstBufInStream.prototype.unread = function(n)
{
  if ((fan.sys.ObjUtil.compareGT(this.m_pos,0) && fan.sys.ObjUtil.equals(this.m_buf.get(fan.sys.Int.minus(this.m_pos,1)),n)))
  {
    (function($this) { var $_u83 = $this.m_pos; $this.m_pos = fan.sys.Int.decrement($this.m_pos); return $_u83; })(this);
  }
  else
  {
    throw this.m_buf.err();
  }
  ;
  return this;
}
fan.std.ConstBufInStream.prototype.close = function()
{
  return true;
}
fan.std.ConstBufInStream.prototype.peek = function()
{
  if (fan.sys.ObjUtil.compareGE(this.m_pos,this.m_buf.size()))
  {
    return -1;
  }
  ;
  return this.m_buf.get(fan.sys.Int.plus(this.m_pos,1));
}
fan.std.ConstBufInStream.prototype.m_endian = null;
fan.std.ConstBufInStream.prototype.m_charset = null;
fan.std.ConstBufInStream.prototype.m_buf = null;
fan.std.ConstBufInStream.prototype.m_pos = 0;
fan.std.File = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.File.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.std.FilePeer(this);
  var $this = this;
}
fan.std.File.prototype.$typeof = function() { return fan.std.File.$type; }
fan.std.File.make = function(uri,checkSlash)
{
  if (checkSlash === undefined) checkSlash = true;
  return fan.std.FilePeer.make(uri,checkSlash);
}
fan.std.File.fromPath = function(path,checkSlash)
{
  if (checkSlash === undefined) checkSlash = true;
  return fan.std.File.make(fan.sys.ObjUtil.coerce(fan.std.Uri.toUri(path),fan.std.Uri.$type),checkSlash);
}
fan.std.File.os = function(osPath)
{
  return fan.std.FilePeer.os(osPath);
}
fan.std.File.osRoots = function()
{
  return fan.std.FilePeer.osRoots();
}
fan.std.File.createTemp = function(prefix,suffix,dir)
{
  if (prefix === undefined) prefix = "fan";
  if (suffix === undefined) suffix = ".tmp";
  if (dir === undefined) dir = null;
  return fan.std.FilePeer.createTemp(prefix,suffix,dir);
}
fan.std.File.privateMake = function(uri) {
  var self = new fan.std.File();
  fan.std.File.privateMake$(self,uri);
  return self;
  }
fan.std.File.privateMake$ = function(self,uri)
{
  self.m__uri = uri;
  return;
}
fan.std.File.prototype.equals = function(that)
{
  if (fan.sys.ObjUtil.is(that,fan.std.File.$type))
  {
    return fan.sys.ObjUtil.equals(this.uri(),fan.sys.ObjUtil.coerce(that,fan.std.File.$type).uri());
  }
  ;
  return false;
}
fan.std.File.prototype.hash = function()
{
  return this.uri().hash();
}
fan.std.File.prototype.toStr = function()
{
  return this.uri().toStr();
}
fan.std.File.prototype.uri = function()
{
  return this.m__uri;
}
fan.std.File.prototype.isDir = function()
{
  return this.uri().isDir();
}
fan.std.File.prototype.path = function()
{
  return this.uri().path();
}
fan.std.File.prototype.pathStr = function()
{
  return this.uri().m_pathStr;
}
fan.std.File.prototype.$name = function()
{
  return this.uri().$name();
}
fan.std.File.prototype.basename = function()
{
  return this.uri().basename();
}
fan.std.File.prototype.ext = function()
{
  return this.uri().ext();
}
fan.std.File.prototype.mimeType = function()
{
  return this.uri().mimeType();
}
fan.std.File.prototype.isEmpty = function()
{
  if (this.isDir())
  {
    return this.list().isEmpty();
  }
  ;
  var size = this.size();
  return fan.sys.ObjUtil.compareLE(size,0);
}
fan.std.File.prototype.parent = function()
{
  var p = this.uri().parent();
  if (p == null)
  {
    return null;
  }
  ;
  return fan.std.File.make(fan.sys.ObjUtil.coerce(p,fan.std.Uri.$type));
}
fan.std.File.prototype.listDirs = function()
{
  var $this = this;
  return this.list().findAll(fan.sys.Func.make$closure(
    fan.std.$clos$_u84,
    function(f,ignoreparam$1)
    {
      return f.isDir();
    }));
}
fan.std.File.prototype.listFiles = function()
{
  var $this = this;
  return this.list().findAll(fan.sys.Func.make$closure(
    fan.std.$clos$_u84,
    function(f,ignoreparam$1)
    {
      return !f.isDir();
    }));
}
fan.std.File.prototype.walk = function(c)
{
  var $this = this;
  c.call(this);
  if (this.isDir())
  {
    this.list().each(fan.sys.Func.make$closure(
      fan.std.$clos$_u40,
      function(f,ignoreparam$1)
      {
        f.walk(c);
        return;
      }));
  }
  ;
  return;
}
fan.std.File.prototype.plus = function(path,checkSlash)
{
  if (checkSlash === undefined) checkSlash = true;
  var u = this.uri().plus(path);
  return fan.std.File.make(u,checkSlash);
}
fan.std.File.prototype.store = function()
{
  return null;
}
fan.std.File.prototype.createFile = function($name)
{
  return this.plus(fan.std.Uri.fromStr($name)).create();
}
fan.std.File.prototype.createDir = function($name)
{
  return this.plus(fan.sys.ObjUtil.coerce(fan.std.Uri.toUri(fan.sys.Str.plus(fan.sys.Str.plus("",$name),"/")),fan.std.Uri.$type)).create();
}
fan.std.File.prototype.copyTo = function(to,options)
{
  if (options === undefined) options = null;
  return this.peer.copyTo(this,to,options);
}
fan.std.File.prototype.copyInto = function(dir,options)
{
  if (options === undefined) options = null;
  if (!dir.isDir())
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus(fan.sys.Str.plus("Not a dir: `",dir),"`"));
  }
  ;
  var $name = this.$name();
  if (this.isDir())
  {
    $name = fan.sys.Str.plus($name,"/");
  }
  ;
  return this.copyTo(dir.plus(fan.sys.ObjUtil.coerce(fan.std.Uri.toUri(fan.sys.Str.plus("",$name)),fan.std.Uri.$type)),options);
}
fan.std.File.prototype.moveInto = function(dir)
{
  if (!dir.isDir())
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus(fan.sys.Str.plus("Not a dir: `",dir),"`"));
  }
  ;
  var $name = this.$name();
  if (this.isDir())
  {
    $name = fan.sys.Str.plus($name,"/");
  }
  ;
  return this.moveTo(dir.plus(fan.sys.ObjUtil.coerce(fan.std.Uri.toUri(fan.sys.Str.plus("",$name)),fan.std.Uri.$type)));
}
fan.std.File.prototype.rename = function(newName)
{
  if (this.isDir())
  {
    newName = fan.sys.Str.plus(newName,"/");
  }
  ;
  return this.moveTo(this.parent().plus(fan.sys.ObjUtil.coerce(fan.std.Uri.toUri(fan.sys.Str.plus("",newName)),fan.std.Uri.$type)));
}
fan.std.File.prototype.readAllBuf = function()
{
  return this.$in().readAllBuf();
}
fan.std.File.prototype.readAllLines = function()
{
  return this.$in().readAllLines();
}
fan.std.File.prototype.eachLine = function(f)
{
  this.$in().eachLine(f);
  return;
}
fan.std.File.prototype.readAllStr = function(normalizeNewlines)
{
  if (normalizeNewlines === undefined) normalizeNewlines = true;
  return this.$in().readAllStr(normalizeNewlines);
}
fan.std.File.prototype.writeAllStr = function(str)
{
  var $this = this;
  this.out().use(fan.sys.Func.make$closure(
    fan.std.$clos$_u85,
    function(it)
    {
      it.writeChars(str);
      return;
    }));
  return;
}
fan.std.File.sep = function()
{
  return fan.std.FilePeer.sep();
}
fan.std.File.pathSep = function()
{
  return fan.std.FilePeer.pathSep();
}
fan.std.File.prototype.m__uri = null;
fan.std.File.prototype.m_modified = null;
fan.std.FilePeer = function(){}
fan.std.FilePeer.make = function(uri, checkSlash) {
	if (checkSlash == undefined) checkSlash = true;
	self = new fan.std.File();
	try {
	  self.m_file = new File("", uri.toStr());
	}
	catch {}
	return self;
}
fan.std.FilePeer.os = function(osPath) {
	self = new fan.std.File();
	try {
		self.m_file = new File("", osPath);
	}
	catch {}
	return self;
}
fan.std.FilePeer.osRoots = function(osPath) {
	return fan.sys.List.make(1);
}
fan.std.FilePeer.createTemp = function(prefix, suffix, dir) {
	if (prefix == null || prefix.length() == 0)
		prefix = "fan";
	if (prefix.length() == 1)
		prefix = prefix + "xx";
	if (prefix.length() == 2)
		prefix = prefix + "x";
	if (suffix == null)
		suffix = ".tmp";
	if (dir != null) {
		return dir + suffix;
	}
	return fan.std.FilePeer.os("/temp/"+suffix);
}
fan.std.FilePeer.sep = function() {
	return "/";
}
fan.std.FilePeer.pathSep = function() {
	return ":";
}
fan.std.FilePeer.plusNameOf = function(self, x) {
	var name = x.name();
	if (x.isDir())
		name += "/";
	return self.plus(Uri.fromStr(name));
}
fan.std.FilePeer.copyTo = function(self, to, options) {
}
fan.std.MemFile = fan.sys.Obj.$extend(fan.std.File);
fan.std.MemFile.prototype.$ctor = function()
{
  fan.std.File.prototype.$ctor.call(this);
  this.peer = new fan.std.FilePeer(this);
  var $this = this;
}
fan.std.MemFile.prototype.$typeof = function() { return fan.std.MemFile.$type; }
fan.std.MemFile.make = function(buf,uri) {
  var self = new fan.std.MemFile();
  fan.std.MemFile.make$(self,buf,uri);
  return self;
  }
fan.std.MemFile.make$ = function(self,buf,uri)
{
  fan.std.File.privateMake$(self,uri);
  self.m_buf = fan.sys.ObjUtil.coerce((function($this) { var $_u86 = buf; if ($_u86 == null) return null; return fan.sys.ObjUtil.toImmutable($_u86); })(self),fan.std.ConstBuf.$type);
  self.m_ts = fan.std.TimePoint.now();
  return;
}
fan.std.MemFile.prototype.err = function()
{
  return fan.sys.UnsupportedErr.make("ConstBufFile");
}
fan.std.MemFile.prototype.exists = function()
{
  return true;
}
fan.std.MemFile.prototype.size = function()
{
  return this.m_buf.size();
}
fan.std.MemFile.prototype.modified = function()
{
  return fan.sys.ObjUtil.coerce(this.m_ts,fan.std.TimePoint.$type.toNullable());
}
fan.std.MemFile.prototype.modified$ = function(it)
{
  throw this.err();
}
fan.std.MemFile.prototype.osPath = function()
{
  return null;
}
fan.std.MemFile.prototype.list = function()
{
  return fan.sys.ObjUtil.coerce(((fan.sys.List.static$init ? fan.sys.List.static$init() : null),fan.sys.List.m_defVal),fan.std.Type.find("sys::List<std::File>"));
}
fan.std.MemFile.prototype.normalize = function()
{
  return this;
}
fan.std.MemFile.prototype.create = function()
{
  throw this.err();
}
fan.std.MemFile.prototype.moveTo = function(to)
{
  throw this.err();
}
fan.std.MemFile.prototype.$delete = function()
{
  throw this.err();
}
fan.std.MemFile.prototype.deleteOnExit = function()
{
  throw this.err();
}
fan.std.MemFile.prototype.open = function(mode)
{
  if (mode === undefined) mode = "rw";
  throw this.err();
}
fan.std.MemFile.prototype.mmap = function(mode,pos,size)
{
  if (mode === undefined) mode = "rw";
  if (pos === undefined) pos = 0;
  if (size === undefined) size = this.size();
  throw this.err();
}
fan.std.MemFile.prototype.$in = function(bufferSize)
{
  if (bufferSize === undefined) bufferSize = 4096;
  return this.m_buf.$in();
}
fan.std.MemFile.prototype.out = function(append,bufferSize)
{
  if (append === undefined) append = false;
  if (bufferSize === undefined) bufferSize = 4096;
  throw this.err();
}
fan.std.MemFile.prototype.m_buf = null;
fan.std.MemFile.prototype.m_ts = null;
fan.std.MemFile.prototype.m_modified = null;
fan.std.XmlUtil = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.XmlUtil.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.XmlUtil.prototype.$typeof = function() { return fan.std.XmlUtil.$type; }
fan.std.XmlUtil.writeXml = function(out,s,mask)
{
  if (mask === undefined) mask = 0;
  var escNewlines = fan.sys.ObjUtil.compareNE(fan.sys.Int.and(mask,((fan.std.XmlUtil.static$init ? fan.std.XmlUtil.static$init() : null),fan.std.XmlUtil.m_xmlEscNewlines)),0);
  var escQuotes = fan.sys.ObjUtil.compareNE(fan.sys.Int.and(mask,((fan.std.XmlUtil.static$init ? fan.std.XmlUtil.static$init() : null),fan.std.XmlUtil.m_xmlEscQuotes)),0);
  var escUnicode = fan.sys.ObjUtil.compareNE(fan.sys.Int.and(mask,((fan.std.XmlUtil.static$init ? fan.std.XmlUtil.static$init() : null),fan.std.XmlUtil.m_xmlEscUnicode)),0);
  var len = fan.sys.Str.size(s);
  var hex = "0123456789abcdef";
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,len); i = fan.sys.Int.increment(i))
  {
    var ch = fan.sys.Str.get(s,i);
    var $_u87 = ch;
    if (fan.sys.ObjUtil.equals($_u87,0) || fan.sys.ObjUtil.equals($_u87,1) || fan.sys.ObjUtil.equals($_u87,2) || fan.sys.ObjUtil.equals($_u87,3) || fan.sys.ObjUtil.equals($_u87,4) || fan.sys.ObjUtil.equals($_u87,5) || fan.sys.ObjUtil.equals($_u87,6) || fan.sys.ObjUtil.equals($_u87,7) || fan.sys.ObjUtil.equals($_u87,8) || fan.sys.ObjUtil.equals($_u87,11) || fan.sys.ObjUtil.equals($_u87,12) || fan.sys.ObjUtil.equals($_u87,14) || fan.sys.ObjUtil.equals($_u87,15) || fan.sys.ObjUtil.equals($_u87,16) || fan.sys.ObjUtil.equals($_u87,17) || fan.sys.ObjUtil.equals($_u87,18) || fan.sys.ObjUtil.equals($_u87,19) || fan.sys.ObjUtil.equals($_u87,20) || fan.sys.ObjUtil.equals($_u87,21) || fan.sys.ObjUtil.equals($_u87,22) || fan.sys.ObjUtil.equals($_u87,23) || fan.sys.ObjUtil.equals($_u87,24) || fan.sys.ObjUtil.equals($_u87,25) || fan.sys.ObjUtil.equals($_u87,26) || fan.sys.ObjUtil.equals($_u87,27) || fan.sys.ObjUtil.equals($_u87,28) || fan.sys.ObjUtil.equals($_u87,29) || fan.sys.ObjUtil.equals($_u87,30) || fan.sys.ObjUtil.equals($_u87,31))
    {
      fan.std.XmlUtil.writeXmlEsc(out,ch);
    }
    else if (fan.sys.ObjUtil.equals($_u87,10) || fan.sys.ObjUtil.equals($_u87,13))
    {
      if (!escNewlines)
      {
        out.writeChar(ch);
      }
      else
      {
        fan.std.XmlUtil.writeXmlEsc(out,ch);
      }
      ;
    }
    else if (fan.sys.ObjUtil.equals($_u87,32))
    {
      out.writeChar(32);
    }
    else if (fan.sys.ObjUtil.equals($_u87,33) || fan.sys.ObjUtil.equals($_u87,35) || fan.sys.ObjUtil.equals($_u87,36) || fan.sys.ObjUtil.equals($_u87,37) || fan.sys.ObjUtil.equals($_u87,40) || fan.sys.ObjUtil.equals($_u87,41) || fan.sys.ObjUtil.equals($_u87,42) || fan.sys.ObjUtil.equals($_u87,43) || fan.sys.ObjUtil.equals($_u87,44) || fan.sys.ObjUtil.equals($_u87,45) || fan.sys.ObjUtil.equals($_u87,46) || fan.sys.ObjUtil.equals($_u87,47) || fan.sys.ObjUtil.equals($_u87,48) || fan.sys.ObjUtil.equals($_u87,49) || fan.sys.ObjUtil.equals($_u87,50) || fan.sys.ObjUtil.equals($_u87,51) || fan.sys.ObjUtil.equals($_u87,52) || fan.sys.ObjUtil.equals($_u87,53) || fan.sys.ObjUtil.equals($_u87,54) || fan.sys.ObjUtil.equals($_u87,55) || fan.sys.ObjUtil.equals($_u87,56) || fan.sys.ObjUtil.equals($_u87,57) || fan.sys.ObjUtil.equals($_u87,58) || fan.sys.ObjUtil.equals($_u87,59) || fan.sys.ObjUtil.equals($_u87,61) || fan.sys.ObjUtil.equals($_u87,63) || fan.sys.ObjUtil.equals($_u87,64) || fan.sys.ObjUtil.equals($_u87,65) || fan.sys.ObjUtil.equals($_u87,66) || fan.sys.ObjUtil.equals($_u87,67) || fan.sys.ObjUtil.equals($_u87,68) || fan.sys.ObjUtil.equals($_u87,69) || fan.sys.ObjUtil.equals($_u87,70) || fan.sys.ObjUtil.equals($_u87,71) || fan.sys.ObjUtil.equals($_u87,72) || fan.sys.ObjUtil.equals($_u87,73) || fan.sys.ObjUtil.equals($_u87,74) || fan.sys.ObjUtil.equals($_u87,75) || fan.sys.ObjUtil.equals($_u87,76) || fan.sys.ObjUtil.equals($_u87,77) || fan.sys.ObjUtil.equals($_u87,78) || fan.sys.ObjUtil.equals($_u87,79) || fan.sys.ObjUtil.equals($_u87,80) || fan.sys.ObjUtil.equals($_u87,81) || fan.sys.ObjUtil.equals($_u87,82) || fan.sys.ObjUtil.equals($_u87,83) || fan.sys.ObjUtil.equals($_u87,84) || fan.sys.ObjUtil.equals($_u87,85) || fan.sys.ObjUtil.equals($_u87,86) || fan.sys.ObjUtil.equals($_u87,87) || fan.sys.ObjUtil.equals($_u87,88) || fan.sys.ObjUtil.equals($_u87,89) || fan.sys.ObjUtil.equals($_u87,90) || fan.sys.ObjUtil.equals($_u87,91) || fan.sys.ObjUtil.equals($_u87,92) || fan.sys.ObjUtil.equals($_u87,93) || fan.sys.ObjUtil.equals($_u87,94) || fan.sys.ObjUtil.equals($_u87,95) || fan.sys.ObjUtil.equals($_u87,96) || fan.sys.ObjUtil.equals($_u87,97) || fan.sys.ObjUtil.equals($_u87,98) || fan.sys.ObjUtil.equals($_u87,99) || fan.sys.ObjUtil.equals($_u87,100) || fan.sys.ObjUtil.equals($_u87,101) || fan.sys.ObjUtil.equals($_u87,102) || fan.sys.ObjUtil.equals($_u87,103) || fan.sys.ObjUtil.equals($_u87,104) || fan.sys.ObjUtil.equals($_u87,105) || fan.sys.ObjUtil.equals($_u87,106) || fan.sys.ObjUtil.equals($_u87,107) || fan.sys.ObjUtil.equals($_u87,108) || fan.sys.ObjUtil.equals($_u87,109) || fan.sys.ObjUtil.equals($_u87,110) || fan.sys.ObjUtil.equals($_u87,111) || fan.sys.ObjUtil.equals($_u87,112) || fan.sys.ObjUtil.equals($_u87,113) || fan.sys.ObjUtil.equals($_u87,114) || fan.sys.ObjUtil.equals($_u87,115) || fan.sys.ObjUtil.equals($_u87,116) || fan.sys.ObjUtil.equals($_u87,117) || fan.sys.ObjUtil.equals($_u87,118) || fan.sys.ObjUtil.equals($_u87,119) || fan.sys.ObjUtil.equals($_u87,120) || fan.sys.ObjUtil.equals($_u87,121) || fan.sys.ObjUtil.equals($_u87,122) || fan.sys.ObjUtil.equals($_u87,123) || fan.sys.ObjUtil.equals($_u87,124) || fan.sys.ObjUtil.equals($_u87,125) || fan.sys.ObjUtil.equals($_u87,126))
    {
      out.writeChar(ch);
    }
    else if (fan.sys.ObjUtil.equals($_u87,60))
    {
      out.writeChar(38).writeChar(108).writeChar(116).writeChar(59);
    }
    else if (fan.sys.ObjUtil.equals($_u87,62))
    {
      if ((fan.sys.ObjUtil.compareGT(i,0) && fan.sys.ObjUtil.compareNE(fan.sys.Str.get(s,fan.sys.Int.minus(i,1)),93)))
      {
        out.writeChar(62);
      }
      else
      {
        out.writeChar(38).writeChar(103).writeChar(116).writeChar(59);
      }
      ;
    }
    else if (fan.sys.ObjUtil.equals($_u87,38))
    {
      out.writeChar(38).writeChar(97).writeChar(109).writeChar(112).writeChar(59);
    }
    else if (fan.sys.ObjUtil.equals($_u87,34))
    {
      if (!escQuotes)
      {
        out.writeChar(ch);
      }
      else
      {
        out.writeChar(38).writeChar(113).writeChar(117).writeChar(111).writeChar(116).writeChar(59);
      }
      ;
    }
    else if (fan.sys.ObjUtil.equals($_u87,39))
    {
      if (!escQuotes)
      {
        out.writeChar(ch);
      }
      else
      {
        out.writeChar(38).writeChar(35).writeChar(51).writeChar(57).writeChar(59);
      }
      ;
    }
    else
    {
      if ((fan.sys.ObjUtil.compareLE(ch,247) || !escUnicode))
      {
        out.writeChar(ch);
      }
      else
      {
        fan.std.XmlUtil.writeXmlEsc(out,ch);
      }
      ;
    }
    ;
  }
  ;
  return out;
}
fan.std.XmlUtil.writeXmlEsc = function(out,ch)
{
  var enc = out.charset();
  var hex = "0123456789abcdef";
  enc.encode(38,out);
  enc.encode(35,out);
  enc.encode(120,out);
  if (fan.sys.ObjUtil.compareGT(ch,255))
  {
    enc.encode(fan.sys.Str.get(hex,fan.sys.Int.and(fan.sys.Int.shiftr(ch,12),15)),out);
    enc.encode(fan.sys.Str.get(hex,fan.sys.Int.and(fan.sys.Int.shiftr(ch,8),15)),out);
  }
  ;
  enc.encode(fan.sys.Str.get(hex,fan.sys.Int.and(fan.sys.Int.shiftr(ch,4),15)),out);
  enc.encode(fan.sys.Str.get(hex,fan.sys.Int.and(ch,15)),out);
  enc.encode(59,out);
  return;
}
fan.std.XmlUtil.toXml = function(self)
{
  var s = null;
  var len = fan.sys.Str.size(self);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,len); i = fan.sys.Int.increment(i))
  {
    var c = fan.sys.Str.get(self,i);
    if (fan.sys.ObjUtil.compareGT(c,62))
    {
      if (s != null)
      {
        s.addChar(c);
      }
      ;
    }
    else
    {
      var esc = ((fan.std.XmlUtil.static$init ? fan.std.XmlUtil.static$init() : null),fan.std.XmlUtil.m_xmlEsc).get(c);
      if ((esc != null && (fan.sys.ObjUtil.compareNE(c,62) || fan.sys.ObjUtil.equals(i,0) || fan.sys.ObjUtil.equals(fan.sys.Str.get(self,fan.sys.Int.minus(i,1)),93))))
      {
        if (s == null)
        {
          s = fan.sys.StrBuf.make(fan.sys.Int.plus(len,12));
          s.addStr(self,0,i);
        }
        ;
        s.add(esc);
      }
      else
      {
        if (s != null)
        {
          s.addChar(c);
        }
        ;
      }
      ;
    }
    ;
  }
  ;
  if (s == null)
  {
    return self;
  }
  ;
  return s.toStr();
}
fan.std.XmlUtil.make = function() {
  var self = new fan.std.XmlUtil();
  fan.std.XmlUtil.make$(self);
  return self;
  }
fan.std.XmlUtil.make$ = function(self)
{
  return;
}
fan.std.XmlUtil.static$init = function()
{
  if (fan.std.XmlUtil.static$inited) return;
  fan.std.XmlUtil.static$inited = true;
  fan.std.XmlUtil.m_xmlEscNewlines = 1;
  fan.std.XmlUtil.m_xmlEscQuotes = 2;
  fan.std.XmlUtil.m_xmlEscUnicode = 4;
  if (true)
  {
    var txmlEsc = fan.sys.List.make(63);
    txmlEsc.size$(63);
    txmlEsc.set(38,"&amp;");
    txmlEsc.set(60,"&lt;");
    txmlEsc.set(62,"&gt;");
    txmlEsc.set(39,"&#39;");
    txmlEsc.set(34,"&quot;");
    fan.std.XmlUtil.m_xmlEsc = fan.sys.ObjUtil.coerce((function($this) { var $_u88 = txmlEsc; if ($_u88 == null) return null; return fan.sys.ObjUtil.toImmutable($_u88); })(this),fan.std.Type.find("sys::List<sys::Str?>"));
  }
  ;
  return;
}
fan.std.XmlUtil.m_xmlEscNewlines = 0;
fan.std.XmlUtil.m_xmlEscQuotes = 0;
fan.std.XmlUtil.m_xmlEscUnicode = 0;
fan.std.XmlUtil.m_xmlEsc = null;
fan.std.Endian = fan.sys.Obj.$extend(fan.sys.Enum);
fan.std.Endian.prototype.$ctor = function()
{
  fan.sys.Enum.prototype.$ctor.call(this);
  this.peer = new fan.sys.EnumPeer(this);
  var $this = this;
}
fan.std.Endian.prototype.$typeof = function() { return fan.std.Endian.$type; }
fan.std.Endian.make = function($ordinal,$name) {
  var self = new fan.std.Endian();
  fan.std.Endian.make$(self,$ordinal,$name);
  return self;
  }
fan.std.Endian.make$ = function(self,$ordinal,$name)
{
  fan.sys.Enum.make$(self,$ordinal,$name);
  return;
}
fan.std.Endian.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.sys.Enum.doFromStr("std::Endian",$name,checked),fan.std.Endian.$type.toNullable());
}
fan.std.Endian.static$init = function()
{
  if (fan.std.Endian.static$inited) return;
  fan.std.Endian.static$inited = true;
  fan.std.Endian.m_big = fan.std.Endian.make(0,"big");
  fan.std.Endian.m_little = fan.std.Endian.make(1,"little");
  fan.std.Endian.m_vals = fan.sys.ObjUtil.coerce((function($this) { var $_u89 = fan.sys.List.make(fan.std.Endian.$type, [((fan.std.Endian.static$init ? fan.std.Endian.static$init() : null),fan.std.Endian.m_big),((fan.std.Endian.static$init ? fan.std.Endian.static$init() : null),fan.std.Endian.m_little)]); if ($_u89 == null) return null; return fan.sys.ObjUtil.toImmutable($_u89); })(this),fan.std.Type.find("sys::List<std::Endian>"));
  if (true)
  {
  }
  ;
  return;
}
fan.std.Endian.m_big = null;
fan.std.Endian.m_little = null;
fan.std.Endian.m_vals = null;
fan.std.StrExt = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.StrExt.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.StrExt.prototype.$typeof = function() { return fan.std.StrExt.$type; }
fan.std.StrExt.$in = function(str)
{
  return fan.std.StrInStream.make(str);
}
fan.std.StrExt.out = function(buf)
{
  return fan.std.StrOutStream.make(buf);
}
fan.std.StrExt.toBuf = function(str,charset)
{
  if (charset === undefined) charset = ((fan.std.Charset.static$init ? fan.std.Charset.static$init() : null),fan.std.Charset.m_utf8);
  var buf = fan.std.MemBuf.make(fan.sys.Int.mult(fan.sys.Str.size(str),2));
  buf.charset$(charset);
  buf.print(str);
  return fan.sys.ObjUtil.coerce(buf.flip(),fan.std.MemBuf.$type);
}
fan.std.StrExt.splitAny = function(str,sp,normalize)
{
  if (normalize === undefined) normalize = true;
  var res = fan.sys.List.make(fan.sys.Str.$type);
  var buf = fan.sys.StrBuf.make();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(str)); i = fan.sys.Int.increment(i))
  {
    var c = fan.sys.Str.get(str,i);
    if (fan.sys.Str.containsChar(sp,c))
    {
      var part = buf.toStr();
      if (normalize)
      {
        part = fan.sys.Str.trim(part);
      }
      ;
      if ((fan.sys.ObjUtil.compareGT(fan.sys.Str.size(part),0) || !normalize))
      {
        res.add(part);
        buf.clear();
      }
      ;
    }
    else
    {
      buf.addChar(c);
    }
    ;
  }
  ;
  return res;
}
fan.std.StrExt.splitBy = function(str,sp,max)
{
  if (max === undefined) max = ((fan.sys.Int.static$init ? fan.sys.Int.static$init() : null),fan.sys.Int.m_maxVal);
  if (fan.sys.ObjUtil.equals(fan.sys.Str.size(sp),0))
  {
    return fan.sys.List.make(fan.sys.Str.$type, [str]);
  }
  ;
  var res = fan.sys.List.make(fan.sys.Str.$type);
  while (true)
  {
    if (fan.sys.ObjUtil.equals(res.size(),fan.sys.Int.minus(max,1)))
    {
      res.add(str);
      break;
    }
    ;
    var i = fan.sys.Str.index(str,sp);
    if (i == null)
    {
      res.add(str);
      break;
    }
    ;
    var part = fan.sys.Str.getRange(str,fan.sys.Range.make(0,fan.sys.ObjUtil.coerce(i,fan.sys.Int.$type),true));
    res.add(part);
    var start = fan.sys.Int.plus(fan.sys.ObjUtil.coerce(i,fan.sys.Int.$type),fan.sys.Str.size(sp));
    if (fan.sys.ObjUtil.compareLT(start,fan.sys.Str.size(str)))
    {
      str = fan.sys.Str.getRange(str,fan.sys.Range.make(start,-1));
    }
    else
    {
      str = "";
    }
    ;
  }
  ;
  return res;
}
fan.std.StrExt.extract = function(str,begin,end)
{
  var s = 0;
  if (begin != null)
  {
    var p0 = fan.sys.Str.index(str,fan.sys.ObjUtil.coerce(begin,fan.sys.Str.$type));
    if (p0 == null)
    {
      return null;
    }
    ;
    s = fan.sys.Int.plus(fan.sys.ObjUtil.coerce(p0,fan.sys.Int.$type),fan.sys.Str.size(begin));
  }
  ;
  var e = fan.sys.Str.size(str);
  if (end != null)
  {
    var p0 = fan.sys.Str.index(str,fan.sys.ObjUtil.coerce(end,fan.sys.Str.$type),s);
    if (p0 == null)
    {
      return null;
    }
    ;
    e = fan.sys.ObjUtil.coerce(p0,fan.sys.Int.$type);
  }
  ;
  return fan.sys.Str.getRange(str,fan.sys.Range.make(s,e,true));
}
fan.std.StrExt.capitalize = function(self)
{
  if (fan.sys.ObjUtil.compareGT(fan.sys.Str.size(self),0))
  {
    var fch = fan.sys.Str.get(self,0);
    if ((fan.sys.ObjUtil.compareLE(97,fch) && fan.sys.ObjUtil.compareLE(fch,122)))
    {
      var sb = fan.sys.StrBuf.make();
      sb.addChar(fan.sys.Int.upper(fch));
      for (var i = 1; fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(self)); i = fan.sys.Int.increment(i))
      {
        sb.addChar(fan.sys.Str.get(self,i));
      }
      ;
      return sb.toStr();
    }
    ;
  }
  ;
  return self;
}
fan.std.StrExt.decapitalize = function(self)
{
  if (fan.sys.ObjUtil.compareGT(fan.sys.Str.size(self),0))
  {
    var fch = fan.sys.Str.get(self,0);
    if ((fan.sys.ObjUtil.compareLE(65,fch) && fan.sys.ObjUtil.compareLE(fch,90)))
    {
      var sb = fan.sys.StrBuf.make();
      sb.addChar(fan.sys.Int.lower(fch));
      for (var i = 1; fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(self)); i = fan.sys.Int.increment(i))
      {
        sb.addChar(fan.sys.Str.get(self,i));
      }
      ;
      return sb.toStr();
    }
    ;
  }
  ;
  return self;
}
fan.std.StrExt.toDisplayName = function(self)
{
  if (fan.sys.ObjUtil.equals(fan.sys.Str.size(self),0))
  {
    return "";
  }
  ;
  var s = fan.sys.StrBuf.make(fan.sys.Int.plus(fan.sys.Str.size(self),4));
  var c = fan.sys.Str.get(self,0);
  if ((fan.sys.ObjUtil.compareLE(97,c) && fan.sys.ObjUtil.compareLE(c,122)))
  {
    c = fan.sys.Int.upper(c);
  }
  ;
  s.addChar(c);
  var last = c;
  for (var i = 1; fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(self)); i = fan.sys.Int.increment(i))
  {
    c = fan.sys.Str.get(self,i);
    if ((fan.sys.ObjUtil.compareLE(65,c) && fan.sys.ObjUtil.compareLE(c,90) && fan.sys.ObjUtil.compareNE(last,95)))
    {
      var next = (function($this) { if (fan.sys.ObjUtil.compareLT(fan.sys.Int.plus(i,1),fan.sys.Str.size(self))) return fan.sys.Str.get(self,fan.sys.Int.plus(i,1)); return 81; })(this);
      if ((!(fan.sys.ObjUtil.compareLE(65,last) && fan.sys.ObjUtil.compareLE(last,90)) || !(fan.sys.ObjUtil.compareLE(65,next) && fan.sys.ObjUtil.compareLE(next,90))))
      {
        s.addChar(32);
      }
      ;
    }
    else
    {
      if ((fan.sys.ObjUtil.compareLE(97,c) && fan.sys.ObjUtil.compareLE(c,122)))
      {
        if ((fan.sys.ObjUtil.compareLE(48,last) && fan.sys.ObjUtil.compareLE(last,57)))
        {
          s.addChar(32);
          c = fan.sys.Int.upper(c);
        }
        else
        {
          if (fan.sys.ObjUtil.equals(last,95))
          {
            c = fan.sys.Int.upper(c);
          }
          ;
        }
        ;
      }
      else
      {
        if ((fan.sys.ObjUtil.compareLE(48,c) && fan.sys.ObjUtil.compareLE(c,57)))
        {
          if (!(fan.sys.ObjUtil.compareLE(48,last) && fan.sys.ObjUtil.compareLE(last,57)))
          {
            s.addChar(32);
          }
          ;
        }
        else
        {
          if (fan.sys.ObjUtil.equals(c,95))
          {
            s.addChar(32);
            last = c;
            continue;
          }
          ;
        }
        ;
      }
      ;
    }
    ;
    s.addChar(c);
    last = c;
  }
  ;
  return s.toStr();
}
fan.std.StrExt.fromDisplayName = function(self)
{
  if (fan.sys.ObjUtil.equals(fan.sys.Str.size(self),0))
  {
    return "";
  }
  ;
  var s = fan.sys.StrBuf.make(fan.sys.Str.size(self));
  var c = fan.sys.Str.get(self,0);
  var c2 = (function($this) { if (fan.sys.ObjUtil.equals(fan.sys.Str.size(self),1)) return 0; return fan.sys.Str.get(self,1); })(this);
  if ((fan.sys.ObjUtil.compareLE(65,c) && fan.sys.ObjUtil.compareLE(c,90) && !(fan.sys.ObjUtil.compareLE(65,c2) && fan.sys.ObjUtil.compareLE(c2,90))))
  {
    c = fan.sys.Int.lower(c);
  }
  ;
  s.addChar(c);
  var last = c;
  for (var i = 1; fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(self)); i = fan.sys.Int.increment(i))
  {
    c = fan.sys.Str.get(self,i);
    if (fan.sys.ObjUtil.compareNE(c,32))
    {
      if ((fan.sys.ObjUtil.equals(last,32) && fan.sys.ObjUtil.compareLE(97,c) && fan.sys.ObjUtil.compareLE(c,122)))
      {
        c = fan.sys.Int.upper(c);
      }
      ;
      s.addChar(c);
    }
    ;
    last = c;
  }
  ;
  return s.toStr();
}
fan.std.StrExt.justl = function(self,width)
{
  return fan.std.StrExt.padr(self,width,32);
}
fan.std.StrExt.justr = function(self,width)
{
  return fan.std.StrExt.padl(self,width,32);
}
fan.std.StrExt.padl = function(self,width,ch)
{
  if (ch === undefined) ch = 32;
  var w = width;
  if (fan.sys.ObjUtil.compareGE(fan.sys.Str.size(self),w))
  {
    return self;
  }
  ;
  var c = ch;
  var s = fan.sys.StrBuf.make(w);
  for (var i = fan.sys.Str.size(self); fan.sys.ObjUtil.compareLT(i,w); i = fan.sys.Int.increment(i))
  {
    s.addChar(c);
  }
  ;
  s.add(self);
  return s.toStr();
}
fan.std.StrExt.padr = function(self,width,ch)
{
  if (ch === undefined) ch = 32;
  var w = width;
  if (fan.sys.ObjUtil.compareGE(fan.sys.Str.size(self),w))
  {
    return self;
  }
  ;
  var c = ch;
  var s = fan.sys.StrBuf.make(w);
  s.add(self);
  for (var i = fan.sys.Str.size(self); fan.sys.ObjUtil.compareLT(i,w); i = fan.sys.Int.increment(i))
  {
    s.addChar(c);
  }
  ;
  return s.toStr();
}
fan.std.StrExt.reverse = function(self)
{
  if (fan.sys.ObjUtil.compareLT(fan.sys.Str.size(self),2))
  {
    return self;
  }
  ;
  var s = fan.sys.StrBuf.make(fan.sys.Str.size(self));
  for (var i = fan.sys.Int.minus(fan.sys.Str.size(self),1); fan.sys.ObjUtil.compareGE(i,0); i = fan.sys.Int.decrement(i))
  {
    s.addChar(fan.sys.Str.get(self,i));
  }
  ;
  return s.toStr();
}
fan.std.StrExt.numNewlines = function(self)
{
  var numLines = 0;
  var len = fan.sys.Str.size(self);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,len); i = fan.sys.Int.increment(i))
  {
    var c = fan.sys.Str.get(self,i);
    if (fan.sys.ObjUtil.equals(c,10))
    {
      (function($this) { var $_u92 = numLines; numLines = fan.sys.Int.increment(numLines); return $_u92; })(this);
    }
    else
    {
      if (fan.sys.ObjUtil.equals(c,13))
      {
        (function($this) { var $_u93 = numLines; numLines = fan.sys.Int.increment(numLines); return $_u93; })(this);
        if ((fan.sys.ObjUtil.compareLT(fan.sys.Int.plus(i,1),len) && fan.sys.ObjUtil.equals(fan.sys.Str.get(self,fan.sys.Int.plus(i,1)),10)))
        {
          (function($this) { var $_u94 = i; i = fan.sys.Int.increment(i); return $_u94; })(this);
        }
        ;
      }
      ;
    }
    ;
  }
  ;
  return numLines;
}
fan.std.StrExt.splitLines = function(self)
{
  var lines = fan.sys.List.make(16);
  var len = fan.sys.Str.size(self);
  var s = 0;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,len); i = fan.sys.Int.increment(i))
  {
    var c = fan.sys.Str.get(self,i);
    if ((fan.sys.ObjUtil.equals(c,10) || fan.sys.ObjUtil.equals(c,13)))
    {
      lines.add(fan.sys.Str.getRange(self,fan.sys.Range.make(s,i,true)));
      s = fan.sys.Int.plus(i,1);
      if ((fan.sys.ObjUtil.equals(c,13) && fan.sys.ObjUtil.compareLT(s,len) && fan.sys.ObjUtil.equals(fan.sys.Str.get(self,s),10)))
      {
        (function($this) { var $_u95 = i; i = fan.sys.Int.increment(i); return $_u95; })(this);
        (function($this) { var $_u96 = s; s = fan.sys.Int.increment(s); return $_u96; })(this);
      }
      ;
    }
    ;
  }
  ;
  lines.add(fan.sys.Str.getRange(self,fan.sys.Range.make(s,len,true)));
  return lines;
}
fan.std.StrExt.make = function() {
  var self = new fan.std.StrExt();
  fan.std.StrExt.make$(self);
  return self;
  }
fan.std.StrExt.make$ = function(self)
{
  return;
}
fan.std.StrInStream = fan.sys.Obj.$extend(fan.std.InStream);
fan.std.StrInStream.prototype.$ctor = function()
{
  fan.std.InStream.prototype.$ctor.call(this);
  var $this = this;
  this.m_endian = ((fan.std.Endian.static$init ? fan.std.Endian.static$init() : null),fan.std.Endian.m_big);
  this.m_charset = ((fan.std.Charset.static$init ? fan.std.Charset.static$init() : null),fan.std.Charset.m_defVal);
  return;
}
fan.std.StrInStream.prototype.$typeof = function() { return fan.std.StrInStream.$type; }
fan.std.StrInStream.prototype.endian = function()
{
  return this.m_endian;
}
fan.std.StrInStream.prototype.endian$ = function(it)
{
  this.m_endian = it;
  return;
}
fan.std.StrInStream.prototype.charset = function()
{
  return this.m_charset;
}
fan.std.StrInStream.prototype.charset$ = function(it)
{
  this.m_charset = it;
  return;
}
fan.std.StrInStream.prototype.str = function()
{
  return this.m_str;
}
fan.std.StrInStream.prototype.str$ = function(it)
{
  this.m_str = it;
  return;
}
fan.std.StrInStream.prototype.pos = function()
{
  return this.m_pos;
}
fan.std.StrInStream.prototype.pos$ = function(it)
{
  this.m_pos = it;
  return;
}
fan.std.StrInStream.prototype.size = function()
{
  return this.m_size;
}
fan.std.StrInStream.prototype.size$ = function(it)
{
  this.m_size = it;
  return;
}
fan.std.StrInStream.prototype.pushback = function()
{
  return this.m_pushback;
}
fan.std.StrInStream.prototype.pushback$ = function(it)
{
  this.m_pushback = it;
  return;
}
fan.std.StrInStream.make = function(str) {
  var self = new fan.std.StrInStream();
  fan.std.StrInStream.make$(self,str);
  return self;
  }
fan.std.StrInStream.make$ = function(self,str)
{
  fan.std.InStream.make$(self);
  ;
  self.m_str = str;
  self.m_size = fan.sys.Str.size(str);
  self.m_pos = 0;
  self.m_pushback = fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type.toNullable()),fan.std.Type.find("sys::List<sys::Int>?"));
  return;
}
fan.std.StrInStream.prototype.avail = function()
{
  return fan.sys.Int.minus(this.m_size,this.m_pos);
}
fan.std.StrInStream.prototype.read = function()
{
  throw fan.sys.UnsupportedErr.make("Binary read on Str.in");
}
fan.std.StrInStream.prototype.skip = function(n)
{
  return this.m_pos = fan.sys.Int.plus(this.m_pos,n);
}
fan.std.StrInStream.prototype.readBytes = function(ba,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = ba.size();
  throw fan.sys.UnsupportedErr.make("Binary read on Str.in");
}
fan.std.StrInStream.prototype.unread = function(n)
{
  throw fan.sys.UnsupportedErr.make("Binary read on Str.in");
}
fan.std.StrInStream.prototype.close = function()
{
  return true;
}
fan.std.StrInStream.prototype.readChar = function()
{
  if ((this.m_pushback != null && fan.sys.ObjUtil.compareGT(this.m_pushback.size(),0)))
  {
    return fan.sys.ObjUtil.coerce(this.m_pushback.pop(),fan.sys.Int.$type);
  }
  ;
  if (fan.sys.ObjUtil.compareGE(this.m_pos,this.m_size))
  {
    return -1;
  }
  ;
  return fan.sys.Str.get(this.m_str,(function($this) { var $_u97 = $this.m_pos; $this.m_pos = fan.sys.Int.increment($this.m_pos); return $_u97; })(this));
}
fan.std.StrInStream.prototype.unreadChar = function(b)
{
  if (this.m_pushback == null)
  {
    this.m_pushback = fan.sys.ObjUtil.coerce(fan.sys.List.make(8),fan.std.Type.find("sys::List<sys::Int>?"));
  }
  ;
  this.m_pushback.push(fan.sys.ObjUtil.coerce(b,fan.sys.Obj.$type.toNullable()));
  return this;
}
fan.std.StrInStream.prototype.m_endian = null;
fan.std.StrInStream.prototype.m_charset = null;
fan.std.StrInStream.prototype.m_str = null;
fan.std.StrInStream.prototype.m_pos = 0;
fan.std.StrInStream.prototype.m_size = 0;
fan.std.StrInStream.prototype.m_pushback = null;
fan.std.OutStream = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.OutStream.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.OutStream.prototype.$typeof = function() { return fan.std.OutStream.$type; }
fan.std.OutStream.prototype.writeBuf = function(buf,n)
{
  if (n === undefined) n = buf.remaining();
  buf.pipeTo(this,n);
  return this;
}
fan.std.OutStream.prototype.writeBytes = function(ba,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = ba.size();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,len); i = fan.sys.Int.increment(i))
  {
    this.write(fan.sys.ObjUtil.coerce(ba.get(fan.sys.Int.plus(off,i)),fan.sys.Int.$type));
  }
  ;
  return this;
}
fan.std.OutStream.prototype.flush = function()
{
  return this;
}
fan.std.OutStream.prototype.sync = function()
{
  return this;
}
fan.std.OutStream.prototype.close = function()
{
  return true;
}
fan.std.OutStream.prototype.bigEndian = function()
{
  return fan.sys.ObjUtil.equals(this.endian(),((fan.std.Endian.static$init ? fan.std.Endian.static$init() : null),fan.std.Endian.m_big));
}
fan.std.OutStream.prototype.writeI2 = function(n)
{
  var v = n;
  if (this.bigEndian())
  {
    return this.write(fan.sys.Int.and(fan.sys.Int.shiftr(v,8),255)).write(fan.sys.Int.and(v,255));
  }
  else
  {
    return this.write(fan.sys.Int.and(v,255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,8),255));
  }
  ;
}
fan.std.OutStream.prototype.writeI4 = function(n)
{
  var v = n;
  if (this.bigEndian())
  {
    return this.write(fan.sys.Int.and(fan.sys.Int.shiftr(v,24),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,16),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,8),255)).write(fan.sys.Int.and(v,255));
  }
  else
  {
    return this.write(fan.sys.Int.and(v,255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,8),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,16),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,24),255));
  }
  ;
}
fan.std.OutStream.prototype.writeI8 = function(n)
{
  var v = n;
  if (this.bigEndian())
  {
    return this.write(fan.sys.Int.and(fan.sys.Int.shiftr(v,56),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,48),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,40),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,32),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,24),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,16),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,8),255)).write(fan.sys.Int.and(v,255));
  }
  else
  {
    return this.write(fan.sys.Int.and(v,255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,8),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,16),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,24),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,32),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,40),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,48),255)).write(fan.sys.Int.and(fan.sys.Int.shiftr(v,56),255));
  }
  ;
}
fan.std.OutStream.prototype.writeF4 = function(r)
{
  return this.writeI4(fan.sys.Float.bits32(r));
}
fan.std.OutStream.prototype.writeF8 = function(r)
{
  return this.writeI8(fan.sys.Float.bits(r));
}
fan.std.OutStream.prototype.writeBool = function(b)
{
  return this.write((function($this) { if (b) return 1; return 0; })(this));
}
fan.std.OutStream.prototype.writeUtf = function(s)
{
  var ba = fan.sys.Str.toUtf8(s);
  this.writeI2(ba.size());
  this.writeBytes(ba);
  return this;
}
fan.std.OutStream.prototype.writeChar = function(ch)
{
  this.charset().encode(ch,this);
  return this;
}
fan.std.OutStream.prototype.writeChars = function(str,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = fan.sys.Int.minus(fan.sys.Str.size(str),off);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,len); i = fan.sys.Int.increment(i))
  {
    var ch = fan.sys.Str.get(str,fan.sys.Int.plus(i,off));
    this.charset().encode(ch,this);
  }
  ;
  return this;
}
fan.std.OutStream.prototype.print = function(s)
{
  return this.writeChars((function($this) { if (s == null) return "null"; return fan.sys.ObjUtil.toStr(s); })(this));
}
fan.std.OutStream.prototype.printLine = function(obj)
{
  if (obj === undefined) obj = "";
  return this.print(obj).writeChar(10);
}
fan.std.OutStream.prototype.use = function(f)
{
  try
  {
    f.call(this);
  }
  finally
  {
    this.close();
  }
  ;
  return;
}
fan.std.OutStream.prototype.writeProps = function(props,close)
{
  if (close === undefined) close = true;
  return fan.std.Props.writeProps(this,props,close);
}
fan.std.OutStream.make = function() {
  var self = new fan.std.OutStream();
  fan.std.OutStream.make$(self);
  return self;
  }
fan.std.OutStream.make$ = function(self)
{
  return;
}
fan.std.OutStream.prototype.m_endian = null;
fan.std.OutStream.prototype.m_charset = null;
fan.std.StrOutStream = fan.sys.Obj.$extend(fan.std.OutStream);
fan.std.StrOutStream.prototype.$ctor = function()
{
  fan.std.OutStream.prototype.$ctor.call(this);
  var $this = this;
  this.m_endian = ((fan.std.Endian.static$init ? fan.std.Endian.static$init() : null),fan.std.Endian.m_big);
  this.m_charset = ((fan.std.Charset.static$init ? fan.std.Charset.static$init() : null),fan.std.Charset.m_defVal);
  return;
}
fan.std.StrOutStream.prototype.$typeof = function() { return fan.std.StrOutStream.$type; }
fan.std.StrOutStream.prototype.endian = function()
{
  return this.m_endian;
}
fan.std.StrOutStream.prototype.endian$ = function(it)
{
  this.m_endian = it;
  return;
}
fan.std.StrOutStream.prototype.charset = function()
{
  return this.m_charset;
}
fan.std.StrOutStream.prototype.charset$ = function(it)
{
  this.m_charset = it;
  return;
}
fan.std.StrOutStream.prototype.buf = function()
{
  return this.m_buf;
}
fan.std.StrOutStream.prototype.buf$ = function(it)
{
  this.m_buf = it;
  return;
}
fan.std.StrOutStream.make = function(str) {
  var self = new fan.std.StrOutStream();
  fan.std.StrOutStream.make$(self,str);
  return self;
  }
fan.std.StrOutStream.make$ = function(self,str)
{
  fan.std.OutStream.make$(self);
  ;
  self.m_buf = str;
  return;
}
fan.std.StrOutStream.prototype.write = function(byte)
{
  throw fan.sys.UnsupportedErr.make("Binary write on StrBuf.out");
}
fan.std.StrOutStream.prototype.writeBytes = function(ba,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = ba.size();
  throw fan.sys.UnsupportedErr.make("Binary write on StrBuf.out");
}
fan.std.StrOutStream.prototype.sync = function()
{
  return this;
}
fan.std.StrOutStream.prototype.flush = function()
{
  return this;
}
fan.std.StrOutStream.prototype.close = function()
{
  return true;
}
fan.std.StrOutStream.prototype.writeChar = function(ch)
{
  this.m_buf.addChar(ch);
  return this;
}
fan.std.StrOutStream.prototype.writeChars = function(str,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = fan.sys.Int.minus(fan.sys.Str.size(str),off);
  this.m_buf.addStr(str,off,len);
  return this;
}
fan.std.StrOutStream.prototype.m_endian = null;
fan.std.StrOutStream.prototype.m_charset = null;
fan.std.StrOutStream.prototype.m_buf = null;
fan.std.Props = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Props.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.Props.prototype.$typeof = function() { return fan.std.Props.$type; }
fan.std.Props.readProps = function($in)
{
  return fan.sys.ObjUtil.coerce(fan.std.Props.doReadProps($in,false),fan.std.Type.find("std::Map<sys::Str,sys::Str>"));
}
fan.std.Props.readPropsListVals = function($in)
{
  return fan.sys.ObjUtil.coerce(fan.std.Props.doReadProps($in,true),fan.std.Type.find("std::Map<sys::Str,sys::List<sys::Str>>"));
}
fan.std.Props.doReadProps = function($in,listVals)
{
  if (listVals === undefined) listVals = false;
  var origCharset = null;
  if (fan.sys.ObjUtil.compareNE($in.charset(),((fan.std.Charset.static$init ? fan.std.Charset.static$init() : null),fan.std.Charset.m_utf8)))
  {
    origCharset = $in.charset();
    $in.charset$(((fan.std.Charset.static$init ? fan.std.Charset.static$init() : null),fan.std.Charset.m_utf8));
  }
  ;
  try
  {
    var props = fan.sys.ObjUtil.coerce(fan.std.OrderedMap.make(),fan.std.Type.find("std::Map<sys::Str,sys::Obj>"));
    var $name = fan.sys.StrBuf.make();
    var val = null;
    var inBlockComment = 0;
    var inEndOfLineComment = false;
    var c = 32;
    var last = 32;
    var lineNum = 1;
    var colNum = 0;
    while (true)
    {
      last = c;
      c = $in.readChar();
      colNum = fan.sys.Int.increment(colNum);
      if (fan.sys.ObjUtil.compareLT(c,0))
      {
        break;
      }
      ;
      if ((fan.sys.ObjUtil.equals(c,10) || fan.sys.ObjUtil.equals(c,13)))
      {
        colNum = 0;
        inEndOfLineComment = false;
        if ((fan.sys.ObjUtil.equals(last,13) && fan.sys.ObjUtil.equals(c,10)))
        {
          continue;
        }
        ;
        var n = fan.sys.Str.trim($name.toStr());
        if (val != null)
        {
          fan.std.Props.addProp(props,n,fan.sys.Str.trim(val.toStr()),listVals);
          $name.clear();
          val = null;
        }
        else
        {
          if (fan.sys.ObjUtil.compareGT(fan.sys.Str.size(n),0))
          {
            throw fan.sys.IOErr.make(fan.sys.Str.plus(fan.sys.Str.plus("Invalid name/value pair [Line ",fan.sys.ObjUtil.coerce(lineNum,fan.sys.Obj.$type.toNullable())),"]"));
          }
          ;
        }
        ;
        (function($this) { var $_u100 = lineNum; lineNum = fan.sys.Int.increment(lineNum); return $_u100; })(this);
        continue;
      }
      ;
      if (inEndOfLineComment)
      {
        continue;
      }
      ;
      if (fan.sys.ObjUtil.compareGT(inBlockComment,0))
      {
        if ((fan.sys.ObjUtil.equals(last,47) && fan.sys.ObjUtil.equals(c,42)))
        {
          (function($this) { var $_u101 = inBlockComment; inBlockComment = fan.sys.Int.increment(inBlockComment); return $_u101; })(this);
        }
        ;
        if ((fan.sys.ObjUtil.equals(last,42) && fan.sys.ObjUtil.equals(c,47)))
        {
          (function($this) { var $_u102 = inBlockComment; inBlockComment = fan.sys.Int.decrement(inBlockComment); return $_u102; })(this);
        }
        ;
        continue;
      }
      ;
      if ((fan.sys.ObjUtil.equals(c,61) && val == null))
      {
        val = fan.sys.StrBuf.make();
        continue;
      }
      ;
      if ((fan.sys.ObjUtil.equals(c,35) && fan.sys.ObjUtil.equals(colNum,1)))
      {
        inEndOfLineComment = true;
        continue;
      }
      ;
      if ((fan.sys.ObjUtil.equals(c,47) && fan.sys.Int.isSpace(last)))
      {
        var peek = $in.readChar();
        if (fan.sys.ObjUtil.compareLT(peek,0))
        {
          break;
        }
        ;
        if (fan.sys.ObjUtil.equals(peek,47))
        {
          inEndOfLineComment = true;
          continue;
        }
        ;
        if (fan.sys.ObjUtil.equals(peek,42))
        {
          (function($this) { var $_u103 = inBlockComment; inBlockComment = fan.sys.Int.increment(inBlockComment); return $_u103; })(this);
          continue;
        }
        ;
        $in.unreadChar(peek);
      }
      ;
      if (fan.sys.ObjUtil.equals(c,92))
      {
        var peek = $in.readChar();
        if (fan.sys.ObjUtil.compareLT(peek,0))
        {
          break;
        }
        else
        {
          if (fan.sys.ObjUtil.equals(peek,110))
          {
            c = 10;
          }
          else
          {
            if (fan.sys.ObjUtil.equals(peek,114))
            {
              c = 13;
            }
            else
            {
              if (fan.sys.ObjUtil.equals(peek,116))
              {
                c = 9;
              }
              else
              {
                if (fan.sys.ObjUtil.equals(peek,92))
                {
                  c = 92;
                }
                else
                {
                  if ((fan.sys.ObjUtil.equals(peek,13) || fan.sys.ObjUtil.equals(peek,10)))
                  {
                    (function($this) { var $_u104 = lineNum; lineNum = fan.sys.Int.increment(lineNum); return $_u104; })(this);
                    if (fan.sys.ObjUtil.equals(peek,13))
                    {
                      peek = $in.readChar();
                      if (fan.sys.ObjUtil.compareNE(peek,10))
                      {
                        $in.unreadChar(peek);
                      }
                      ;
                    }
                    ;
                    while (true)
                    {
                      peek = $in.readChar();
                      if ((fan.sys.ObjUtil.equals(peek,32) || fan.sys.ObjUtil.equals(peek,9)))
                      {
                        continue;
                      }
                      ;
                      $in.unreadChar(peek);
                      break;
                    }
                    ;
                    continue;
                  }
                  else
                  {
                    if (fan.sys.ObjUtil.equals(peek,117))
                    {
                      var n3 = fan.std.Props.hex($in.readChar());
                      var n2 = fan.std.Props.hex($in.readChar());
                      var n1 = fan.std.Props.hex($in.readChar());
                      var n0 = fan.std.Props.hex($in.readChar());
                      if ((fan.sys.ObjUtil.compareLT(n3,0) || fan.sys.ObjUtil.compareLT(n2,0) || fan.sys.ObjUtil.compareLT(n1,0) || fan.sys.ObjUtil.compareLT(n0,0)))
                      {
                        throw fan.sys.IOErr.make(fan.sys.Str.plus(fan.sys.Str.plus("Invalid hex value for \\uxxxx [Line ",fan.sys.ObjUtil.coerce(lineNum,fan.sys.Obj.$type.toNullable())),"]"));
                      }
                      ;
                      c = fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.shiftl(n3,12),fan.sys.Int.shiftl(n2,8)),fan.sys.Int.shiftl(n1,4)),n0);
                    }
                    else
                    {
                      throw fan.sys.IOErr.make(fan.sys.Str.plus(fan.sys.Str.plus("Invalid escape sequence [Line ",fan.sys.ObjUtil.coerce(lineNum,fan.sys.Obj.$type.toNullable())),"]"));
                    }
                    ;
                  }
                  ;
                }
                ;
              }
              ;
            }
            ;
          }
          ;
        }
        ;
      }
      ;
      if (val == null)
      {
        $name.addChar(c);
      }
      else
      {
        val.addChar(c);
      }
      ;
    }
    ;
    var n = fan.sys.Str.trim($name.toStr());
    if (val != null)
    {
      fan.std.Props.addProp(props,n,fan.sys.Str.trim(val.toStr()),listVals);
    }
    else
    {
      if (fan.sys.ObjUtil.compareGT(fan.sys.Str.size(n),0))
      {
        throw fan.sys.IOErr.make(fan.sys.Str.plus(fan.sys.Str.plus("Invalid name/value pair [Line ",fan.sys.ObjUtil.coerce(lineNum,fan.sys.Obj.$type.toNullable())),"]"));
      }
      ;
    }
    ;
    return props;
  }
  finally
  {
    try
    {
      $in.close();
    }
    catch ($_u105)
    {
      $_u105 = fan.sys.Err.make($_u105);
      if ($_u105 instanceof fan.sys.Err)
      {
        var e = $_u105;
        var e;
        e.trace();
      }
      else
      {
        throw $_u105;
      }
    }
    ;
    if (origCharset != null)
    {
      $in.charset$(fan.sys.ObjUtil.coerce(origCharset,fan.std.Charset.$type));
    }
    ;
  }
  ;
}
fan.std.Props.addProp = function(props,n,v,listVals)
{
  if (listVals)
  {
    var list = fan.sys.ObjUtil.coerce(props.get(n),fan.std.Type.find("sys::List<sys::Str>?"));
    if (list == null)
    {
      list = fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type.toNullable()),fan.std.Type.find("sys::List<sys::Str>?"));
      props.add(n,fan.sys.ObjUtil.coerce(list,fan.sys.Obj.$type));
    }
    ;
    list.add(v);
  }
  else
  {
    props.add(n,v);
  }
  ;
  return;
}
fan.std.Props.hex = function(c)
{
  if ((fan.sys.ObjUtil.compareLE(48,c) && fan.sys.ObjUtil.compareLE(c,57)))
  {
    return fan.sys.Int.minus(c,48);
  }
  ;
  if ((fan.sys.ObjUtil.compareLE(97,c) && fan.sys.ObjUtil.compareLE(c,102)))
  {
    return fan.sys.Int.plus(fan.sys.Int.minus(c,97),10);
  }
  ;
  if ((fan.sys.ObjUtil.compareLE(65,c) && fan.sys.ObjUtil.compareLE(c,70)))
  {
    return fan.sys.Int.plus(fan.sys.Int.minus(c,65),10);
  }
  ;
  return -1;
}
fan.std.Props.writeProps = function(out,props,close)
{
  if (close === undefined) close = true;
  var $this = this;
  var origCharset = null;
  if (fan.sys.ObjUtil.compareNE(out.charset(),((fan.std.Charset.static$init ? fan.std.Charset.static$init() : null),fan.std.Charset.m_utf8)))
  {
    origCharset = out.charset();
    out.charset$(((fan.std.Charset.static$init ? fan.std.Charset.static$init() : null),fan.std.Charset.m_utf8));
  }
  ;
  try
  {
    props.each(fan.sys.Func.make$closure(
      fan.std.$clos$_u106,
      function(val,key)
      {
        fan.std.Props.writePropStr(out,key);
        out.writeChar(61);
        fan.std.Props.writePropStr(out,val);
        out.writeChar(10);
        return;
      }));
    return out;
  }
  finally
  {
    try
    {
      if (close)
      {
        out.close();
      }
      ;
    }
    catch ($_u107)
    {
      $_u107 = fan.sys.Err.make($_u107);
      if ($_u107 instanceof fan.sys.Err)
      {
        var e = $_u107;
        var e;
        e.trace();
      }
      else
      {
        throw $_u107;
      }
    }
    ;
    if (origCharset != null)
    {
      out.charset$(fan.sys.ObjUtil.coerce(origCharset,fan.std.Charset.$type));
    }
    ;
  }
  ;
}
fan.std.Props.writePropStr = function(out,s)
{
  var len = fan.sys.Str.size(s);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,len); i = fan.sys.Int.increment(i))
  {
    var ch = fan.sys.Str.get(s,i);
    var peek = (function($this) { if (fan.sys.ObjUtil.compareLT(fan.sys.Int.plus(i,1),len)) return fan.sys.Str.get(s,fan.sys.Int.plus(i,1)); return -1; })(this);
    var $_u109 = ch;
    if (fan.sys.ObjUtil.equals($_u109,10))
    {
      out.writeChar(92).writeChar(110);
      continue;
    }
    else if (fan.sys.ObjUtil.equals($_u109,13))
    {
      out.writeChar(92).writeChar(114);
      continue;
    }
    else if (fan.sys.ObjUtil.equals($_u109,9))
    {
      out.writeChar(92).writeChar(116);
      continue;
    }
    else if (fan.sys.ObjUtil.equals($_u109,92))
    {
      out.writeChar(92).writeChar(92);
      continue;
    }
    ;
    if ((fan.sys.ObjUtil.compareLT(ch,32) || (fan.sys.ObjUtil.equals(ch,47) && (fan.sys.ObjUtil.equals(peek,47) || fan.sys.ObjUtil.equals(peek,42))) || fan.sys.ObjUtil.equals(ch,61)))
    {
      var nib1 = fan.sys.ObjUtil.coerce(fan.sys.Int.toDigit(fan.sys.Int.and(fan.sys.Int.shiftr(ch,4),15),16),fan.sys.Int.$type);
      var nib2 = fan.sys.ObjUtil.coerce(fan.sys.Int.toDigit(fan.sys.Int.and(ch,15),16),fan.sys.Int.$type);
      out.writeChar(92).writeChar(117).writeChar(48).writeChar(48).writeChar(nib1).writeChar(nib2);
      continue;
    }
    ;
    out.writeChar(ch);
  }
  ;
  return;
}
fan.std.Props.make = function() {
  var self = new fan.std.Props();
  fan.std.Props.make$(self);
  return self;
  }
fan.std.Props.make$ = function(self)
{
  return;
}
fan.std.FileBuf = fan.sys.Obj.$extend(fan.std.Buf);
fan.std.FileBuf.prototype.$ctor = function()
{
  fan.std.Buf.prototype.$ctor.call(this);
  this.peer = new fan.std.FileBufPeer(this);
  var $this = this;
}
fan.std.FileBuf.prototype.$typeof = function() { return fan.std.FileBuf.$type; }
fan.std.FileBuf.make = function(file,mode) {
  var self = new fan.std.FileBuf();
  fan.std.FileBuf.make$(self,file,mode);
  return self;
  }
fan.std.FileBuf.make$ = function(self,file,mode)
{
  fan.std.Buf.privateMake$(self);
  self.init(file,mode);
  return;
}
fan.std.FileBuf.prototype.init = function(file,mode)
{
  return this.peer.init(this,file,mode);
}
fan.std.FileBuf.prototype.size = function()
{
  return this.peer.size(this);
}
fan.std.FileBuf.prototype.size$ = function(it)
{
  return this.peer.size$(this,it);
}
fan.std.FileBuf.prototype.capacity = function()
{
  return this.peer.capacity(this);
}
fan.std.FileBuf.prototype.capacity$ = function(it)
{
  return this.peer.capacity$(this,it);
}
fan.std.FileBuf.prototype.pos = function()
{
  return this.peer.pos(this);
}
fan.std.FileBuf.prototype.pos$ = function(it)
{
  return this.peer.pos$(this,it);
}
fan.std.FileBuf.prototype.getByte = function(index)
{
  return this.peer.getByte(this,index);
}
fan.std.FileBuf.prototype.setByte = function(index,byte)
{
  return this.peer.setByte(this,index,byte);
}
fan.std.FileBuf.prototype.getBytes = function(pos,dst,off,len)
{
  return this.peer.getBytes(this,pos,dst,off,len);
}
fan.std.FileBuf.prototype.setBytes = function(pos,src,off,len)
{
  return this.peer.setBytes(this,pos,src,off,len);
}
fan.std.FileBuf.prototype.close = function()
{
  return this.peer.close(this);
}
fan.std.FileBuf.prototype.sync = function()
{
  return this.peer.sync(this);
}
fan.std.FileBuf.prototype.endian = function()
{
  return this.out().endian();
}
fan.std.FileBuf.prototype.endian$ = function(it)
{
  this.$in().endian$(it);
  this.out().endian$(it);
  return;
}
fan.std.FileBuf.prototype.charset = function()
{
  return this.out().charset();
}
fan.std.FileBuf.prototype.charset$ = function(it)
{
  this.$in().charset$(it);
  this.out().charset$(it);
  return;
}
fan.std.FileBuf.prototype.m_endian = null;
fan.std.FileBuf.prototype.m_charset = null;
fan.std.FileBufPeer = function(){}
fan.std.FileBufPeer.prototype.init = function(self, file, mode) {
	var reader = new FileReader();
	var buf = reader.readAsArrayBuffer(file);
	this.m_fp = new DataView(buf);
	this.m_pos = 0;
}
fan.std.FileBufPeer.prototype.size = function(self) {
	this.fp.byteLength;
}
fan.std.FileBufPeer.prototype.size$ = function(self, x) {
}
fan.std.FileBufPeer.prototype.capacity = function(self) {
	throw MAX_VALUE;
}
fan.std.FileBufPeer.prototype.capacity$ = function(self, capa) {
}
fan.std.FileBufPeer.prototype.pos = function(self) {
	return this.m_pos;
}
fan.std.FileBufPeer.prototype.pos$ = function(self, x) {
	this.m_pos = x;
}
fan.std.FileBufPeer.prototype.getByte = function(self, pos) {
	return this.m_pf.getUint8(pos)
}
fan.std.FileBufPeer.prototype.setByte = function(self, pos, b) {
	this.m_pf.setUint8(pos, b);
}
fan.std.FileBufPeer.prototype.getBytes = function(self, pos, dst, off, len) {
	var size = this.m_pf.byteLength-pos;
	if (size > len) size = len;
	for (var i=0; i<size; ++i) {
		dst.set(off+i, this.m_pf.getUint8(pos+i));
	}
	return size;
}
fan.std.FileBufPeer.prototype.setBytes = function(self, pos, src, off, len) {
	var size = this.m_pf.byteLength-pos;
	if (size > len) size = len;
	for (var i=0; i<size; ++i) {
		this.m_pf.setUint8(pos+i, dst.get(off+i));
	}
	return size;
}
fan.std.FileBufPeer.prototype.close = function(self) {
}
fan.std.FileBufPeer.prototype.sync = function(self) {
}
fan.std.NioBuf = fan.sys.Obj.$extend(fan.std.Buf);
fan.std.NioBuf.prototype.$ctor = function()
{
  fan.std.Buf.prototype.$ctor.call(this);
  this.peer = new fan.std.NioBufPeer(this);
  var $this = this;
}
fan.std.NioBuf.prototype.$typeof = function() { return fan.std.NioBuf.$type; }
fan.std.NioBuf.fromFile = function(file,mode,pos,size) {
  var self = new fan.std.NioBuf();
  fan.std.NioBuf.fromFile$(self,file,mode,pos,size);
  return self;
  }
fan.std.NioBuf.fromFile$ = function(self,file,mode,pos,size)
{
  fan.std.Buf.privateMake$(self);
  self.init(file,mode,pos,size);
  return;
}
fan.std.NioBuf.make = function() {
  var self = new fan.std.NioBuf();
  fan.std.NioBuf.make$(self);
  return self;
  }
fan.std.NioBuf.make$ = function(self)
{
  fan.std.Buf.privateMake$(self);
  return;
}
fan.std.NioBuf.prototype.init = function(file,mode,pos,size)
{
  return this.peer.init(this,file,mode,pos,size);
}
fan.std.NioBuf.prototype.size = function()
{
  return this.peer.size(this);
}
fan.std.NioBuf.prototype.size$ = function(it)
{
  return this.peer.size$(this,it);
}
fan.std.NioBuf.prototype.capacity = function()
{
  return this.peer.capacity(this);
}
fan.std.NioBuf.prototype.capacity$ = function(it)
{
  return this.peer.capacity$(this,it);
}
fan.std.NioBuf.prototype.pos = function()
{
  return this.peer.pos(this);
}
fan.std.NioBuf.prototype.pos$ = function(it)
{
  return this.peer.pos$(this,it);
}
fan.std.NioBuf.prototype.getByte = function(index)
{
  return this.peer.getByte(this,index);
}
fan.std.NioBuf.prototype.setByte = function(index,byte)
{
  return this.peer.setByte(this,index,byte);
}
fan.std.NioBuf.prototype.getBytes = function(pos,dst,off,len)
{
  return this.peer.getBytes(this,pos,dst,off,len);
}
fan.std.NioBuf.prototype.setBytes = function(pos,src,off,len)
{
  return this.peer.setBytes(this,pos,src,off,len);
}
fan.std.NioBuf.prototype.close = function()
{
  return this.peer.close(this);
}
fan.std.NioBuf.prototype.sync = function()
{
  return this.peer.sync(this);
}
fan.std.NioBuf.prototype.endian = function()
{
  return this.out().endian();
}
fan.std.NioBuf.prototype.endian$ = function(it)
{
  this.$in().endian$(it);
  this.out().endian$(it);
  return;
}
fan.std.NioBuf.prototype.charset = function()
{
  return this.out().charset();
}
fan.std.NioBuf.prototype.charset$ = function(it)
{
  this.$in().charset$(it);
  this.out().charset$(it);
  return;
}
fan.std.NioBuf.prototype.m_endian = null;
fan.std.NioBuf.prototype.m_charset = null;
fan.std.NioBufPeer = function(){}
fan.std.NioBufPeer.prototype.init = function(self, file, mode, pos, size) {
	var reader = new FileReader();
	var buf = reader.readAsArrayBuffer(file);
	this.m_fp = new DataView(buf, pos, pos + size);
	this.m_pos = 0;
}
fan.std.NioBufPeer.prototype.size = function(self) {
	this.fp.byteLength;
}
fan.std.NioBufPeer.prototype.size$ = function(self, x) {
}
fan.std.NioBufPeer.prototype.capacity = function(self) {
	throw MAX_VALUE;
}
fan.std.NioBufPeer.prototype.capacity$ = function(self, capa) {
}
fan.std.NioBufPeer.prototype.pos = function(self) {
	return this.m_pos;
}
fan.std.NioBufPeer.prototype.pos$ = function(self, x) {
	this.m_pos = x;
}
fan.std.NioBufPeer.prototype.getByte = function(self, pos) {
	return this.m_pf.getUint8(pos)
}
fan.std.NioBufPeer.prototype.setByte = function(self, pos, b) {
	this.m_pf.setUint8(pos, b);
}
fan.std.NioBufPeer.prototype.getBytes = function(self, pos, dst, off, len) {
	var size = this.m_pf.byteLength-pos;
	if (size > len) size = len;
	for (var i=0; i<size; ++i) {
		dst.set(off+i, this.m_pf.getUint8(pos+i));
	}
	return size;
}
fan.std.NioBufPeer.prototype.setBytes = function(self, pos, src, off, len) {
	var size = this.m_pf.byteLength-pos;
	if (size > len) size = len;
	for (var i=0; i<size; ++i) {
		this.m_pf.setUint8(pos+i, dst.get(off+i));
	}
	return size;
}
fan.std.NioBufPeer.prototype.close = function(self) {
}
fan.std.NioBufPeer.prototype.sync = function(self) {
}
fan.std.BufOutStream = fan.sys.Obj.$extend(fan.std.OutStream);
fan.std.BufOutStream.prototype.$ctor = function()
{
  fan.std.OutStream.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.BufOutStream.prototype.$typeof = function() { return fan.std.BufOutStream.$type; }
fan.std.BufOutStream.prototype.endian = function()
{
  return this.m_endian;
}
fan.std.BufOutStream.prototype.endian$ = function(it)
{
  this.m_endian = it;
  return;
}
fan.std.BufOutStream.prototype.charset = function()
{
  return this.m_charset;
}
fan.std.BufOutStream.prototype.charset$ = function(it)
{
  this.m_charset = it;
  return;
}
fan.std.BufOutStream.prototype.buf = function()
{
  return this.m_buf;
}
fan.std.BufOutStream.prototype.buf$ = function(it)
{
  this.m_buf = it;
  return;
}
fan.std.BufOutStream.make = function(buf) {
  var self = new fan.std.BufOutStream();
  fan.std.BufOutStream.make$(self,buf);
  return self;
  }
fan.std.BufOutStream.make$ = function(self,buf)
{
  fan.std.OutStream.make$(self);
  self.endian$(((fan.std.Endian.static$init ? fan.std.Endian.static$init() : null),fan.std.Endian.m_big));
  self.charset$(((fan.std.Charset.static$init ? fan.std.Charset.static$init() : null),fan.std.Charset.m_defVal));
  self.m_buf = buf;
  return;
}
fan.std.BufOutStream.prototype.write = function(byte)
{
  if (fan.sys.ObjUtil.compareLT(this.m_buf.capacity(),fan.sys.Int.plus(this.m_buf.pos(),1)))
  {
    this.m_buf.capacity$(fan.sys.Int.plus(fan.sys.Int.mult(this.m_buf.capacity(),2),1));
  }
  ;
  this.m_buf.setByte(this.m_buf.pos(),byte);
  this.m_buf.pos$(fan.sys.Int.increment(this.m_buf.pos()));
  if (fan.sys.ObjUtil.compareGT(this.m_buf.pos(),this.m_buf.size()))
  {
    this.m_buf.size$(this.m_buf.pos());
  }
  ;
  return this;
}
fan.std.BufOutStream.prototype.writeBytes = function(ba,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = ba.size();
  if (fan.sys.ObjUtil.compareLT(this.m_buf.capacity(),fan.sys.Int.plus(this.m_buf.pos(),len)))
  {
    this.m_buf.capacity$(fan.sys.Int.plus(fan.sys.Int.mult(this.m_buf.capacity(),2),len));
  }
  ;
  this.m_buf.setBytes(this.m_buf.pos(),ba,off,len);
  this.m_buf.pos$(fan.sys.Int.plus(this.m_buf.pos(),len));
  if (fan.sys.ObjUtil.compareGT(this.m_buf.pos(),this.m_buf.size()))
  {
    this.m_buf.size$(this.m_buf.pos());
  }
  ;
  return this;
}
fan.std.BufOutStream.prototype.writeChars = function(str,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = fan.sys.Int.minus(fan.sys.Str.size(str),off);
  var ba = fan.sys.Array.make(fan.sys.Int.mult(fan.sys.Str.size(str),3),"sys::Int8");
  var pos = 0;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,len); i = fan.sys.Int.increment(i))
  {
    var ch = fan.sys.Str.get(str,fan.sys.Int.plus(i,off));
    var n = this.charset().encodeArray(ch,ba,pos);
    pos = fan.sys.Int.plus(pos,n);
    if ((fan.sys.ObjUtil.compareGT(pos,fan.sys.Int.minus(ba.size(),8)) && fan.sys.ObjUtil.compareLT(i,fan.sys.Int.minus(len,1))))
    {
      this.writeBytes(ba,0,pos);
      pos = 0;
    }
    ;
  }
  ;
  if (fan.sys.ObjUtil.compareGT(pos,0))
  {
    this.writeBytes(ba,0,pos);
  }
  ;
  return this;
}
fan.std.BufOutStream.prototype.sync = function()
{
  this.m_buf.sync();
  return this;
}
fan.std.BufOutStream.prototype.flush = function()
{
  return this;
}
fan.std.BufOutStream.prototype.close = function()
{
  return true;
}
fan.std.BufOutStream.prototype.m_endian = null;
fan.std.BufOutStream.prototype.m_charset = null;
fan.std.BufOutStream.prototype.m_buf = null;
fan.std.BufInStream = fan.sys.Obj.$extend(fan.std.InStream);
fan.std.BufInStream.prototype.$ctor = function()
{
  fan.std.InStream.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.BufInStream.prototype.$typeof = function() { return fan.std.BufInStream.$type; }
fan.std.BufInStream.prototype.endian = function()
{
  return this.m_endian;
}
fan.std.BufInStream.prototype.endian$ = function(it)
{
  this.m_endian = it;
  return;
}
fan.std.BufInStream.prototype.charset = function()
{
  return this.m_charset;
}
fan.std.BufInStream.prototype.charset$ = function(it)
{
  this.m_charset = it;
  return;
}
fan.std.BufInStream.prototype.buf = function()
{
  return this.m_buf;
}
fan.std.BufInStream.prototype.buf$ = function(it)
{
  this.m_buf = it;
  return;
}
fan.std.BufInStream.make = function(buf) {
  var self = new fan.std.BufInStream();
  fan.std.BufInStream.make$(self,buf);
  return self;
  }
fan.std.BufInStream.make$ = function(self,buf)
{
  fan.std.InStream.make$(self);
  self.endian$(((fan.std.Endian.static$init ? fan.std.Endian.static$init() : null),fan.std.Endian.m_big));
  self.charset$(((fan.std.Charset.static$init ? fan.std.Charset.static$init() : null),fan.std.Charset.m_defVal));
  self.m_buf = buf;
  return;
}
fan.std.BufInStream.prototype.avail = function()
{
  return fan.sys.Int.minus(this.m_buf.size(),this.m_buf.pos());
}
fan.std.BufInStream.prototype.read = function()
{
  if (fan.sys.ObjUtil.compareGE(this.m_buf.pos(),this.m_buf.size()))
  {
    return -1;
  }
  ;
  return this.m_buf.getByte((function($this) { var $_u110 = $this.m_buf.pos(); $this.m_buf.pos$(fan.sys.Int.increment($this.m_buf.pos())); return $_u110; })(this));
}
fan.std.BufInStream.prototype.skip = function(n)
{
  var pos = fan.sys.Int.plus(this.m_buf.pos(),n);
  if (fan.sys.ObjUtil.compareGT(pos,this.m_buf.size()))
  {
    pos = this.m_buf.size();
    n = fan.sys.Int.minus(pos,this.m_buf.pos());
  }
  ;
  this.m_buf.pos$(pos);
  return n;
}
fan.std.BufInStream.prototype.readBytes = function(ba,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = ba.size();
  var m = this.avail();
  if (fan.sys.ObjUtil.compareLE(m,0))
  {
    return -1;
  }
  ;
  len = fan.sys.Int.min(len,m);
  this.m_buf.getBytes(this.m_buf.pos(),ba,off,len);
  this.m_buf.pos$(fan.sys.Int.plus(this.m_buf.pos(),len));
  return len;
}
fan.std.BufInStream.prototype.unread = function(n)
{
  var pos = this.m_buf.pos();
  if (fan.sys.ObjUtil.compareGT(pos,0))
  {
    this.m_buf.pos$(fan.sys.Int.decrement(this.m_buf.pos()));
    this.m_buf.setByte(this.m_buf.pos(),n);
  }
  else
  {
    if (fan.sys.ObjUtil.is(this.m_buf,fan.std.MemBuf.$type))
    {
      if (fan.sys.ObjUtil.compareLT(this.m_buf.capacity(),fan.sys.Int.plus(this.m_buf.size(),1)))
      {
        this.m_buf.capacity$(fan.sys.Int.plus(this.m_buf.capacity(),1));
      }
      ;
      var ba = fan.sys.ObjUtil.as(this.m_buf,fan.std.MemBuf.$type).m_buf;
      fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(ba,fan.sys.Obj.$type),pos,fan.sys.ObjUtil.coerce(ba,fan.sys.Obj.$type),fan.sys.Int.plus(pos,1),fan.sys.Int.minus(this.m_buf.size(),pos));
      this.m_buf.setByte(pos,n);
      (function($this) { var $_u111 = $this.m_buf.size(); $this.m_buf.size$(fan.sys.Int.increment($this.m_buf.size())); return $_u111; })(this);
    }
    else
    {
      throw fan.sys.UnsupportedErr.make(fan.sys.Str.plus("",this.m_buf));
    }
    ;
  }
  ;
  return this;
}
fan.std.BufInStream.prototype.close = function()
{
  return true;
}
fan.std.BufInStream.prototype.peek = function()
{
  if (fan.sys.ObjUtil.compareGE(this.m_buf.pos(),this.m_buf.size()))
  {
    return -1;
  }
  ;
  return this.m_buf.getByte(this.m_buf.pos());
}
fan.std.BufInStream.prototype.m_endian = null;
fan.std.BufInStream.prototype.m_charset = null;
fan.std.BufInStream.prototype.m_buf = null;
fan.std.MemBuf = fan.sys.Obj.$extend(fan.std.Buf);
fan.std.MemBuf.prototype.$ctor = function()
{
  fan.std.Buf.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.MemBuf.prototype.$typeof = function() { return fan.std.MemBuf.$type; }
fan.std.MemBuf.prototype.buf = function()
{
  return this.m_buf;
}
fan.std.MemBuf.prototype.buf$ = function(it)
{
  this.m_buf = it;
  return;
}
fan.std.MemBuf.make = function(cap) {
  var self = new fan.std.MemBuf();
  fan.std.MemBuf.make$(self,cap);
  return self;
  }
fan.std.MemBuf.make$ = function(self,cap)
{
  fan.std.Buf.privateMake$(self);
  self.m_buf = fan.sys.Array.make(cap,"sys::Int8");
  self.m_size = 0;
  self.m_pos = 0;
  return;
}
fan.std.MemBuf.makeBuf = function(buf,size,pos) {
  var self = new fan.std.MemBuf();
  fan.std.MemBuf.makeBuf$(self,buf,size,pos);
  return self;
  }
fan.std.MemBuf.makeBuf$ = function(self,buf,size,pos)
{
  if (size === undefined) size = buf.size();
  if (pos === undefined) pos = 0;
  fan.std.Buf.privateMake$(self);
  self.m_buf = buf;
  self.m_size = size;
  self.pos$(pos);
  return;
}
fan.std.MemBuf.prototype.unsafeArray = function()
{
  return fan.sys.ObjUtil.coerce(this.m_buf,fan.std.Type.find("sys::Array<sys::Int8>?"));
}
fan.std.MemBuf.prototype.size = function()
{
  return this.m_size;
}
fan.std.MemBuf.prototype.size$ = function(it)
{
  if (fan.sys.ObjUtil.compareGT(it,this.capacity()))
  {
    this.capacity$(it);
  }
  ;
  this.m_size = it;
  return;
}
fan.std.MemBuf.prototype.capacity = function()
{
  return this.m_buf.size();
}
fan.std.MemBuf.prototype.capacity$ = function(it)
{
  if (fan.sys.ObjUtil.compareLT(it,this.size()))
  {
    throw fan.sys.ArgErr.make("capacity < size");
  }
  ;
  this.m_buf = fan.sys.ObjUtil.coerce(fan.sys.Array.realloc(fan.sys.ObjUtil.coerce(this.m_buf,fan.sys.Obj.$type),it),fan.std.Type.find("sys::Array<sys::Int8>"));
  return;
}
fan.std.MemBuf.prototype.pos = function()
{
  return this.m_pos;
}
fan.std.MemBuf.prototype.pos$ = function(it)
{
  if (fan.sys.ObjUtil.compareGT(it,this.size()))
  {
    this.size$(it);
  }
  ;
  this.m_pos = it;
  return;
}
fan.std.MemBuf.prototype.getBytes = function(pos,dst,off,len)
{
  fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(this.m_buf,fan.sys.Obj.$type),pos,fan.sys.ObjUtil.coerce(dst,fan.sys.Obj.$type),off,len);
  return len;
}
fan.std.MemBuf.prototype.setBytes = function(pos,src,off,len)
{
  fan.sys.Array.arraycopy(fan.sys.ObjUtil.coerce(src,fan.sys.Obj.$type),off,fan.sys.ObjUtil.coerce(this.m_buf,fan.sys.Obj.$type),pos,len);
  return;
}
fan.std.MemBuf.prototype.getByte = function(index)
{
  var b = this.m_buf.get(index);
  return fan.sys.Int.and(fan.sys.ObjUtil.coerce(b,fan.sys.Int.$type),255);
}
fan.std.MemBuf.prototype.setByte = function(index,byte)
{
  this.m_buf.set(index,fan.sys.ObjUtil.coerce(byte,fan.sys.Int.$type));
  return;
}
fan.std.MemBuf.prototype.close = function()
{
  return true;
}
fan.std.MemBuf.prototype.sync = function()
{
  return this;
}
fan.std.MemBuf.prototype.endian = function()
{
  return this.out().endian();
}
fan.std.MemBuf.prototype.endian$ = function(it)
{
  this.$in().endian$(it);
  this.out().endian$(it);
  return;
}
fan.std.MemBuf.prototype.charset = function()
{
  return this.out().charset();
}
fan.std.MemBuf.prototype.charset$ = function(it)
{
  this.$in().charset$(it);
  this.out().charset$(it);
  return;
}
fan.std.MemBuf.prototype.pipeTo = function(out,len)
{
  if (fan.sys.ObjUtil.compareGT(fan.sys.Int.plus(this.pos(),len),this.size()))
  {
    throw fan.sys.IOErr.make("Not enough bytes to write");
  }
  ;
  out.writeBytes(this.m_buf,this.pos(),len);
  this.pos$(fan.sys.Int.plus(this.pos(),len));
  return;
}
fan.std.MemBuf.prototype.pipeFrom = function($in,len)
{
  if (fan.sys.ObjUtil.compareLT(this.capacity(),fan.sys.Int.plus(this.pos(),len)))
  {
    this.capacity$(fan.sys.Int.plus(this.pos(),len));
  }
  ;
  var a = $in.readBytes(this.m_buf,this.pos(),len);
  if (fan.sys.ObjUtil.compareGT(a,0))
  {
    this.pos$(fan.sys.Int.plus(this.pos(),a));
  }
  ;
  return a;
}
fan.std.MemBuf.prototype.isImmutable = function()
{
  return false;
}
fan.std.MemBuf.prototype.toImmutable = function()
{
  var old = this.m_buf;
  var osize = this.size();
  this.m_buf = fan.sys.Array.make(0,"sys::Int8");
  this.size$(0);
  this.pos$(0);
  return fan.std.ConstBuf.makeBuf(old,osize,this.endian(),this.charset());
}
fan.std.MemBuf.prototype.toFile = function(uri)
{
  return fan.std.MemFile.make(fan.sys.ObjUtil.coerce(this.toImmutable(),fan.std.ConstBuf.$type),uri);
}
fan.std.MemBuf.prototype.m_buf = null;
fan.std.MemBuf.prototype.m_size = 0;
fan.std.MemBuf.prototype.m_capacity = 0;
fan.std.MemBuf.prototype.m_pos = 0;
fan.std.MemBuf.prototype.m_endian = null;
fan.std.MemBuf.prototype.m_charset = null;
fan.std.Charset = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Charset.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.Charset.prototype.$typeof = function() { return fan.std.Charset.$type; }
fan.std.Charset.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  var $_u112 = $name;
  if (fan.sys.ObjUtil.equals($_u112,"UTF-8"))
  {
    return ((fan.std.Charset.static$init ? fan.std.Charset.static$init() : null),fan.std.Charset.m_utf8);
  }
  else if (fan.sys.ObjUtil.equals($_u112,"UTF-16BE"))
  {
    return ((fan.std.Charset.static$init ? fan.std.Charset.static$init() : null),fan.std.Charset.m_utf16BE);
  }
  else if (fan.sys.ObjUtil.equals($_u112,"UTF-16LE"))
  {
    return ((fan.std.Charset.static$init ? fan.std.Charset.static$init() : null),fan.std.Charset.m_utf16LE);
  }
  ;
  var res = fan.std.NativeCharset.fromStr($name);
  if (res == null)
  {
    if (checked)
    {
      throw fan.sys.ParseErr.make(fan.sys.Str.plus("invalid charset ",$name));
    }
    ;
    return ((fan.std.Charset.static$init ? fan.std.Charset.static$init() : null),fan.std.Charset.m_utf8);
  }
  ;
  return fan.sys.ObjUtil.coerce(res,fan.std.Charset.$type);
}
fan.std.Charset.privateMake = function($name,coder) {
  var self = new fan.std.Charset();
  fan.std.Charset.privateMake$(self,$name,coder);
  return self;
  }
fan.std.Charset.privateMake$ = function(self,$name,coder)
{
  self.m_$name = $name;
  self.m_encoder = coder;
  return;
}
fan.std.Charset.prototype.hash = function()
{
  return fan.sys.Str.hash(this.m_$name);
}
fan.std.Charset.prototype.equals = function(obj)
{
  if (fan.sys.ObjUtil.is(obj,fan.std.Charset.$type))
  {
    return fan.sys.Str.equalsIgnoreCase(this.m_$name,fan.sys.ObjUtil.coerce(obj,fan.std.Charset.$type).m_$name);
  }
  ;
  return false;
}
fan.std.Charset.prototype.toStr = function()
{
  return this.m_$name;
}
fan.std.Charset.prototype.encode = function(ch,out)
{
  return this.m_encoder.encode(ch,out);
}
fan.std.Charset.prototype.encodeArray = function(ch,out,offset)
{
  return this.m_encoder.encodeArray(ch,out,offset);
}
fan.std.Charset.prototype.decode = function($in)
{
  return this.m_encoder.decode($in);
}
fan.std.Charset.static$init = function()
{
  if (fan.std.Charset.static$inited) return;
  fan.std.Charset.static$inited = true;
  fan.std.Charset.m_utf8 = fan.std.Charset.privateMake("UTF-8",fan.std.Utf8.make());
  fan.std.Charset.m_defVal = ((fan.std.Charset.static$init ? fan.std.Charset.static$init() : null),fan.std.Charset.m_utf8);
  fan.std.Charset.m_utf16BE = fan.std.Charset.privateMake("UTF-16BE",fan.std.Utf16.make(true));
  fan.std.Charset.m_utf16LE = fan.std.Charset.privateMake("UTF-16LE",fan.std.Utf16.make(false));
  return;
}
fan.std.Charset.m_utf8 = null;
fan.std.Charset.m_defVal = null;
fan.std.Charset.m_utf16BE = null;
fan.std.Charset.m_utf16LE = null;
fan.std.Charset.prototype.m_$name = null;
fan.std.Charset.prototype.m_encoder = null;
fan.std.Encoder = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Encoder.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.Encoder.prototype.$typeof = function() { return fan.std.Encoder.$type; }
fan.std.Encoder.make = function() {
  var self = new fan.std.Encoder();
  fan.std.Encoder.make$(self);
  return self;
  }
fan.std.Encoder.make$ = function(self)
{
  return;
}
fan.std.NativeCharset = fan.sys.Obj.$extend(fan.std.Encoder);
fan.std.NativeCharset.prototype.$ctor = function()
{
  fan.std.Encoder.prototype.$ctor.call(this);
  this.peer = new fan.std.NativeCharsetPeer(this);
  var $this = this;
}
fan.std.NativeCharset.prototype.$typeof = function() { return fan.std.NativeCharset.$type; }
fan.std.NativeCharset.fromStr = function($name)
{
  return fan.std.NativeCharsetPeer.fromStr($name);
}
fan.std.NativeCharset.prototype.encode = function(ch,out)
{
  return this.peer.encode(this,ch,out);
}
fan.std.NativeCharset.prototype.encodeArray = function(ch,out,offset)
{
  return this.peer.encodeArray(this,ch,out,offset);
}
fan.std.NativeCharset.prototype.decode = function($in)
{
  return this.peer.decode(this,$in);
}
fan.std.NativeCharset.make = function() {
  var self = new fan.std.NativeCharset();
  fan.std.NativeCharset.make$(self);
  return self;
  }
fan.std.NativeCharset.make$ = function(self)
{
  fan.std.Encoder.make$(self);
  return;
}
fan.std.NativeCharsetPeer = function(){}
fan.std.NativeCharsetPeer.make = function(self) {
	return new fan.std.NativeCharsetPeer();
}
fan.std.NativeCharsetPeer.fromStr = function(name) {
	// check normalized name for predefined charsets
	var csName = name.upper();
	if (csName.equals("UTF-8"))
		return Charset.utf8;
	if (csName.equals("UTF-16BE"))
		return Charset.utf16BE;
	if (csName.equals("UTF-16LE"))
		return Charset.utf16LE;
	throw new fan.sys.UnsuppertedErr("encoder");
}
fan.std.NativeCharsetPeer.prototype.encode = function(self, ch, out) {
	throw new fan.sys.UnsuppertedErr("encoder");
}
fan.std.NativeCharsetPeer.prototype.encodeArray = function(self, ch, out, offset) {
	throw new fan.sys.UnsuppertedErr("encoder");
}
fan.std.NativeCharsetPeer.prototype.decode = function(self, input) {
	throw new fan.sys.UnsuppertedErr("encoder");
}
fan.std.Utf8 = fan.sys.Obj.$extend(fan.std.Encoder);
fan.std.Utf8.prototype.$ctor = function()
{
  fan.std.Encoder.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.Utf8.prototype.$typeof = function() { return fan.std.Utf8.$type; }
fan.std.Utf8.prototype.encode = function(c,out)
{
  if (fan.sys.ObjUtil.compareLE(c,127))
  {
    out.write(c);
    return 1;
  }
  else
  {
    if (fan.sys.ObjUtil.compareLE(c,2047))
    {
      out.write(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,6),31),192));
      out.write(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,0),63),128));
      return 2;
    }
    else
    {
      if (fan.sys.ObjUtil.compareLE(c,65535))
      {
        out.write(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,12),15),224));
        out.write(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,6),63),128));
        out.write(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,0),63),128));
        return 3;
      }
      else
      {
        if (fan.sys.ObjUtil.compareLE(c,1114111))
        {
          out.write(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,18),7),240));
          out.write(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,12),63),128));
          out.write(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,6),63),128));
          out.write(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,0),63),128));
          return 4;
        }
        else
        {
          throw fan.sys.IOErr.make("Invalid UTF-8 encoding");
        }
        ;
      }
      ;
    }
    ;
  }
  ;
}
fan.std.Utf8.prototype.encodeArray = function(c,out,offset)
{
  var i = offset;
  if (fan.sys.ObjUtil.compareLE(c,127))
  {
    out.set((function($this) { var $_u113 = i; i = fan.sys.Int.increment(i); return $_u113; })(this),fan.sys.ObjUtil.coerce(c,fan.sys.Int.$type));
  }
  else
  {
    if (fan.sys.ObjUtil.compareLE(c,2047))
    {
      out.set((function($this) { var $_u114 = i; i = fan.sys.Int.increment(i); return $_u114; })(this),fan.sys.ObjUtil.coerce(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,6),31),192),fan.sys.Int.$type));
      out.set((function($this) { var $_u115 = i; i = fan.sys.Int.increment(i); return $_u115; })(this),fan.sys.ObjUtil.coerce(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,0),63),128),fan.sys.Int.$type));
    }
    else
    {
      if (fan.sys.ObjUtil.compareLE(c,65535))
      {
        out.set((function($this) { var $_u116 = i; i = fan.sys.Int.increment(i); return $_u116; })(this),fan.sys.ObjUtil.coerce(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,12),15),224),fan.sys.Int.$type));
        out.set((function($this) { var $_u117 = i; i = fan.sys.Int.increment(i); return $_u117; })(this),fan.sys.ObjUtil.coerce(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,6),63),128),fan.sys.Int.$type));
        out.set((function($this) { var $_u118 = i; i = fan.sys.Int.increment(i); return $_u118; })(this),fan.sys.ObjUtil.coerce(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,0),63),128),fan.sys.Int.$type));
      }
      else
      {
        if (fan.sys.ObjUtil.compareLE(c,1114111))
        {
          out.set((function($this) { var $_u119 = i; i = fan.sys.Int.increment(i); return $_u119; })(this),fan.sys.ObjUtil.coerce(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,18),7),240),fan.sys.Int.$type));
          out.set((function($this) { var $_u120 = i; i = fan.sys.Int.increment(i); return $_u120; })(this),fan.sys.ObjUtil.coerce(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,12),63),128),fan.sys.Int.$type));
          out.set((function($this) { var $_u121 = i; i = fan.sys.Int.increment(i); return $_u121; })(this),fan.sys.ObjUtil.coerce(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,6),63),128),fan.sys.Int.$type));
          out.set((function($this) { var $_u122 = i; i = fan.sys.Int.increment(i); return $_u122; })(this),fan.sys.ObjUtil.coerce(fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,0),63),128),fan.sys.Int.$type));
        }
        else
        {
          throw fan.sys.IOErr.make("Invalid UTF-8 encoding");
        }
        ;
      }
      ;
    }
    ;
  }
  ;
  return fan.sys.Int.minus(i,offset);
}
fan.std.Utf8.prototype.decode = function($in)
{
  var c1 = $in.r();
  if (fan.sys.ObjUtil.compareLT(c1,0))
  {
    return -1;
  }
  ;
  var size = 0;
  var ch = 0;
  if (fan.sys.ObjUtil.compareLT(c1,128))
  {
    ch = c1;
    size = 1;
  }
  else
  {
    if (fan.sys.ObjUtil.compareLT(c1,224))
    {
      var c2 = $in.r();
      ch = fan.sys.Int.or(fan.sys.Int.shiftl(fan.sys.Int.and(c1,31),6),fan.sys.Int.and(c2,63));
      size = 2;
    }
    else
    {
      if (fan.sys.ObjUtil.compareLT(c1,240))
      {
        var c2 = $in.r();
        var c3 = $in.r();
        if ((fan.sys.ObjUtil.compareNE(fan.sys.Int.and(c2,192),128) || fan.sys.ObjUtil.compareNE(fan.sys.Int.and(c3,192),128)))
        {
          throw fan.sys.IOErr.make("Invalid UTF-8 encoding");
        }
        ;
        ch = fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.shiftl(fan.sys.Int.and(c1,15),12),fan.sys.Int.shiftl(fan.sys.Int.and(c2,63),6)),fan.sys.Int.and(c3,63));
        size = 3;
      }
      else
      {
        if (fan.sys.ObjUtil.compareLT(c1,248))
        {
          var c2 = $in.r();
          var c3 = $in.r();
          var c4 = $in.r();
          ch = fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.shiftl(fan.sys.Int.and(c1,7),18),fan.sys.Int.shiftl(fan.sys.Int.and(c2,63),12)),fan.sys.Int.shiftl(fan.sys.Int.and(c3,63),6)),fan.sys.Int.and(c4,63));
          size = 4;
        }
        else
        {
          throw fan.sys.IOErr.make("Invalid UTF-8 encoding");
        }
        ;
      }
      ;
    }
    ;
  }
  ;
  return ch;
}
fan.std.Utf8.make = function() {
  var self = new fan.std.Utf8();
  fan.std.Utf8.make$(self);
  return self;
  }
fan.std.Utf8.make$ = function(self)
{
  fan.std.Encoder.make$(self);
  return;
}
fan.std.Utf16 = fan.sys.Obj.$extend(fan.std.Encoder);
fan.std.Utf16.prototype.$ctor = function()
{
  fan.std.Encoder.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.Utf16.prototype.$typeof = function() { return fan.std.Utf16.$type; }
fan.std.Utf16.make = function(bigEndian) {
  var self = new fan.std.Utf16();
  fan.std.Utf16.make$(self,bigEndian);
  return self;
  }
fan.std.Utf16.make$ = function(self,bigEndian)
{
  fan.std.Encoder.make$(self);
  self.m_bigEndian = bigEndian;
  return;
}
fan.std.Utf16.prototype.writeBE16 = function(c,out)
{
  if (this.m_bigEndian)
  {
    out.write(fan.sys.Int.and(fan.sys.Int.shiftr(c,8),255));
    out.write(fan.sys.Int.and(c,255));
  }
  else
  {
    out.write(fan.sys.Int.and(c,255));
    out.write(fan.sys.Int.and(fan.sys.Int.shiftr(c,8),255));
  }
  ;
  return;
}
fan.std.Utf16.prototype.encode = function(c,out)
{
  if ((fan.sys.ObjUtil.compareLE(c,55295) || (fan.sys.ObjUtil.compareLE(57344,c) && fan.sys.ObjUtil.compareLE(c,65535))))
  {
    this.writeBE16(c,out);
    return 2;
  }
  else
  {
    var h = fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,10),1023),55296);
    var l = fan.sys.Int.or(fan.sys.Int.and(c,1023),56320);
    this.writeBE16(h,out);
    this.writeBE16(l,out);
    return 4;
  }
  ;
}
fan.std.Utf16.prototype.setBE16 = function(c,out,i)
{
  if (this.m_bigEndian)
  {
    out.set(i,fan.sys.ObjUtil.coerce(fan.sys.Int.and(fan.sys.Int.shiftr(c,8),255),fan.sys.Int.$type));
    out.set(fan.sys.Int.plus(i,1),fan.sys.ObjUtil.coerce(fan.sys.Int.and(c,255),fan.sys.Int.$type));
  }
  else
  {
    out.set(i,fan.sys.ObjUtil.coerce(fan.sys.Int.and(c,255),fan.sys.Int.$type));
    out.set(fan.sys.Int.plus(i,1),fan.sys.ObjUtil.coerce(fan.sys.Int.and(fan.sys.Int.shiftr(c,8),255),fan.sys.Int.$type));
  }
  ;
  return;
}
fan.std.Utf16.prototype.encodeArray = function(c,out,offset)
{
  var i = offset;
  if ((fan.sys.ObjUtil.compareLE(c,55295) || (fan.sys.ObjUtil.compareLE(57344,c) && fan.sys.ObjUtil.compareLE(c,65535))))
  {
    this.setBE16(c,out,i);
    return 2;
  }
  else
  {
    var h = fan.sys.Int.or(fan.sys.Int.and(fan.sys.Int.shiftr(c,10),1023),55296);
    var l = fan.sys.Int.or(fan.sys.Int.and(c,1023),56320);
    this.setBE16(h,out,i);
    this.setBE16(l,out,fan.sys.Int.plus(i,2));
    return 4;
  }
  ;
}
fan.std.Utf16.prototype.readBE16 = function($in)
{
  var c1 = $in.r();
  var c2 = $in.r();
  if ((fan.sys.ObjUtil.compareLT(c1,0) || fan.sys.ObjUtil.compareLT(c2,0)))
  {
    return -1;
  }
  ;
  if (this.m_bigEndian)
  {
    return fan.sys.Int.or(fan.sys.Int.shiftl(c1,8),c2);
  }
  else
  {
    return fan.sys.Int.or(c1,fan.sys.Int.shiftl(c2,8));
  }
  ;
}
fan.std.Utf16.prototype.decode = function($in)
{
  var c1 = this.readBE16($in);
  if (fan.sys.ObjUtil.compareLT(c1,0))
  {
    return -1;
  }
  ;
  var size = 0;
  var ch = 0;
  if ((fan.sys.ObjUtil.compareLE(c1,55295) || (fan.sys.ObjUtil.compareLE(57344,c1) && fan.sys.ObjUtil.compareLE(c1,65535))))
  {
    ch = c1;
    size = 2;
  }
  else
  {
    var c2 = this.readBE16($in);
    ch = fan.sys.Int.or(fan.sys.Int.shiftl(c1,6),fan.sys.Int.and(c2,1023));
    size = 4;
  }
  ;
  return ch;
}
fan.std.Utf16.prototype.m_bigEndian = false;
fan.std.MimeType = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.MimeType.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.MimeType.prototype.$typeof = function() { return fan.std.MimeType.$type; }
fan.std.MimeType.fromStr = function(s)
{
  var $_u123 = fan.sys.Str.get(s,0);
  if (fan.sys.ObjUtil.equals($_u123,105))
  {
    if (fan.sys.ObjUtil.equals(s,"image/png"))
    {
      return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_imagePng);
    }
    ;
    if (fan.sys.ObjUtil.equals(s,"image/jpeg"))
    {
      return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_imageJpeg);
    }
    ;
    if (fan.sys.ObjUtil.equals(s,"image/gif"))
    {
      return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_imageGif);
    }
    ;
  }
  else if (fan.sys.ObjUtil.equals($_u123,116))
  {
    if (fan.sys.ObjUtil.equals(s,"text/plain"))
    {
      return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textPlain);
    }
    ;
    if (fan.sys.ObjUtil.equals(s,"text/html"))
    {
      return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textHtml);
    }
    ;
    if (fan.sys.ObjUtil.equals(s,"text/xml"))
    {
      return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textXml);
    }
    ;
    if (fan.sys.ObjUtil.equals(s,"text/css"))
    {
      return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textCss);
    }
    ;
    if (fan.sys.ObjUtil.equals(s,"text/javascript; charset=utf-8"))
    {
      return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textJsUtf8);
    }
    ;
    if (fan.sys.ObjUtil.equals(s,"text/javascript"))
    {
      return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textJs);
    }
    ;
    if (fan.sys.ObjUtil.equals(s,"text/plain; charset=utf-8"))
    {
      return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textPlainUtf8);
    }
    ;
    if (fan.sys.ObjUtil.equals(s,"text/html; charset=utf-8"))
    {
      return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textHtmlUtf8);
    }
    ;
    if (fan.sys.ObjUtil.equals(s,"text/xml; charset=utf-8"))
    {
      return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textXmlUtf8);
    }
    ;
  }
  else if (fan.sys.ObjUtil.equals($_u123,120))
  {
    if (fan.sys.ObjUtil.equals(s,"x-directory/normal"))
    {
      return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_dir);
    }
    ;
  }
  else if (fan.sys.ObjUtil.equals($_u123,97))
  {
    if (fan.sys.ObjUtil.equals(s,"application/json"))
    {
      return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textJson);
    }
    ;
  }
  ;
  try
  {
    return fan.std.MimeType.parse(s);
  }
  catch ($_u124)
  {
    $_u124 = fan.sys.Err.make($_u124);
    if ($_u124 instanceof fan.sys.Err)
    {
      var e = $_u124;
      var e;
      throw fan.sys.ParseErr.make(fan.sys.Str.plus("MimeType:",s),e);
    }
    else
    {
      throw $_u124;
    }
  }
  ;
}
fan.std.MimeType.parse = function(s)
{
  var pos = fan.sys.Str.find(s,"/");
  if (fan.sys.ObjUtil.equals(pos,-1))
  {
    throw fan.sys.ParseErr.make(fan.sys.Str.plus("parse ",s));
  }
  ;
  var media = fan.sys.Str.getRange(s,fan.sys.Range.make(0,pos,true));
  var sub = fan.sys.Str.getRange(s,fan.sys.Range.make(fan.sys.Int.plus(pos,1),-1));
  var pos2 = fan.sys.Str.find(sub,";");
  var params = null;
  if (fan.sys.ObjUtil.compareNE(pos2,-1))
  {
    var paramStr = fan.sys.Str.getRange(sub,fan.sys.Range.make(fan.sys.Int.plus(pos2,1),-1));
    sub = fan.sys.Str.getRange(sub,fan.sys.Range.make(0,pos2,true));
    params = fan.std.MimeType.parseParams(fan.sys.Str.trim(paramStr));
  }
  ;
  if (params == null)
  {
    params = fan.sys.ObjUtil.coerce(fan.std.Map.fromLiteral([],[],fan.std.Type.find("sys::Obj"),fan.std.Type.find("sys::Obj?")),fan.std.Type.find("std::Map<sys::Str,sys::Str>?"));
  }
  ;
  return fan.std.MimeType.make(fan.sys.Str.trim(media),fan.sys.Str.trim(sub),fan.sys.ObjUtil.coerce(params,fan.std.Type.find("std::Map<sys::Str,sys::Str>")));
}
fan.std.MimeType.parseParams = function(s,checked)
{
  if (checked === undefined) checked = true;
  try
  {
    var params = fan.std.CaseInsensitiveMap.make();
    var i = 0;
    while (fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(s)))
    {
      i = fan.std.MimeType.parsePair(s,i,fan.sys.ObjUtil.coerce(params,fan.std.Type.find("std::Map<sys::Str,sys::Str>")));
    }
    ;
    return fan.sys.ObjUtil.coerce(params,fan.std.Type.find("std::Map<sys::Str,sys::Str>?"));
  }
  catch ($_u125)
  {
    $_u125 = fan.sys.Err.make($_u125);
    if ($_u125 instanceof fan.sys.Err)
    {
      var e = $_u125;
      var e;
      if (checked)
      {
        throw e;
      }
      ;
      return null;
    }
    else
    {
      throw $_u125;
    }
  }
  ;
}
fan.std.MimeType.parsePair = function(s,start,params)
{
  var i = start;
  while (fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(s)))
  {
    var ch = fan.sys.Str.get(s,i);
    if ((fan.sys.ObjUtil.equals(ch,61) || fan.sys.ObjUtil.equals(ch,59)))
    {
      break;
    }
    ;
    i = fan.sys.Int.increment(i);
  }
  ;
  var key = fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(start,i,true)));
  if ((fan.sys.ObjUtil.compareGE(i,fan.sys.Str.size(s)) || fan.sys.ObjUtil.equals(fan.sys.Str.get(s,i),59)))
  {
    params.set(key,"");
    return fan.sys.Int.plus(i,1);
  }
  ;
  var inQuotes = false;
  i = fan.sys.Int.increment(i);
  while ((fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(s)) && fan.sys.ObjUtil.equals(fan.sys.Str.get(s,i),32)))
  {
    i = fan.sys.Int.increment(i);
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(s)) && fan.sys.ObjUtil.equals(fan.sys.Str.get(s,i),34)))
  {
    inQuotes = true;
    i = fan.sys.Int.increment(i);
  }
  ;
  var vstart = i;
  while (fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(s)))
  {
    var ch = fan.sys.Str.get(s,i);
    if (inQuotes)
    {
      if (fan.sys.ObjUtil.equals(ch,34))
      {
        break;
      }
      ;
    }
    else
    {
      if (fan.sys.ObjUtil.equals(ch,59))
      {
        break;
      }
      ;
    }
    ;
    i = fan.sys.Int.increment(i);
  }
  ;
  if (fan.sys.ObjUtil.equals(vstart,i))
  {
    if (inQuotes)
    {
      params.set(key,"");
    }
    else
    {
      throw fan.sys.ParseErr.make(s);
    }
    ;
  }
  else
  {
    var val = fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(vstart,i,true)));
    params.set(key,val);
  }
  ;
  i = fan.sys.Int.increment(i);
  while ((fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(s)) && (fan.sys.ObjUtil.equals(fan.sys.Str.get(s,i),32) || fan.sys.ObjUtil.equals(fan.sys.Str.get(s,i),59))))
  {
    i = fan.sys.Int.increment(i);
  }
  ;
  return i;
}
fan.std.MimeType.forExt = function(s)
{
  s = fan.sys.Str.lower(s);
  var $_u126 = s;
  if (fan.sys.ObjUtil.equals($_u126,"png"))
  {
    return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_imagePng);
  }
  else if (fan.sys.ObjUtil.equals($_u126,"jpeg"))
  {
    return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_imageJpeg);
  }
  else if (fan.sys.ObjUtil.equals($_u126,"gif"))
  {
    return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_imageGif);
  }
  else if (fan.sys.ObjUtil.equals($_u126,"txt"))
  {
    return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textPlainUtf8);
  }
  else if (fan.sys.ObjUtil.equals($_u126,"html"))
  {
    return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textHtmlUtf8);
  }
  else if (fan.sys.ObjUtil.equals($_u126,"xml"))
  {
    return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textXmlUtf8);
  }
  else if (fan.sys.ObjUtil.equals($_u126,"css"))
  {
    return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textCss);
  }
  else if (fan.sys.ObjUtil.equals($_u126,"htm"))
  {
    return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textHtmlUtf8);
  }
  else if (fan.sys.ObjUtil.equals($_u126,"json"))
  {
    return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textJsonUtf8);
  }
  else if (fan.sys.ObjUtil.equals($_u126,"js"))
  {
    return ((fan.std.MimeType.static$init ? fan.std.MimeType.static$init() : null),fan.std.MimeType.m_textJs);
  }
  ;
  return null;
}
fan.std.MimeType.make = function(mediaType,subType,params) {
  var self = new fan.std.MimeType();
  fan.std.MimeType.make$(self,mediaType,subType,params);
  return self;
  }
fan.std.MimeType.make$ = function(self,mediaType,subType,params)
{
  var $this = self;
  self.m_mediaType = fan.sys.Str.lower(mediaType);
  self.m_subType = fan.sys.Str.lower(subType);
  self.m_params = fan.sys.ObjUtil.coerce((function($this) { var $_u127 = params; if ($_u127 == null) return null; return fan.sys.ObjUtil.toImmutable($_u127); })(self),fan.std.Type.find("std::Map<sys::Str,sys::Str>"));
  var sb = fan.sys.StrBuf.make();
  sb.add(self.m_mediaType).addChar(47).add(self.m_subType);
  params.each(fan.sys.Func.make$closure(
    fan.std.$clos$_u41,
    function(v,k)
    {
      sb.add("; ");
      sb.add(k).addChar(61);
      if (fan.sys.Str.contains(v,";"))
      {
        sb.addChar(34);
        sb.add(v);
        sb.addChar(34);
      }
      else
      {
        sb.add(v);
      }
      ;
      return;
    }));
  self.m_str = sb.toStr();
  return;
}
fan.std.MimeType.prototype.hash = function()
{
  return fan.sys.Str.hash(this.m_str);
}
fan.std.MimeType.prototype.equals = function(that)
{
  if (fan.sys.ObjUtil.is(that,fan.std.MimeType.$type))
  {
    var x = fan.sys.ObjUtil.coerce(that,fan.std.MimeType.$type);
    return (fan.sys.ObjUtil.equals(this.m_mediaType,x.m_mediaType) && fan.sys.ObjUtil.equals(this.m_subType,x.m_subType) && fan.sys.ObjUtil.equals(this.m_params,x.m_params));
  }
  ;
  return false;
}
fan.std.MimeType.prototype.toStr = function()
{
  return this.m_str;
}
fan.std.MimeType.prototype.charset = function()
{
  var s = this.m_params.get("charset");
  if (s == null)
  {
    return ((fan.std.Charset.static$init ? fan.std.Charset.static$init() : null),fan.std.Charset.m_utf8);
  }
  ;
  return fan.std.Charset.fromStr(fan.sys.ObjUtil.coerce(s,fan.sys.Str.$type));
}
fan.std.MimeType.prototype.noParams = function()
{
  if (this.m_params.isEmpty())
  {
    return this;
  }
  ;
  return fan.std.MimeType.fromStr(fan.sys.Str.plus(fan.sys.Str.plus(this.m_mediaType,"/"),this.m_subType));
}
fan.std.MimeType.static$init = function()
{
  if (fan.std.MimeType.static$inited) return;
  fan.std.MimeType.static$inited = true;
  fan.std.MimeType.m_imagePng = fan.std.MimeType.parse("image/png");
  fan.std.MimeType.m_imageGif = fan.std.MimeType.parse("image/gif");
  fan.std.MimeType.m_imageJpeg = fan.std.MimeType.parse("image/jpeg");
  fan.std.MimeType.m_textPlain = fan.std.MimeType.parse("text/plain");
  fan.std.MimeType.m_textHtml = fan.std.MimeType.parse("text/html");
  fan.std.MimeType.m_textXml = fan.std.MimeType.parse("text/xml");
  fan.std.MimeType.m_textCss = fan.std.MimeType.parse("text/css");
  fan.std.MimeType.m_textJsUtf8 = fan.std.MimeType.parse("text/javascript; charset=utf-8");
  fan.std.MimeType.m_textJs = fan.std.MimeType.parse("text/javascript");
  fan.std.MimeType.m_textJson = fan.std.MimeType.parse("application/json");
  fan.std.MimeType.m_textJsonUtf8 = fan.std.MimeType.parse("application/json; charset=utf-8");
  fan.std.MimeType.m_dir = fan.std.MimeType.parse("x-directory/normal");
  fan.std.MimeType.m_textPlainUtf8 = fan.std.MimeType.parse("text/plain; charset=utf-8");
  fan.std.MimeType.m_textHtmlUtf8 = fan.std.MimeType.parse("text/html; charset=utf-8");
  fan.std.MimeType.m_textXmlUtf8 = fan.std.MimeType.parse("text/xml; charset=utf-8");
  return;
}
fan.std.MimeType.m_imagePng = null;
fan.std.MimeType.m_imageGif = null;
fan.std.MimeType.m_imageJpeg = null;
fan.std.MimeType.m_textPlain = null;
fan.std.MimeType.m_textHtml = null;
fan.std.MimeType.m_textXml = null;
fan.std.MimeType.m_textCss = null;
fan.std.MimeType.m_textJsUtf8 = null;
fan.std.MimeType.m_textJs = null;
fan.std.MimeType.m_textJson = null;
fan.std.MimeType.m_textJsonUtf8 = null;
fan.std.MimeType.m_dir = null;
fan.std.MimeType.m_textPlainUtf8 = null;
fan.std.MimeType.m_textHtmlUtf8 = null;
fan.std.MimeType.m_textXmlUtf8 = null;
fan.std.MimeType.prototype.m_str = null;
fan.std.MimeType.prototype.m_mediaType = null;
fan.std.MimeType.prototype.m_subType = null;
fan.std.MimeType.prototype.m_params = null;
fan.std.ProxyOutStream = fan.sys.Obj.$extend(fan.std.OutStream);
fan.std.ProxyOutStream.prototype.$ctor = function()
{
  fan.std.OutStream.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.ProxyOutStream.prototype.$typeof = function() { return fan.std.ProxyOutStream.$type; }
fan.std.ProxyOutStream.prototype.out = function()
{
  return this.m_out;
}
fan.std.ProxyOutStream.prototype.out$ = function(it)
{
  this.m_out = it;
  return;
}
fan.std.ProxyOutStream.make = function(out) {
  var self = new fan.std.ProxyOutStream();
  fan.std.ProxyOutStream.make$(self,out);
  return self;
  }
fan.std.ProxyOutStream.make$ = function(self,out)
{
  fan.std.OutStream.make$(self);
  self.m_out = out;
  return;
}
fan.std.ProxyOutStream.prototype.write = function(byte)
{
  this.m_out.write(byte);
  return this;
}
fan.std.ProxyOutStream.prototype.writeBytes = function(ba,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = ba.size();
  this.m_out.writeBytes(ba,off,len);
  return this;
}
fan.std.ProxyOutStream.prototype.sync = function()
{
  this.m_out.sync();
  return this;
}
fan.std.ProxyOutStream.prototype.flush = function()
{
  this.m_out.flush();
  return this;
}
fan.std.ProxyOutStream.prototype.close = function()
{
  return this.m_out.close();
}
fan.std.ProxyOutStream.prototype.endian = function()
{
  return this.m_out.endian();
}
fan.std.ProxyOutStream.prototype.endian$ = function(it)
{
  this.m_out.endian$(it);
  return;
}
fan.std.ProxyOutStream.prototype.charset = function()
{
  return this.m_out.charset();
}
fan.std.ProxyOutStream.prototype.charset$ = function(it)
{
  this.m_out.charset$(it);
  return;
}
fan.std.ProxyOutStream.prototype.writeChar = function(ch)
{
  this.m_out.writeChar(ch);
  return this;
}
fan.std.ProxyOutStream.prototype.writeChars = function(str,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = fan.sys.Int.minus(fan.sys.Str.size(str),off);
  this.m_out.writeChars(str,off,len);
  return this;
}
fan.std.ProxyOutStream.prototype.m_out = null;
fan.std.ProxyOutStream.prototype.m_endian = null;
fan.std.ProxyOutStream.prototype.m_charset = null;
fan.std.SysOutStream = fan.sys.Obj.$extend(fan.std.OutStream);
fan.std.SysOutStream.prototype.$ctor = function()
{
  fan.std.OutStream.prototype.$ctor.call(this);
  this.peer = new fan.std.SysOutStreamPeer(this);
  var $this = this;
}
fan.std.SysOutStream.prototype.$typeof = function() { return fan.std.SysOutStream.$type; }
fan.std.SysOutStream.prototype.endian = function()
{
  return this.m_endian;
}
fan.std.SysOutStream.prototype.endian$ = function(it)
{
  this.m_endian = it;
  return;
}
fan.std.SysOutStream.prototype.charset = function()
{
  return this.m_charset;
}
fan.std.SysOutStream.prototype.charset$ = function(it)
{
  this.m_charset = it;
  return;
}
fan.std.SysOutStream.make = function(e,c) {
  var self = new fan.std.SysOutStream();
  fan.std.SysOutStream.make$(self,e,c);
  return self;
  }
fan.std.SysOutStream.make$ = function(self,e,c)
{
  fan.std.OutStream.make$(self);
  self.endian$(e);
  self.charset$(c);
  return;
}
fan.std.SysOutStream.prototype.write = function(byte)
{
  return this.peer.write(this,byte);
}
fan.std.SysOutStream.prototype.writeBytes = function(ba,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = ba.size();
  return this.peer.writeBytes(this,ba,off,len);
}
fan.std.SysOutStream.prototype.sync = function()
{
  return this.peer.sync(this);
}
fan.std.SysOutStream.prototype.flush = function()
{
  return this.peer.flush(this);
}
fan.std.SysOutStream.prototype.close = function()
{
  return this.peer.close(this);
}
fan.std.SysOutStream.prototype.m_endian = null;
fan.std.SysOutStream.prototype.m_charset = null;
fan.std.SysOutStreamPeer = function(){}
fan.std.SysOutStreamPeer.make = function(self) {
	return new fan.std.SysOutStreamPeer();
}
fan.std.SysOutStream.prototype.write = function(self, b) {
}
fan.std.SysOutStream.prototype.writeBytes = function(self, buf, off, len) {
}
fan.std.SysOutStream.prototype.sync = function(self) {
}
fan.std.SysOutStream.prototype.flush = function(self) {
}
fan.std.SysOutStream.prototype.close = function(self) {
}
fan.std.ConsoleOutStream = fan.sys.Obj.$extend(fan.std.OutStream);
fan.std.ConsoleOutStream.prototype.$ctor = function()
{
  fan.std.OutStream.prototype.$ctor.call(this);
  this.m_buf = "";
  fan.std.Charset.static$init();
  fan.std.Endian.static$init();
  this.m_charset = fan.std.Charset.m_utf8;
  this.m_endian = fan.std.Endian.m_big;
}
fan.std.ConsoleOutStream.prototype.$typeof = function() { return fan.std.OutStream.$type; }
fan.std.ConsoleOutStream.prototype.endian = function() {
  return this.m_endian;
}
fan.std.ConsoleOutStream.prototype.endian$ = function(v) {
  this.m_endian = v;
}
fan.std.ConsoleOutStream.prototype.charset = function() {
  return this.m_charset;
}
fan.std.ConsoleOutStream.prototype.charset$ = function(v) {
  this.m_charset = v;
}
fan.std.ConsoleOutStream.prototype.write = function(v)
{
  if (v == 10) this.flush();
  else this.m_buf += String.fromCharCode(v)
}
fan.std.ConsoleOutStream.prototype.flush = function()
{
  if (this.m_buf.length > 0 && console) console.log(this.m_buf);
  this.m_buf = "";
}
fan.std.UriScheme = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.UriScheme.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.UriScheme.prototype.$typeof = function() { return fan.std.UriScheme.$type; }
fan.std.UriScheme.find = function(scheme,checked)
{
  if (checked === undefined) checked = true;
  var x = ((fan.std.UriScheme.static$init ? fan.std.UriScheme.static$init() : null),fan.std.UriScheme.m_cache).get(scheme);
  if (x != null)
  {
    return x;
  }
  ;
  try
  {
    var s = null;
    if (fan.sys.ObjUtil.equals(scheme,"fan"))
    {
      s = fan.std.FanScheme.make();
    }
    else
    {
      if (fan.sys.ObjUtil.equals(scheme,"file"))
      {
        s = fan.std.FileScheme.make();
      }
      else
      {
        var qname = fan.std.Env.cur().index(fan.sys.Str.plus("sys.uriScheme.",scheme)).first();
        if (qname == null)
        {
          throw fan.sys.UnresolvedErr.make();
        }
        ;
        var t = fan.std.Type.find(fan.sys.ObjUtil.coerce(qname,fan.sys.Str.$type));
        s = fan.sys.ObjUtil.coerce(t.make(),fan.std.UriScheme.$type.toNullable());
      }
      ;
    }
    ;
    ((fan.std.UriScheme.static$init ? fan.std.UriScheme.static$init() : null),fan.std.UriScheme.m_cache).set(scheme,fan.sys.ObjUtil.coerce(s,fan.std.UriScheme.$type));
    return s;
  }
  catch ($_u128)
  {
    $_u128 = fan.sys.Err.make($_u128);
    if ($_u128 instanceof fan.sys.Err)
    {
      var e = $_u128;
      var e;
      if (checked)
      {
        throw e;
      }
      ;
      return null;
    }
    else
    {
      throw $_u128;
    }
  }
  ;
}
fan.std.UriScheme.prototype.toStr = function()
{
  return fan.std.Type.$typeof(this).qname();
}
fan.std.UriScheme.make = function() {
  var self = new fan.std.UriScheme();
  fan.std.UriScheme.make$(self);
  return self;
  }
fan.std.UriScheme.make$ = function(self)
{
  return;
}
fan.std.UriScheme.static$init = function()
{
  if (fan.std.UriScheme.static$inited) return;
  fan.std.UriScheme.static$inited = true;
  fan.std.UriScheme.m_cache = fan.sys.ObjUtil.coerce(fan.std.ConcurrentMap.make(),fan.std.Type.find("std::ConcurrentMap<sys::Str,std::UriScheme>"));
  return;
}
fan.std.UriScheme.m_cache = null;
fan.std.FanScheme = fan.sys.Obj.$extend(fan.std.UriScheme);
fan.std.FanScheme.prototype.$ctor = function()
{
  fan.std.UriScheme.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.FanScheme.prototype.$typeof = function() { return fan.std.FanScheme.$type; }
fan.std.FanScheme.prototype.get = function(uri,base)
{
  if (uri.auth() == null)
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("Invalid format for fan: URI - ",uri));
  }
  ;
  var podName = uri.auth();
  var pod = fan.std.Pod.find(fan.sys.ObjUtil.coerce(podName,fan.sys.Str.$type),false);
  if (pod == null)
  {
    throw fan.sys.UnresolvedErr.make(uri.toStr());
  }
  ;
  if ((fan.sys.ObjUtil.equals(fan.sys.Str.size(uri.m_pathStr),0) || fan.sys.ObjUtil.equals(uri.m_pathStr,"/")))
  {
    return pod;
  }
  ;
  return pod.file(uri);
}
fan.std.FanScheme.make = function() {
  var self = new fan.std.FanScheme();
  fan.std.FanScheme.make$(self);
  return self;
  }
fan.std.FanScheme.make$ = function(self)
{
  fan.std.UriScheme.make$(self);
  return;
}
fan.std.FileScheme = fan.sys.Obj.$extend(fan.std.UriScheme);
fan.std.FileScheme.prototype.$ctor = function()
{
  fan.std.UriScheme.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.FileScheme.prototype.$typeof = function() { return fan.std.FileScheme.$type; }
fan.std.FileScheme.prototype.get = function(uri,base)
{
  var f = fan.std.File.make(uri,false);
  if (f.exists())
  {
    return f;
  }
  ;
  throw fan.sys.UnresolvedErr.make(uri.toStr());
}
fan.std.FileScheme.make = function() {
  var self = new fan.std.FileScheme();
  fan.std.FileScheme.make$(self);
  return self;
  }
fan.std.FileScheme.make$ = function(self)
{
  fan.std.UriScheme.make$(self);
  return;
}
fan.std.FileStore = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.FileStore.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.FileStore.prototype.$typeof = function() { return fan.std.FileStore.$type; }
fan.std.FileStore.make = function(f) {
  var self = new fan.std.FileStore();
  fan.std.FileStore.make$(self,f);
  return self;
  }
fan.std.FileStore.make$ = function(self,f)
{
  f.call(self);
  return;
}
fan.std.FileStore.prototype.m_totalSpace = 0;
fan.std.FileStore.prototype.m_availSpace = 0;
fan.std.FileStore.prototype.m_freeSpace = 0;
fan.std.ProxyInStream = fan.sys.Obj.$extend(fan.std.InStream);
fan.std.ProxyInStream.prototype.$ctor = function()
{
  fan.std.InStream.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.ProxyInStream.prototype.$typeof = function() { return fan.std.ProxyInStream.$type; }
fan.std.ProxyInStream.prototype.$in = function()
{
  return this.m_$in;
}
fan.std.ProxyInStream.prototype.$in$ = function(it)
{
  this.m_$in = it;
  return;
}
fan.std.ProxyInStream.make = function($in) {
  var self = new fan.std.ProxyInStream();
  fan.std.ProxyInStream.make$(self,$in);
  return self;
  }
fan.std.ProxyInStream.make$ = function(self,$in)
{
  fan.std.InStream.make$(self);
  self.m_$in = $in;
  return;
}
fan.std.ProxyInStream.prototype.avail = function()
{
  return this.m_$in.avail();
}
fan.std.ProxyInStream.prototype.read = function()
{
  return this.m_$in.read();
}
fan.std.ProxyInStream.prototype.skip = function(n)
{
  return this.m_$in.skip(n);
}
fan.std.ProxyInStream.prototype.readBytes = function(ba,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = ba.size();
  return this.m_$in.readBytes(ba,off,len);
}
fan.std.ProxyInStream.prototype.unread = function(n)
{
  return fan.sys.ObjUtil.coerce(this.m_$in.unread(n),fan.std.ProxyInStream.$type);
}
fan.std.ProxyInStream.prototype.close = function()
{
  return this.m_$in.close();
}
fan.std.ProxyInStream.prototype.endian = function()
{
  return this.m_$in.endian();
}
fan.std.ProxyInStream.prototype.endian$ = function(it)
{
  this.m_$in.endian$(it);
  return;
}
fan.std.ProxyInStream.prototype.charset = function()
{
  return this.m_$in.charset();
}
fan.std.ProxyInStream.prototype.charset$ = function(it)
{
  this.m_$in.charset$(it);
  return;
}
fan.std.ProxyInStream.prototype.readChar = function()
{
  return this.m_$in.readChar();
}
fan.std.ProxyInStream.prototype.unreadChar = function(b)
{
  return fan.sys.ObjUtil.coerce(this.m_$in.unreadChar(b),fan.std.ProxyInStream.$type);
}
fan.std.ProxyInStream.prototype.peekChar = function()
{
  return this.m_$in.peekChar();
}
fan.std.ProxyInStream.prototype.readChars = function(n)
{
  return this.m_$in.readChars(n);
}
fan.std.ProxyInStream.prototype.readLine = function(max)
{
  if (max === undefined) max = -1;
  return this.m_$in.readLine(max);
}
fan.std.ProxyInStream.prototype.readAllStr = function(normalizeNewlines)
{
  if (normalizeNewlines === undefined) normalizeNewlines = true;
  return this.m_$in.readAllStr(normalizeNewlines);
}
fan.std.ProxyInStream.prototype.m_$in = null;
fan.std.ProxyInStream.prototype.m_endian = null;
fan.std.ProxyInStream.prototype.m_charset = null;
fan.std.SysInStream = fan.sys.Obj.$extend(fan.std.InStream);
fan.std.SysInStream.prototype.$ctor = function()
{
  fan.std.InStream.prototype.$ctor.call(this);
  this.peer = new fan.std.SysInStreamPeer(this);
  var $this = this;
}
fan.std.SysInStream.prototype.$typeof = function() { return fan.std.SysInStream.$type; }
fan.std.SysInStream.prototype.endian = function()
{
  return this.m_endian;
}
fan.std.SysInStream.prototype.endian$ = function(it)
{
  this.m_endian = it;
  return;
}
fan.std.SysInStream.prototype.charset = function()
{
  return this.m_charset;
}
fan.std.SysInStream.prototype.charset$ = function(it)
{
  this.m_charset = it;
  return;
}
fan.std.SysInStream.make = function(e,c) {
  var self = new fan.std.SysInStream();
  fan.std.SysInStream.make$(self,e,c);
  return self;
  }
fan.std.SysInStream.make$ = function(self,e,c)
{
  fan.std.InStream.make$(self);
  self.endian$(e);
  self.charset$(c);
  return;
}
fan.std.SysInStream.toSigned = function(val,byteNum)
{
  return fan.std.SysInStreamPeer.toSigned(val,byteNum);
}
fan.std.SysInStream.prototype.avail = function()
{
  return this.peer.avail(this);
}
fan.std.SysInStream.prototype.read = function()
{
  return this.peer.read(this);
}
fan.std.SysInStream.prototype.skip = function(n)
{
  return this.peer.skip(this,n);
}
fan.std.SysInStream.prototype.readBytes = function(ba,off,len)
{
  if (off === undefined) off = 0;
  if (len === undefined) len = ba.size();
  return this.peer.readBytes(this,ba,off,len);
}
fan.std.SysInStream.prototype.unread = function(n)
{
  return this.peer.unread(this,n);
}
fan.std.SysInStream.prototype.close = function()
{
  return this.peer.close(this);
}
fan.std.SysInStream.prototype.m_endian = null;
fan.std.SysInStream.prototype.m_charset = null;
fan.std.SysInStreamPeer = function(){}
fan.std.SysInStreamPeer.make = function(self) {
  return new fan.std.SysInStreamPeer();
}
fan.std.SysInStreamPeer.prototype.avail = function(self) {
}
fan.std.SysInStreamPeer.prototype.read = function(self) {
}
fan.std.SysInStreamPeer.prototype.skip = function(self, n) {
}
fan.std.SysInStreamPeer.prototype.readBytes = function(self, ba, off, len) {
}
fan.std.SysInStreamPeer.prototype.unread = function(self, n) {
}
fan.std.SysInStreamPeer.prototype.close = function(self) {
}
fan.std.SysInStreamPeer.toSigned = function(val, num) {
  var c = val;
  switch (num) {
  case 1:
    return c <= 0x7F ? c : (0xFFFFFF00 | c);
  case 2:
    return c <= 0x7FFF ? c : (0xFFFF0000 | c);
  case 4:
    return (c & 0x7FFFFFFF) + Math.pow(2, 31);
  }
  return val;
}
fan.std.LocalFile = fan.sys.Obj.$extend(fan.std.File);
fan.std.LocalFile.prototype.$ctor = function()
{
  fan.std.File.prototype.$ctor.call(this);
  this.peer = new fan.std.LocalFilePeer(this);
  var $this = this;
}
fan.std.LocalFile.prototype.$typeof = function() { return fan.std.LocalFile.$type; }
fan.std.LocalFile.prototype.init = function()
{
  return this.peer.init(this);
}
fan.std.LocalFile.make = function(uri) {
  var self = new fan.std.LocalFile();
  fan.std.LocalFile.make$(self,uri);
  return self;
  }
fan.std.LocalFile.make$ = function(self,uri)
{
  fan.std.File.privateMake$(self,uri);
  self.init();
  return;
}
fan.std.LocalFile.prototype.store = function()
{
  return this.peer.store(this);
}
fan.std.LocalFile.prototype.exists = function()
{
  return this.peer.exists(this);
}
fan.std.LocalFile.prototype.size = function()
{
  return this.peer.size(this);
}
fan.std.LocalFile.prototype.modified = function()
{
  return this.peer.modified(this);
}
fan.std.LocalFile.prototype.modified$ = function(it)
{
  return this.peer.modified$(this,it);
}
fan.std.LocalFile.prototype.osPath = function()
{
  return this.peer.osPath(this);
}
fan.std.LocalFile.prototype.list = function()
{
  return this.peer.list(this);
}
fan.std.LocalFile.prototype.normalize = function()
{
  return this.peer.normalize(this);
}
fan.std.LocalFile.prototype.create = function()
{
  return this.peer.create(this);
}
fan.std.LocalFile.prototype.moveTo = function(to)
{
  return this.peer.moveTo(this,to);
}
fan.std.LocalFile.prototype.$delete = function()
{
  return this.peer.$delete(this);
}
fan.std.LocalFile.prototype.deleteOnExit = function()
{
  return this.peer.deleteOnExit(this);
}
fan.std.LocalFile.prototype.open = function(mode)
{
  if (mode === undefined) mode = "rw";
  return fan.std.FileBuf.make(this,mode);
}
fan.std.LocalFile.prototype.mmap = function(mode,pos,size)
{
  if (mode === undefined) mode = "rw";
  if (pos === undefined) pos = 0;
  if (size === undefined) size = this.size();
  return fan.std.NioBuf.fromFile(this,mode,pos,fan.sys.ObjUtil.coerce(size,fan.sys.Int.$type.toNullable()));
}
fan.std.LocalFile.prototype.$in = function(bufferSize)
{
  if (bufferSize === undefined) bufferSize = 4096;
  return this.peer.$in(this,bufferSize);
}
fan.std.LocalFile.prototype.out = function(append,bufferSize)
{
  if (append === undefined) append = false;
  if (bufferSize === undefined) bufferSize = 4096;
  return this.peer.out(this,append,bufferSize);
}
fan.std.LocalFile.prototype.m_peer = null;
fan.std.LocalFilePeer = function(){}
fan.std.LocalFilePeer.init = function(self) {
	var path = self.uri().m_pathStr;
	self.peer = new File("", uri.toStr());
}
fan.std.LocalFilePeer.make = function(file, uri) {
	var f = new fan.std.LocalFile();
	f.peer = file;
	f._uri = uri;
	return f;
}
fan.std.LocalFilePeer.store = function(self) {
	return new fan.std.FileStore();
}
fan.std.LocalFilePeer.size = function(self) {
	return self.peer.size;
}
fan.std.LocalFilePeer.exists = function(self) {
	return true;
}
fan.std.LocalFilePeer.modified = function(self) {
	var mills = self.peer.lastModified;
	return fan.std.TimePoint.fromMillis(mills);
}
fan.std.LocalFilePeer.modified$ = function(self, time) {
}
fan.std.LocalFilePeer.osPath = function(self) {
	return self.peer.webkitRelativePath;
}
fan.std.LocalFilePeer.list = function(self) {
	return fan.sys.List.make(0);
}
fan.std.LocalFilePeer.normalize = function(self) {
	return self;
}
fan.std.LocalFilePeer.createFile = function(self) {
	return self;
}
fan.std.LocalFilePeer.createDir = function(self) {
	return self;
}
fan.std.LocalFilePeer.create = function(self) {
	if (self.isDir())
		fan.std.LocalFilePeer.createDir(jfile);
	else
		fan.std.LocalFilePeer.createFile(jfile);
	return self;
}
fan.std.LocalFilePeer.moveTo = function(self, to) {
	return to;
}
fan.std.LocalFilePeer.delete = function(self, to) {
}
fan.std.LocalFilePeer.deleteOnExit = function(self, to) {
}
fan.std.LocalFilePeer.in = function(self, to) {
	throw fan.sys.UnsupportedErr.make("");
}
fan.std.LocalFilePeer.out = function(self, to) {
	throw fan.sys.UnsupportedErr.make("");
}
fan.std.TimeZone = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.TimeZone.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.std.TimeZonePeer(this);
  var $this = this;
}
fan.std.TimeZone.prototype.$typeof = function() { return fan.std.TimeZone.$type; }
fan.std.TimeZone.listNames = function()
{
  var $this = this;
  var s = fan.std.TimeZone.listFullNames();
  return fan.sys.ObjUtil.coerce(s.map(fan.sys.Func.make$closure(
    fan.std.$clos$_u129,
    function(it,ignoreparam$1)
    {
      return fan.sys.Str.split(it,fan.sys.ObjUtil.coerce(47,fan.sys.Int.$type.toNullable())).last();
    })).toImmutable(),fan.std.Type.find("sys::List<sys::Str>"));
}
fan.std.TimeZone.listFullNames = function()
{
  return fan.std.TimeZonePeer.listFullNames();
}
fan.std.TimeZone.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  if (fan.sys.ObjUtil.equals($name,"UTC"))
  {
    return ((fan.std.TimeZone.static$init ? fan.std.TimeZone.static$init() : null),fan.std.TimeZone.m_utc);
  }
  ;
  if (fan.sys.ObjUtil.equals($name,"Rel"))
  {
    return ((fan.std.TimeZone.static$init ? fan.std.TimeZone.static$init() : null),fan.std.TimeZone.m_rel);
  }
  ;
  var tz = fan.std.TimeZone.fromName($name);
  if (tz == null)
  {
    if (checked)
    {
      throw fan.sys.ParseErr.make($name);
    }
    ;
    tz = fan.std.TimeZone.make($name,$name,0);
  }
  ;
  return fan.sys.ObjUtil.coerce(tz,fan.std.TimeZone.$type);
}
fan.std.TimeZone.fromName = function($name)
{
  return fan.std.TimeZonePeer.fromName($name);
}
fan.std.TimeZone.cur = function()
{
  return fan.std.TimeZonePeer.cur();
}
fan.std.TimeZone.make = function($name,fullName,offset) {
  var self = new fan.std.TimeZone();
  fan.std.TimeZone.make$(self,$name,fullName,offset);
  return self;
  }
fan.std.TimeZone.make$ = function(self,$name,fullName,offset)
{
  self.m_$name = $name;
  self.m_fullName = fullName;
  self.m_baseOffset = offset;
  return;
}
fan.std.TimeZone.prototype.offset = function(year)
{
  if (year === undefined) year = 0;
  return fan.std.Duration.fromSec(this.m_baseOffset);
}
fan.std.TimeZone.fromGmtOffset = function(offset)
{
  if (fan.sys.ObjUtil.equals(offset,0))
  {
    return ((fan.std.TimeZone.static$init ? fan.std.TimeZone.static$init() : null),fan.std.TimeZone.m_utc);
  }
  ;
  var s = fan.sys.StrBuf.make();
  if (fan.sys.ObjUtil.compareLT(offset,0))
  {
    offset = fan.sys.Int.negate(offset);
    s.add("GMT+");
  }
  else
  {
    s.add("GMT-");
  }
  ;
  var hour = fan.sys.Int.div(offset,3600);
  s.add(fan.sys.ObjUtil.coerce(hour,fan.sys.Obj.$type.toNullable()));
  return fan.std.TimeZone.fromStr(s.toStr());
}
fan.std.TimeZone.prototype.dstOffset = function(year)
{
  return this.peer.dstOffset(this,year);
}
fan.std.TimeZone.prototype.stdAbbr = function(year)
{
  return this.m_$name;
}
fan.std.TimeZone.prototype.dstAbbr = function(year)
{
  return null;
}
fan.std.TimeZone.prototype.toStr = function()
{
  return this.m_fullName;
}
fan.std.TimeZone.prototype.equals = function(that)
{
  if (!fan.sys.ObjUtil.is(that,fan.std.TimeZone.$type))
  {
    return false;
  }
  ;
  return fan.sys.ObjUtil.equals(this.m_fullName,fan.sys.ObjUtil.coerce(that,fan.std.TimeZone.$type).m_fullName);
}
fan.std.TimeZone.static$init = function()
{
  if (fan.std.TimeZone.static$inited) return;
  fan.std.TimeZone.static$inited = true;
  fan.std.TimeZone.m_utc = fan.std.TimeZone.make("UTC","Etc/Utc",0);
  fan.std.TimeZone.m_rel = fan.std.TimeZone.make("Rel","Etc/Rel",0);
  fan.std.TimeZone.m_defVal = ((fan.std.TimeZone.static$init ? fan.std.TimeZone.static$init() : null),fan.std.TimeZone.m_utc);
  return;
}
fan.std.TimeZone.m_utc = null;
fan.std.TimeZone.m_rel = null;
fan.std.TimeZone.m_defVal = null;
fan.std.TimeZone.prototype.m_$name = null;
fan.std.TimeZone.prototype.m_fullName = null;
fan.std.TimeZone.prototype.m_baseOffset = 0;
fan.std.TimeZonePeer = function(){}
fan.std.TimeZonePeer.make = function(self) {
	return new fan.std.TimeZonePeer();
}
fan.std.TimeZonePeer.fromName = function(name) {
	return new fan.std.TimeZone.make(name, name, 0);
}
fan.std.TimeZonePeer.m_cur = fan.std.TimeZonePeer.fromName("cur");
fan.std.TimeZonePeer.cur = function() {
	return fan.std.TimeZonePeer.m_cur;
}
fan.std.TimeZonePeer.prototype.dstOffset = function(self, year) {
	var d = new Date();
	return d.getTimezoneOffset();
}
fan.std.TimeZonePeer.listFullNames = function() {
	var list =  fan.sys.List.make(4);
	list.add(fan.std.TimeZonePeer.m_cur);
	return list;
}
fan.std.Date = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Date.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.Date.prototype.$typeof = function() { return fan.std.Date.$type; }
fan.std.Date.today = function(tz)
{
  if (tz === undefined) tz = fan.std.TimeZone.cur();
  var dt = fan.std.DateTime.now().toTimeZone(tz);
  return dt.date();
}
fan.std.Date.make = function(year,month,day) {
  var self = new fan.std.Date();
  fan.std.Date.make$(self,year,month,day);
  return self;
  }
fan.std.Date.make$ = function(self,year,month,day)
{
  self.m_datetime = fan.std.DateTime.make(year,month,day,0,0,0,0);
  return;
}
fan.std.Date.num = function(s,index)
{
  return fan.sys.Int.minus(fan.sys.Str.get(s,index),48);
}
fan.std.Date.fromStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  try
  {
    var year = fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.mult(fan.std.Date.num(s,0),1000),fan.sys.Int.mult(fan.std.Date.num(s,1),100)),fan.sys.Int.mult(fan.std.Date.num(s,2),10)),fan.std.Date.num(s,3));
    var month = fan.sys.Int.minus(fan.sys.Int.plus(fan.sys.Int.mult(fan.std.Date.num(s,5),10),fan.std.Date.num(s,6)),1);
    var day = fan.sys.Int.plus(fan.sys.Int.mult(fan.std.Date.num(s,8),10),fan.std.Date.num(s,9));
    if ((fan.sys.ObjUtil.compareNE(fan.sys.Str.get(s,4),45) || fan.sys.ObjUtil.compareNE(fan.sys.Str.get(s,7),45) || fan.sys.ObjUtil.compareNE(fan.sys.Str.size(s),10)))
    {
      throw fan.sys.Err.make();
    }
    ;
    return fan.std.Date.make(year,((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_vals).get(month),day);
  }
  catch ($_u130)
  {
    $_u130 = fan.sys.Err.make($_u130);
    if ($_u130 instanceof fan.sys.Err)
    {
      var e = $_u130;
      var e;
      if (!checked)
      {
        return ((fan.std.Date.static$init ? fan.std.Date.static$init() : null),fan.std.Date.m_defVal);
      }
      ;
      throw fan.sys.ParseErr.make(fan.sys.Str.plus("Date:",s));
    }
    else
    {
      throw $_u130;
    }
  }
  ;
}
fan.std.Date.prototype.equals = function(that)
{
  if (fan.sys.ObjUtil.is(that,fan.std.Date.$type))
  {
    return fan.sys.ObjUtil.equals(this.m_datetime,fan.sys.ObjUtil.coerce(that,fan.std.Date.$type).m_datetime);
  }
  ;
  return false;
}
fan.std.Date.prototype.hash = function()
{
  return this.m_datetime.hash();
}
fan.std.Date.prototype.compare = function(obj)
{
  return fan.sys.ObjUtil.compare(this.m_datetime,fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(obj,fan.std.Date.$type).m_datetime,fan.sys.Obj.$type));
}
fan.std.Date.prototype.toStr = function()
{
  return this.toLocale("YYYY-MM-DD");
}
fan.std.Date.prototype.year = function()
{
  return this.m_datetime.year();
}
fan.std.Date.prototype.month = function()
{
  return this.m_datetime.month();
}
fan.std.Date.prototype.day = function()
{
  return this.m_datetime.day();
}
fan.std.Date.prototype.weekday = function()
{
  return this.m_datetime.weekday();
}
fan.std.Date.prototype.dayOfYear = function()
{
  return this.m_datetime.dayOfYear();
}
fan.std.Date.prototype.weekOfYear = function(startOfWeek)
{
  if (startOfWeek === undefined) startOfWeek = fan.std.Weekday.localeStartOfWeek();
  return this.m_datetime.weekOfYear(startOfWeek);
}
fan.std.Date.prototype.toLocale = function(pattern,locale)
{
  if (pattern === undefined) pattern = null;
  if (locale === undefined) locale = fan.std.Locale.cur();
  return this.m_datetime.toLocale(pattern,locale);
}
fan.std.Date.fromLocale = function(str,pattern,checked)
{
  if (checked === undefined) checked = true;
  var dt = fan.std.DateTime.fromLocale(str,pattern,fan.std.TimeZone.cur(),checked);
  return fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(dt,fan.std.DateTime.$type).date(),fan.std.Date.$type.toNullable());
}
fan.std.Date.fromIso = function(s,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.std.Date.fromStr(s,checked),fan.std.Date.$type.toNullable());
}
fan.std.Date.prototype.toIso = function()
{
  return this.toStr();
}
fan.std.Date.prototype.plus = function(days)
{
  if (fan.sys.ObjUtil.compareNE(fan.sys.Int.mod(days.toNanos(),((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerDay)),0))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(days,fan.sys.Obj.$type.toNullable())));
  }
  ;
  var d = this.m_datetime.plus(days);
  return d.date();
}
fan.std.Date.prototype.minus = function(days)
{
  return this.plus(days.negate());
}
fan.std.Date.prototype.minusDate = function(days)
{
  var d = this.m_datetime.minusDateTime(days.m_datetime);
  return d;
}
fan.std.Date.prototype.firstOfMonth = function()
{
  if (fan.sys.ObjUtil.equals(this.day(),1))
  {
    return this;
  }
  ;
  return fan.std.Date.make(this.year(),this.month(),1);
}
fan.std.Date.prototype.lastOfMonth = function()
{
  var last = this.month().numDays(this.year());
  if (fan.sys.ObjUtil.equals(this.day(),last))
  {
    return this;
  }
  ;
  return fan.std.Date.make(this.year(),this.month(),last);
}
fan.std.Date.prototype.isYesterday = function()
{
  return fan.sys.ObjUtil.equals(this,fan.std.Date.today().plus(fan.std.Duration.fromStr("-1day")));
}
fan.std.Date.prototype.isToday = function()
{
  return fan.sys.ObjUtil.equals(this,fan.std.Date.today());
}
fan.std.Date.prototype.isTomorrow = function()
{
  return fan.sys.ObjUtil.equals(this,fan.std.Date.today().plus(fan.std.Duration.fromStr("1day")));
}
fan.std.Date.prototype.toDateTime = function(t,tz)
{
  if (tz === undefined) tz = fan.std.TimeZone.cur();
  return fan.std.DateTime.make(this.year(),this.month(),this.day(),t.hour(),t.min(),t.sec(),t.nanoSec(),tz);
}
fan.std.Date.prototype.midnight = function(tz)
{
  if (tz === undefined) tz = fan.std.TimeZone.cur();
  return fan.std.DateTime.make(this.year(),this.month(),this.day(),0,0,0,0,tz);
}
fan.std.Date.prototype.toCode = function()
{
  if (fan.sys.ObjUtil.equals(this,fan.sys.ObjUtil.coerce(((fan.std.Date.static$init ? fan.std.Date.static$init() : null),fan.std.Date.m_defVal),fan.sys.Obj.$type.toNullable())))
  {
    return "Date.defVal";
  }
  ;
  return fan.sys.Str.plus(fan.sys.Str.plus("Date(\"",this.toStr()),"\")");
}
fan.std.Date.yesterday = function(tz)
{
  if (tz === undefined) tz = fan.std.TimeZone.cur();
  return fan.std.Date.today(tz).minus(fan.std.Duration.fromStr("1day"));
}
fan.std.Date.tomorrow = function(tz)
{
  if (tz === undefined) tz = fan.std.TimeZone.cur();
  return fan.std.Date.today(tz).plus(fan.std.Duration.fromStr("1day"));
}
fan.std.Date.static$init = function()
{
  if (fan.std.Date.static$inited) return;
  fan.std.Date.static$inited = true;
  fan.std.Date.m_defVal = fan.std.Date.make(2000,((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_vals).get(0),1);
  return;
}
fan.std.Date.prototype.m_datetime = null;
fan.std.Date.m_defVal = null;
fan.std.Duration = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Duration.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.Duration.prototype.$typeof = function() { return fan.std.Duration.$type; }
fan.std.Duration.now = function()
{
  return fan.std.Duration.fromNanos(fan.std.TimePoint.nanoTicks());
}
fan.std.Duration.nowTicks = function()
{
  return fan.std.TimePoint.nanoTicks();
}
fan.std.Duration.make = function(ticks)
{
  if (fan.sys.ObjUtil.equals(ticks,0))
  {
    return ((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_zero);
  }
  ;
  return fan.std.Duration.privateMake(ticks);
}
fan.std.Duration.privateMake = function(t) {
  var self = new fan.std.Duration();
  fan.std.Duration.privateMake$(self,t);
  return self;
  }
fan.std.Duration.privateMake$ = function(self,t)
{
  self.m_ticks = t;
  return;
}
fan.std.Duration.prototype.toTicks = function()
{
  return this.m_ticks;
}
fan.std.Duration.fromTicks = function(t)
{
  return fan.std.Duration.make(t);
}
fan.std.Duration.fromDateTime = function(t)
{
  return fan.std.Duration.make(t);
}
fan.std.Duration.fromNanos = function(nanao)
{
  return fan.std.Duration.make(fan.sys.Int.div(nanao,1000000));
}
fan.std.Duration.fromMicros = function(s)
{
  return fan.std.Duration.make(fan.sys.Int.div(s,1000));
}
fan.std.Duration.fromMillis = function(s)
{
  return fan.std.Duration.make(s);
}
fan.std.Duration.fromSec = function(s)
{
  return fan.std.Duration.make(fan.sys.Int.mult(s,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_milliPerSec)));
}
fan.std.Duration.fromDay = function(s)
{
  return fan.std.Duration.make(fan.sys.Int.mult(s,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_milliPerDay)));
}
fan.std.Duration.fromMin = function(s)
{
  return fan.std.Duration.make(fan.sys.Int.mult(s,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_milliPerMin)));
}
fan.std.Duration.fromHour = function(s)
{
  return fan.std.Duration.make(fan.sys.Int.mult(s,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_milliPerHr)));
}
fan.std.Duration.fromStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  try
  {
    var len = fan.sys.Str.size(s);
    var x1 = fan.sys.Str.get(s,fan.sys.Int.minus(len,1));
    var x2 = fan.sys.Str.get(s,fan.sys.Int.minus(len,2));
    var x3 = fan.sys.Str.get(s,fan.sys.Int.minus(len,3));
    var dot = fan.sys.ObjUtil.compareGT(fan.sys.Str.index(s,"."),0);
    var mult = fan.sys.Float.make(-1.0);
    var suffixLen = -1;
    var $_u131 = x1;
    if (fan.sys.ObjUtil.equals($_u131,115))
    {
      if (fan.sys.ObjUtil.equals(x2,110))
      {
        mult = fan.sys.Float.make(1.0E-6);
        suffixLen = 2;
      }
      ;
      if (fan.sys.ObjUtil.equals(x2,109))
      {
        mult = fan.sys.Float.make(1.0);
        suffixLen = 2;
      }
      ;
    }
    else if (fan.sys.ObjUtil.equals($_u131,99))
    {
      if ((fan.sys.ObjUtil.equals(x2,101) && fan.sys.ObjUtil.equals(x3,115)))
      {
        mult = fan.sys.Int.toFloat(((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_milliPerSec));
        suffixLen = 3;
      }
      ;
    }
    else if (fan.sys.ObjUtil.equals($_u131,110))
    {
      if ((fan.sys.ObjUtil.equals(x2,105) && fan.sys.ObjUtil.equals(x3,109)))
      {
        mult = fan.sys.Int.toFloat(((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_milliPerMin));
        suffixLen = 3;
      }
      ;
    }
    else if (fan.sys.ObjUtil.equals($_u131,114))
    {
      if (fan.sys.ObjUtil.equals(x2,104))
      {
        mult = fan.sys.Int.toFloat(((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_milliPerHr));
        suffixLen = 2;
      }
      ;
    }
    else if (fan.sys.ObjUtil.equals($_u131,121))
    {
      if ((fan.sys.ObjUtil.equals(x2,97) && fan.sys.ObjUtil.equals(x3,100)))
      {
        mult = fan.sys.Int.toFloat(((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_milliPerDay));
        suffixLen = 3;
      }
      ;
    }
    ;
    if (fan.sys.ObjUtil.compareLT(mult,fan.sys.Float.make(0.0)))
    {
      throw fan.sys.Err.make();
    }
    ;
    var sf = fan.sys.Str.toFloat(fan.sys.Str.getRange(s,fan.sys.Range.make(0,fan.sys.Int.minus(len,suffixLen),true)));
    return fan.std.Duration.make(fan.sys.Float.toInt(fan.sys.Float.mult(sf,mult)));
  }
  catch ($_u132)
  {
    $_u132 = fan.sys.Err.make($_u132);
    if ($_u132 instanceof fan.sys.Err)
    {
      var e = $_u132;
      var e;
      if (!checked)
      {
        return ((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_defVal);
      }
      ;
      throw fan.sys.ParseErr.make(fan.sys.Str.plus("Duration:",s));
    }
    else
    {
      throw $_u132;
    }
  }
  ;
}
fan.std.Duration.prototype.equals = function(obj)
{
  if (fan.sys.ObjUtil.is(obj,fan.std.Duration.$type))
  {
    return fan.sys.ObjUtil.equals(fan.sys.ObjUtil.coerce(obj,fan.std.Duration.$type).m_ticks,this.m_ticks);
  }
  ;
  return false;
}
fan.std.Duration.prototype.compare = function(obj)
{
  return fan.sys.Int.minus(this.m_ticks,fan.sys.ObjUtil.coerce(obj,fan.std.Duration.$type).m_ticks);
}
fan.std.Duration.prototype.hash = function()
{
  return this.m_ticks;
}
fan.std.Duration.prototype.toStr = function()
{
  if (fan.sys.ObjUtil.equals(this.m_ticks,0))
  {
    return "0ms";
  }
  ;
  var ns = this.toNanos();
  if (fan.sys.ObjUtil.equals(fan.sys.Int.mod(ns,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerMilli)),0))
  {
    if (fan.sys.ObjUtil.equals(fan.sys.Int.mod(ns,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerDay)),0))
    {
      return fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(fan.sys.Int.div(ns,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerDay)),fan.sys.Obj.$type.toNullable())),"day");
    }
    ;
    if (fan.sys.ObjUtil.equals(fan.sys.Int.mod(ns,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerHr)),0))
    {
      return fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(fan.sys.Int.div(ns,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerHr)),fan.sys.Obj.$type.toNullable())),"hr");
    }
    ;
    if (fan.sys.ObjUtil.equals(fan.sys.Int.mod(ns,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerMin)),0))
    {
      return fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(fan.sys.Int.div(ns,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerMin)),fan.sys.Obj.$type.toNullable())),"min");
    }
    ;
    if (fan.sys.ObjUtil.equals(fan.sys.Int.mod(ns,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerSec)),0))
    {
      return fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(fan.sys.Int.div(ns,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerSec)),fan.sys.Obj.$type.toNullable())),"sec");
    }
    ;
    return fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(fan.sys.Int.div(ns,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerMilli)),fan.sys.Obj.$type.toNullable())),"ms");
  }
  ;
  return fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(ns,fan.sys.Obj.$type.toNullable())),"ns");
}
fan.std.Duration.prototype.negate = function()
{
  return fan.std.Duration.make(fan.sys.Int.negate(this.m_ticks));
}
fan.std.Duration.prototype.mult = function(b)
{
  return fan.std.Duration.make(fan.sys.Int.mult(this.m_ticks,b));
}
fan.std.Duration.prototype.multFloat = function(b)
{
  return fan.std.Duration.make(fan.sys.Float.toInt(fan.sys.Int.multFloat(this.m_ticks,b)));
}
fan.std.Duration.prototype.div = function(b)
{
  return fan.std.Duration.make(fan.sys.Int.div(this.m_ticks,b));
}
fan.std.Duration.prototype.divFloat = function(b)
{
  return fan.std.Duration.make(fan.sys.Float.toInt(fan.sys.Int.divFloat(this.m_ticks,b)));
}
fan.std.Duration.prototype.plus = function(b)
{
  return fan.std.Duration.make(fan.sys.Int.plus(this.m_ticks,b.m_ticks));
}
fan.std.Duration.prototype.minus = function(b)
{
  return fan.std.Duration.make(fan.sys.Int.minus(this.m_ticks,b.m_ticks));
}
fan.std.Duration.prototype.abs = function()
{
  return (function($this) { if (fan.sys.ObjUtil.compareGT($this.m_ticks,0)) return $this; return fan.std.Duration.make(fan.sys.Int.negate($this.m_ticks)); })(this);
}
fan.std.Duration.prototype.min = function(that)
{
  return (function($this) { if (fan.sys.ObjUtil.compareLT($this.m_ticks,that.m_ticks)) return $this; return that; })(this);
}
fan.std.Duration.prototype.max = function(that)
{
  return (function($this) { if (fan.sys.ObjUtil.compareGT($this.m_ticks,that.m_ticks)) return $this; return that; })(this);
}
fan.std.Duration.prototype.floor = function(accuracy)
{
  if (fan.sys.ObjUtil.equals(fan.sys.Int.mod(this.m_ticks,accuracy.m_ticks),0))
  {
    return this;
  }
  ;
  return fan.std.Duration.make(fan.sys.Int.minus(this.m_ticks,fan.sys.Int.mod(this.m_ticks,accuracy.m_ticks)));
}
fan.std.Duration.prototype.toNanos = function()
{
  return fan.sys.Int.mult(this.m_ticks,1000000);
}
fan.std.Duration.prototype.toMicros = function()
{
  return fan.sys.Int.mult(this.m_ticks,1000);
}
fan.std.Duration.prototype.toMillis = function()
{
  return this.m_ticks;
}
fan.std.Duration.prototype.toSec = function()
{
  return fan.sys.Int.div(this.m_ticks,1000);
}
fan.std.Duration.prototype.toMin = function()
{
  return fan.sys.Int.div(this.m_ticks,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_milliPerMin));
}
fan.std.Duration.prototype.toHour = function()
{
  return fan.sys.Int.div(this.m_ticks,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_milliPerHr));
}
fan.std.Duration.prototype.toDay = function()
{
  return fan.sys.Int.div(this.m_ticks,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_milliPerDay));
}
fan.std.Duration.prototype.toLocale = function()
{
  return this.toStr();
}
fan.std.Duration.prototype.toCode = function()
{
  return this.toStr();
}
fan.std.Duration.prototype.toIso = function()
{
  throw fan.sys.UnsupportedErr.make("TODO");
}
fan.std.Duration.fromIso = function(s,checked)
{
  if (checked === undefined) checked = true;
  throw fan.sys.UnsupportedErr.make("TODO");
}
fan.std.Duration.static$init = function()
{
  if (fan.std.Duration.static$inited) return;
  fan.std.Duration.static$inited = true;
  fan.std.Duration.m_zero = fan.std.Duration.privateMake(0);
  fan.std.Duration.m_defVal = ((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_zero);
  fan.std.Duration.m_minVal = fan.std.Duration.make(fan.sys.Int.div(((fan.sys.Int.static$init ? fan.sys.Int.static$init() : null),fan.sys.Int.m_minVal),1000000));
  fan.std.Duration.m_maxVal = fan.std.Duration.make(fan.sys.Int.div(((fan.sys.Int.static$init ? fan.sys.Int.static$init() : null),fan.sys.Int.m_maxVal),1000000));
  fan.std.Duration.m_nsPerDay = 86400000000000;
  fan.std.Duration.m_nsPerHr = 3600000000000;
  fan.std.Duration.m_nsPerMin = 60000000000;
  fan.std.Duration.m_nsPerSec = 1000000000;
  fan.std.Duration.m_nsPerMilli = 1000000;
  fan.std.Duration.m_micrsPerDay = 86400000000;
  fan.std.Duration.m_micrsPerHr = 3600000000;
  fan.std.Duration.m_micrsPerMin = 60000000;
  fan.std.Duration.m_micrsPerSec = 1000000;
  fan.std.Duration.m_micrsPerMilli = 1000;
  fan.std.Duration.m_milliPerDay = 86400000;
  fan.std.Duration.m_milliPerHr = 3600000;
  fan.std.Duration.m_milliPerMin = 60000;
  fan.std.Duration.m_milliPerSec = 1000;
  fan.std.Duration.m_secPerDay = 86400;
  fan.std.Duration.m_secPerHr = 3600;
  fan.std.Duration.m_secPerMin = 60;
  return;
}
fan.std.Duration.prototype.m_ticks = 0;
fan.std.Duration.m_zero = null;
fan.std.Duration.m_defVal = null;
fan.std.Duration.m_minVal = null;
fan.std.Duration.m_maxVal = null;
fan.std.Duration.m_nsPerDay = 0;
fan.std.Duration.m_nsPerHr = 0;
fan.std.Duration.m_nsPerMin = 0;
fan.std.Duration.m_nsPerSec = 0;
fan.std.Duration.m_nsPerMilli = 0;
fan.std.Duration.m_micrsPerDay = 0;
fan.std.Duration.m_micrsPerHr = 0;
fan.std.Duration.m_micrsPerMin = 0;
fan.std.Duration.m_micrsPerSec = 0;
fan.std.Duration.m_micrsPerMilli = 0;
fan.std.Duration.m_milliPerDay = 0;
fan.std.Duration.m_milliPerHr = 0;
fan.std.Duration.m_milliPerMin = 0;
fan.std.Duration.m_milliPerSec = 0;
fan.std.Duration.m_secPerDay = 0;
fan.std.Duration.m_secPerHr = 0;
fan.std.Duration.m_secPerMin = 0;
fan.std.Locale = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Locale.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.std.LocalePeer(this);
  var $this = this;
}
fan.std.Locale.prototype.$typeof = function() { return fan.std.Locale.$type; }
fan.std.Locale.fromStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  var len = fan.sys.Str.size(s);
  try
  {
    if (fan.sys.ObjUtil.equals(len,2))
    {
      if (fan.sys.Str.isLower(s))
      {
        return fan.std.Locale.make(s,null);
      }
      ;
    }
    ;
    if (fan.sys.ObjUtil.equals(len,5))
    {
      var lang = fan.sys.Str.getRange(s,fan.sys.Range.make(0,2,true));
      var country = fan.sys.Str.getRange(s,fan.sys.Range.make(3,5,true));
      if ((fan.sys.Str.isLower(lang) && fan.sys.Str.isUpper(country) && fan.sys.ObjUtil.equals(fan.sys.Str.get(s,2),45)))
      {
        return fan.std.Locale.make(lang,country);
      }
      ;
    }
    ;
  }
  catch ($_u136)
  {
    $_u136 = fan.sys.Err.make($_u136);
    if ($_u136 instanceof fan.sys.Err)
    {
      var e = $_u136;
      var e;
    }
    else
    {
      throw $_u136;
    }
  }
  ;
  if (!checked)
  {
    return null;
  }
  ;
  throw fan.sys.ParseErr.make(fan.sys.Str.plus("Locale:",s));
}
fan.std.Locale.make = function(lang,country) {
  var self = new fan.std.Locale();
  fan.std.Locale.make$(self,lang,country);
  return self;
  }
fan.std.Locale.make$ = function(self,lang,country)
{
  self.m_lang = lang;
  self.m_country = country;
  if (country == null)
  {
    self.m_str = lang;
  }
  else
  {
    self.m_str = fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",lang),"-"),country);
  }
  ;
  return;
}
fan.std.Locale.cur = function()
{
  return fan.std.LocalePeer.cur();
}
fan.std.Locale.setCur = function(locale)
{
  return fan.std.LocalePeer.setCur(locale);
}
fan.std.Locale.prototype.use = function(func)
{
  var old = fan.std.Locale.cur();
  try
  {
    fan.std.Locale.setCur(this);
    func.call(this);
  }
  finally
  {
    fan.std.Locale.setCur(old);
  }
  ;
  return this;
}
fan.std.Locale.prototype.hash = function()
{
  return fan.sys.Str.hash(this.m_str);
}
fan.std.Locale.prototype.equals = function(obj)
{
  if (fan.sys.ObjUtil.is(obj,fan.std.Locale.$type))
  {
    return fan.sys.ObjUtil.equals(this.m_str,fan.sys.ObjUtil.coerce(obj,fan.std.Locale.$type).m_str);
  }
  ;
  return false;
}
fan.std.Locale.prototype.toStr = function()
{
  return this.m_str;
}
fan.std.Locale.static$init = function()
{
  if (fan.std.Locale.static$inited) return;
  fan.std.Locale.static$inited = true;
  fan.std.Locale.m_en = fan.sys.ObjUtil.coerce(fan.std.Locale.fromStr("en"),fan.std.Locale.$type);
  return;
}
fan.std.Locale.prototype.m_str = null;
fan.std.Locale.m_en = null;
fan.std.Locale.prototype.m_lang = null;
fan.std.Locale.prototype.m_country = null;
fan.std.LocalePeer = function(){}
fan.std.LocalePeer.threadLocale = fan.std.Locale.make("en", "US");
fan.std.LocalePeer.cur = function() {
	return threadLocale
}
fan.std.LocalePeer.setCur = function(local) {
	threadLocale = local
}
fan.std.TimeOfDay = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.TimeOfDay.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.TimeOfDay.prototype.$typeof = function() { return fan.std.TimeOfDay.$type; }
fan.std.TimeOfDay.now = function(tz)
{
  if (tz === undefined) tz = fan.std.TimeZone.cur();
  var dt = fan.std.DateTime.now(null).toTimeZone(tz);
  return fan.std.TimeOfDay.make(dt.hour(),dt.min(),dt.sec(),dt.nanoSec());
}
fan.std.TimeOfDay.make = function(hour,min,sec,ns) {
  var self = new fan.std.TimeOfDay();
  fan.std.TimeOfDay.make$(self,hour,min,sec,ns);
  return self;
  }
fan.std.TimeOfDay.make$ = function(self,hour,min,sec,ns)
{
  if (sec === undefined) sec = 0;
  if (ns === undefined) ns = 0;
  self.m_ticks = fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.mult(fan.sys.Int.mod(hour,24),((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerHr)),fan.sys.Int.mult(fan.sys.Int.mod(min,60),((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerMin))),fan.sys.Int.mult(fan.sys.Int.mod(sec,60),((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerSec))),fan.sys.Int.mod(ns,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerSec)));
  return;
}
fan.std.TimeOfDay.fromTicks = function(ticks) {
  var self = new fan.std.TimeOfDay();
  fan.std.TimeOfDay.fromTicks$(self,ticks);
  return self;
  }
fan.std.TimeOfDay.fromTicks$ = function(self,ticks)
{
  if (fan.sys.ObjUtil.compareLT(ticks,0))
  {
    ticks = fan.sys.Int.negate(ticks);
    ticks = fan.sys.Int.mod(ticks,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerDay));
    if (fan.sys.ObjUtil.compareGT(ticks,0))
    {
      ticks = fan.sys.Int.minus(((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerDay),ticks);
    }
    ;
    self.m_ticks = ticks;
  }
  else
  {
    self.m_ticks = fan.sys.Int.mod(ticks,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerDay));
  }
  ;
  return;
}
fan.std.TimeOfDay.num = function(s,index)
{
  return fan.sys.Int.minus(fan.sys.Str.get(s,index),48);
}
fan.std.TimeOfDay.fromStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  try
  {
    var hour = fan.sys.Int.plus(fan.sys.Int.mult(fan.std.TimeOfDay.num(s,0),10),fan.std.TimeOfDay.num(s,1));
    var min = fan.sys.Int.plus(fan.sys.Int.mult(fan.std.TimeOfDay.num(s,3),10),fan.std.TimeOfDay.num(s,4));
    var sec = fan.sys.Int.plus(fan.sys.Int.mult(fan.std.TimeOfDay.num(s,6),10),fan.std.TimeOfDay.num(s,7));
    if ((fan.sys.ObjUtil.compareNE(fan.sys.Str.get(s,2),58) || fan.sys.ObjUtil.compareNE(fan.sys.Str.get(s,5),58)))
    {
      throw fan.sys.Err.make();
    }
    ;
    var i = 8;
    var ns = 0;
    var tenth = 100000000;
    var len = fan.sys.Str.size(s);
    if ((fan.sys.ObjUtil.compareLT(i,len) && fan.sys.ObjUtil.equals(fan.sys.Str.get(s,i),46)))
    {
      i = fan.sys.Int.increment(i);
      while (fan.sys.ObjUtil.compareLT(i,len))
      {
        var c = fan.sys.Str.get(s,i);
        if ((fan.sys.ObjUtil.compareLT(c,48) || fan.sys.ObjUtil.compareGT(c,57)))
        {
          break;
        }
        ;
        ns = fan.sys.Int.plus(ns,fan.sys.Int.mult(fan.sys.Int.minus(c,48),tenth));
        tenth = fan.sys.Int.div(tenth,10);
        i = fan.sys.Int.increment(i);
      }
      ;
    }
    ;
    if (fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(s)))
    {
      throw fan.sys.Err.make();
    }
    ;
    return fan.std.TimeOfDay.make(hour,min,sec,ns);
  }
  catch ($_u137)
  {
    $_u137 = fan.sys.Err.make($_u137);
    if ($_u137 instanceof fan.sys.Err)
    {
      var e = $_u137;
      var e;
      if (!checked)
      {
        return ((fan.std.TimeOfDay.static$init ? fan.std.TimeOfDay.static$init() : null),fan.std.TimeOfDay.m_defVal);
      }
      ;
      throw fan.sys.ParseErr.make(fan.sys.Str.plus("Time:",s));
    }
    else
    {
      throw $_u137;
    }
  }
  ;
}
fan.std.TimeOfDay.prototype.equals = function(that)
{
  if (fan.sys.ObjUtil.is(that,fan.std.TimeOfDay.$type))
  {
    return fan.sys.ObjUtil.equals(this.m_ticks,fan.sys.ObjUtil.coerce(that,fan.std.TimeOfDay.$type).m_ticks);
  }
  ;
  return false;
}
fan.std.TimeOfDay.prototype.hash = function()
{
  return this.m_ticks;
}
fan.std.TimeOfDay.prototype.compare = function(obj)
{
  return fan.sys.ObjUtil.compare(this.m_ticks,fan.sys.ObjUtil.coerce(obj,fan.std.TimeOfDay.$type).m_ticks);
}
fan.std.TimeOfDay.prototype.toStr = function()
{
  return this.toLocale("hh:mm:ss.FFF");
}
fan.std.TimeOfDay.prototype.hour = function()
{
  return fan.sys.Int.div(this.m_ticks,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerHr));
}
fan.std.TimeOfDay.prototype.min = function()
{
  return fan.sys.Int.mod(fan.sys.Int.div(this.m_ticks,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerMin)),60);
}
fan.std.TimeOfDay.prototype.sec = function()
{
  return fan.sys.Int.mod(fan.sys.Int.div(this.m_ticks,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerSec)),60);
}
fan.std.TimeOfDay.prototype.nanoSec = function()
{
  return fan.sys.Int.mod(this.m_ticks,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerSec));
}
fan.std.TimeOfDay.prototype.toLocale = function(pattern,locale)
{
  if (pattern === undefined) pattern = null;
  if (locale === undefined) locale = fan.std.Locale.cur();
  var buf = fan.sys.StrBuf.make();
  buf.add(fan.sys.Int.toRadix(this.hour(),10,2)).add(":").add(fan.sys.Int.toRadix(this.min(),10,2)).add(":").add(fan.sys.Int.toRadix(this.sec(),10,2));
  if (fan.sys.ObjUtil.compareNE(this.nanoSec(),0))
  {
    buf.add(".").add(fan.sys.Int.toRadix(this.nanoSec(),10,9));
  }
  ;
  return buf.toStr();
}
fan.std.TimeOfDay.fromLocale = function(str,pattern,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.std.TimeOfDay.fromStr(str),fan.std.TimeOfDay.$type.toNullable());
}
fan.std.TimeOfDay.fromIso = function(s,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.std.TimeOfDay.fromStr(s,checked),fan.std.TimeOfDay.$type.toNullable());
}
fan.std.TimeOfDay.prototype.toIso = function()
{
  return this.toStr();
}
fan.std.TimeOfDay.prototype.plus = function(d)
{
  var ticks = d.toNanos();
  if (fan.sys.ObjUtil.equals(ticks,0))
  {
    return this;
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(ticks,fan.sys.Int.negate(((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerDay))) || fan.sys.ObjUtil.compareGT(ticks,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerDay))))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("Duration out of range: ",fan.sys.ObjUtil.coerce(d,fan.sys.Obj.$type.toNullable())));
  }
  ;
  return fan.std.TimeOfDay.fromTicks(fan.sys.Int.plus(this.m_ticks,ticks));
}
fan.std.TimeOfDay.prototype.minus = function(d)
{
  return this.plus(d.negate());
}
fan.std.TimeOfDay.fromDuration = function(d)
{
  var ticks = d.toNanos();
  if (fan.sys.ObjUtil.equals(ticks,0))
  {
    return ((fan.std.TimeOfDay.static$init ? fan.std.TimeOfDay.static$init() : null),fan.std.TimeOfDay.m_defVal);
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(ticks,0) || fan.sys.ObjUtil.compareGT(ticks,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_nsPerDay))))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("Duration out of range: ",fan.sys.ObjUtil.coerce(d,fan.sys.Obj.$type.toNullable())));
  }
  ;
  return fan.std.TimeOfDay.fromTicks(ticks);
}
fan.std.TimeOfDay.prototype.toDuration = function()
{
  return fan.std.Duration.fromNanos(this.m_ticks);
}
fan.std.TimeOfDay.prototype.toDateTime = function(d,tz)
{
  if (tz === undefined) tz = fan.std.TimeZone.cur();
  return fan.std.DateTime.make(d.year(),d.month(),d.day(),this.hour(),this.min(),this.sec(),this.nanoSec(),tz);
}
fan.std.TimeOfDay.prototype.toCode = function()
{
  if (fan.sys.ObjUtil.equals(this,fan.sys.ObjUtil.coerce(((fan.std.TimeOfDay.static$init ? fan.std.TimeOfDay.static$init() : null),fan.std.TimeOfDay.m_defVal),fan.sys.Obj.$type.toNullable())))
  {
    return "Time.defVal";
  }
  ;
  return fan.sys.Str.plus(fan.sys.Str.plus("Time(\"",this.toStr()),"\")");
}
fan.std.TimeOfDay.prototype.isMidnight = function()
{
  return fan.sys.ObjUtil.equals(this,((fan.std.TimeOfDay.static$init ? fan.std.TimeOfDay.static$init() : null),fan.std.TimeOfDay.m_defVal));
}
fan.std.TimeOfDay.static$init = function()
{
  if (fan.std.TimeOfDay.static$inited) return;
  fan.std.TimeOfDay.static$inited = true;
  fan.std.TimeOfDay.m_defVal = fan.std.TimeOfDay.fromTicks(0);
  return;
}
fan.std.TimeOfDay.prototype.m_ticks = 0;
fan.std.TimeOfDay.m_defVal = null;
fan.std.TimePoint = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.TimePoint.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.std.TimePointPeer(this);
  var $this = this;
}
fan.std.TimePoint.prototype.$typeof = function() { return fan.std.TimePoint.$type; }
fan.std.TimePoint.make = function(ticks) {
  var self = new fan.std.TimePoint();
  fan.std.TimePoint.make$(self,ticks);
  return self;
  }
fan.std.TimePoint.make$ = function(self,ticks)
{
  self.m_ticks = ticks;
  return;
}
fan.std.TimePoint.nowMillis = function()
{
  return fan.std.TimePointPeer.nowMillis();
}
fan.std.TimePoint.nanoTicks = function()
{
  return fan.std.TimePointPeer.nanoTicks();
}
fan.std.TimePoint.nowUnique = function()
{
  return fan.std.TimePointPeer.nowUnique();
}
fan.std.TimePoint.now = function()
{
  return fan.std.TimePoint.make(fan.std.TimePoint.nowMillis());
}
fan.std.TimePoint.fromMillis = function(m)
{
  return fan.std.TimePoint.make(m);
}
fan.std.TimePoint.fromSec = function(sec)
{
  return fan.std.TimePoint.make(fan.sys.Int.mult(sec,1000));
}
fan.std.TimePoint.prototype.toMillis = function()
{
  return this.m_ticks;
}
fan.std.TimePoint.prototype.toSec = function()
{
  return fan.sys.Int.div(this.m_ticks,1000);
}
fan.std.TimePoint.prototype.equals = function(that)
{
  if (fan.sys.ObjUtil.is(that,fan.std.TimePoint.$type))
  {
    return fan.sys.ObjUtil.equals(this.m_ticks,fan.sys.ObjUtil.coerce(that,fan.std.TimePoint.$type).m_ticks);
  }
  ;
  return false;
}
fan.std.TimePoint.prototype.hash = function()
{
  return this.m_ticks;
}
fan.std.TimePoint.prototype.compare = function(that)
{
  return fan.sys.Int.minus(this.m_ticks,fan.sys.ObjUtil.coerce(that,fan.std.TimePoint.$type).m_ticks);
}
fan.std.TimePoint.prototype.toStr = function()
{
  return fan.sys.Int.toStr(this.m_ticks);
}
fan.std.TimePoint.fromStr = function(s)
{
  return fan.std.TimePoint.make(fan.sys.Str.toInt(s));
}
fan.std.TimePoint.prototype.minusDateTime = function(time)
{
  return fan.std.Duration.fromMillis(fan.sys.Int.minus(this.m_ticks,time.m_ticks));
}
fan.std.TimePoint.prototype.plus = function(duration)
{
  return fan.std.TimePoint.make(fan.sys.Int.plus(this.m_ticks,duration.toMillis()));
}
fan.std.TimePoint.prototype.minus = function(duration)
{
  return fan.std.TimePoint.make(fan.sys.Int.minus(this.m_ticks,duration.toMillis()));
}
fan.std.TimePoint.prototype.floor = function(accuracy)
{
  if (fan.sys.ObjUtil.equals(fan.sys.Int.mod(this.toMillis(),accuracy.toMillis()),0))
  {
    return this;
  }
  ;
  return fan.std.TimePoint.fromMillis(fan.sys.Int.minus(this.toMillis(),fan.sys.Int.mod(this.toMillis(),accuracy.toMillis())));
}
fan.std.TimePoint.static$init = function()
{
  if (fan.std.TimePoint.static$inited) return;
  fan.std.TimePoint.static$inited = true;
  fan.std.TimePoint.m_epoch = fan.std.TimePoint.make(0);
  return;
}
fan.std.TimePoint.prototype.m_ticks = 0;
fan.std.TimePoint.m_epoch = null;
fan.std.TimePointPeer = function(){}
fan.std.TimePointPeer.nowMillis = function() {
	var d = new Date();
	return d.getTime();
}
fan.std.TimePointPeer.nanoTicks = function() {
	var d = new Date();
	return d.getTime() * fan.std.Duration.nsPerMilli;
}
fan.std.TimePointPeer.nowUniqueLast = 0;
fan.std.TimePointPeer.nowUnique = function() {
	var d = new Date();
	var now = d.getTime();
	if (now <= fan.std.TimePointPeer.nowUniqueLast)
		now = fan.std.TimePointPeer.nowUniqueLast + 1;
	fan.std.TimePointPeer.nowUniqueLast = now;
	return now;
}
fan.std.Weekday = fan.sys.Obj.$extend(fan.sys.Enum);
fan.std.Weekday.prototype.$ctor = function()
{
  fan.sys.Enum.prototype.$ctor.call(this);
  this.peer = new fan.sys.EnumPeer(this);
  var $this = this;
}
fan.std.Weekday.prototype.$typeof = function() { return fan.std.Weekday.$type; }
fan.std.Weekday.make = function($ordinal,$name,fullName) {
  var self = new fan.std.Weekday();
  fan.std.Weekday.make$(self,$ordinal,$name,fullName);
  return self;
  }
fan.std.Weekday.make$ = function(self,$ordinal,$name,fullName)
{
  fan.sys.Enum.make$(self,$ordinal,$name);
  self.m_fullName = fullName;
  self.m_abbrName = fan.std.StrExt.capitalize(self.$name());
  return;
}
fan.std.Weekday.prototype.increment = function()
{
  var o = fan.sys.Int.plus(this.ordinal(),1);
  o = fan.sys.Int.mod(o,7);
  return ((fan.std.Weekday.static$init ? fan.std.Weekday.static$init() : null),fan.std.Weekday.m_vals).get(o);
}
fan.std.Weekday.prototype.decrement = function()
{
  var o = fan.sys.Int.minus(this.ordinal(),1);
  o = fan.sys.Int.mod(o,7);
  return ((fan.std.Weekday.static$init ? fan.std.Weekday.static$init() : null),fan.std.Weekday.m_vals).get(o);
}
fan.std.Weekday.prototype.toLocale = function(pattern,locale)
{
  if (pattern === undefined) pattern = null;
  if (locale === undefined) locale = fan.std.Locale.cur();
  if ((pattern == null || fan.sys.ObjUtil.equals(pattern,"WWW")))
  {
    return this.m_abbrName;
  }
  else
  {
    if (fan.sys.ObjUtil.equals(pattern,"WWWW"))
    {
      return this.m_fullName;
    }
    ;
  }
  ;
  throw fan.sys.ArgErr.make(fan.sys.ObjUtil.coerce(pattern,fan.sys.Str.$type));
}
fan.std.Weekday.prototype.localeAbbr = function()
{
  return this.m_abbrName;
}
fan.std.Weekday.prototype.localeFull = function()
{
  return this.m_fullName;
}
fan.std.Weekday.localeStartOfWeek = function()
{
  return ((fan.std.Weekday.static$init ? fan.std.Weekday.static$init() : null),fan.std.Weekday.m_sun);
}
fan.std.Weekday.localeVals = function()
{
  return ((fan.std.Weekday.static$init ? fan.std.Weekday.static$init() : null),fan.std.Weekday.m_vals);
}
fan.std.Weekday.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.sys.Enum.doFromStr("std::Weekday",$name,checked),fan.std.Weekday.$type.toNullable());
}
fan.std.Weekday.static$init = function()
{
  if (fan.std.Weekday.static$inited) return;
  fan.std.Weekday.static$inited = true;
  fan.std.Weekday.m_sun = fan.std.Weekday.make(0,"sun","Sunday");
  fan.std.Weekday.m_mon = fan.std.Weekday.make(1,"mon","Monday");
  fan.std.Weekday.m_tue = fan.std.Weekday.make(2,"tue","Tuesday");
  fan.std.Weekday.m_wed = fan.std.Weekday.make(3,"wed","Wednesday");
  fan.std.Weekday.m_thu = fan.std.Weekday.make(4,"thu","Thursday");
  fan.std.Weekday.m_fri = fan.std.Weekday.make(5,"fri","Friday");
  fan.std.Weekday.m_sat = fan.std.Weekday.make(6,"sat","Saturday");
  fan.std.Weekday.m_vals = fan.sys.ObjUtil.coerce((function($this) { var $_u138 = fan.sys.List.make(fan.std.Weekday.$type, [((fan.std.Weekday.static$init ? fan.std.Weekday.static$init() : null),fan.std.Weekday.m_sun),((fan.std.Weekday.static$init ? fan.std.Weekday.static$init() : null),fan.std.Weekday.m_mon),((fan.std.Weekday.static$init ? fan.std.Weekday.static$init() : null),fan.std.Weekday.m_tue),((fan.std.Weekday.static$init ? fan.std.Weekday.static$init() : null),fan.std.Weekday.m_wed),((fan.std.Weekday.static$init ? fan.std.Weekday.static$init() : null),fan.std.Weekday.m_thu),((fan.std.Weekday.static$init ? fan.std.Weekday.static$init() : null),fan.std.Weekday.m_fri),((fan.std.Weekday.static$init ? fan.std.Weekday.static$init() : null),fan.std.Weekday.m_sat)]); if ($_u138 == null) return null; return fan.sys.ObjUtil.toImmutable($_u138); })(this),fan.std.Type.find("sys::List<std::Weekday>"));
  if (true)
  {
  }
  ;
  return;
}
fan.std.Weekday.m_sun = null;
fan.std.Weekday.m_mon = null;
fan.std.Weekday.m_tue = null;
fan.std.Weekday.m_wed = null;
fan.std.Weekday.m_thu = null;
fan.std.Weekday.m_fri = null;
fan.std.Weekday.m_sat = null;
fan.std.Weekday.m_vals = null;
fan.std.Weekday.prototype.m_fullName = null;
fan.std.Weekday.prototype.m_abbrName = null;
fan.std.Month = fan.sys.Obj.$extend(fan.sys.Enum);
fan.std.Month.prototype.$ctor = function()
{
  fan.sys.Enum.prototype.$ctor.call(this);
  this.peer = new fan.sys.EnumPeer(this);
  var $this = this;
}
fan.std.Month.prototype.$typeof = function() { return fan.std.Month.$type; }
fan.std.Month.make = function($ordinal,$name,fullName) {
  var self = new fan.std.Month();
  fan.std.Month.make$(self,$ordinal,$name,fullName);
  return self;
  }
fan.std.Month.make$ = function(self,$ordinal,$name,fullName)
{
  fan.sys.Enum.make$(self,$ordinal,$name);
  self.m_fullName = fullName;
  self.m_abbrName = fan.std.StrExt.capitalize(self.$name());
  return;
}
fan.std.Month.prototype.increment = function()
{
  var m = fan.sys.Int.mod(fan.sys.Int.plus(this.ordinal(),1),((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_vals).size());
  return ((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_vals).get(m);
}
fan.std.Month.prototype.decrement = function()
{
  var m = fan.sys.Int.mod(fan.sys.Int.minus(this.ordinal(),1),((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_vals).size());
  return ((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_vals).get(m);
}
fan.std.Month.prototype.numDays = function(year)
{
  if (fan.std.DateTime.isLeapYear(year))
  {
    return ((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_daysInMonLeap).get(this.ordinal());
  }
  else
  {
    return ((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_daysInMon).get(this.ordinal());
  }
  ;
}
fan.std.Month.prototype.toLocale = function(pattern,locale)
{
  if (pattern === undefined) pattern = null;
  if (locale === undefined) locale = fan.std.Locale.cur();
  var $this = this;
  if (pattern == null)
  {
    pattern = "MMM";
  }
  else
  {
    if ((fan.sys.ObjUtil.equals(fan.sys.Str.size(pattern),0) || fan.sys.ObjUtil.compareGT(fan.sys.Str.size(pattern),4)))
    {
      throw fan.sys.ArgErr.make(fan.sys.ObjUtil.coerce(pattern,fan.sys.Str.$type));
    }
    ;
    if (fan.sys.Str.any(pattern,fan.sys.Func.make$closure(
      fan.std.$clos$_u51,
      function(it,ignoreparam$1)
      {
        return fan.sys.ObjUtil.compareNE(it,77);
      })))
    {
      throw fan.sys.ArgErr.make(fan.sys.ObjUtil.coerce(pattern,fan.sys.Str.$type));
    }
    ;
  }
  ;
  var $_u139 = fan.sys.Str.size(pattern);
  if (fan.sys.ObjUtil.equals($_u139,1))
  {
    return fan.sys.Int.toStr(fan.sys.Int.plus(this.ordinal(),1));
  }
  else if (fan.sys.ObjUtil.equals($_u139,2))
  {
    return (function($this) { if (fan.sys.ObjUtil.compareLT($this.ordinal(),9)) return fan.sys.Str.plus("0",fan.sys.Int.toStr(fan.sys.Int.plus($this.ordinal(),1))); return fan.sys.Int.toStr(fan.sys.Int.plus($this.ordinal(),1)); })(this);
  }
  else if (fan.sys.ObjUtil.equals($_u139,3))
  {
    return this.m_abbrName;
  }
  else if (fan.sys.ObjUtil.equals($_u139,4))
  {
    return this.m_fullName;
  }
  ;
  return this.m_abbrName;
}
fan.std.Month.prototype.localeAbbr = function()
{
  return this.m_abbrName;
}
fan.std.Month.prototype.localeFull = function()
{
  return this.m_fullName;
}
fan.std.Month.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.sys.Enum.doFromStr("std::Month",$name,checked),fan.std.Month.$type.toNullable());
}
fan.std.Month.static$init = function()
{
  if (fan.std.Month.static$inited) return;
  fan.std.Month.static$inited = true;
  fan.std.Month.m_jan = fan.std.Month.make(0,"jan","January");
  fan.std.Month.m_feb = fan.std.Month.make(1,"feb","February");
  fan.std.Month.m_mar = fan.std.Month.make(2,"mar","March");
  fan.std.Month.m_apr = fan.std.Month.make(3,"apr","April");
  fan.std.Month.m_may = fan.std.Month.make(4,"may","May");
  fan.std.Month.m_jun = fan.std.Month.make(5,"jun","June");
  fan.std.Month.m_jul = fan.std.Month.make(6,"jul","July");
  fan.std.Month.m_aug = fan.std.Month.make(7,"aug","August");
  fan.std.Month.m_sep = fan.std.Month.make(8,"sep","September");
  fan.std.Month.m_oct = fan.std.Month.make(9,"oct","October");
  fan.std.Month.m_nov = fan.std.Month.make(10,"nov","November");
  fan.std.Month.m_dec = fan.std.Month.make(11,"dec","December");
  fan.std.Month.m_vals = fan.sys.ObjUtil.coerce((function($this) { var $_u141 = fan.sys.List.make(fan.std.Month.$type, [((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_jan),((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_feb),((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_mar),((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_apr),((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_may),((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_jun),((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_jul),((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_aug),((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_sep),((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_oct),((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_nov),((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_dec)]); if ($_u141 == null) return null; return fan.sys.ObjUtil.toImmutable($_u141); })(this),fan.std.Type.find("sys::List<std::Month>"));
  if (true)
  {
  }
  ;
  fan.std.Month.m_daysInMon = fan.sys.ObjUtil.coerce((function($this) { var $_u142 = fan.sys.List.make(fan.sys.Int.$type, [fan.sys.ObjUtil.coerce(31,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(28,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(31,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(30,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(31,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(30,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(31,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(31,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(30,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(31,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(30,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(31,fan.sys.Obj.$type.toNullable())]); if ($_u142 == null) return null; return fan.sys.ObjUtil.toImmutable($_u142); })(this),fan.std.Type.find("sys::List<sys::Int>"));
  fan.std.Month.m_daysInMonLeap = fan.sys.ObjUtil.coerce((function($this) { var $_u143 = fan.sys.List.make(fan.sys.Int.$type, [fan.sys.ObjUtil.coerce(31,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(29,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(31,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(30,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(31,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(30,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(31,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(31,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(30,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(31,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(30,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(31,fan.sys.Obj.$type.toNullable())]); if ($_u143 == null) return null; return fan.sys.ObjUtil.toImmutable($_u143); })(this),fan.std.Type.find("sys::List<sys::Int>"));
  return;
}
fan.std.Month.m_jan = null;
fan.std.Month.m_feb = null;
fan.std.Month.m_mar = null;
fan.std.Month.m_apr = null;
fan.std.Month.m_may = null;
fan.std.Month.m_jun = null;
fan.std.Month.m_jul = null;
fan.std.Month.m_aug = null;
fan.std.Month.m_sep = null;
fan.std.Month.m_oct = null;
fan.std.Month.m_nov = null;
fan.std.Month.m_dec = null;
fan.std.Month.m_vals = null;
fan.std.Month.prototype.m_fullName = null;
fan.std.Month.prototype.m_abbrName = null;
fan.std.Month.m_daysInMon = null;
fan.std.Month.m_daysInMonLeap = null;
fan.std.DateTime = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.DateTime.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.std.DateTimePeer(this);
  var $this = this;
}
fan.std.DateTime.prototype.$typeof = function() { return fan.std.DateTime.$type; }
fan.std.DateTime.now = function(tolerance)
{
  if (tolerance === undefined) tolerance = fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("250ms"),fan.std.Duration.$type.toNullable());
  return fan.std.DateTimePeer.now(tolerance);
}
fan.std.DateTime.nowUtc = function(tolerance)
{
  if (tolerance === undefined) tolerance = fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("250ms"),fan.std.Duration.$type.toNullable());
  return fan.std.DateTimePeer.nowUtc(tolerance);
}
fan.std.DateTime.nowTicks = function()
{
  return fan.std.TimePoint.nowMillis();
}
fan.std.DateTime.nowUnique = function()
{
  return fan.std.TimePoint.nowUnique();
}
fan.std.DateTime.fromTicks = function(ticks,tz)
{
  if (tz === undefined) tz = fan.std.TimeZone.cur();
  return fan.std.DateTimePeer.fromTicks(ticks,tz);
}
fan.std.DateTime.make = function(year,month,day,hour,min,sec,ns,tz)
{
  if (sec === undefined) sec = 0;
  if (ns === undefined) ns = 0;
  if (tz === undefined) tz = fan.std.TimeZone.cur();
  return fan.std.DateTimePeer.make(year,month,day,hour,min,sec,ns,tz);
}
fan.std.DateTime.privateMake = function(year,month,day,hour,min,sec,ns,ticks,dst,weekday,tz) {
  var self = new fan.std.DateTime();
  fan.std.DateTime.privateMake$(self,year,month,day,hour,min,sec,ns,ticks,dst,weekday,tz);
  return self;
  }
fan.std.DateTime.privateMake$ = function(self,year,month,day,hour,min,sec,ns,ticks,dst,weekday,tz)
{
  if (tz === undefined) tz = fan.std.TimeZone.cur();
  if ((fan.sys.ObjUtil.compareLT(month,0) || fan.sys.ObjUtil.compareGT(month,11)))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("month ",fan.sys.Int.toStr(month)));
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(day,1) || fan.sys.ObjUtil.compareGT(day,fan.std.DateTime.numDaysInMonth(year,month))))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("day ",fan.sys.ObjUtil.coerce(day,fan.sys.Obj.$type.toNullable())));
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(hour,0) || fan.sys.ObjUtil.compareGT(hour,23)))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("hour ",fan.sys.ObjUtil.coerce(hour,fan.sys.Obj.$type.toNullable())));
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(min,0) || fan.sys.ObjUtil.compareGT(min,59)))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("min ",fan.sys.ObjUtil.coerce(min,fan.sys.Obj.$type.toNullable())));
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(sec,0) || fan.sys.ObjUtil.compareGT(sec,59)))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("sec ",fan.sys.ObjUtil.coerce(sec,fan.sys.Obj.$type.toNullable())));
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(ns,0) || fan.sys.ObjUtil.compareGT(ns,999999999)))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("ns ",fan.sys.ObjUtil.coerce(ns,fan.sys.Obj.$type.toNullable())));
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(weekday,0) || fan.sys.ObjUtil.compareGT(weekday,6)))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("weekday ",fan.sys.ObjUtil.coerce(weekday,fan.sys.Obj.$type.toNullable())));
  }
  ;
  var fields = 0;
  fields = fan.sys.Int.or(fields,fan.sys.Int.shiftl(fan.sys.Int.and(sec,63),2));
  fields = fan.sys.Int.or(fields,fan.sys.Int.shiftl(fan.sys.Int.and(month,15),8));
  fields = fan.sys.Int.or(fields,fan.sys.Int.shiftl(fan.sys.Int.and(day,31),12));
  fields = fan.sys.Int.or(fields,fan.sys.Int.shiftl(fan.sys.Int.and(hour,31),17));
  fields = fan.sys.Int.or(fields,fan.sys.Int.shiftl(fan.sys.Int.and(min,63),22));
  fields = fan.sys.Int.or(fields,fan.sys.Int.shiftl(fan.sys.Int.and(weekday,7),28));
  fields = fan.sys.Int.or(fields,fan.sys.Int.shiftl(dst,31));
  self.m_ticks = ticks;
  self.m_timeZone = tz;
  self.m_yearField = year;
  self.m_fields = fields;
  return;
}
fan.std.DateTime.numDaysInMonth = function(year,month)
{
  return ((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_vals).get(month).numDays(year);
}
fan.std.DateTime.num = function(s,index)
{
  return fan.sys.Int.minus(fan.sys.Str.get(s,index),48);
}
fan.std.DateTime.fromStr = function(s,checked,iso)
{
  if (checked === undefined) checked = true;
  if (iso === undefined) iso = false;
  try
  {
    var year = fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.mult(fan.std.DateTime.num(s,0),1000),fan.sys.Int.mult(fan.std.DateTime.num(s,1),100)),fan.sys.Int.mult(fan.std.DateTime.num(s,2),10)),fan.std.DateTime.num(s,3));
    var month = fan.sys.Int.minus(fan.sys.Int.plus(fan.sys.Int.mult(fan.std.DateTime.num(s,5),10),fan.std.DateTime.num(s,6)),1);
    var day = fan.sys.Int.plus(fan.sys.Int.mult(fan.std.DateTime.num(s,8),10),fan.std.DateTime.num(s,9));
    var hour = fan.sys.Int.plus(fan.sys.Int.mult(fan.std.DateTime.num(s,11),10),fan.std.DateTime.num(s,12));
    var min = fan.sys.Int.plus(fan.sys.Int.mult(fan.std.DateTime.num(s,14),10),fan.std.DateTime.num(s,15));
    var sec = fan.sys.Int.plus(fan.sys.Int.mult(fan.std.DateTime.num(s,17),10),fan.std.DateTime.num(s,18));
    if ((fan.sys.ObjUtil.compareNE(fan.sys.Str.get(s,4),45) || fan.sys.ObjUtil.compareNE(fan.sys.Str.get(s,7),45) || fan.sys.ObjUtil.compareNE(fan.sys.Str.get(s,10),84) || fan.sys.ObjUtil.compareNE(fan.sys.Str.get(s,13),58) || fan.sys.ObjUtil.compareNE(fan.sys.Str.get(s,16),58)))
    {
      throw fan.sys.Err.make();
    }
    ;
    var i = 19;
    var ns = 0;
    var tenth = 100000000;
    if (fan.sys.ObjUtil.equals(fan.sys.Str.get(s,i),46))
    {
      i = fan.sys.Int.increment(i);
      while (true)
      {
        var c = fan.sys.Str.get(s,i);
        if ((fan.sys.ObjUtil.compareLT(c,48) || fan.sys.ObjUtil.compareGT(c,57)))
        {
          break;
        }
        ;
        ns = fan.sys.Int.plus(ns,fan.sys.Int.mult(fan.sys.Int.minus(c,48),tenth));
        tenth = fan.sys.Int.div(tenth,10);
        i = fan.sys.Int.increment(i);
      }
      ;
    }
    ;
    var offset = 0;
    var c = fan.sys.Str.get(s,(function($this) { var $_u144 = i; i = fan.sys.Int.increment(i); return $_u144; })(this));
    if (fan.sys.ObjUtil.compareNE(c,90))
    {
      var offHour = fan.sys.Int.plus(fan.sys.Int.mult(fan.std.DateTime.num(s,(function($this) { var $_u145 = i; i = fan.sys.Int.increment(i); return $_u145; })(this)),10),fan.std.DateTime.num(s,(function($this) { var $_u146 = i; i = fan.sys.Int.increment(i); return $_u146; })(this)));
      if (fan.sys.ObjUtil.compareNE(fan.sys.Str.get(s,(function($this) { var $_u147 = i; i = fan.sys.Int.increment(i); return $_u147; })(this)),58))
      {
        throw fan.sys.Err.make();
      }
      ;
      var offMin = fan.sys.Int.plus(fan.sys.Int.mult(fan.std.DateTime.num(s,(function($this) { var $_u148 = i; i = fan.sys.Int.increment(i); return $_u148; })(this)),10),fan.std.DateTime.num(s,(function($this) { var $_u149 = i; i = fan.sys.Int.increment(i); return $_u149; })(this)));
      offset = fan.sys.Int.plus(fan.sys.Int.mult(offHour,3600),fan.sys.Int.mult(offMin,60));
      if (fan.sys.ObjUtil.equals(c,45))
      {
        offset = fan.sys.Int.negate(offset);
      }
      else
      {
        if (fan.sys.ObjUtil.compareNE(c,43))
        {
          throw fan.sys.Err.make();
        }
        ;
      }
      ;
    }
    ;
    var tz = null;
    if (iso)
    {
      if (fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(s)))
      {
        throw fan.sys.Err.make();
      }
      ;
      tz = fan.std.TimeZone.fromGmtOffset(offset);
    }
    else
    {
      if (fan.sys.ObjUtil.compareNE(fan.sys.Str.get(s,(function($this) { var $_u150 = i; i = fan.sys.Int.increment(i); return $_u150; })(this)),32))
      {
        throw fan.sys.Err.make();
      }
      ;
      tz = fan.std.TimeZone.fromStr(fan.sys.Str.getRange(s,fan.sys.Range.make(i,-1)),true);
    }
    ;
    var dt = fan.std.DateTime.make(year,((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_vals).get(month),day,hour,min,sec,ns,fan.sys.ObjUtil.coerce(tz,fan.std.TimeZone.$type));
    return dt;
  }
  catch ($_u151)
  {
    $_u151 = fan.sys.Err.make($_u151);
    if ($_u151 instanceof fan.sys.ParseErr)
    {
      var e = $_u151;
      var e;
      if (!checked)
      {
        return ((fan.std.DateTime.static$init ? fan.std.DateTime.static$init() : null),fan.std.DateTime.m_defVal);
      }
      ;
      throw e;
    }
    else if ($_u151 instanceof fan.sys.Err)
    {
      var e = $_u151;
      var e;
      if (!checked)
      {
        return ((fan.std.DateTime.static$init ? fan.std.DateTime.static$init() : null),fan.std.DateTime.m_defVal);
      }
      ;
      throw fan.sys.ParseErr.make(fan.sys.Str.plus("DateTime:",s),e);
    }
    else
    {
      throw $_u151;
    }
  }
  ;
}
fan.std.DateTime.prototype.equals = function(that)
{
  if (fan.sys.ObjUtil.is(that,fan.std.DateTime.$type))
  {
    return fan.sys.ObjUtil.equals(this.m_ticks,fan.sys.ObjUtil.coerce(that,fan.std.DateTime.$type).m_ticks);
  }
  ;
  return false;
}
fan.std.DateTime.prototype.hash = function()
{
  return this.m_ticks;
}
fan.std.DateTime.prototype.compare = function(that)
{
  return fan.sys.Int.minus(this.m_ticks,fan.sys.ObjUtil.coerce(that,fan.std.DateTime.$type).m_ticks);
}
fan.std.DateTime.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.sys.Str.plus(this.toLocale("YYYY-MM-DD'T'hh:mm:ss.FFFz")," "),this.tz().m_fullName);
}
fan.std.DateTime.prototype.date = function()
{
  return fan.std.Date.make(this.year(),this.month(),this.day());
}
fan.std.DateTime.prototype.time = function()
{
  return fan.std.TimeOfDay.make(this.hour(),this.min(),this.sec(),this.nanoSec());
}
fan.std.DateTime.prototype.year = function()
{
  return this.m_yearField;
}
fan.std.DateTime.prototype.month = function()
{
  return ((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_vals).get(fan.sys.Int.and(fan.sys.Int.shiftr(this.m_fields,8),15));
}
fan.std.DateTime.prototype.day = function()
{
  return fan.sys.Int.and(fan.sys.Int.shiftr(this.m_fields,12),31);
}
fan.std.DateTime.prototype.hour = function()
{
  return fan.sys.Int.and(fan.sys.Int.shiftr(this.m_fields,17),31);
}
fan.std.DateTime.prototype.min = function()
{
  return fan.sys.Int.and(fan.sys.Int.shiftr(this.m_fields,22),63);
}
fan.std.DateTime.prototype.sec = function()
{
  return fan.sys.Int.and(fan.sys.Int.shiftr(this.m_fields,2),63);
}
fan.std.DateTime.prototype.nanoSec = function()
{
  return fan.sys.Int.mult(fan.sys.Int.mod(this.m_ticks,((fan.std.Duration.static$init ? fan.std.Duration.static$init() : null),fan.std.Duration.m_milliPerSec)),1000000);
}
fan.std.DateTime.prototype.weekday = function()
{
  return ((fan.std.Weekday.static$init ? fan.std.Weekday.static$init() : null),fan.std.Weekday.m_vals).get(fan.sys.Int.and(fan.sys.Int.shiftr(this.m_fields,28),7));
}
fan.std.DateTime.prototype.tz = function()
{
  return this.m_timeZone;
}
fan.std.DateTime.prototype.dst = function()
{
  return fan.sys.ObjUtil.compareNE(fan.sys.Int.and(fan.sys.Int.shiftr(this.m_fields,31),1),0);
}
fan.std.DateTime.prototype.tzAbbr = function()
{
  return fan.sys.ObjUtil.coerce((function($this) { if ($this.dst()) return $this.tz().dstAbbr($this.year()); return $this.tz().stdAbbr($this.year()); })(this),fan.sys.Str.$type);
}
fan.std.DateTime.prototype.dayOfYear = function()
{
  return this.peer.dayOfYear(this);
}
fan.std.DateTime.prototype.weekOfYear = function(startOfWeek)
{
  if (startOfWeek === undefined) startOfWeek = fan.std.Weekday.localeStartOfWeek();
  return this.peer.weekOfYear(this,startOfWeek);
}
fan.std.DateTime.prototype.hoursInDay = function()
{
  return this.peer.hoursInDay(this);
}
fan.std.DateTime.prototype.toLocale = function(pattern,locale)
{
  if (pattern === undefined) pattern = null;
  if (locale === undefined) locale = fan.std.Locale.cur();
  return this.peer.toLocale(this,pattern,locale);
}
fan.std.DateTime.fromLocale = function(str,pattern,tz,checked)
{
  if (tz === undefined) tz = fan.std.TimeZone.cur();
  if (checked === undefined) checked = true;
  return fan.std.DateTimePeer.fromLocale(str,pattern,tz,checked);
}
fan.std.DateTime.prototype.toTimeZone = function(tz)
{
  if (fan.sys.ObjUtil.equals(this.tz(),tz))
  {
    return this;
  }
  ;
  if ((fan.sys.ObjUtil.equals(tz,((fan.std.TimeZone.static$init ? fan.std.TimeZone.static$init() : null),fan.std.TimeZone.m_rel)) || fan.sys.ObjUtil.equals(this.tz(),((fan.std.TimeZone.static$init ? fan.std.TimeZone.static$init() : null),fan.std.TimeZone.m_rel))))
  {
    return fan.std.DateTime.make(this.year(),this.month(),this.day(),this.hour(),this.min(),this.sec(),this.nanoSec(),tz);
  }
  ;
  return fan.std.DateTime.fromTicks(this.m_ticks,tz);
}
fan.std.DateTime.prototype.toUtc = function()
{
  return this.toTimeZone(((fan.std.TimeZone.static$init ? fan.std.TimeZone.static$init() : null),fan.std.TimeZone.m_utc));
}
fan.std.DateTime.prototype.toRel = function()
{
  return this.toTimeZone(((fan.std.TimeZone.static$init ? fan.std.TimeZone.static$init() : null),fan.std.TimeZone.m_rel));
}
fan.std.DateTime.prototype.minusDateTime = function(time)
{
  return fan.std.Duration.fromDateTime(fan.sys.Int.minus(this.m_ticks,time.m_ticks));
}
fan.std.DateTime.prototype.plus = function(duration)
{
  return fan.std.DateTime.fromTicks(fan.sys.Int.plus(this.m_ticks,duration.toMillis()),this.tz());
}
fan.std.DateTime.prototype.minus = function(duration)
{
  return fan.std.DateTime.fromTicks(fan.sys.Int.minus(this.m_ticks,duration.toMillis()));
}
fan.std.DateTime.prototype.floor = function(accuracy)
{
  if (fan.sys.ObjUtil.equals(fan.sys.Int.mod(this.m_ticks,accuracy.toMillis()),0))
  {
    return this;
  }
  ;
  return fan.std.DateTime.fromTicks(fan.sys.Int.minus(this.m_ticks,fan.sys.Int.mod(this.m_ticks,accuracy.toMillis())),this.tz());
}
fan.std.DateTime.prototype.midnight = function()
{
  return fan.std.DateTime.make(this.year(),this.month(),this.day(),0,0,0,0,this.tz());
}
fan.std.DateTime.prototype.isMidnight = function()
{
  return (fan.sys.ObjUtil.equals(this.hour(),0) && fan.sys.ObjUtil.equals(this.min(),0) && fan.sys.ObjUtil.equals(this.sec(),0) && fan.sys.ObjUtil.equals(this.nanoSec(),0));
}
fan.std.DateTime.isLeapYear = function(year)
{
  if (fan.sys.ObjUtil.compareNE(fan.sys.Int.and(year,3),0))
  {
    return false;
  }
  ;
  return (fan.sys.ObjUtil.compareNE(fan.sys.Int.mod(year,100),0) || fan.sys.ObjUtil.equals(fan.sys.Int.mod(year,400),0));
}
fan.std.DateTime.weekdayInMonth = function(year,mon,weekday,pos)
{
  return fan.std.DateTimePeer.weekdayInMonth(year,mon,weekday,pos);
}
fan.std.DateTime.fromJava = function(millis,tz,negIsNull)
{
  if (tz === undefined) tz = fan.std.TimeZone.cur();
  if (negIsNull === undefined) negIsNull = true;
  if ((negIsNull && fan.sys.ObjUtil.compareLE(millis,0)))
  {
    return null;
  }
  ;
  return fan.sys.ObjUtil.coerce(fan.std.DateTime.fromTicks(millis,tz),fan.std.DateTime.$type.toNullable());
}
fan.std.DateTime.prototype.toJava = function()
{
  return this.m_ticks;
}
fan.std.DateTime.prototype.toTimePoint = function()
{
  return fan.std.TimePoint.fromMillis(this.m_ticks);
}
fan.std.DateTime.fromTimePoint = function(tp,tz)
{
  if (tz === undefined) tz = fan.std.TimeZone.cur();
  return fan.std.DateTime.fromTicks(tp.toMillis(),tz);
}
fan.std.DateTime.fromIso = function(s,checked)
{
  if (checked === undefined) checked = true;
  return fan.std.DateTime.fromLocale(s,"YYYY-MM-DD'T'hh:mm:ss.FFF",null,checked);
}
fan.std.DateTime.prototype.toIso = function()
{
  return this.toLocale("YYYY-MM-DD'T'hh:mm:ss.FFF");
}
fan.std.DateTime.fromHttpStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,((fan.std.DateTime.static$init ? fan.std.DateTime.static$init() : null),fan.std.DateTime.m_httpFormats).size()); i = fan.sys.Int.increment(i))
  {
    var dt = fan.std.DateTime.fromLocale(s,((fan.std.DateTime.static$init ? fan.std.DateTime.static$init() : null),fan.std.DateTime.m_httpFormats).get(i),null,false);
    if (dt != null)
    {
      return dt;
    }
    ;
  }
  ;
  if (checked)
  {
    throw fan.sys.ParseErr.make(fan.sys.Str.plus(fan.sys.Str.plus("Invalid HTTP DateTime: '",s),"'"));
  }
  ;
  return null;
}
fan.std.DateTime.prototype.toHttpStr = function()
{
  return fan.sys.Str.plus(this.toTimeZone(((fan.std.TimeZone.static$init ? fan.std.TimeZone.static$init() : null),fan.std.TimeZone.m_utc)).toLocale("WWW, DD MMM YYYY hh:mm:ss",((fan.std.Locale.static$init ? fan.std.Locale.static$init() : null),fan.std.Locale.m_en))," GMT");
}
fan.std.DateTime.prototype.toCode = function()
{
  if (fan.sys.ObjUtil.equals(this,fan.sys.ObjUtil.coerce(((fan.std.DateTime.static$init ? fan.std.DateTime.static$init() : null),fan.std.DateTime.m_defVal),fan.sys.Obj.$type.toNullable())))
  {
    return "DateTime.defVal";
  }
  ;
  return fan.sys.Str.plus(fan.sys.Str.plus("DateTime(\"",this.toStr()),"\")");
}
fan.std.DateTime.static$init = function()
{
  if (fan.std.DateTime.static$inited) return;
  fan.std.DateTime.static$inited = true;
  fan.std.DateTime.m_defVal = fan.std.DateTime.make(2000,((fan.std.Month.static$init ? fan.std.Month.static$init() : null),fan.std.Month.m_jan),1,0,0,0,0,((fan.std.TimeZone.static$init ? fan.std.TimeZone.static$init() : null),fan.std.TimeZone.m_utc));
  fan.std.DateTime.m_httpFormats = fan.sys.ObjUtil.coerce((function($this) { var $_u153 = fan.sys.List.make(fan.sys.Str.$type, ["WWW, DD MMM YYYY hh:mm:ss Z","W, DD-MMM-YY hh:mm:ss Z","WWW MMM D hh:mm:ss Z"]); if ($_u153 == null) return null; return fan.sys.ObjUtil.toImmutable($_u153); })(this),fan.std.Type.find("sys::List<sys::Str>"));
  return;
}
fan.std.DateTime.prototype.m_fields = 0;
fan.std.DateTime.prototype.m_yearField = 0;
fan.std.DateTime.prototype.m_ticks = 0;
fan.std.DateTime.prototype.m_timeZone = null;
fan.std.DateTime.m_defVal = null;
fan.std.DateTime.m_httpFormats = null;
fan.std.DateTimePeer = function(){}
fan.std.DateTimePeer.now = function(tolerance) {
	var d = new Date();
	var now = d.getMilliseconds();
	if (fan.std.DateTimePeer.cached === undefined) {
		fan.std.DateTimePeer.cached = fan.std.DateTime.fromTicks(0, fan.std.TimeZone.cur());
	}
    var c = fan.std.DateTimePeer.cached;
    if (tolerance != null && now - c.ticks <= tolerance.toMillis())
        return c;
    fan.std.DateTimePeer.cached = fan.std.DateTime.fromTicks(now, fan.std.TimeZone.cur());
    return fan.std.DateTimePeer.cached;
}
fan.std.DateTimePeer.nowUtc = function(tolerance) {
	var d = new Date();
	var now = d.getMilliseconds();
	if (fan.std.DateTimePeer.cachedUtc === undefined) {
		fan.std.DateTimePeer.cachedUtc = fan.std.DateTime.fromTicks(0, fan.std.TimeZone.utc());
	}
    var c = fan.std.DateTimePeer.cachedUtc;
    if (tolerance != null && now - c.ticks <= tolerance.toMillis())
        return c;
    fan.std.DateTimePeer.cachedUtc = fan.std.DateTime.fromTicks(now, fan.std.TimeZone.utc());
    return fan.std.DateTimePeer.cachedUtc;
}
fan.std.DateTimePeer.fromTicks = function(ticks, tz) {
	var d = new Date(ticks);
	var year = d.getFullYear();
	var month = d.getMonth();//base 0
	var day = d.getDate();//base 1
	var hour = d.getHours();
	var min = d.getMinutes();
	var sec = d.getSeconds();
	var ns = d.getMilliseconds()*1000000;
	var dst = 0;
	var weekday = d.getDay();
	if (year < 1901 || year > 2099) {
		System.out.println("ERROR");
	}
	var dt = fan.std.DateTime.privateMake(year, month, day, hour, min, sec, ns, ticks, dst, weekday, tz);
	return dt;
}
fan.std.DateTimePeer.make = function( year,  month,  day,  hour,  min,  sec,  ns,  tz) {
	var cal = new Date(year, month, day, hour, min, sec, ns/1000000);
	//cal.set(Calendar.MILLISECOND, (int)ns/1000000);
	var dst = 0;
	var weekday = cal.getDay();
	var ticks = cal.getTime();
	var dt = fan.std.DateTime.privateMake(year, month.ordinal(), day, hour, min, sec, ns, ticks, dst, weekday, tz);
	return dt;
}
fan.std.DateTimePeer.dayOfYear = function(self) {
	// Calendar c = toCalendar(self);
	// return c.get(Calendar.DAY_OF_YEAR);
	return 0
}
fan.std.DateTimePeer.weekOfYear = function(self, startOfWeek) {
	// Calendar c = toCalendar(self);
	// return c.get(Calendar.WEEK_OF_YEAR);
	return 0;
}
fan.std.DateTimePeer.hoursInDay = function(self) {
	var dst = 0
	return 24 + (dst/Duration.milliPerHr);
}
fan.std.DateTimePeer.toLocale = function( self,  pattern,  locale) {
	var date = new Date(self.toJava());
	var res = date.toISOString();
	return res;
}
fan.std.DateTimePeer.fromLocale = function(str,  pattern,  tz, checked) {
	try {
		var date = new Date(str)
		return fan.std.DateTime.fromJava(date.getTime(), tz);
	} catch (e) {
		if (checked) {
			throw fan.std.ParseErr.make(str);
		}
		return null;
	}
}
fan.std.DateTimePeer.weekdayInMonth = function( year,  mon,  weekday,  pos) {
    throw fan.sys.ArgErr.make("TODO: year:"+year+",month:"+mon +",weekday:"+weekday+",pos:"+pos);
}
fan.std.ObjDecoder = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.ObjDecoder.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_curt = -1;
  this.m_usings = fan.sys.List.make(fan.std.Using.$type);
  return;
}
fan.std.ObjDecoder.prototype.$typeof = function() { return fan.std.ObjDecoder.$type; }
fan.std.ObjDecoder.decode = function(s)
{
  return fan.sys.ObjUtil.coerce(fan.std.ObjDecoder.make(fan.std.StrExt.$in(s),null).readRootObj(),fan.sys.Obj.$type);
}
fan.std.ObjDecoder.make = function($in,options) {
  var self = new fan.std.ObjDecoder();
  fan.std.ObjDecoder.make$(self,$in,options);
  return self;
  }
fan.std.ObjDecoder.make$ = function(self,$in,options)
{
  ;
  self.m_tokenizer = fan.std.Tokenizer.make($in);
  self.m_options = options;
  self.consume();
  return;
}
fan.std.ObjDecoder.prototype.readRootObj = function()
{
  this.readHeader();
  return this.readObj(null,null,true);
}
fan.std.ObjDecoder.prototype.readHeader = function()
{
  while (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_USING)))
  {
    var u = this.readUsing();
    this.m_usings.add(u);
  }
  ;
  return;
}
fan.std.ObjDecoder.prototype.readUsing = function()
{
  var line = this.m_tokenizer.m_line;
  this.consume();
  var podName = this.consumeId("Expecting pod name");
  var pod = fan.std.Pod.find(podName,false);
  if (pod == null)
  {
    throw this.err(fan.sys.Str.plus("Unknown pod: ",podName));
  }
  ;
  if (fan.sys.ObjUtil.compareNE(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DOUBLE_COLON)))
  {
    this.endOfStmt(line);
    return fan.std.UsingPod.make(fan.sys.ObjUtil.coerce(pod,fan.std.Pod.$type));
  }
  ;
  this.consume();
  var typeName = this.consumeId("Expecting type name");
  var t = pod.type(typeName,false);
  if (t == null)
  {
    throw this.err(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Unknown type: ",podName),"::"),typeName));
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_AS)))
  {
    this.consume();
    typeName = this.consumeId("Expecting using as name");
  }
  ;
  this.endOfStmt(line);
  return fan.std.UsingType.make(fan.sys.ObjUtil.coerce(t,fan.std.Type.$type),typeName);
}
fan.std.ObjDecoder.prototype.readObj = function(curField,peekType,root)
{
  if (fan.std.Token.isLiteral(this.m_curt))
  {
    var val = this.m_tokenizer.m_val;
    this.consume();
    return val;
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LBRACKET)))
  {
    return this.readCollection(curField,peekType);
  }
  ;
  var line = this.m_tokenizer.m_line;
  var t = fan.sys.ObjUtil.coerce((function($this) { if (peekType != null) return peekType; return $this.readType(); })(this),fan.std.Type.$type);
  if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LPAREN)))
  {
    return this.readSimple(line,t);
  }
  else
  {
    if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_POUND)))
    {
      return this.readTypeOrSlotLiteral(line,t);
    }
    else
    {
      if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LBRACKET)))
      {
        return this.readCollection(curField,t);
      }
      else
      {
        return this.readComplex(line,t,root);
      }
      ;
    }
    ;
  }
  ;
}
fan.std.ObjDecoder.prototype.readTypeOrSlotLiteral = function(line,t)
{
  this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_POUND),"Expected '#' for type literal");
  if ((fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_ID)) && !this.isEndOfStmt(line)))
  {
    var slotName = this.consumeId("slot literal name");
    return fan.sys.ObjUtil.coerce(t.slot(slotName),fan.sys.Obj.$type);
  }
  else
  {
    return t;
  }
  ;
}
fan.std.ObjDecoder.prototype.readSimple = function(line,t)
{
  this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LPAREN),"Expected ( in simple");
  var str = this.consumeStr("Expected string literal for simple");
  this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RPAREN),"Expected ) in simple");
  var m = t.method("fromStr",false);
  if (m == null)
  {
    if (t.isJava())
    {
      m = t.method("valueOf",false);
    }
    ;
    if (m == null)
    {
      throw this.err(fan.sys.Str.plus(fan.sys.Str.plus("Missing method: ",t.qname()),".fromStr"),line);
    }
    ;
  }
  ;
  try
  {
    return fan.sys.ObjUtil.coerce(m.call(str),fan.sys.Obj.$type);
  }
  catch ($_u155)
  {
    $_u155 = fan.sys.Err.make($_u155);
    if ($_u155 instanceof fan.sys.ParseErr)
    {
      var e = $_u155;
      var e;
      throw fan.sys.ParseErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(e.msg()," [Line "),fan.sys.ObjUtil.coerce(line,fan.sys.Obj.$type.toNullable())),"]"),e);
    }
    else if ($_u155 instanceof fan.sys.Err)
    {
      var e = $_u155;
      var e;
      throw fan.sys.ParseErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(e.toStr()," [Line "),fan.sys.ObjUtil.coerce(line,fan.sys.Obj.$type.toNullable())),"]"),(function($this) { var $_u156 = m; if ($_u156 == null) return null; return $_u156.signature(); })(this)),e);
    }
    else
    {
      throw $_u155;
    }
  }
  ;
}
fan.std.ObjDecoder.prototype.readComplex = function(line,t,root)
{
  var $this = this;
  var toSet = fan.sys.ObjUtil.coerce(fan.std.Map.fromLiteral([],[],fan.std.Type.find("sys::Obj"),fan.std.Type.find("sys::Obj?")),fan.std.Type.find("std::Map<std::Field,sys::Obj?>"));
  var toAdd = fan.sys.List.make(fan.sys.Obj.$type.toNullable());
  this.readComplexFields(t,toSet,toAdd);
  var makeCtor = t.method("make",false);
  if ((makeCtor == null || !makeCtor.isPublic()))
  {
    throw this.err(fan.sys.Str.plus(fan.sys.Str.plus("Missing constructor ",t.qname()),".make"),line);
  }
  ;
  var args = null;
  if ((root && this.m_options != null))
  {
    args = fan.sys.ObjUtil.coerce(this.m_options.get("makeArgs"),fan.std.Type.find("sys::List<sys::Obj?>?"));
  }
  ;
  var obj = null;
  var setAfterCtor = true;
  try
  {
    var p = makeCtor.params().first();
    if ((args == null && p != null && p.type().fits(fan.std.Type.find("sys::Func<>")) && t.isConst()))
    {
      args = fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.std.Type.find("sys::Func<sys::Void,sys::Obj>"), [fan.std.Field.makeSetFunc(toSet)]),fan.std.Type.find("sys::List<sys::Obj?>?"));
      setAfterCtor = false;
    }
    ;
    obj = makeCtor.callList(args);
  }
  catch ($_u157)
  {
    $_u157 = fan.sys.Err.make($_u157);
    if ($_u157 instanceof fan.sys.Err)
    {
      var e = $_u157;
      var e;
      throw this.err(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Cannot make ",t),": "),e),line,e);
    }
    else
    {
      throw $_u157;
    }
  }
  ;
  if ((setAfterCtor && fan.sys.ObjUtil.compareGT(toSet.size(),0)))
  {
    toSet.each(fan.sys.Func.make$closure(
      fan.std.$clos$_u158,
      function(v,k)
      {
        $this.complexSet(fan.sys.ObjUtil.coerce(obj,fan.sys.Obj.$type),k,v,line);
        return;
      }));
  }
  ;
  if (fan.sys.ObjUtil.compareGT(toAdd.size(),0))
  {
    var addMethod = t.method("add",false);
    if (addMethod == null)
    {
      throw this.err(fan.sys.Str.plus(fan.sys.Str.plus("Method not found: ",t.qname()),".add"),line);
    }
    ;
    for (var i = 0; fan.sys.ObjUtil.compareLT(i,toAdd.size()); i = fan.sys.Int.increment(i))
    {
      this.complexAdd(t,fan.sys.ObjUtil.coerce(obj,fan.sys.Obj.$type),fan.sys.ObjUtil.coerce(addMethod,fan.std.Method.$type),fan.sys.ObjUtil.coerce(toAdd.get(i),fan.sys.Obj.$type),line);
    }
    ;
  }
  ;
  return fan.sys.ObjUtil.coerce(obj,fan.sys.Obj.$type);
}
fan.std.ObjDecoder.prototype.readComplexFields = function(t,toSet,toAdd)
{
  if (fan.sys.ObjUtil.compareNE(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LBRACE)))
  {
    return;
  }
  ;
  this.consume();
  while (fan.sys.ObjUtil.compareNE(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACE)))
  {
    var line = this.m_tokenizer.m_line;
    var readField = false;
    if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_ID)))
    {
      var $name = this.consumeId("Expected field name");
      if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_EQ)))
      {
        this.consume();
        this.readComplexSet(t,line,$name,toSet);
        readField = true;
      }
      else
      {
        this.m_tokenizer.pushUndo(this.m_tokenizer.m_type,this.m_tokenizer.m_val,this.m_tokenizer.m_line);
        this.m_curt = this.m_tokenizer.reset(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_ID),$name,line);
      }
      ;
    }
    ;
    if (!readField)
    {
      this.readComplexAdd(t,line,toAdd);
    }
    ;
    if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_COMMA)))
    {
      this.consume();
    }
    else
    {
      this.endOfStmt(line);
    }
    ;
  }
  ;
  this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACE),"Expected '}'");
  return;
}
fan.std.ObjDecoder.prototype.readComplexSet = function(t,line,$name,toSet)
{
  var field = t.field($name,false);
  if (field == null)
  {
    throw this.err(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Field not found: ",t.qname()),"."),$name),line);
  }
  ;
  var val = this.readObj(field,null,false);
  try
  {
    if (field.isConst())
    {
      val = (function($this) { var $_u159 = val; if ($_u159 == null) return null; return fan.sys.ObjUtil.toImmutable($_u159); })(this);
    }
    ;
  }
  catch ($_u160)
  {
    $_u160 = fan.sys.Err.make($_u160);
    if ($_u160 instanceof fan.sys.Err)
    {
      var ex = $_u160;
      var ex;
      throw this.err(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Cannot make object const for ",field.qname()),": "),ex),line,ex);
    }
    else
    {
      throw $_u160;
    }
  }
  ;
  toSet.set(fan.sys.ObjUtil.coerce(field,fan.std.Field.$type),val);
  return;
}
fan.std.ObjDecoder.prototype.complexSet = function(obj,field,val,line)
{
  try
  {
    if (field.isConst())
    {
      field._unsafeSet(obj,(function($this) { var $_u161 = val; if ($_u161 == null) return null; return fan.sys.ObjUtil.toImmutable($_u161); })(this),false);
    }
    else
    {
      field.set(obj,val);
    }
    ;
  }
  catch ($_u162)
  {
    $_u162 = fan.sys.Err.make($_u162);
    if ($_u162 instanceof fan.sys.Err)
    {
      var ex = $_u162;
      var ex;
      throw this.err(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Cannot set field ",field.qname()),": "),ex),line,ex);
    }
    else
    {
      throw $_u162;
    }
  }
  ;
  return;
}
fan.std.ObjDecoder.prototype.readComplexAdd = function(t,line,toAdd)
{
  var val = fan.sys.ObjUtil.coerce(this.readObj(null,null,false),fan.sys.Obj.$type);
  toAdd.add(val);
  return;
}
fan.std.ObjDecoder.prototype.complexAdd = function(t,obj,addMethod,val,line)
{
  try
  {
    addMethod.call(obj,val);
  }
  catch ($_u163)
  {
    $_u163 = fan.sys.Err.make($_u163);
    if ($_u163 instanceof fan.sys.Err)
    {
      var ex = $_u163;
      var ex;
      throw this.err(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Cannot call ",t.qname()),".add: "),ex),line,ex);
    }
    else
    {
      throw $_u163;
    }
  }
  ;
  return;
}
fan.std.ObjDecoder.prototype.readCollection = function(curField,t)
{
  this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LBRACKET),"Expecting '['");
  var peekType = null;
  if ((fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_ID)) && t == null))
  {
    peekType = this.readType(true);
    if ((fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACKET)) && peekType.fits(fan.std.Type.find("std::Map<>"))))
    {
      t = peekType;
      peekType = null;
      this.consume();
      while (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LRBRACKET)))
      {
        this.consume();
        t = fan.std.Type.find("sys::List<>");
      }
      ;
      if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_QUESTION)))
      {
        this.consume();
        t = t.toNullable();
      }
      ;
      if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_POUND)))
      {
        this.consume();
        return fan.sys.ObjUtil.coerce(t,fan.sys.Obj.$type);
      }
      ;
      this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LBRACKET),"Expecting '['");
    }
    ;
    if ((peekType != null && peekType.isJava()))
    {
      return fan.sys.ObjUtil.coerce(this.readObj(curField,peekType,false),fan.sys.Obj.$type);
    }
    ;
  }
  ;
  if ((fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_COMMA)) && peekType == null))
  {
    this.consume();
    this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACKET),"Expecting ']'");
    return fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type.toNullable()),fan.sys.Obj.$type);
  }
  ;
  if ((fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_COLON)) && peekType == null))
  {
    this.consume();
    this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACKET),"Expecting ']'");
    return fan.sys.ObjUtil.coerce(fan.std.Map.fromLiteral([],[],fan.std.Type.find("sys::Obj"),fan.std.Type.find("sys::Obj?")),fan.sys.Obj.$type);
  }
  ;
  var first = this.readObj(null,peekType,false);
  if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_COLON)))
  {
    return this.readMap(fan.sys.ObjUtil.coerce(first,fan.sys.Obj.$type));
  }
  else
  {
    return this.readList(first);
  }
  ;
}
fan.std.ObjDecoder.prototype.readList = function(first)
{
  var acc = fan.sys.List.make(fan.sys.Obj.$type.toNullable(), [first]);
  while (fan.sys.ObjUtil.compareNE(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACKET)))
  {
    this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_COMMA),"Expected ','");
    if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACKET)))
    {
      break;
    }
    ;
    acc.add(this.readObj(null,null,false));
  }
  ;
  this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACKET),"Expected ']'");
  return fan.sys.ObjUtil.coerce(acc,fan.sys.Obj.$type);
}
fan.std.ObjDecoder.prototype.readMap = function(firstKey)
{
  var map = fan.std.OrderedMap.make();
  this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_COLON),"Expected ':'");
  map.set(firstKey,this.readObj(null,null,false));
  while (fan.sys.ObjUtil.compareNE(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACKET)))
  {
    this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_COMMA),"Expected ','");
    if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACKET)))
    {
      break;
    }
    ;
    var key = fan.sys.ObjUtil.coerce(this.readObj(null,null,false),fan.sys.Obj.$type);
    this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_COLON),"Expected ':'");
    var val = this.readObj(null,null,false);
    map.set(key,val);
  }
  ;
  this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACKET),"Expected ']'");
  return fan.sys.ObjUtil.coerce(map,fan.sys.Obj.$type);
}
fan.std.ObjDecoder.prototype.readType = function(lbracket)
{
  if (lbracket === undefined) lbracket = false;
  var t = this.readSimpleType(lbracket);
  if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_QUESTION)))
  {
    this.consume();
    t = t.toNullable();
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_COLON)))
  {
    this.consume();
    var lbracket2 = fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LBRACKET));
    if (lbracket2)
    {
      this.consume();
    }
    ;
    t = this.readType(lbracket2);
    if (lbracket2)
    {
      this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACKET),"Expected closing ]");
    }
    ;
    t = fan.std.Type.find("std::Map<>");
  }
  ;
  while (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LRBRACKET)))
  {
    this.consume();
    t = fan.std.Type.find("sys::List<>");
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_QUESTION)))
  {
    this.consume();
    t = t.toNullable();
  }
  ;
  return t;
}
fan.std.ObjDecoder.prototype.readSimpleType = function(lbracket)
{
  var line = this.m_tokenizer.m_line;
  var n = this.consumeId("Expected type signature");
  var ffi = false;
  if ((fan.sys.ObjUtil.equals(n,"java") && lbracket))
  {
    ffi = true;
    this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACKET),"Expected ] in Java FFI [java]");
    n = fan.sys.Str.plus("[java]",this.consumeId("Expected Java FFI type name"));
    while ((fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DOT)) || fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DOLLAR))))
    {
      var symbol = fan.std.Token.toString(this.m_curt);
      this.consume();
      n = fan.sys.Str.plus(n,fan.sys.Str.plus(symbol,this.consumeId("Expected Java FFI type name")));
    }
    ;
  }
  ;
  if (fan.sys.ObjUtil.compareNE(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DOUBLE_COLON)))
  {
    for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_usings.size()); i = fan.sys.Int.increment(i))
    {
      var t = this.m_usings.get(i).resolve(n);
      if (t != null)
      {
        return fan.sys.ObjUtil.coerce(t,fan.std.Type.$type);
      }
      ;
    }
    ;
    throw this.err(fan.sys.Str.plus("Unresolved type name: ",n));
  }
  ;
  this.consumeAs(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DOUBLE_COLON),"Expected ::");
  var typeName = this.consumeId("Expected type name");
  if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DOLLAR)))
  {
    var symbol = fan.std.Token.toString(this.m_curt);
    this.consume();
    typeName = fan.sys.Str.plus(typeName,fan.sys.Str.plus(symbol,this.consumeId("Expected Java FFI type name")));
  }
  ;
  if (ffi)
  {
    return fan.sys.ObjUtil.coerce(fan.std.Type.find(fan.sys.Str.plus(fan.sys.Str.plus(n,"::"),typeName)),fan.std.Type.$type);
  }
  ;
  var pod = fan.std.Pod.find(n,false);
  if (pod == null)
  {
    throw this.err(fan.sys.Str.plus("Pod not found: ",n),line);
  }
  ;
  var type = pod.type(typeName,false);
  if (type == null)
  {
    throw this.err(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Type not found: ",n),"::"),typeName),line);
  }
  ;
  return fan.sys.ObjUtil.coerce(type,fan.std.Type.$type);
}
fan.std.ObjDecoder.prototype.err = function(msg,line,e)
{
  if (line === undefined) line = this.m_tokenizer.m_line;
  if (e === undefined) e = null;
  return fan.sys.IOErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(msg," [Line "),fan.sys.ObjUtil.coerce(line,fan.sys.Obj.$type.toNullable())),"]"),e);
}
fan.std.ObjDecoder.prototype.consumeId = function(expected)
{
  this.verify(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_ID),expected);
  var id = fan.sys.ObjUtil.coerce(this.m_tokenizer.m_val,fan.sys.Str.$type);
  this.consume();
  return id;
}
fan.std.ObjDecoder.prototype.consumeStr = function(expected)
{
  this.verify(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_STR_LITERAL),expected);
  var id = fan.sys.ObjUtil.coerce(this.m_tokenizer.m_val,fan.sys.Str.$type);
  this.consume();
  return id;
}
fan.std.ObjDecoder.prototype.consumeAs = function(type,expected)
{
  this.verify(type,expected);
  this.consume();
  return;
}
fan.std.ObjDecoder.prototype.verify = function(type,expected)
{
  if (fan.sys.ObjUtil.compareNE(this.m_curt,type))
  {
    throw this.err(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(expected,", not '"),fan.std.Token.toString(this.m_curt)),fan.sys.Str.plus("' ",this.m_tokenizer.m_val)));
  }
  ;
  return;
}
fan.std.ObjDecoder.prototype.consume = function()
{
  this.m_curt = this.m_tokenizer.next();
  return;
}
fan.std.ObjDecoder.prototype.isEndOfStmt = function(lastLine)
{
  if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_EOF)))
  {
    return true;
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_SEMICOLON)))
  {
    return true;
  }
  ;
  return fan.sys.ObjUtil.compareLT(lastLine,this.m_tokenizer.m_line);
}
fan.std.ObjDecoder.prototype.endOfStmt = function(lastLine)
{
  if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_EOF)))
  {
    return;
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_SEMICOLON)))
  {
    this.consume();
    return;
  }
  ;
  if (fan.sys.ObjUtil.compareLT(lastLine,this.m_tokenizer.m_line))
  {
    return;
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACE)))
  {
    return;
  }
  ;
  throw this.err(fan.sys.Str.plus(fan.sys.Str.plus("Expected end of statement: semicolon, newline, or end of block not '",fan.std.Token.toString(this.m_curt)),"'"));
}
fan.std.ObjDecoder.prototype.tokenizer = function()
{
  return this.m_tokenizer;
}
fan.std.ObjDecoder.prototype.tokenizer$ = function(it)
{
  this.m_tokenizer = it;
  return;
}
fan.std.ObjDecoder.prototype.curt = function()
{
  return this.m_curt;
}
fan.std.ObjDecoder.prototype.curt$ = function(it)
{
  this.m_curt = it;
  return;
}
fan.std.ObjDecoder.prototype.options = function()
{
  return this.m_options;
}
fan.std.ObjDecoder.prototype.options$ = function(it)
{
  this.m_options = it;
  return;
}
fan.std.ObjDecoder.prototype.usings = function()
{
  return this.m_usings;
}
fan.std.ObjDecoder.prototype.usings$ = function(it)
{
  this.m_usings = it;
  return;
}
fan.std.ObjDecoder.prototype.m_tokenizer = null;
fan.std.ObjDecoder.prototype.m_curt = 0;
fan.std.ObjDecoder.prototype.m_options = null;
fan.std.ObjDecoder.prototype.m_usings = null;
fan.std.Using = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Using.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.Using.prototype.$typeof = function() { return fan.std.Using.$type; }
fan.std.Using.make = function() {
  var self = new fan.std.Using();
  fan.std.Using.make$(self);
  return self;
  }
fan.std.Using.make$ = function(self)
{
  return;
}
fan.std.UsingPod = fan.sys.Obj.$extend(fan.std.Using);
fan.std.UsingPod.prototype.$ctor = function()
{
  fan.std.Using.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.UsingPod.prototype.$typeof = function() { return fan.std.UsingPod.$type; }
fan.std.UsingPod.make = function(p) {
  var self = new fan.std.UsingPod();
  fan.std.UsingPod.make$(self,p);
  return self;
  }
fan.std.UsingPod.make$ = function(self,p)
{
  fan.std.Using.make$(self);
  self.m_pod = fan.sys.ObjUtil.coerce((function($this) { var $_u164 = p; if ($_u164 == null) return null; return fan.sys.ObjUtil.toImmutable($_u164); })(self),fan.std.Pod.$type);
  return;
}
fan.std.UsingPod.prototype.resolve = function(n)
{
  return this.m_pod.type(n,false);
}
fan.std.UsingPod.prototype.m_pod = null;
fan.std.UsingType = fan.sys.Obj.$extend(fan.std.Using);
fan.std.UsingType.prototype.$ctor = function()
{
  fan.std.Using.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.UsingType.prototype.$typeof = function() { return fan.std.UsingType.$type; }
fan.std.UsingType.make = function(t,n) {
  var self = new fan.std.UsingType();
  fan.std.UsingType.make$(self,t,n);
  return self;
  }
fan.std.UsingType.make$ = function(self,t,n)
{
  fan.std.Using.make$(self);
  self.m_type = fan.sys.ObjUtil.coerce((function($this) { var $_u165 = t; if ($_u165 == null) return null; return fan.sys.ObjUtil.toImmutable($_u165); })(self),fan.std.Type.$type);
  self.m_$name = n;
  return;
}
fan.std.UsingType.prototype.resolve = function(n)
{
  return (function($this) { if (fan.sys.ObjUtil.equals($this.m_$name,n)) return $this.m_type; return null; })(this);
}
fan.std.UsingType.prototype.m_$name = null;
fan.std.UsingType.prototype.m_type = null;
fan.std.Tokenizer = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Tokenizer.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_type = -1;
  this.m_line = 1;
  this.m_cur = -1;
  this.m_curt = -1;
  this.m_peek = -1;
  this.m_peekt = -1;
  return;
}
fan.std.Tokenizer.prototype.$typeof = function() { return fan.std.Tokenizer.$type; }
fan.std.Tokenizer.make = function($in) {
  var self = new fan.std.Tokenizer();
  fan.std.Tokenizer.make$(self,$in);
  return self;
  }
fan.std.Tokenizer.make$ = function(self,$in)
{
  ;
  self.m_$in = $in;
  self.consume();
  self.consume();
  return;
}
fan.std.Tokenizer.prototype.next = function()
{
  if (this.m_undo != null)
  {
    this.m_undo.reset(this);
    this.m_undo = null;
    return this.m_type;
  }
  ;
  this.m_val = null;
  this.m_type = this.doNext();
  return this.m_type;
}
fan.std.Tokenizer.prototype.doNext = function()
{
  while (true)
  {
    while (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_SPACE)))
    {
      this.consume();
    }
    ;
    if (fan.sys.ObjUtil.compareLT(this.m_cur,0))
    {
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_EOF);
    }
    ;
    if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_ALPHA)))
    {
      return this.id();
    }
    ;
    if (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_DIGIT)))
    {
      return this.number(false);
    }
    ;
    var $_u167 = this.m_cur;
    if (fan.sys.ObjUtil.equals($_u167,43))
    {
      this.consume();
      return this.number(false);
    }
    else if (fan.sys.ObjUtil.equals($_u167,45))
    {
      this.consume();
      return this.number(true);
    }
    else if (fan.sys.ObjUtil.equals($_u167,34))
    {
      return this.str();
    }
    else if (fan.sys.ObjUtil.equals($_u167,39))
    {
      return this.ch();
    }
    else if (fan.sys.ObjUtil.equals($_u167,96))
    {
      return this.uri();
    }
    else if (fan.sys.ObjUtil.equals($_u167,40))
    {
      this.consume();
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LPAREN);
    }
    else if (fan.sys.ObjUtil.equals($_u167,41))
    {
      this.consume();
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RPAREN);
    }
    else if (fan.sys.ObjUtil.equals($_u167,44))
    {
      this.consume();
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_COMMA);
    }
    else if (fan.sys.ObjUtil.equals($_u167,59))
    {
      this.consume();
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_SEMICOLON);
    }
    else if (fan.sys.ObjUtil.equals($_u167,61))
    {
      this.consume();
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_EQ);
    }
    else if (fan.sys.ObjUtil.equals($_u167,123))
    {
      this.consume();
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LBRACE);
    }
    else if (fan.sys.ObjUtil.equals($_u167,125))
    {
      this.consume();
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACE);
    }
    else if (fan.sys.ObjUtil.equals($_u167,35))
    {
      this.consume();
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_POUND);
    }
    else if (fan.sys.ObjUtil.equals($_u167,63))
    {
      this.consume();
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_QUESTION);
    }
    else if (fan.sys.ObjUtil.equals($_u167,64))
    {
      this.consume();
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_AT);
    }
    else if (fan.sys.ObjUtil.equals($_u167,36))
    {
      this.consume();
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DOLLAR);
    }
    else if (fan.sys.ObjUtil.equals($_u167,46))
    {
      if (fan.sys.ObjUtil.equals(this.m_peekt,((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_DIGIT)))
      {
        return this.number(false);
      }
      ;
      this.consume();
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DOT);
    }
    else if (fan.sys.ObjUtil.equals($_u167,91))
    {
      this.consume();
      if (fan.sys.ObjUtil.equals(this.m_cur,93))
      {
        this.consume();
        return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LRBRACKET);
      }
      ;
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LBRACKET);
    }
    else if (fan.sys.ObjUtil.equals($_u167,93))
    {
      this.consume();
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACKET);
    }
    else if (fan.sys.ObjUtil.equals($_u167,58))
    {
      this.consume();
      if (fan.sys.ObjUtil.equals(this.m_cur,58))
      {
        this.consume();
        return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DOUBLE_COLON);
      }
      ;
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_COLON);
    }
    else if (fan.sys.ObjUtil.equals($_u167,42))
    {
      if (fan.sys.ObjUtil.equals(this.m_peek,42))
      {
        this.skipCommentSL();
        continue;
      }
      ;
      break;
    }
    else if (fan.sys.ObjUtil.equals($_u167,47))
    {
      if (fan.sys.ObjUtil.equals(this.m_peek,47))
      {
        this.skipCommentSL();
        continue;
      }
      ;
      if (fan.sys.ObjUtil.equals(this.m_peek,42))
      {
        this.skipCommentML();
        continue;
      }
      ;
      break;
    }
    ;
    throw this.err(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Unexpected symbol: ",fan.sys.Int.toChar(this.m_cur))," (0x"),fan.sys.Int.toHex(this.m_cur)),")"));
  }
  ;
  throw this.err("unreachable");
}
fan.std.Tokenizer.prototype.id = function()
{
  var s = fan.sys.StrBuf.make();
  var first = this.m_cur;
  while (((fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_ALPHA)) || fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_DIGIT))) && fan.sys.ObjUtil.compareGT(this.m_cur,0)))
  {
    s.addChar(this.m_cur);
    this.consume();
  }
  ;
  var val = s.toStr();
  var $_u168 = first;
  if (fan.sys.ObjUtil.equals($_u168,97))
  {
    if (fan.sys.ObjUtil.equals(val,"as"))
    {
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_AS);
    }
    ;
  }
  else if (fan.sys.ObjUtil.equals($_u168,102))
  {
    if (fan.sys.ObjUtil.equals(val,"false"))
    {
      this.m_val = fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable());
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_BOOL_LITERAL);
    }
    ;
  }
  else if (fan.sys.ObjUtil.equals($_u168,110))
  {
    if (fan.sys.ObjUtil.equals(val,"null"))
    {
      this.m_val = null;
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_NULL_LITERAL);
    }
    ;
  }
  else if (fan.sys.ObjUtil.equals($_u168,116))
  {
    if (fan.sys.ObjUtil.equals(val,"true"))
    {
      this.m_val = fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable());
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_BOOL_LITERAL);
    }
    ;
  }
  else if (fan.sys.ObjUtil.equals($_u168,117))
  {
    if (fan.sys.ObjUtil.equals(val,"using"))
    {
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_USING);
    }
    ;
  }
  ;
  this.m_val = val;
  return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_ID);
}
fan.std.Tokenizer.prototype.number = function(neg)
{
  if ((fan.sys.ObjUtil.equals(this.m_cur,48) && fan.sys.ObjUtil.equals(this.m_peek,120)))
  {
    return this.hex();
  }
  ;
  var s = null;
  var whole = 0;
  var wholeCount = 0;
  while (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_DIGIT)))
  {
    if (s != null)
    {
      s.addChar(this.m_cur);
    }
    else
    {
      whole = fan.sys.Int.plus(fan.sys.Int.mult(whole,10),fan.sys.Int.minus(this.m_cur,48));
      (function($this) { var $_u169 = wholeCount; wholeCount = fan.sys.Int.increment(wholeCount); return $_u169; })(this);
      if (fan.sys.ObjUtil.compareGE(wholeCount,18))
      {
        s = fan.sys.StrBuf.make(32);
        if (neg)
        {
          s.addChar(45);
        }
        ;
        s.add(fan.sys.ObjUtil.coerce(whole,fan.sys.Obj.$type.toNullable()));
      }
      ;
    }
    ;
    this.consume();
    if (fan.sys.ObjUtil.equals(this.m_cur,95))
    {
      this.consume();
    }
    ;
  }
  ;
  var floating = false;
  if ((fan.sys.ObjUtil.equals(this.m_cur,46) && fan.sys.ObjUtil.equals(this.m_peekt,((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_DIGIT))))
  {
    floating = true;
    if (s == null)
    {
      s = fan.sys.StrBuf.make(32);
      if (neg)
      {
        s.addChar(45);
      }
      ;
      s.add(fan.sys.ObjUtil.coerce(whole,fan.sys.Obj.$type.toNullable()));
    }
    ;
    s.addChar(46);
    this.consume();
    while (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_DIGIT)))
    {
      s.addChar(this.m_cur);
      this.consume();
      if (fan.sys.ObjUtil.equals(this.m_cur,95))
      {
        this.consume();
      }
      ;
    }
    ;
  }
  ;
  if ((fan.sys.ObjUtil.equals(this.m_cur,101) || fan.sys.ObjUtil.equals(this.m_cur,69)))
  {
    floating = true;
    if (s == null)
    {
      s = fan.sys.StrBuf.make(32);
      if (neg)
      {
        s.addChar(45);
      }
      ;
      s.add(fan.sys.ObjUtil.coerce(whole,fan.sys.Obj.$type.toNullable()));
    }
    ;
    s.addChar(101);
    this.consume();
    if ((fan.sys.ObjUtil.equals(this.m_cur,45) || fan.sys.ObjUtil.equals(this.m_cur,43)))
    {
      s.addChar(this.m_cur);
      this.consume();
    }
    ;
    if (fan.sys.ObjUtil.compareNE(this.m_curt,((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_DIGIT)))
    {
      throw this.err("Expected exponent digits");
    }
    ;
    while (fan.sys.ObjUtil.equals(this.m_curt,((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_DIGIT)))
    {
      s.addChar(this.m_cur);
      this.consume();
      if (fan.sys.ObjUtil.equals(this.m_cur,95))
      {
        this.consume();
      }
      ;
    }
    ;
  }
  ;
  var floatSuffix = false;
  var decimalSuffix = false;
  var dur = -1;
  if ((fan.sys.ObjUtil.compareLE(100,this.m_cur) && fan.sys.ObjUtil.compareLE(this.m_cur,115)))
  {
    if ((fan.sys.ObjUtil.equals(this.m_cur,110) && fan.sys.ObjUtil.equals(this.m_peek,115)))
    {
      this.consume();
      this.consume();
      dur = 1;
    }
    ;
    if ((fan.sys.ObjUtil.equals(this.m_cur,109) && fan.sys.ObjUtil.equals(this.m_peek,115)))
    {
      this.consume();
      this.consume();
      dur = 1000000;
    }
    ;
    if ((fan.sys.ObjUtil.equals(this.m_cur,115) && fan.sys.ObjUtil.equals(this.m_peek,101)))
    {
      this.consume();
      this.consume();
      if (fan.sys.ObjUtil.compareNE(this.m_cur,99))
      {
        throw this.err("Expected 'sec' in Duration literal");
      }
      ;
      this.consume();
      dur = 1000000000;
    }
    ;
    if ((fan.sys.ObjUtil.equals(this.m_cur,109) && fan.sys.ObjUtil.equals(this.m_peek,105)))
    {
      this.consume();
      this.consume();
      if (fan.sys.ObjUtil.compareNE(this.m_cur,110))
      {
        throw this.err("Expected 'min' in Duration literal");
      }
      ;
      this.consume();
      dur = 60000000000;
    }
    ;
    if ((fan.sys.ObjUtil.equals(this.m_cur,104) && fan.sys.ObjUtil.equals(this.m_peek,114)))
    {
      this.consume();
      this.consume();
      dur = 3600000000000;
    }
    ;
    if ((fan.sys.ObjUtil.equals(this.m_cur,100) && fan.sys.ObjUtil.equals(this.m_peek,97)))
    {
      this.consume();
      this.consume();
      if (fan.sys.ObjUtil.compareNE(this.m_cur,121))
      {
        throw this.err("Expected 'day' in Duration literal");
      }
      ;
      this.consume();
      dur = 86400000000000;
    }
    ;
  }
  ;
  if ((fan.sys.ObjUtil.equals(this.m_cur,102) || fan.sys.ObjUtil.equals(this.m_cur,70)))
  {
    this.consume();
    floatSuffix = true;
  }
  else
  {
    if ((fan.sys.ObjUtil.equals(this.m_cur,100) || fan.sys.ObjUtil.equals(this.m_cur,68)))
    {
      this.consume();
      decimalSuffix = true;
    }
    ;
  }
  ;
  if (neg)
  {
    whole = fan.sys.Int.negate(whole);
  }
  ;
  try
  {
    if (decimalSuffix)
    {
      var num = (function($this) { if (s == null) return fan.std.Decimal.toDecimal(fan.sys.ObjUtil.coerce(whole,fan.sys.Num.$type)); return fan.std.Decimal.fromStr(s.toStr()); })(this);
      this.m_val = fan.sys.ObjUtil.coerce(num,fan.sys.Obj.$type.toNullable());
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DECIMAL_LITERAL);
    }
    ;
    if ((floatSuffix || floating))
    {
      var num = (function($this) { if (s == null) return fan.sys.Int.toFloat(whole); return fan.sys.Float.fromStr(s.toStr()); })(this);
      if (fan.sys.ObjUtil.compareGT(dur,0))
      {
        this.m_val = fan.sys.ObjUtil.coerce(fan.std.Duration.fromNanos(fan.sys.Float.toInt(fan.sys.Float.multInt(num,dur))),fan.sys.Obj.$type.toNullable());
        return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DURATION_LITERAL);
      }
      else
      {
        this.m_val = fan.sys.ObjUtil.coerce(num,fan.sys.Obj.$type.toNullable());
        return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_FLOAT_LITERAL);
      }
      ;
    }
    ;
    var num = (function($this) { if (s == null) return whole; return fan.sys.Int.fromStr(s.toStr()); })(this);
    if (fan.sys.ObjUtil.compareGT(dur,0))
    {
      this.m_val = fan.sys.ObjUtil.coerce(fan.std.Duration.fromNanos(fan.sys.Int.mult(num,dur)),fan.sys.Obj.$type.toNullable());
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DURATION_LITERAL);
    }
    else
    {
      this.m_val = fan.sys.ObjUtil.coerce(num,fan.sys.Obj.$type.toNullable());
      return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_INT_LITERAL);
    }
    ;
  }
  catch ($_u173)
  {
    $_u173 = fan.sys.Err.make($_u173);
    if ($_u173 instanceof fan.sys.Err)
    {
      var e = $_u173;
      var e;
      throw this.err(fan.sys.Str.plus("Invalid numeric literal: ",s));
    }
    else
    {
      throw $_u173;
    }
  }
  ;
}
fan.std.Tokenizer.prototype.hex = function()
{
  this.consume();
  this.consume();
  var type = ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_INT_LITERAL);
  var val = fan.std.Tokenizer.hexChar(this.m_cur);
  if (fan.sys.ObjUtil.compareLT(val,0))
  {
    throw this.err("Expecting hex number");
  }
  ;
  this.consume();
  var nibCount = 1;
  while (true)
  {
    var nib = fan.std.Tokenizer.hexChar(this.m_cur);
    if (fan.sys.ObjUtil.compareLT(nib,0))
    {
      if (fan.sys.ObjUtil.equals(this.m_cur,95))
      {
        this.consume();
        continue;
      }
      ;
      break;
    }
    ;
    (function($this) { var $_u174 = nibCount; nibCount = fan.sys.Int.increment(nibCount); return $_u174; })(this);
    if (fan.sys.ObjUtil.compareGT(nibCount,16))
    {
      throw this.err("Hex literal too big");
    }
    ;
    val = fan.sys.Int.plus(fan.sys.Int.shiftl(val,4),nib);
    this.consume();
  }
  ;
  this.m_val = fan.sys.ObjUtil.coerce(val,fan.sys.Obj.$type.toNullable());
  return type;
}
fan.std.Tokenizer.hexChar = function(c)
{
  if ((fan.sys.ObjUtil.compareLE(48,c) && fan.sys.ObjUtil.compareLE(c,57)))
  {
    return fan.sys.Int.minus(c,48);
  }
  ;
  if ((fan.sys.ObjUtil.compareLE(97,c) && fan.sys.ObjUtil.compareLE(c,102)))
  {
    return fan.sys.Int.plus(fan.sys.Int.minus(c,97),10);
  }
  ;
  if ((fan.sys.ObjUtil.compareLE(65,c) && fan.sys.ObjUtil.compareLE(c,70)))
  {
    return fan.sys.Int.plus(fan.sys.Int.minus(c,65),10);
  }
  ;
  return -1;
}
fan.std.Tokenizer.prototype.str = function()
{
  this.consume();
  var s = fan.sys.StrBuf.make();
  while (true)
  {
    var $_u175 = this.m_cur;
    if (fan.sys.ObjUtil.equals($_u175,34))
    {
      this.consume();
      break;
    }
    else if (fan.sys.ObjUtil.equals($_u175,-1))
    {
      throw this.err("Unexpected end of string");
    }
    else if (fan.sys.ObjUtil.equals($_u175,36))
    {
      throw this.err("Interpolated strings unsupported");
    }
    else if (fan.sys.ObjUtil.equals($_u175,92))
    {
      s.addChar(this.escape());
    }
    else if (fan.sys.ObjUtil.equals($_u175,13))
    {
      s.addChar(10);
      this.consume();
    }
    else
    {
      s.addChar(this.m_cur);
      this.consume();
    }
    ;
  }
  ;
  this.m_val = s.toStr();
  return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_STR_LITERAL);
}
fan.std.Tokenizer.prototype.ch = function()
{
  this.consume();
  var c = 0;
  if (fan.sys.ObjUtil.equals(this.m_cur,92))
  {
    c = this.escape();
  }
  else
  {
    c = this.m_cur;
    this.consume();
  }
  ;
  if (fan.sys.ObjUtil.compareNE(this.m_cur,39))
  {
    throw this.err("Expecting ' close of char literal");
  }
  ;
  this.consume();
  this.m_val = fan.sys.ObjUtil.coerce(c,fan.sys.Obj.$type.toNullable());
  return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_INT_LITERAL);
}
fan.std.Tokenizer.prototype.escape = function()
{
  if (fan.sys.ObjUtil.compareNE(this.m_cur,92))
  {
    throw this.err("Internal error");
  }
  ;
  this.consume();
  var $_u176 = this.m_cur;
  if (fan.sys.ObjUtil.equals($_u176,98))
  {
    this.consume();
    return 8;
  }
  else if (fan.sys.ObjUtil.equals($_u176,102))
  {
    this.consume();
    return 12;
  }
  else if (fan.sys.ObjUtil.equals($_u176,110))
  {
    this.consume();
    return 10;
  }
  else if (fan.sys.ObjUtil.equals($_u176,114))
  {
    this.consume();
    return 13;
  }
  else if (fan.sys.ObjUtil.equals($_u176,116))
  {
    this.consume();
    return 9;
  }
  else if (fan.sys.ObjUtil.equals($_u176,36))
  {
    this.consume();
    return 36;
  }
  else if (fan.sys.ObjUtil.equals($_u176,34))
  {
    this.consume();
    return 34;
  }
  else if (fan.sys.ObjUtil.equals($_u176,39))
  {
    this.consume();
    return 39;
  }
  else if (fan.sys.ObjUtil.equals($_u176,96))
  {
    this.consume();
    return 96;
  }
  else if (fan.sys.ObjUtil.equals($_u176,92))
  {
    this.consume();
    return 92;
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_cur,117))
  {
    this.consume();
    var n3 = fan.std.Tokenizer.hexChar(this.m_cur);
    this.consume();
    var n2 = fan.std.Tokenizer.hexChar(this.m_cur);
    this.consume();
    var n1 = fan.std.Tokenizer.hexChar(this.m_cur);
    this.consume();
    var n0 = fan.std.Tokenizer.hexChar(this.m_cur);
    this.consume();
    if ((fan.sys.ObjUtil.compareLT(n3,0) || fan.sys.ObjUtil.compareLT(n2,0) || fan.sys.ObjUtil.compareLT(n1,0) || fan.sys.ObjUtil.compareLT(n0,0)))
    {
      throw this.err("Invalid hex value for \\uxxxx");
    }
    ;
    return fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.shiftl(n3,12),fan.sys.Int.shiftl(n2,8)),fan.sys.Int.shiftl(n1,4)),n0);
  }
  ;
  throw this.err("Invalid escape sequence");
}
fan.std.Tokenizer.prototype.uri = function()
{
  this.consume();
  var s = fan.sys.StrBuf.make();
  while (true)
  {
    if (fan.sys.ObjUtil.compareLT(this.m_cur,0))
    {
      throw this.err("Unexpected end of uri");
    }
    ;
    if (fan.sys.ObjUtil.equals(this.m_cur,92))
    {
      s.addChar(this.escape());
    }
    else
    {
      if (fan.sys.ObjUtil.equals(this.m_cur,96))
      {
        this.consume();
        break;
      }
      ;
      s.addChar(this.m_cur);
      this.consume();
    }
    ;
  }
  ;
  this.m_val = fan.std.Uri.fromStr(s.toStr());
  return ((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_URI_LITERAL);
}
fan.std.Tokenizer.prototype.skipCommentSL = function()
{
  this.consume();
  this.consume();
  while (true)
  {
    if ((fan.sys.ObjUtil.equals(this.m_cur,10) || fan.sys.ObjUtil.equals(this.m_cur,13)))
    {
      this.consume();
      break;
    }
    ;
    if (fan.sys.ObjUtil.compareLT(this.m_cur,0))
    {
      break;
    }
    ;
    this.consume();
  }
  ;
  return null;
}
fan.std.Tokenizer.prototype.skipCommentML = function()
{
  this.consume();
  this.consume();
  var depth = 1;
  while (true)
  {
    if ((fan.sys.ObjUtil.equals(this.m_cur,42) && fan.sys.ObjUtil.equals(this.m_peek,47)))
    {
      this.consume();
      this.consume();
      (function($this) { var $_u177 = depth; depth = fan.sys.Int.decrement(depth); return $_u177; })(this);
      if (fan.sys.ObjUtil.compareLE(depth,0))
      {
        break;
      }
      ;
    }
    ;
    if ((fan.sys.ObjUtil.equals(this.m_cur,47) && fan.sys.ObjUtil.equals(this.m_peek,42)))
    {
      this.consume();
      this.consume();
      (function($this) { var $_u178 = depth; depth = fan.sys.Int.increment(depth); return $_u178; })(this);
      continue;
    }
    ;
    if (fan.sys.ObjUtil.compareLT(this.m_cur,0))
    {
      break;
    }
    ;
    this.consume();
  }
  ;
  return null;
}
fan.std.Tokenizer.prototype.err = function(msg)
{
  return fan.sys.IOErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(msg," [Line "),fan.sys.ObjUtil.coerce(this.m_line,fan.sys.Obj.$type.toNullable())),"]"));
}
fan.std.Tokenizer.prototype.consume = function()
{
  if ((fan.sys.ObjUtil.equals(this.m_cur,10) || fan.sys.ObjUtil.equals(this.m_cur,13)))
  {
    (function($this) { var $_u179 = $this.m_line; $this.m_line = fan.sys.Int.increment($this.m_line); return $_u179; })(this);
  }
  ;
  var c = this.m_$in.readChar();
  if ((fan.sys.ObjUtil.equals(c,10) && fan.sys.ObjUtil.equals(this.m_peek,13)))
  {
    c = this.m_$in.readChar();
  }
  ;
  this.m_cur = this.m_peek;
  this.m_curt = this.m_peekt;
  this.m_peek = c;
  this.m_peekt = (function($this) { if ((fan.sys.ObjUtil.compareLT(0,c) && fan.sys.ObjUtil.compareLT(c,128))) return ((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_charMap).get(c); return ((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_ALPHA); })(this);
  return;
}
fan.std.Tokenizer.prototype.pushUndo = function(type,val,line)
{
  if (this.m_undo != null)
  {
    throw fan.sys.Err.make("only one pushback supported");
  }
  ;
  this.m_undo = fan.std.Undo.make(type,val,line);
  return;
}
fan.std.Tokenizer.prototype.reset = function(type,val,line)
{
  this.m_type = type;
  this.m_val = val;
  this.m_line = line;
  return type;
}
fan.std.Tokenizer.prototype.$in = function()
{
  return this.m_$in;
}
fan.std.Tokenizer.prototype.$in$ = function(it)
{
  this.m_$in = it;
  return;
}
fan.std.Tokenizer.prototype.type = function()
{
  return this.m_type;
}
fan.std.Tokenizer.prototype.type$ = function(it)
{
  this.m_type = it;
  return;
}
fan.std.Tokenizer.prototype.val = function()
{
  return this.m_val;
}
fan.std.Tokenizer.prototype.val$ = function(it)
{
  this.m_val = it;
  return;
}
fan.std.Tokenizer.prototype.line = function()
{
  return this.m_line;
}
fan.std.Tokenizer.prototype.line$ = function(it)
{
  this.m_line = it;
  return;
}
fan.std.Tokenizer.prototype.undo = function()
{
  return this.m_undo;
}
fan.std.Tokenizer.prototype.undo$ = function(it)
{
  this.m_undo = it;
  return;
}
fan.std.Tokenizer.prototype.cur = function()
{
  return this.m_cur;
}
fan.std.Tokenizer.prototype.cur$ = function(it)
{
  this.m_cur = it;
  return;
}
fan.std.Tokenizer.prototype.curt = function()
{
  return this.m_curt;
}
fan.std.Tokenizer.prototype.curt$ = function(it)
{
  this.m_curt = it;
  return;
}
fan.std.Tokenizer.prototype.peek = function()
{
  return this.m_peek;
}
fan.std.Tokenizer.prototype.peek$ = function(it)
{
  this.m_peek = it;
  return;
}
fan.std.Tokenizer.prototype.peekt = function()
{
  return this.m_peekt;
}
fan.std.Tokenizer.prototype.peekt$ = function(it)
{
  this.m_peekt = it;
  return;
}
fan.std.Tokenizer.static$init = function()
{
  if (fan.std.Tokenizer.static$inited) return;
  fan.std.Tokenizer.static$inited = true;
  fan.std.Tokenizer.m_SPACE = 1;
  fan.std.Tokenizer.m_ALPHA = 2;
  fan.std.Tokenizer.m_DIGIT = 3;
  if (true)
  {
    var cmap = fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Int.$type).fill(fan.sys.ObjUtil.coerce(0,fan.sys.Obj.$type.toNullable()),128),fan.std.Type.find("sys::List<sys::Int>"));
    cmap.set(32,fan.sys.ObjUtil.coerce(((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_SPACE),fan.sys.Obj.$type.toNullable()));
    cmap.set(10,fan.sys.ObjUtil.coerce(((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_SPACE),fan.sys.Obj.$type.toNullable()));
    cmap.set(13,fan.sys.ObjUtil.coerce(((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_SPACE),fan.sys.Obj.$type.toNullable()));
    cmap.set(9,fan.sys.ObjUtil.coerce(((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_SPACE),fan.sys.Obj.$type.toNullable()));
    for (var i = 97; fan.sys.ObjUtil.compareLE(i,122); i = fan.sys.Int.increment(i))
    {
      cmap.set(i,fan.sys.ObjUtil.coerce(((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_ALPHA),fan.sys.Obj.$type.toNullable()));
    }
    ;
    for (var i = 65; fan.sys.ObjUtil.compareLE(i,90); i = fan.sys.Int.increment(i))
    {
      cmap.set(i,fan.sys.ObjUtil.coerce(((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_ALPHA),fan.sys.Obj.$type.toNullable()));
    }
    ;
    cmap.set(95,fan.sys.ObjUtil.coerce(((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_ALPHA),fan.sys.Obj.$type.toNullable()));
    for (var i = 48; fan.sys.ObjUtil.compareLE(i,57); i = fan.sys.Int.increment(i))
    {
      cmap.set(i,fan.sys.ObjUtil.coerce(((fan.std.Tokenizer.static$init ? fan.std.Tokenizer.static$init() : null),fan.std.Tokenizer.m_DIGIT),fan.sys.Obj.$type.toNullable()));
    }
    ;
    fan.std.Tokenizer.m_charMap = fan.sys.ObjUtil.coerce((function($this) { var $_u181 = cmap; if ($_u181 == null) return null; return fan.sys.ObjUtil.toImmutable($_u181); })(this),fan.std.Type.find("sys::List<sys::Int>"));
  }
  ;
  return;
}
fan.std.Tokenizer.m_SPACE = 0;
fan.std.Tokenizer.m_ALPHA = 0;
fan.std.Tokenizer.m_DIGIT = 0;
fan.std.Tokenizer.m_charMap = null;
fan.std.Tokenizer.prototype.m_$in = null;
fan.std.Tokenizer.prototype.m_type = 0;
fan.std.Tokenizer.prototype.m_val = null;
fan.std.Tokenizer.prototype.m_line = 0;
fan.std.Tokenizer.prototype.m_undo = null;
fan.std.Tokenizer.prototype.m_cur = 0;
fan.std.Tokenizer.prototype.m_curt = 0;
fan.std.Tokenizer.prototype.m_peek = 0;
fan.std.Tokenizer.prototype.m_peekt = 0;
fan.std.Undo = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Undo.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.Undo.prototype.$typeof = function() { return fan.std.Undo.$type; }
fan.std.Undo.make = function(t,v,l) {
  var self = new fan.std.Undo();
  fan.std.Undo.make$(self,t,v,l);
  return self;
  }
fan.std.Undo.make$ = function(self,t,v,l)
{
  self.m_type = t;
  self.m_val = v;
  self.m_line = l;
  return;
}
fan.std.Undo.prototype.reset = function(t)
{
  t.reset(this.m_type,this.m_val,this.m_line);
  return;
}
fan.std.Undo.prototype.type = function()
{
  return this.m_type;
}
fan.std.Undo.prototype.type$ = function(it)
{
  this.m_type = it;
  return;
}
fan.std.Undo.prototype.val = function()
{
  return this.m_val;
}
fan.std.Undo.prototype.val$ = function(it)
{
  this.m_val = it;
  return;
}
fan.std.Undo.prototype.line = function()
{
  return this.m_line;
}
fan.std.Undo.prototype.line$ = function(it)
{
  this.m_line = it;
  return;
}
fan.std.Undo.prototype.m_type = 0;
fan.std.Undo.prototype.m_val = null;
fan.std.Undo.prototype.m_line = 0;
fan.std.ObjEncoder = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.ObjEncoder.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_level = 0;
  this.m_indent = 0;
  this.m_skipDefaults = false;
  this.m_skipErrors = false;
  return;
}
fan.std.ObjEncoder.prototype.$typeof = function() { return fan.std.ObjEncoder.$type; }
fan.std.ObjEncoder.encode = function(obj)
{
  var buf = fan.sys.StrBuf.make();
  fan.std.ObjEncoder.make(fan.std.StrExt.out(buf),null).writeObj(obj);
  return buf.toStr();
}
fan.std.ObjEncoder.make = function(out,options) {
  var self = new fan.std.ObjEncoder();
  fan.std.ObjEncoder.make$(self,out,options);
  return self;
  }
fan.std.ObjEncoder.make$ = function(self,out,options)
{
  ;
  self.m_out = out;
  if (options != null)
  {
    self.initOptions(fan.sys.ObjUtil.coerce(options,fan.std.Type.find("std::Map<sys::Str,sys::Obj>")));
  }
  ;
  return;
}
fan.std.ObjEncoder.prototype.writeObj = function(obj)
{
  if (obj == null)
  {
    this.wStr("null");
    return;
  }
  ;
  if (fan.sys.ObjUtil.is(obj,fan.sys.Bool.$type))
  {
    this.wStr(fan.sys.ObjUtil.toStr(obj));
    return;
  }
  else
  {
    if (fan.sys.ObjUtil.is(obj,fan.sys.Str.$type))
    {
      this.wStrLiteral(fan.sys.ObjUtil.toStr(obj),34);
      return;
    }
    else
    {
      if (fan.sys.ObjUtil.is(obj,fan.sys.Int.$type))
      {
        this.wStr(fan.sys.ObjUtil.toStr(obj));
        return;
      }
      else
      {
        if (fan.sys.ObjUtil.is(obj,fan.sys.Float.$type))
        {
          var f = fan.sys.ObjUtil.as(obj,fan.sys.Float.$type);
          if (fan.sys.Float.isNaN(fan.sys.ObjUtil.coerce(f,fan.sys.Float.$type)))
          {
            this.wStr("sys::Float(\"NaN\")");
          }
          else
          {
            if (fan.sys.ObjUtil.equals(f,((fan.sys.Float.static$init ? fan.sys.Float.static$init() : null),fan.sys.Float.m_posInf)))
            {
              this.wStr("sys::Float(\"INF\")");
            }
            else
            {
              if (fan.sys.ObjUtil.equals(f,((fan.sys.Float.static$init ? fan.sys.Float.static$init() : null),fan.sys.Float.m_negInf)))
              {
                this.wStr("sys::Float(\"-INF\")");
              }
              else
              {
                this.wStr(fan.sys.ObjUtil.toStr(obj));
                this.w(102);
              }
              ;
            }
            ;
          }
          ;
          return;
        }
        else
        {
          if (fan.sys.ObjUtil.is(obj,fan.std.Type.$type))
          {
            this.wType(fan.sys.ObjUtil.coerce(obj,fan.std.Type.$type)).w(35);
            return;
          }
          else
          {
            if (fan.sys.ObjUtil.is(obj,fan.std.Slot.$type))
            {
              var slot = fan.sys.ObjUtil.as(obj,fan.std.Slot.$type);
              this.wType(slot.parent()).w(35).wStr(slot.$name());
              return;
            }
            else
            {
              if (fan.sys.ObjUtil.is(obj,fan.std.Type.find("sys::List<>")))
              {
                this.writeList(fan.sys.ObjUtil.coerce(obj,fan.std.Type.find("sys::List<sys::Obj?>")));
                return;
              }
              else
              {
                if (fan.sys.ObjUtil.is(obj,fan.std.Type.find("std::Map<>")))
                {
                  this.writeMap(fan.sys.ObjUtil.coerce(obj,fan.std.Type.find("std::Map<sys::Obj,sys::Obj?>")));
                  return;
                }
                else
                {
                  if (fan.sys.ObjUtil.is(obj,fan.std.Duration.$type))
                  {
                    this.wStr(fan.sys.ObjUtil.toStr(obj));
                    return;
                  }
                  ;
                }
                ;
              }
              ;
            }
            ;
          }
          ;
        }
        ;
      }
      ;
    }
    ;
  }
  ;
  var type = fan.std.Type.$typeof(fan.sys.ObjUtil.coerce(obj,fan.sys.Obj.$type));
  var ser = fan.sys.ObjUtil.coerce(type.facet(fan.sys.Serializable.$type,false),fan.sys.Serializable.$type.toNullable());
  if (ser != null)
  {
    if (ser.m_simple)
    {
      this.writeSimple(type,fan.sys.ObjUtil.coerce(obj,fan.sys.Obj.$type));
    }
    else
    {
      this.writeComplex(type,fan.sys.ObjUtil.coerce(obj,fan.sys.Obj.$type),fan.sys.ObjUtil.coerce(ser,fan.sys.Serializable.$type));
    }
    ;
  }
  else
  {
    if (this.m_skipErrors)
    {
      this.wStr("null /* Not serializable: ").wStr(type.qname()).wStr(" */");
    }
    else
    {
      throw fan.sys.IOErr.make(fan.sys.Str.plus("Not serializable: ",type));
    }
    ;
  }
  ;
  return;
}
fan.std.ObjEncoder.prototype.writeSimple = function(type,obj)
{
  this.wType(type).w(40).wStrLiteral(fan.sys.ObjUtil.toStr(obj),34).w(41);
  return;
}
fan.std.ObjEncoder.prototype.writeComplex = function(type,obj,ser)
{
  this.wType(type);
  var first = true;
  var defObj = null;
  if (this.m_skipDefaults)
  {
    try
    {
      defObj = fan.std.Type.$typeof(obj).make();
    }
    catch ($_u182)
    {
      $_u182 = fan.sys.Err.make($_u182);
      if ($_u182 instanceof fan.sys.Err)
      {
        var e = $_u182;
        var e;
      }
      else
      {
        throw $_u182;
      }
    }
    ;
  }
  ;
  var fields = type.fields();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,fields.size()); i = fan.sys.Int.increment(i))
  {
    var f = fields.get(i);
    if ((f.isStatic() || f.isSynthetic() || f.hasFacet(fan.sys.Transient.$type)))
    {
      continue;
    }
    ;
    var val = f.get(obj);
    if (defObj != null)
    {
      var defVal = f.get(defObj);
      if (fan.sys.ObjUtil.equals(val,defVal))
      {
        continue;
      }
      ;
    }
    ;
    if (first)
    {
      this.w(10).wIndent().w(123).w(10);
      (function($this) { var $_u183 = $this.m_level; $this.m_level = fan.sys.Int.increment($this.m_level); return $_u183; })(this);
      first = false;
    }
    ;
    this.wIndent().wStr(f.$name()).w(61);
    this.m_curFieldType = f.type().toNonNullable();
    this.writeObj(val);
    this.m_curFieldType = null;
    this.w(10);
  }
  ;
  if (ser.m_collection)
  {
    first = this.writeCollectionItems(type,obj,first);
  }
  ;
  if (!first)
  {
    (function($this) { var $_u184 = $this.m_level; $this.m_level = fan.sys.Int.decrement($this.m_level); return $_u184; })(this);
    this.wIndent().w(125);
  }
  ;
  return;
}
fan.std.ObjEncoder.prototype.writeCollectionItems = function(type,obj,first)
{
  var $this = this;
  var m = type.method("each",false);
  if (m == null)
  {
    throw fan.sys.IOErr.make(fan.sys.Str.plus(fan.sys.Str.plus("Missing ",type.qname()),".each"));
  }
  ;
  m.call(obj,fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.std.$clos$_u185,
    function(item)
    {
      if (first)
      {
        $this.w(10).wIndent().w(123).w(10);
        (function($this) { var $_u186 = $this.m_level; $this.m_level = fan.sys.Int.increment($this.m_level); return $_u186; })($this);
        first = false;
      }
      ;
      $this.wIndent();
      $this.writeObj(item);
      $this.w(44).w(10);
      return;
    }),fan.sys.Obj.$type.toNullable()));
  return first;
}
fan.std.ObjEncoder.prototype.writeList = function(list)
{
  var $this = this;
  var nl = list.any(fan.sys.Func.make$closure(
    fan.std.$clos$_u187,
    function(it,ignoreparam$1)
    {
      return $this.isMultiLine(it);
    }));
  var size = list.size();
  if (fan.sys.ObjUtil.equals(size,0))
  {
    this.wStr("[,]");
    return;
  }
  ;
  if (nl)
  {
    this.w(10).wIndent();
  }
  ;
  this.w(91);
  (function($this) { var $_u188 = $this.m_level; $this.m_level = fan.sys.Int.increment($this.m_level); return $_u188; })(this);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,size); i = fan.sys.Int.increment(i))
  {
    if (fan.sys.ObjUtil.compareGT(i,0))
    {
      this.w(44);
    }
    ;
    if (nl)
    {
      this.w(10).wIndent();
    }
    ;
    this.writeObj(list.get(i));
  }
  ;
  (function($this) { var $_u189 = $this.m_level; $this.m_level = fan.sys.Int.decrement($this.m_level); return $_u189; })(this);
  if (nl)
  {
    this.w(10).wIndent();
  }
  ;
  this.w(93);
  return;
}
fan.std.ObjEncoder.prototype.writeMap = function(map)
{
  var $this = this;
  var nl = map.any(fan.sys.Func.make$closure(
    fan.std.$clos$_u190,
    function(v,k)
    {
      return ($this.isMultiLine(k) || $this.isMultiLine(v));
    }));
  if (map.isEmpty())
  {
    this.wStr("[:]");
    return;
  }
  ;
  (function($this) { var $_u191 = $this.m_level; $this.m_level = fan.sys.Int.increment($this.m_level); return $_u191; })(this);
  this.w(91);
  var first = true;
  map.each(fan.sys.Func.make$closure(
    fan.std.$clos$_u192,
    function(val,key)
    {
      if (first)
      {
        first = false;
      }
      else
      {
        $this.w(44);
      }
      ;
      if (nl)
      {
        $this.w(10).wIndent();
      }
      ;
      $this.writeObj(key);
      $this.w(58);
      $this.writeObj(val);
      return;
    }));
  this.w(93);
  (function($this) { var $_u193 = $this.m_level; $this.m_level = fan.sys.Int.decrement($this.m_level); return $_u193; })(this);
  return;
}
fan.std.ObjEncoder.prototype.isMultiLine = function(t)
{
  if (t == null)
  {
    return false;
  }
  ;
  return fan.sys.ObjUtil.compareNE(fan.std.Type.$typeof(fan.sys.ObjUtil.coerce(t,fan.sys.Obj.$type)).pod().$name(),"sys");
}
fan.std.ObjEncoder.prototype.wType = function(t)
{
  return this.wStr(t.signature());
}
fan.std.ObjEncoder.prototype.wStrLiteral = function(s,quote)
{
  return this.wStr(fan.sys.Str.toCode(s,quote));
}
fan.std.ObjEncoder.prototype.wIndent = function()
{
  var num = fan.sys.Int.mult(this.m_level,this.m_indent);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,num); i = fan.sys.Int.increment(i))
  {
    this.w(32);
  }
  ;
  return this;
}
fan.std.ObjEncoder.prototype.wStr = function(s)
{
  this.m_out.writeChars(s);
  return this;
}
fan.std.ObjEncoder.prototype.w = function(ch)
{
  this.m_out.writeChar(ch);
  return this;
}
fan.std.ObjEncoder.prototype.initOptions = function(options)
{
  this.m_indent = fan.sys.ObjUtil.coerce(options.get("indent",fan.sys.ObjUtil.coerce(this.m_indent,fan.sys.Obj.$type.toNullable())),fan.sys.Int.$type);
  this.m_skipDefaults = fan.sys.ObjUtil.coerce(options.get("skipDefaults",fan.sys.ObjUtil.coerce(this.m_skipDefaults,fan.sys.Obj.$type.toNullable())),fan.sys.Bool.$type);
  this.m_skipErrors = fan.sys.ObjUtil.coerce(options.get("skipErrors",fan.sys.ObjUtil.coerce(this.m_skipErrors,fan.sys.Obj.$type.toNullable())),fan.sys.Bool.$type);
  return;
}
fan.std.ObjEncoder.prototype.out = function()
{
  return this.m_out;
}
fan.std.ObjEncoder.prototype.out$ = function(it)
{
  this.m_out = it;
  return;
}
fan.std.ObjEncoder.prototype.level = function()
{
  return this.m_level;
}
fan.std.ObjEncoder.prototype.level$ = function(it)
{
  this.m_level = it;
  return;
}
fan.std.ObjEncoder.prototype.indent = function()
{
  return this.m_indent;
}
fan.std.ObjEncoder.prototype.indent$ = function(it)
{
  this.m_indent = it;
  return;
}
fan.std.ObjEncoder.prototype.skipDefaults = function()
{
  return this.m_skipDefaults;
}
fan.std.ObjEncoder.prototype.skipDefaults$ = function(it)
{
  this.m_skipDefaults = it;
  return;
}
fan.std.ObjEncoder.prototype.skipErrors = function()
{
  return this.m_skipErrors;
}
fan.std.ObjEncoder.prototype.skipErrors$ = function(it)
{
  this.m_skipErrors = it;
  return;
}
fan.std.ObjEncoder.prototype.curFieldType = function()
{
  return this.m_curFieldType;
}
fan.std.ObjEncoder.prototype.curFieldType$ = function(it)
{
  this.m_curFieldType = it;
  return;
}
fan.std.ObjEncoder.prototype.m_out = null;
fan.std.ObjEncoder.prototype.m_level = 0;
fan.std.ObjEncoder.prototype.m_indent = 0;
fan.std.ObjEncoder.prototype.m_skipDefaults = false;
fan.std.ObjEncoder.prototype.m_skipErrors = false;
fan.std.ObjEncoder.prototype.m_curFieldType = null;
fan.std.Token = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.Token.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.std.Token.prototype.$typeof = function() { return fan.std.Token.$type; }
fan.std.Token.isLiteral = function(type)
{
  return (fan.sys.ObjUtil.compareLE(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_BOOL_LITERAL),type) && fan.sys.ObjUtil.compareLE(type,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_NULL_LITERAL)));
}
fan.std.Token.keyword = function(type)
{
  if ((fan.sys.ObjUtil.compareLE(((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_AS),type) && fan.sys.ObjUtil.compareLE(type,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_USING))))
  {
    return fan.std.Token.toString(type);
  }
  else
  {
    return null;
  }
  ;
}
fan.std.Token.toString = function(type)
{
  var $_u194 = type;
  if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_EOF)))
  {
    return "end of file";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_ID)))
  {
    return "identifier";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_BOOL_LITERAL)))
  {
    return "Bool literal";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_STR_LITERAL)))
  {
    return "Str literal";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_INT_LITERAL)))
  {
    return "Int literal";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_FLOAT_LITERAL)))
  {
    return "Float literal";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DECIMAL_LITERAL)))
  {
    return "Decimal literal";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DURATION_LITERAL)))
  {
    return "Duration literal";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_URI_LITERAL)))
  {
    return "Uri literal";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_NULL_LITERAL)))
  {
    return "null";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DOT)))
  {
    return ".";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_SEMICOLON)))
  {
    return ";";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_COMMA)))
  {
    return ",";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_COLON)))
  {
    return ":";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DOUBLE_COLON)))
  {
    return "::";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LBRACE)))
  {
    return "{";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACE)))
  {
    return "}";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LPAREN)))
  {
    return "(";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RPAREN)))
  {
    return ")";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LBRACKET)))
  {
    return "[";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_RBRACKET)))
  {
    return "]";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_LRBRACKET)))
  {
    return "[]";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_EQ)))
  {
    return ":=";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_POUND)))
  {
    return "#";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_QUESTION)))
  {
    return "?";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_AT)))
  {
    return "@";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_DOLLAR)))
  {
    return "\$";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_AS)))
  {
    return "as";
  }
  else if (fan.sys.ObjUtil.equals($_u194,((fan.std.Token.static$init ? fan.std.Token.static$init() : null),fan.std.Token.m_USING)))
  {
    return "using";
  }
  else
  {
    return fan.sys.Str.plus(fan.sys.Str.plus("Token[",fan.sys.ObjUtil.coerce(type,fan.sys.Obj.$type.toNullable())),"]");
  }
  ;
}
fan.std.Token.make = function() {
  var self = new fan.std.Token();
  fan.std.Token.make$(self);
  return self;
  }
fan.std.Token.make$ = function(self)
{
  return;
}
fan.std.Token.static$init = function()
{
  if (fan.std.Token.static$inited) return;
  fan.std.Token.static$inited = true;
  fan.std.Token.m_EOF = -1;
  fan.std.Token.m_ID = 0;
  fan.std.Token.m_BOOL_LITERAL = 1;
  fan.std.Token.m_STR_LITERAL = 2;
  fan.std.Token.m_INT_LITERAL = 3;
  fan.std.Token.m_FLOAT_LITERAL = 4;
  fan.std.Token.m_DECIMAL_LITERAL = 5;
  fan.std.Token.m_DURATION_LITERAL = 6;
  fan.std.Token.m_URI_LITERAL = 7;
  fan.std.Token.m_NULL_LITERAL = 8;
  fan.std.Token.m_DOT = 9;
  fan.std.Token.m_SEMICOLON = 10;
  fan.std.Token.m_COMMA = 11;
  fan.std.Token.m_COLON = 12;
  fan.std.Token.m_DOUBLE_COLON = 13;
  fan.std.Token.m_LBRACE = 14;
  fan.std.Token.m_RBRACE = 15;
  fan.std.Token.m_LPAREN = 16;
  fan.std.Token.m_RPAREN = 17;
  fan.std.Token.m_LBRACKET = 18;
  fan.std.Token.m_RBRACKET = 19;
  fan.std.Token.m_LRBRACKET = 20;
  fan.std.Token.m_EQ = 21;
  fan.std.Token.m_POUND = 22;
  fan.std.Token.m_QUESTION = 23;
  fan.std.Token.m_AT = 24;
  fan.std.Token.m_DOLLAR = 25;
  fan.std.Token.m_AS = 26;
  fan.std.Token.m_USING = 27;
  fan.std.Token.m_JAVA_FFI = 28;
  return;
}
fan.std.Token.m_EOF = 0;
fan.std.Token.m_ID = 0;
fan.std.Token.m_BOOL_LITERAL = 0;
fan.std.Token.m_STR_LITERAL = 0;
fan.std.Token.m_INT_LITERAL = 0;
fan.std.Token.m_FLOAT_LITERAL = 0;
fan.std.Token.m_DECIMAL_LITERAL = 0;
fan.std.Token.m_DURATION_LITERAL = 0;
fan.std.Token.m_URI_LITERAL = 0;
fan.std.Token.m_NULL_LITERAL = 0;
fan.std.Token.m_DOT = 0;
fan.std.Token.m_SEMICOLON = 0;
fan.std.Token.m_COMMA = 0;
fan.std.Token.m_COLON = 0;
fan.std.Token.m_DOUBLE_COLON = 0;
fan.std.Token.m_LBRACE = 0;
fan.std.Token.m_RBRACE = 0;
fan.std.Token.m_LPAREN = 0;
fan.std.Token.m_RPAREN = 0;
fan.std.Token.m_LBRACKET = 0;
fan.std.Token.m_RBRACKET = 0;
fan.std.Token.m_LRBRACKET = 0;
fan.std.Token.m_EQ = 0;
fan.std.Token.m_POUND = 0;
fan.std.Token.m_QUESTION = 0;
fan.std.Token.m_AT = 0;
fan.std.Token.m_DOLLAR = 0;
fan.std.Token.m_AS = 0;
fan.std.Token.m_USING = 0;
fan.std.Token.m_JAVA_FFI = 0;
fan.std.Map.fromLiteral = function(keys, vals)
{
  var map = fan.std.Map.make(keys.length);
  for (var i=0; i<keys.length; i++)
    map.set(keys[i], vals[i]);
  return map;
}
fan.std.initReflect$ = function() {
  fan.std.$pod = fan.std.Pod.$add('std');
  with (fan.std.$pod)
  {
    fan.std.AtomicInt.$type = $at('AtomicInt','sys::Obj',[],{'sys::Extern':""},8738);
    fan.std.Unsafe.$type = $at('Unsafe','sys::Obj',[],{'sys::Extern':""},8738);
    fan.std.Lazy.$type = $at('Lazy','sys::Obj',[],{'sys::Extern':""},8738);
    fan.std.AtomicRef.$type = $at('AtomicRef','sys::Obj',[],{'sys::Extern':""},8738);
    fan.std.Lock.$type = $at('Lock','sys::Obj',[],{'sys::NoDoc':"",'sys::Extern':""},8738);
    fan.std.SoftRef.$type = $at('SoftRef','sys::Obj',[],{'sys::Extern':""},8736);
    fan.std.AtomicBool.$type = $at('AtomicBool','sys::Obj',[],{'sys::Extern':""},8738);
    fan.std.Map.$type = $at('Map','sys::Obj',[],{'sys::Serializable':""},2105345);
    fan.std.HashMap.$type = $at('HashMap','std::Map',[],{'sys::NoDoc':""},2367488);
    fan.std.OrderedMap.$type = $at('OrderedMap','std::HashMap',[],{},2367488);
    fan.std.Set.$type = $at('Set','sys::Obj',[],{},8192);
    fan.std.AvlNode.$type = $at('AvlNode','sys::Obj',[],{},128);
    fan.std.TreeMap.$type = $at('TreeMap','std::Map',[],{},270336);
    fan.std.LinkedElem.$type = $at('LinkedElem','sys::Obj',[],{},270336);
    fan.std.LinkedList.$type = $at('LinkedList','sys::Obj',[],{},270336);
    fan.std.MapEntry.$type = $at('MapEntry','std::LinkedElem',[],{},128);
    fan.std.MapEntryList.$type = $at('MapEntryList','std::LinkedList',[],{},128);
    fan.std.Tuple.$type = $at('Tuple','sys::Obj',[],{},2629664);
    fan.std.CIKey.$type = $at('CIKey','sys::Obj',[],{},262274);
    fan.std.CaseInsensitiveMap.$type = $at('CaseInsensitiveMap','std::Map',[],{},2367488);
    fan.std.ConcurrentMap.$type = $at('ConcurrentMap','sys::Obj',[],{},8738);
    fan.std.CacheItem.$type = $at('CacheItem','std::LinkedElem',[],{},128);
    fan.std.Cache.$type = $at('Cache','sys::Obj',[],{},270336);
    fan.std.ListExt.$type = $at('ListExt','sys::Obj',[],{},8192);
    fan.std.Math.$type = $am('Math','sys::Obj',[],{},8961);
    fan.std.Test.$type = $at('Test','sys::Obj',[],{},8193);
    fan.std.TestRunner.$type = $at('TestRunner','sys::Obj',[],{},128);
    fan.std.TestErr.$type = $at('TestErr','sys::Err',[],{},130);
    fan.std.Process.$type = $at('Process','sys::Obj',[],{},8224);
    fan.std.Decimal.$type = $at('Decimal','sys::Num',[],{'sys::Serializable':"sys::Serializable{simple=true;}",'sys::Extern':""},533026);
    fan.std.Extension.$type = $at('Extension','sys::Obj',[],{},8192);
    fan.std.LogRec.$type = $at('LogRec','sys::Obj',[],{},270338);
    fan.std.LogMgr.$type = $at('LogMgr','sys::Obj',[],{},128);
    fan.std.LogLevel.$type = $at('LogLevel','sys::Enum',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},8234);
    fan.std.Log.$type = $at('Log','sys::Obj',[],{},2367488);
    fan.std.Regex.$type = $at('Regex','sys::Obj',[],{},8226);
    fan.std.CachedScript.$type = $at('CachedScript','sys::Obj',[],{},130);
    fan.std.ScriptCompiler.$type = $at('ScriptCompiler','sys::Obj',[],{},130);
    fan.std.RegexMatcher.$type = $at('RegexMatcher','sys::Obj',[],{'sys::Extern':""},8736);
    fan.std.EnvProps.$type = $at('EnvProps','sys::Obj',[],{},128);
    fan.std.FileProps.$type = $at('FileProps','sys::Obj',[],{},128);
    fan.std.Uuid.$type = $at('Uuid','sys::Obj',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},532514);
    fan.std.Env.$type = $at('Env','sys::Obj',[],{'sys::Extern':""},270850);
    fan.std.FacetData.$type = $at('FacetData','sys::Obj',[],{},130);
    fan.std.FacetList.$type = $at('FacetList','sys::Obj',[],{},128);
    fan.std.Pod.$type = $at('Pod','sys::Obj',[],{},2105888);
    fan.std.Version.$type = $at('Version','sys::Obj',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},8226);
    fan.std.Depend.$type = $at('Depend','sys::Obj',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},8226);
    fan.std.ConstFlags.$type = $am('ConstFlags','sys::Obj',[],{},385);
    fan.std.Type.$type = $at('Type','sys::Obj',[],{},2105857);
    fan.std.Slot.$type = $at('Slot','sys::Obj',[],{},2105857);
    fan.std.Field.$type = $at('Field','std::Slot',[],{},2368000);
    fan.std.Method.$type = $at('Method','std::Slot',[],{},2368000);
    fan.std.Param.$type = $at('Param','sys::Obj',[],{},2105888);
    fan.std.BufCrypto.$type = $at('BufCrypto','sys::Obj',[],{},8192);
    fan.std.UriParser.$type = $at('UriParser','sys::Obj',[],{},262272);
    fan.std.Uri.$type = $at('Uri','sys::Obj',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},8226);
    fan.std.Buf.$type = $at('Buf','sys::Obj',[],{'sys::NoPeer':""},2105345);
    fan.std.ConstBuf.$type = $at('ConstBuf','std::Buf',[],{},2359424);
    fan.std.InStream.$type = $at('InStream','sys::Obj',[],{},8193);
    fan.std.ConstBufInStream.$type = $at('ConstBufInStream','std::InStream',[],{},262272);
    fan.std.File.$type = $at('File','sys::Obj',[],{'sys::NoPeer':""},8195);
    fan.std.MemFile.$type = $at('MemFile','std::File',[],{},262274);
    fan.std.XmlUtil.$type = $at('XmlUtil','sys::Obj',[],{'sys::NoDoc':""},8192);
    fan.std.Endian.$type = $at('Endian','sys::Enum',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},8234);
    fan.std.StrExt.$type = $at('StrExt','sys::Obj',[],{},8192);
    fan.std.StrInStream.$type = $at('StrInStream','std::InStream',[],{},262272);
    fan.std.OutStream.$type = $at('OutStream','sys::Obj',[],{},8193);
    fan.std.StrOutStream.$type = $at('StrOutStream','std::OutStream',[],{},262272);
    fan.std.Props.$type = $at('Props','sys::Obj',[],{},128);
    fan.std.FileBuf.$type = $at('FileBuf','std::Buf',[],{},262272);
    fan.std.NioBuf.$type = $at('NioBuf','std::Buf',[],{},262272);
    fan.std.BufOutStream.$type = $at('BufOutStream','std::OutStream',[],{},262272);
    fan.std.BufInStream.$type = $at('BufInStream','std::InStream',[],{},262272);
    fan.std.MemBuf.$type = $at('MemBuf','std::Buf',[],{'sys::NoDoc':""},270336);
    fan.std.Charset.$type = $at('Charset','sys::Obj',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},270338);
    fan.std.Encoder.$type = $at('Encoder','sys::Obj',[],{'sys::NoDoc':""},8195);
    fan.std.NativeCharset.$type = $at('NativeCharset','std::Encoder',[],{},262274);
    fan.std.Utf8.$type = $at('Utf8','std::Encoder',[],{},262274);
    fan.std.Utf16.$type = $at('Utf16','std::Encoder',[],{},262274);
    fan.std.MimeType.$type = $at('MimeType','sys::Obj',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},8226);
    fan.std.ProxyOutStream.$type = $at('ProxyOutStream','std::OutStream',[],{'sys::NoDoc':""},270336);
    fan.std.SysOutStream.$type = $at('SysOutStream','std::OutStream',[],{},262272);
    fan.std.UriScheme.$type = $at('UriScheme','sys::Obj',[],{},8195);
    fan.std.FanScheme.$type = $at('FanScheme','std::UriScheme',[],{},262274);
    fan.std.FileScheme.$type = $at('FileScheme','std::UriScheme',[],{},262274);
    fan.std.FileStore.$type = $at('FileStore','sys::Obj',[],{},8194);
    fan.std.ProxyInStream.$type = $at('ProxyInStream','std::InStream',[],{'sys::NoDoc':""},270336);
    fan.std.SysInStream.$type = $at('SysInStream','std::InStream',[],{},262272);
    fan.std.LocalFile.$type = $at('LocalFile','std::File',[],{'sys::NoPeer':""},262274);
    fan.std.TimeZone.$type = $at('TimeZone','sys::Obj',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},270338);
    fan.std.Date.$type = $at('Date','sys::Obj',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},532514);
    fan.std.Duration.$type = $at('Duration','sys::Obj',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},532514);
    fan.std.Locale.$type = $at('Locale','sys::Obj',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},270338);
    fan.std.TimeOfDay.$type = $at('TimeOfDay','sys::Obj',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},532514);
    fan.std.TimePoint.$type = $at('TimePoint','sys::Obj',[],{'sys::Serializable':"sys::Serializable{simple=true;}",'sys::NoPeer':""},532514);
    fan.std.Weekday.$type = $at('Weekday','sys::Enum',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},8234);
    fan.std.Month.$type = $at('Month','sys::Enum',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},8234);
    fan.std.DateTime.$type = $at('DateTime','sys::Obj',[],{'sys::Serializable':"sys::Serializable{simple=true;}",'sys::NoPeer':""},532514);
    fan.std.ObjDecoder.$type = $at('ObjDecoder','sys::Obj',[],{},128);
    fan.std.Using.$type = $at('Using','sys::Obj',[],{},129);
    fan.std.UsingPod.$type = $at('UsingPod','std::Using',[],{},262272);
    fan.std.UsingType.$type = $at('UsingType','std::Using',[],{},262272);
    fan.std.Tokenizer.$type = $at('Tokenizer','sys::Obj',[],{},128);
    fan.std.Undo.$type = $at('Undo','sys::Obj',[],{},128);
    fan.std.ObjEncoder.$type = $at('ObjEncoder','sys::Obj',[],{},128);
    fan.std.Token.$type = $at('Token','sys::Obj',[],{},128);
    fan.std.AtomicInt.$type.$af('val',8704,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('val','sys::Int',true)], fan.std.Param.$type),{}).$am('getAndSet',8704,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('val','sys::Int',false)], fan.std.Param.$type),{}).$am('compareAndSet',8704,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('expect','sys::Int',false),new fan.std.Param('update','sys::Int',false)], fan.std.Param.$type),{}).$am('getAndIncrement',8704,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('getAndDecrement',8704,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('getAndAdd',8704,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('delta','sys::Int',false)], fan.std.Param.$type),{}).$am('incrementAndGet',8704,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('decrementAndGet',8704,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('addAndGet',8704,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('delta','sys::Int',false)], fan.std.Param.$type),{}).$am('increment',8704,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('decrement',8704,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('add',8704,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('delta','sys::Int',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Unsafe.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('val','std::Unsafe^T',false)], fan.std.Param.$type),{}).$am('val',8192,'std::Unsafe^T',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('get',8192,'std::Unsafe^T',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Lazy.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('initial','sys::Func<std::Lazy^T>',false)], fan.std.Param.$type),{}).$am('get',8192,'std::Lazy^T',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.AtomicRef.$type.$af('val',8704,'std::AtomicRef^T?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('val','std::AtomicRef^T?',true)], fan.std.Param.$type),{}).$am('getAndSet',8704,'std::AtomicRef^T?',fan.sys.List.makeFromJs([new fan.std.Param('val','std::AtomicRef^T?',false)], fan.std.Param.$type),{}).$am('compareAndSet',8704,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('expect','std::AtomicRef^T?',false),new fan.std.Param('update','std::AtomicRef^T?',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Lock.$type.$am('tryLock',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('nanoTime','sys::Int',true)], fan.std.Param.$type),{}).$am('lock',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('unlock',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('sync',8192,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Obj?>',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.SoftRef.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('val','std::SoftRef^T',false)], fan.std.Param.$type),{}).$am('get',8192,'std::SoftRef^T?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.AtomicBool.$type.$af('val',8704,'sys::Bool',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('val','sys::Bool',true)], fan.std.Param.$type),{}).$am('getAndSet',8704,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('val','sys::Bool',false)], fan.std.Param.$type),{}).$am('compareAndSet',8704,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('expect','sys::Bool',false),new fan.std.Param('update','sys::Bool',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Map.$type.$af('defVal',106498,'std::Map<sys::Obj,sys::Obj>',{}).$af('defV',335872,'std::Map^V?',{}).$am('make',40966,'std::Map<std::Map^K,std::Map^V>',fan.sys.List.makeFromJs([new fan.std.Param('capacity','sys::Int',true)], fan.std.Param.$type),{}).$am('modify',266241,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('privateMake',4100,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('createEmpty',266241,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isEmpty',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('size',270337,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('get',270337,'std::Map^V?',fan.sys.List.makeFromJs([new fan.std.Param('key','std::Map^K',false),new fan.std.Param('defValue','std::Map^V?',true)], fan.std.Param.$type),{'sys::Operator':""}).$am('getOrThrow',8192,'std::Map^V',fan.sys.List.makeFromJs([new fan.std.Param('key','sys::Obj',false)], fan.std.Param.$type),{}).$am('getChecked',8192,'std::Map^V?',fan.sys.List.makeFromJs([new fan.std.Param('key','std::Map^K',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('containsKey',270337,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('key','std::Map^K',false)], fan.std.Param.$type),{}).$am('keys',270337,'sys::List<std::Map^K>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('vals',270337,'sys::List<std::Map^V>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('dup',270336,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('set',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('key','std::Map^K',false),new fan.std.Param('val','std::Map^V',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('add',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('key','std::Map^K',false),new fan.std.Param('val','std::Map^V',false)], fan.std.Param.$type),{}).$am('addIfNotNull',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('key','std::Map^K',false),new fan.std.Param('val','std::Map^V?',false)], fan.std.Param.$type),{}).$am('getOrAdd',8192,'std::Map^V',fan.sys.List.makeFromJs([new fan.std.Param('key','std::Map^K',false),new fan.std.Param('valFunc','sys::Func<std::Map^V,std::Map^K>',false)], fan.std.Param.$type),{}).$am('setAll',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('m','std::Map<std::Map^K,std::Map^V>',false)], fan.std.Param.$type),{}).$am('addAll',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('m','std::Map<std::Map^K,std::Map^V>',false)], fan.std.Param.$type),{}).$am('setList',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('list','sys::List<std::Map^V>',false),new fan.std.Param('c','sys::Func<std::Map^K,std::Map^V,sys::Int>?',true)], fan.std.Param.$type),{}).$am('addList',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('list','sys::List<std::Map^V>',false),new fan.std.Param('c','sys::Func<std::Map^K,std::Map^V,sys::Int>?',true)], fan.std.Param.$type),{}).$am('remove',270337,'std::Map^V?',fan.sys.List.makeFromJs([new fan.std.Param('key','std::Map^K',false)], fan.std.Param.$type),{}).$am('clear',270337,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('join',270336,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('separator','sys::Str',false),new fan.std.Param('c','sys::Func<sys::Str,std::Map^V,std::Map^K>?',true)], fan.std.Param.$type),{}).$am('toCode',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('each',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Void,std::Map^V,std::Map^K>',false)], fan.std.Param.$type),{}).$am('eachWhile',270337,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Obj?,std::Map^V,std::Map^K>',false)], fan.std.Param.$type),{}).$am('find',8192,'std::Map^V?',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Bool,std::Map^V,std::Map^K>',false)], fan.std.Param.$type),{}).$am('findAll',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Bool,std::Map^V,std::Map^K>',false)], fan.std.Param.$type),{}).$am('exclude',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Bool,std::Map^V,std::Map^K>',false)], fan.std.Param.$type),{}).$am('any',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Bool,std::Map^V,std::Map^K>',false)], fan.std.Param.$type),{}).$am('all',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Bool,std::Map^V,std::Map^K>',false)], fan.std.Param.$type),{}).$am('reduce',8192,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('init','sys::Obj?',false),new fan.std.Param('c','sys::Func<sys::Obj?,sys::Obj?,std::Map^V,std::Map^K>',false)], fan.std.Param.$type),{}).$am('map',8192,'std::Map<std::Map^K,sys::Obj?>',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Obj?,std::Map^V,std::Map^K>',false)], fan.std.Param.$type),{}).$am('isRO',270337,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isRW',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('ro',270337,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('rw',270337,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isImmutable',271361,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toImmutable',271361,'std::Map<std::Map^K,std::Map^V>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.HashMap.$type.$af('array',67584,'sys::List<std::MapEntryList?>',{}).$af('readOnly',67584,'sys::Bool',{}).$af('immutable',67584,'sys::Bool',{}).$af('loadFactor',67584,'sys::Float',{}).$af('keySafe',69632,'sys::Bool',{}).$af('size',336896,'sys::Int',{}).$am('modify',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('capacity','sys::Int',true),new fan.std.Param('loadFactor','sys::Float',true)], fan.std.Param.$type),{}).$am('getHash',2048,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('key','std::HashMap^K?',false)], fan.std.Param.$type),{}).$am('rawGet',4096,'std::HashMap^V?',fan.sys.List.makeFromJs([new fan.std.Param('key','std::HashMap^K',false),new fan.std.Param('defV','std::HashMap^V?',true)], fan.std.Param.$type),{}).$am('get',271360,'std::HashMap^V?',fan.sys.List.makeFromJs([new fan.std.Param('key','std::HashMap^K',false),new fan.std.Param('defValue','std::HashMap^V?',true)], fan.std.Param.$type),{'sys::Operator':""}).$am('containsKey',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('key','std::HashMap^K',false)], fan.std.Param.$type),{}).$am('keys',271360,'sys::List<std::HashMap^K>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('vals',271360,'sys::List<std::HashMap^V>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('createEmpty',267264,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('rehash',4096,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('rawSet',4096,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('key','std::HashMap^K',false),new fan.std.Param('val','std::HashMap^V',false)], fan.std.Param.$type),{}).$am('set',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('key','std::HashMap^K',false),new fan.std.Param('val','std::HashMap^V',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('add',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('key','std::HashMap^K',false),new fan.std.Param('val','std::HashMap^V',false)], fan.std.Param.$type),{}).$am('remove',271360,'std::HashMap^V?',fan.sys.List.makeFromJs([new fan.std.Param('key','std::HashMap^K',false)], fan.std.Param.$type),{}).$am('clear',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('each',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Void,std::HashMap^V,std::HashMap^K>',false)], fan.std.Param.$type),{}).$am('eachWhile',271360,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Obj?,std::HashMap^V,std::HashMap^K>',false)], fan.std.Param.$type),{}).$am('isRO',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('ro',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('rw',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isImmutable',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toImmutable',271360,'std::Map<std::HashMap^K,std::HashMap^V>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.OrderedMap.$type.$af('list',67584,'std::LinkedList',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('capacity','sys::Int',true)], fan.std.Param.$type),{}).$am('createEmpty',267264,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('set',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('key','std::OrderedMap^K',false),new fan.std.Param('val','std::OrderedMap^V',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('add',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('key','std::OrderedMap^K',false),new fan.std.Param('val','std::OrderedMap^V',false)], fan.std.Param.$type),{}).$am('get',271360,'std::OrderedMap^V?',fan.sys.List.makeFromJs([new fan.std.Param('key','std::OrderedMap^K',false),new fan.std.Param('defValue','std::OrderedMap^V?',true)], fan.std.Param.$type),{'sys::Operator':""}).$am('each',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Void,std::OrderedMap^V,std::OrderedMap^K>',false)], fan.std.Param.$type),{}).$am('eachWhile',271360,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Obj?,std::OrderedMap^V,std::OrderedMap^K>',false)], fan.std.Param.$type),{}).$am('keys',271360,'sys::List<std::OrderedMap^K>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('vals',271360,'sys::List<std::OrderedMap^V>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('remove',271360,'std::OrderedMap^V?',fan.sys.List.makeFromJs([new fan.std.Param('key','std::OrderedMap^K',false)], fan.std.Param.$type),{}).$am('clear',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Set.$type.$af('map',67584,'std::Map<std::Set^T,sys::Obj?>',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('add',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('k','std::Set^T',false)], fan.std.Param.$type),{}).$am('contains',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('k','std::Set^T',false)], fan.std.Param.$type),{}).$am('size',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('each',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,std::Set^T>',false)], fan.std.Param.$type),{});
    fan.std.AvlNode.$type.$af('key',73728,'sys::Obj?',{}).$af('val',73728,'sys::Obj?',{}).$af('height',73728,'sys::Int',{}).$af('right',73728,'std::AvlNode?',{}).$af('left',73728,'std::AvlNode?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('key','sys::Obj?',false),new fan.std.Param('val','sys::Obj?',false)], fan.std.Param.$type),{}).$am('resetHeight',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isBalanced',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.TreeMap.$type.$af('root',67584,'std::AvlNode?',{}).$af('readOnly',67584,'sys::Bool',{}).$af('immutable',67584,'sys::Bool',{}).$af('keySafe',69632,'sys::Bool',{}).$af('size',336896,'sys::Int',{}).$am('modify',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('getHeight',32898,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('N','std::AvlNode?',false)], fan.std.Param.$type),{}).$am('max',34818,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('a','sys::Int',false),new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('LL',2048,'std::AvlNode',fan.sys.List.makeFromJs([new fan.std.Param('K2','std::AvlNode',false)], fan.std.Param.$type),{}).$am('RR',2048,'std::AvlNode',fan.sys.List.makeFromJs([new fan.std.Param('K1','std::AvlNode',false)], fan.std.Param.$type),{}).$am('LR',2048,'std::AvlNode',fan.sys.List.makeFromJs([new fan.std.Param('K3','std::AvlNode',false)], fan.std.Param.$type),{}).$am('RL',2048,'std::AvlNode',fan.sys.List.makeFromJs([new fan.std.Param('K1','std::AvlNode',false)], fan.std.Param.$type),{}).$am('insertAt',2048,'std::AvlNode',fan.sys.List.makeFromJs([new fan.std.Param('k','std::TreeMap^K',false),new fan.std.Param('v','std::TreeMap^V',false),new fan.std.Param('T','std::AvlNode?',false),new fan.std.Param('overwrite','sys::Bool',false)], fan.std.Param.$type),{}).$am('set',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('key','std::TreeMap^K',false),new fan.std.Param('val','std::TreeMap^V',false)], fan.std.Param.$type),{}).$am('deleteAt',2048,'std::AvlNode?',fan.sys.List.makeFromJs([new fan.std.Param('k','std::TreeMap^K',false),new fan.std.Param('T','std::AvlNode?',false),new fan.std.Param('old','std::AvlNode?',false)], fan.std.Param.$type),{}).$am('remove',271360,'std::TreeMap^V?',fan.sys.List.makeFromJs([new fan.std.Param('e','std::TreeMap^K',false)], fan.std.Param.$type),{}).$am('searchAt',2048,'std::AvlNode?',fan.sys.List.makeFromJs([new fan.std.Param('x','std::TreeMap^K',false),new fan.std.Param('T','std::AvlNode?',false)], fan.std.Param.$type),{}).$am('get',271360,'std::TreeMap^V?',fan.sys.List.makeFromJs([new fan.std.Param('k','std::TreeMap^K',false),new fan.std.Param('defValue','std::TreeMap^V?',true)], fan.std.Param.$type),{}).$am('containsKey',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('k','std::TreeMap^K',false)], fan.std.Param.$type),{}).$am('add',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('key','std::TreeMap^K',false),new fan.std.Param('val','std::TreeMap^V',false)], fan.std.Param.$type),{}).$am('travel',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,std::TreeMap^V,std::TreeMap^K>',false),new fan.std.Param('T','std::AvlNode?',false)], fan.std.Param.$type),{}).$am('each',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,std::TreeMap^V,std::TreeMap^K>',false)], fan.std.Param.$type),{}).$am('clear',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('travelWhile',2048,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Obj?,std::TreeMap^V,std::TreeMap^K>',false),new fan.std.Param('T','std::AvlNode?',false)], fan.std.Param.$type),{}).$am('eachWhile',271360,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Obj?,std::TreeMap^V,std::TreeMap^K>',false)], fan.std.Param.$type),{}).$am('keys',271360,'sys::List<std::TreeMap^K>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('vals',271360,'sys::List<std::TreeMap^V>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('createEmpty',267264,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isRO',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('ro',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('rw',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isImmutable',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toImmutable',271360,'std::Map<std::TreeMap^K,std::TreeMap^V>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.LinkedElem.$type.$af('next',73728,'std::LinkedElem?',{}).$af('previous',73728,'std::LinkedElem?',{}).$af('val',73728,'sys::Obj?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('v','sys::Obj?',true)], fan.std.Param.$type),{}).$am('remove',128,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.LinkedList.$type.$af('head',69632,'std::LinkedElem',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('clear',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('remove',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','std::LinkedElem',false)], fan.std.Param.$type),{}).$am('first',8192,'std::LinkedElem',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('last',8192,'std::LinkedElem',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('end',8192,'std::LinkedElem',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('add',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','std::LinkedElem',false)], fan.std.Param.$type),{}).$am('insertBefore',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','std::LinkedElem',false),new fan.std.Param('other','std::LinkedElem',true)], fan.std.Param.$type),{}).$am('isEmpty',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.MapEntry.$type.$af('key',73728,'sys::Obj?',{}).$af('value',8192,'sys::Obj?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('v','sys::Obj?',true)], fan.std.Param.$type),{});
    fan.std.MapEntryList.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('begin',8192,'std::MapEntry',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('findByKey',8192,'std::MapEntry?',fan.sys.List.makeFromJs([new fan.std.Param('key','sys::Obj?',false)], fan.std.Param.$type),{}).$am('removeByKey',8192,'std::MapEntry?',fan.sys.List.makeFromJs([new fan.std.Param('key','sys::Obj?',false)], fan.std.Param.$type),{}).$am('setByKey',8192,'std::MapEntry?',fan.sys.List.makeFromJs([new fan.std.Param('key','sys::Obj?',false),new fan.std.Param('value','sys::Obj?',false)], fan.std.Param.$type),{}).$am('addByKey',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('key','sys::Obj?',false),new fan.std.Param('value','sys::Obj?',false)], fan.std.Param.$type),{});
    fan.std.Tuple.$type.$af('immutable',4261888,'sys::Bool',{}).$af('first',4268032,'std::Tuple^A',{}).$af('second',4268032,'std::Tuple^B',{}).$af('third',4268032,'std::Tuple^C',{}).$am('make1',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('a','std::Tuple^A',false)], fan.std.Param.$type),{}).$am('make2',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('a','std::Tuple^A',false),new fan.std.Param('b','std::Tuple^B',false)], fan.std.Param.$type),{}).$am('make3',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('a','std::Tuple^A',false),new fan.std.Param('b','std::Tuple^B',false),new fan.std.Param('c','std::Tuple^C',false)], fan.std.Param.$type),{}).$am('makeConst',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('a','std::Tuple^A',false),new fan.std.Param('b','std::Tuple^B',false),new fan.std.Param('c','std::Tuple^C',false)], fan.std.Param.$type),{}).$am('isImmutable',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toImmutable',271360,'std::Tuple<std::Tuple^A,std::Tuple^B,std::Tuple^C>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.CIKey.$type.$af('k',73730,'sys::Str',{}).$af('key',73730,'sys::Obj',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('key','sys::Obj',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('compare',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{});
    fan.std.CaseInsensitiveMap.$type.$af('_map',4261888,'std::HashMap<std::CIKey,std::CaseInsensitiveMap^V>',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('capacity','sys::Int',true)], fan.std.Param.$type),{}).$am('privateMake',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('m','std::HashMap<std::CIKey,std::CaseInsensitiveMap^V>',false)], fan.std.Param.$type),{}).$am('createEmpty',267264,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('size',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('set',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('key','std::CaseInsensitiveMap^K',false),new fan.std.Param('val','std::CaseInsensitiveMap^V',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('add',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('key','std::CaseInsensitiveMap^K',false),new fan.std.Param('val','std::CaseInsensitiveMap^V',false)], fan.std.Param.$type),{}).$am('get',271360,'std::CaseInsensitiveMap^V?',fan.sys.List.makeFromJs([new fan.std.Param('key','std::CaseInsensitiveMap^K',false),new fan.std.Param('defValue','std::CaseInsensitiveMap^V?',true)], fan.std.Param.$type),{'sys::Operator':""}).$am('containsKey',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('key','std::CaseInsensitiveMap^K',false)], fan.std.Param.$type),{}).$am('remove',271360,'std::CaseInsensitiveMap^V?',fan.sys.List.makeFromJs([new fan.std.Param('key','std::CaseInsensitiveMap^K',false)], fan.std.Param.$type),{}).$am('each',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Void,std::CaseInsensitiveMap^V,std::CaseInsensitiveMap^K>',false)], fan.std.Param.$type),{}).$am('eachWhile',271360,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Obj?,std::CaseInsensitiveMap^V,std::CaseInsensitiveMap^K>',false)], fan.std.Param.$type),{}).$am('keys',271360,'sys::List<std::CaseInsensitiveMap^K>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('clear',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('vals',271360,'sys::List<std::CaseInsensitiveMap^V>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isRO',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('modify',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('ro',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('rw',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isImmutable',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toImmutable',271360,'std::Map<std::CaseInsensitiveMap^K,std::CaseInsensitiveMap^V>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.ConcurrentMap.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('initialCapacity','sys::Int',true)], fan.std.Param.$type),{}).$am('isEmpty',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('size',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('get',8192,'std::ConcurrentMap^V?',fan.sys.List.makeFromJs([new fan.std.Param('key','std::ConcurrentMap^K',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('set',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('key','std::ConcurrentMap^K',false),new fan.std.Param('val','std::ConcurrentMap^V',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('add',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('key','std::ConcurrentMap^K',false),new fan.std.Param('val','std::ConcurrentMap^V',false)], fan.std.Param.$type),{}).$am('getOrAdd',8192,'std::ConcurrentMap^V',fan.sys.List.makeFromJs([new fan.std.Param('key','std::ConcurrentMap^K',false),new fan.std.Param('defVal','std::ConcurrentMap^V',false)], fan.std.Param.$type),{}).$am('setAll',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('m','std::Map<std::ConcurrentMap^K,std::ConcurrentMap^V>',false)], fan.std.Param.$type),{}).$am('remove',8192,'std::ConcurrentMap^V?',fan.sys.List.makeFromJs([new fan.std.Param('key','std::ConcurrentMap^K',false)], fan.std.Param.$type),{}).$am('clear',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('each',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,std::ConcurrentMap^V,std::ConcurrentMap^K>',false)], fan.std.Param.$type),{}).$am('eachWhile',8192,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Obj?,std::ConcurrentMap^V,std::ConcurrentMap^K>',false)], fan.std.Param.$type),{}).$am('containsKey',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('key','std::ConcurrentMap^K',false)], fan.std.Param.$type),{}).$am('keys',8192,'sys::List<std::ConcurrentMap^K>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('vals',8192,'sys::List<std::ConcurrentMap^V>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.CacheItem.$type.$af('key',73728,'sys::Obj?',{}).$af('cacheCount',73728,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Cache.$type.$af('map',67584,'std::Map<sys::Obj,std::CacheItem>',{}).$af('list',67584,'std::LinkedList',{}).$af('max',67584,'sys::Int',{}).$af('onRemoveItem',73728,'sys::Func<sys::Void,sys::Obj>?',{}).$af('canRemoveItem',73728,'sys::Func<sys::Bool,sys::Obj>?',{}).$af('maxCount',67584,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('getItem',128,'std::CacheItem?',fan.sys.List.makeFromJs([new fan.std.Param('key','sys::Obj',false)], fan.std.Param.$type),{}).$am('each',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::Obj>',false)], fan.std.Param.$type),{}).$am('get',8192,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('key','sys::Obj',false)], fan.std.Param.$type),{}).$am('newItem',262272,'std::CacheItem',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('update',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('item','std::CacheItem',false)], fan.std.Param.$type),{}).$am('clean',2048,'std::CacheItem?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('clear',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('set',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('key','sys::Obj',false),new fan.std.Param('val','sys::Obj?',false)], fan.std.Param.$type),{}).$am('onReomove',262272,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','std::CacheItem',false)], fan.std.Param.$type),{});
    fan.std.ListExt.$type.$am('unique',1089538,'sys::List<sys::Obj?>',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::List<sys::Obj?>',false)], fan.std.Param.$type),{}).$am('union',1089538,'sys::List<sys::Obj?>',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::List<sys::Obj?>',false),new fan.std.Param('that','sys::List<sys::Obj?>',false)], fan.std.Param.$type),{}).$am('intersection',1089538,'sys::List<sys::Obj?>',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::List<sys::Obj?>',false),new fan.std.Param('that','sys::List<sys::Obj?>',false)], fan.std.Param.$type),{}).$am('findType',1089538,'sys::List<sys::Obj?>',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::List<sys::Obj?>',false),new fan.std.Param('t','std::Type',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Math.$type.$af('e',106498,'sys::Float',{}).$af('pi',106498,'sys::Float',{}).$am('approx',1089538,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false),new fan.std.Param('that','sys::Float',false),new fan.std.Param('tolerance','sys::Float?',true)], fan.std.Param.$type),{}).$am('abs',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('min',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false),new fan.std.Param('that','sys::Float',false)], fan.std.Param.$type),{}).$am('max',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false),new fan.std.Param('that','sys::Float',false)], fan.std.Param.$type),{}).$am('ceil',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('floor',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('round',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('exp',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('log',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('log10',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('pow',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false),new fan.std.Param('pow','sys::Float',false)], fan.std.Param.$type),{}).$am('sqrt',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('acos',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('asin',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('atan',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('atan2',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('y','sys::Float',false),new fan.std.Param('x','sys::Float',false)], fan.std.Param.$type),{}).$am('cos',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('cosh',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('sin',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('sinh',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('tan',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('tanh',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('toDegrees',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{}).$am('toRadians',1089538,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Float',false)], fan.std.Param.$type),{});
    fan.std.Test.$type.$af('failVerifyCount',65664,'sys::Int',{}).$af('verifyCount',65664,'sys::Int',{}).$af('curTestMethod',73728,'std::Method?',{}).$af('tempDir',73728,'std::File?',{}).$af('isJs',106498,'sys::Bool',{}).$am('make',4100,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('setup',270336,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('teardown',270336,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toS',34818,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('verify',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('cond','sys::Bool',false),new fan.std.Param('msg','sys::Str?',true)], fan.std.Param.$type),{}).$am('verifyFalse',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('cond','sys::Bool',false),new fan.std.Param('msg','sys::Str?',true)], fan.std.Param.$type),{}).$am('verifyNull',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('a','sys::Obj?',false),new fan.std.Param('msg','sys::Str?',true)], fan.std.Param.$type),{}).$am('verifyNotNull',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('a','sys::Obj?',false),new fan.std.Param('msg','sys::Str?',true)], fan.std.Param.$type),{}).$am('verifyEq',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('a','sys::Obj?',false),new fan.std.Param('b','sys::Obj?',false),new fan.std.Param('msg','sys::Str?',true)], fan.std.Param.$type),{}).$am('verifyNotEq',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('a','sys::Obj?',false),new fan.std.Param('b','sys::Obj?',false),new fan.std.Param('msg','sys::Str?',true)], fan.std.Param.$type),{}).$am('verifySame',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('a','sys::Obj?',false),new fan.std.Param('b','sys::Obj?',false),new fan.std.Param('msg','sys::Str?',true)], fan.std.Param.$type),{}).$am('verifyNotSame',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('a','sys::Obj?',false),new fan.std.Param('b','sys::Obj?',false),new fan.std.Param('msg','sys::Str?',true)], fan.std.Param.$type),{}).$am('verifyTrue',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('cond','sys::Bool',false),new fan.std.Param('msg','sys::Str?',true)], fan.std.Param.$type),{'sys::NoDoc':""}).$am('verifyType',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false),new fan.std.Param('t','std::Type',false)], fan.std.Param.$type),{}).$am('verifyIsType',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false),new fan.std.Param('t','std::Type',false)], fan.std.Param.$type),{}).$am('verifyErr',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('errType','std::Type?',false),new fan.std.Param('c','sys::Func<sys::Void,std::Test>',false)], fan.std.Param.$type),{}).$am('verifyErrMsg',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('errType','std::Type',false),new fan.std.Param('errMsg','sys::Str',false),new fan.std.Param('c','sys::Func<sys::Void,std::Test>',false)], fan.std.Param.$type),{'sys::NoDoc':""}).$am('fail',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str?',true)], fan.std.Param.$type),{}).$am('main',40962,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('args','sys::List<sys::Str>',false)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.TestRunner.$type.$af('pod',67584,'std::Pod',{}).$af('types',67584,'sys::List<std::Type>',{}).$af('method',67584,'std::Method?',{}).$af('failures',67584,'sys::Int',{}).$af('verifyCount',67584,'sys::Int',{}).$af('failureNames',67584,'sys::List<sys::Str>',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('arg','sys::Str',false)], fan.std.Param.$type),{}).$am('run',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('runTest',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('type','std::Type',false),new fan.std.Param('meth','std::Method',false)], fan.std.Param.$type),{});
    fan.std.TestErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str?',true),new fan.std.Param('cause','sys::Err?',true)], fan.std.Param.$type),{});
    fan.std.Process.$type.$af('command',73728,'sys::List<sys::Str>',{}).$af('dir',73728,'std::File?',{}).$af('mergeErr',73728,'sys::Bool',{}).$af('out',73728,'std::OutStream?',{}).$af('err',73728,'std::OutStream?',{}).$af('in',73728,'std::InStream?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('cmd','sys::List<sys::Str>',true),new fan.std.Param('dir','std::File?',true)], fan.std.Param.$type),{}).$am('env',8704,'std::Map<sys::Str,sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('run',8704,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('join',8704,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('kill',8704,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Decimal.$type.$af('defVal',106498,'std::Decimal',{}).$am('fromStr',40966,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('toDecimal',1089538,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Num',false)], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('compare',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('negate',8192,'std::Decimal',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Operator':""}).$am('increment',8192,'std::Decimal',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Operator':""}).$am('decrement',8192,'std::Decimal',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Operator':""}).$am('mult',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('b','std::Decimal',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('multInt',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('multFloat',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('div',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('b','std::Decimal',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('divInt',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('divFloat',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('mod',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('b','std::Decimal',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('modInt',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('modFloat',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('plus',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('b','std::Decimal',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('plusInt',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('plusFloat',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('minus',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('b','std::Decimal',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('minusInt',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('minusFloat',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('abs',8192,'std::Decimal',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('min',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('that','std::Decimal',false)], fan.std.Param.$type),{}).$am('max',8192,'std::Decimal',fan.sys.List.makeFromJs([new fan.std.Param('that','std::Decimal',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toCode',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toInt',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toFloat',271360,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toLocale',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('pattern','sys::Str?',true)], fan.std.Param.$type),{});
    fan.std.Extension.$type.$am('readObj',1089538,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false),new fan.std.Param('close','sys::Bool',true),new fan.std.Param('options','std::Map<sys::Str,sys::Obj>?',true)], fan.std.Param.$type),{}).$am('writeObj',1089538,'std::OutStream',fan.sys.List.makeFromJs([new fan.std.Param('out','std::OutStream',false),new fan.std.Param('obj','sys::Obj?',false),new fan.std.Param('close','sys::Bool',true),new fan.std.Param('options','std::Map<sys::Str,sys::Obj>?',true)], fan.std.Param.$type),{}).$am('traceTo',1090050,'sys::Err',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Err',false),new fan.std.Param('out','std::OutStream',true),new fan.std.Param('options','std::Map<sys::Str,sys::Obj>?',true)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.LogRec.$type.$af('time',73730,'std::DateTime',{}).$af('level',73730,'std::LogLevel',{}).$af('logName',73730,'sys::Str',{}).$af('msg',73730,'sys::Str',{}).$af('err',73730,'sys::Err?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('time','std::DateTime',false),new fan.std.Param('level','std::LogLevel',false),new fan.std.Param('logName','sys::Str',false),new fan.std.Param('message','sys::Str',false),new fan.std.Param('err','sys::Err?',true)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('print',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('out','std::OutStream',true)], fan.std.Param.$type),{});
    fan.std.LogMgr.$type.$af('map',67584,'std::Map<sys::Str,std::Log>',{}).$af('handlers',73728,'sys::List<sys::Func<sys::Void,std::LogRec>>',{}).$af('lock',73728,'std::Lock',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('handlersDup',8192,'sys::List<sys::Func<sys::Void,std::LogRec>>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('logs',8192,'sys::List<std::Log>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('find',8192,'std::Log?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',false)], fan.std.Param.$type),{}).$am('doRegister',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('log','std::Log',false)], fan.std.Param.$type),{});
    fan.std.LogLevel.$type.$af('debug',106506,'std::LogLevel',{}).$af('info',106506,'std::LogLevel',{}).$af('warn',106506,'std::LogLevel',{}).$af('err',106506,'std::LogLevel',{}).$af('silent',106506,'std::LogLevel',{}).$af('vals',106498,'sys::List<std::LogLevel>',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('$ordinal','sys::Int',false),new fan.std.Param('$name','sys::Str',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'std::LogLevel?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Log.$type.$af('unsafeLogMgr',100354,'std::Unsafe<std::LogMgr>',{}).$af('name',73730,'sys::Str',{}).$af('level',73728,'std::LogLevel',{}).$am('logMgr',34818,'std::LogMgr',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isImmutable',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toImmutable',271360,'sys::Obj',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('list',40962,'sys::List<std::Log>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('find',40962,'std::Log?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('get',40962,'std::Log',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false)], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('register','sys::Bool',false)], fan.std.Param.$type),{}).$am('doRegister',34818,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('log','std::Log',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isEnabled',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('level','std::LogLevel',false)], fan.std.Param.$type),{}).$am('isErr',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isWarn',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isInfo',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isDebug',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('err',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',false),new fan.std.Param('err','sys::Err?',true)], fan.std.Param.$type),{}).$am('warn',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',false),new fan.std.Param('err','sys::Err?',true)], fan.std.Param.$type),{}).$am('info',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',false),new fan.std.Param('err','sys::Err?',true)], fan.std.Param.$type),{}).$am('debug',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',false),new fan.std.Param('err','sys::Err?',true)], fan.std.Param.$type),{}).$am('log',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('rec','std::LogRec',false)], fan.std.Param.$type),{}).$am('handlers',40962,'sys::List<sys::Func<sys::Void,std::LogRec>>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('addHandler',40962,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('handler','sys::Func<sys::Void,std::LogRec>',false)], fan.std.Param.$type),{}).$am('removeHandler',40962,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('handler','sys::Func<sys::Void,std::LogRec>',false)], fan.std.Param.$type),{}).$am('printLogRec',33410,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('rec','std::LogRec',false),new fan.std.Param('out','std::OutStream',false)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Regex.$type.$af('source',67586,'sys::Str',{}).$af('defVal',106498,'std::Regex',{}).$am('init',2560,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fromStr',40962,'std::Regex',fan.sys.List.makeFromJs([new fan.std.Param('pattern','sys::Str',false)], fan.std.Param.$type),{}).$am('glob',40962,'std::Regex',fan.sys.List.makeFromJs([new fan.std.Param('pattern','sys::Str',false)], fan.std.Param.$type),{}).$am('quote',40962,'std::Regex',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false)], fan.std.Param.$type),{}).$am('make',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('source','sys::Str',false)], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('matches',8704,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('matcher',8704,'std::RegexMatcher',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('split',8704,'sys::List<sys::Str>',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('limit','sys::Int',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.CachedScript.$type.$af('modified',73730,'std::TimePoint',{}).$af('size',73730,'sys::Int',{}).$af('typeName',73730,'sys::Str',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('file','std::File',false),new fan.std.Param('t','std::Type',false)], fan.std.Param.$type),{});
    fan.std.ScriptCompiler.$type.$af('cache',73730,'std::ConcurrentMap<sys::Str,std::CachedScript>',{}).$af('cur',106498,'std::ScriptCompiler',{}).$am('compile',8192,'std::Type',fan.sys.List.makeFromJs([new fan.std.Param('file','std::File',false),new fan.std.Param('options','std::Map<sys::Str,sys::Obj>?',true)], fan.std.Param.$type),{}).$am('compileFile',2048,'std::Pod',fan.sys.List.makeFromJs([new fan.std.Param('file','std::File',false),new fan.std.Param('options','std::Map<sys::Str,sys::Obj>?',false)], fan.std.Param.$type),{}).$am('execute',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('fileName','sys::Str',false),new fan.std.Param('args','sys::List<sys::Str>?',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.RegexMatcher.$type.$am('matches',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('find',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('replaceFirst',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('replacement','sys::Str',false)], fan.std.Param.$type),{}).$am('replaceAll',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('replacement','sys::Str',false)], fan.std.Param.$type),{}).$am('groupCount',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('group',8192,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('group','sys::Int',true)], fan.std.Param.$type),{}).$am('start',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('group','sys::Int',true)], fan.std.Param.$type),{}).$am('end',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('group','sys::Int',true)], fan.std.Param.$type),{});
    fan.std.EnvProps.$type.$af('cache',73728,'std::Map<std::Uri,std::FileProps>',{}).$af('lock',73728,'std::Lock',{}).$am('get',8192,'std::Map<sys::Str,sys::Str>',fan.sys.List.makeFromJs([new fan.std.Param('pod','std::Pod',false),new fan.std.Param('path','std::Uri',false),new fan.std.Param('maxAge','std::Duration',false)], fan.std.Param.$type),{}).$am('getUnSafe',128,'std::Map<sys::Str,sys::Str>',fan.sys.List.makeFromJs([new fan.std.Param('pod','std::Pod',false),new fan.std.Param('path','std::Uri',false),new fan.std.Param('maxAge','std::Duration',false)], fan.std.Param.$type),{}).$am('getFiles',2048,'sys::List<std::File>',fan.sys.List.makeFromJs([new fan.std.Param('pod','std::Pod',false),new fan.std.Param('path','std::Uri',false),new fan.std.Param('uri','std::Uri',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.FileProps.$type.$af('props',73728,'std::Map<sys::Str,sys::Str>',{}).$af('readTime',73728,'std::TimePoint',{}).$af('modified',73728,'sys::List<std::TimePoint>?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('loadAll',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('files','sys::List<std::File>',false)], fan.std.Param.$type),{}).$am('isStale',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::List<std::File>',false)], fan.std.Param.$type),{}).$am('load',32898,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('props','std::Map<sys::Str,sys::Str>',false),new fan.std.Param('f','std::File',false)], fan.std.Param.$type),{});
    fan.std.Uuid.$type.$af('hi',67586,'sys::Int',{}).$af('lo',67586,'sys::Int',{}).$am('make',41478,'std::Uuid',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('makeBits',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('hi','sys::Int',false),new fan.std.Param('lo','sys::Int',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'std::Uuid',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false)], fan.std.Param.$type),{}).$am('bitsHi',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('bitsLo',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('compare',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('append',34818,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::StrBuf',false),new fan.std.Param('val','sys::Int',false),new fan.std.Param('width','sys::Int',false)], fan.std.Param.$type),{});
    fan.std.Env.$type.$am('cur',40962,'std::Env',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',4100,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('parent','std::Env',true)], fan.std.Param.$type),{}).$am('parent',8192,'std::Env?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('platform',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('os',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('arch',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('runtime',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('javaVersion',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('idHash',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('args',270336,'sys::List<sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('vars',270336,'std::Map<sys::Str,sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('diagnostics',270336,'std::Map<sys::Str,sys::Obj>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('gc',270336,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('host',270336,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('user',270336,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('in',270336,'std::InStream',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('out',270336,'std::OutStream',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('err',270336,'std::OutStream',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('promptPassword',270336,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',true)], fan.std.Param.$type),{}).$am('homeDir',270336,'std::File',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('workDir',270336,'std::File',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('tempDir',270336,'std::File',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('findFile',270336,'std::File?',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('findAllFiles',270336,'sys::List<std::File>',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false)], fan.std.Param.$type),{}).$am('findPodFile',270336,'std::File?',fan.sys.List.makeFromJs([new fan.std.Param('podName','sys::Str',false)], fan.std.Param.$type),{}).$am('findAllPodNames',270336,'sys::List<sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('compileScript',270336,'std::Type',fan.sys.List.makeFromJs([new fan.std.Param('f','std::File',false),new fan.std.Param('options','std::Map<sys::Str,sys::Obj>?',true)], fan.std.Param.$type),{}).$am('index',270336,'sys::List<sys::Str>',fan.sys.List.makeFromJs([new fan.std.Param('key','sys::Str',false)], fan.std.Param.$type),{}).$am('indexKeys',270336,'sys::List<sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('indexPodNames',270336,'sys::List<sys::Str>',fan.sys.List.makeFromJs([new fan.std.Param('key','sys::Str',false)], fan.std.Param.$type),{}).$am('props',270336,'std::Map<sys::Str,sys::Str>',fan.sys.List.makeFromJs([new fan.std.Param('pod','std::Pod',false),new fan.std.Param('uri','std::Uri',false),new fan.std.Param('maxAge','std::Duration',false)], fan.std.Param.$type),{}).$am('config',270336,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('pod','std::Pod',false),new fan.std.Param('key','sys::Str',false),new fan.std.Param('defV','sys::Str?',true)], fan.std.Param.$type),{}).$am('locale',270336,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('pod','std::Pod',false),new fan.std.Param('key','sys::Str',false),new fan.std.Param('defV','sys::Str?',true),new fan.std.Param('locale','std::Locale',true)], fan.std.Param.$type),{}).$am('exit',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('status','sys::Int',true)], fan.std.Param.$type),{}).$am('addShutdownHook',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('hook','sys::Func<sys::Void>',false)], fan.std.Param.$type),{}).$am('removeShutdownHook',270336,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('hook','sys::Func<sys::Void>',false)], fan.std.Param.$type),{});
    fan.std.FacetData.$type.$af('val',73730,'sys::Str',{}).$af('type',73730,'sys::Str',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Str',false),new fan.std.Param('val','sys::Str',false)], fan.std.Param.$type),{});
    fan.std.FacetList.$type.$af('facetsData',67584,'sys::List<std::FacetData>',{}).$af('_facets',67584,'sys::List<sys::Facet>?',{}).$am('addFacet',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Str',false),new fan.std.Param('val','sys::Str',false)], fan.std.Param.$type),{}).$am('facets',8192,'sys::List<sys::Facet>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('decode',2048,'sys::Facet',fan.sys.List.makeFromJs([new fan.std.Param('f','std::FacetData',false)], fan.std.Param.$type),{}).$am('getFacet',8192,'sys::Facet?',fan.sys.List.makeFromJs([new fan.std.Param('type','std::Type',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('hasFacet',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('type','std::Type',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Pod.$type.$am('of',40962,'std::Pod?',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{}).$am('list',40962,'sys::List<std::Pod>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('find',40962,'std::Pod?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('load',41474,'std::Pod',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false)], fan.std.Param.$type),{}).$am('addMeta',128,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('k','sys::Str',false),new fan.std.Param('v','sys::Str',false)], fan.std.Param.$type),{}).$am('addType',128,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('t','std::Type',false)], fan.std.Param.$type),{}).$am('name',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('version',8192,'std::Version',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('depends',8192,'sys::List<std::Depend>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('uri',8192,'std::Uri',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('meta',8192,'std::Map<sys::Str,sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('types',8192,'sys::List<std::Type>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('type',8192,'std::Type?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('files',8704,'sys::List<std::File>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('file',8704,'std::File?',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('doc',8192,'sys::Str?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('log',8192,'std::Log',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('props',8192,'std::Map<sys::Str,sys::Str>',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false),new fan.std.Param('maxAge','std::Duration',false)], fan.std.Param.$type),{}).$am('config',8192,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('defV','sys::Str?',true)], fan.std.Param.$type),{}).$am('locale',8192,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('defV','sys::Str?',true)], fan.std.Param.$type),{}).$am('_getCompilerCache',8192,'sys::Obj?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::NoDoc':""}).$am('_setCompilerCache',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{'sys::NoDoc':""}).$am('isImmutable',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toImmutable',271360,'sys::Obj',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Version.$type.$af('str',67586,'sys::Str',{}).$af('defVal',106498,'std::Version',{}).$af('segments',73730,'sys::List<sys::Int>',{}).$am('fromStr',40966,'std::Version',fan.sys.List.makeFromJs([new fan.std.Param('version','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('segments','sys::List<sys::Int>',false)], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('compare',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('major',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('minor',8192,'sys::Int?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('build',8192,'sys::Int?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('patch',8192,'sys::Int?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Depend.$type.$af('str',67586,'sys::Str',{}).$af('name',73730,'sys::Str',{}).$af('version',73730,'std::Version',{}).$am('fromStr',40966,'std::Depend',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('privateMake',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('ver','std::Version',false)], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('match',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('v','std::Version',false)], fan.std.Param.$type),{});
    fan.std.ConstFlags.$type.$af('Abstract',106498,'sys::Int',{}).$af('Const',106498,'sys::Int',{}).$af('Ctor',106498,'sys::Int',{}).$af('Enum',106498,'sys::Int',{}).$af('Facet',106498,'sys::Int',{}).$af('Final',106498,'sys::Int',{}).$af('Getter',106498,'sys::Int',{}).$af('Internal',106498,'sys::Int',{}).$af('Mixin',106498,'sys::Int',{}).$af('Native',106498,'sys::Int',{}).$af('Override',106498,'sys::Int',{}).$af('Private',106498,'sys::Int',{}).$af('Protected',106498,'sys::Int',{}).$af('Public',106498,'sys::Int',{}).$af('Setter',106498,'sys::Int',{}).$af('Static',106498,'sys::Int',{}).$af('Storage',106498,'sys::Int',{}).$af('Synthetic',106498,'sys::Int',{}).$af('Virtual',106498,'sys::Int',{}).$af('Struct',106498,'sys::Int',{}).$af('Extension',106498,'sys::Int',{}).$af('RuntimeConst',106498,'sys::Int',{}).$af('Readonly',106498,'sys::Int',{}).$af('Async',106498,'sys::Int',{}).$af('Overload',106498,'sys::Int',{}).$af('FlagsMask',106498,'sys::Int',{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Type.$type.$am('privateMake',4100,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('typeof',1090050,'std::Type',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{}).$am('of',40962,'std::Type',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{}).$am('find',40962,'std::Type?',fan.sys.List.makeFromJs([new fan.std.Param('qname','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('pod',270337,'std::Pod?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('name',270337,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('qname',270337,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('signature',270337,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('base',270337,'std::Type?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('mixins',270337,'sys::List<std::Type>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('inheritance',270337,'sys::List<std::Type>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fits',270336,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('t','std::Type',false)], fan.std.Param.$type),{}).$am('flags',266241,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isVal',270336,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isNullable',270336,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toNullable',270337,'std::Type',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toNonNullable',270336,'std::Type',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isGeneric',270336,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isParameterized',270336,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('emptyList',270336,'sys::List<sys::Obj>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::NoDoc':""}).$am('isAbstract',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isClass',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isConst',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isEnum',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isFacet',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isFinal',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isInternal',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isMixin',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isPublic',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isSynthetic',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fields',270337,'sys::List<std::Field>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('methods',270337,'sys::List<std::Method>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('slots',270337,'sys::List<std::Slot>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('field',8192,'std::Field?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('method',8192,'std::Method?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('slot',270337,'std::Slot?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('make',270336,'sys::Obj',fan.sys.List.makeFromJs([new fan.std.Param('args','sys::List<sys::Obj>?',true)], fan.std.Param.$type),{}).$am('facets',270337,'sys::List<sys::Facet>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('facet',270337,'sys::Facet?',fan.sys.List.makeFromJs([new fan.std.Param('type','std::Type',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('hasFacet',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('type','std::Type',false)], fan.std.Param.$type),{}).$am('doc',270336,'sys::Str?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isJava',270336,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::NoDoc':""}).$am('isImmutable',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toImmutable',271360,'sys::Obj',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Slot.$type.$am('find',40962,'std::Slot?',fan.sys.List.makeFromJs([new fan.std.Param('qname','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('findMethod',40962,'std::Method?',fan.sys.List.makeFromJs([new fan.std.Param('qname','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('findField',40962,'std::Field?',fan.sys.List.makeFromJs([new fan.std.Param('qname','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('findFunc',40962,'sys::Func<>?',fan.sys.List.makeFromJs([new fan.std.Param('qname','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('make',132,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('parent','std::Type',false),new fan.std.Param('name','sys::Str',false),new fan.std.Param('doc','sys::Str?',false),new fan.std.Param('flags','sys::Int',false)], fan.std.Param.$type),{}).$am('parent',8192,'std::Type',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('name',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('qname',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isField',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isMethod',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isAbstract',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isConst',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isCtor',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isInternal',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isNative',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isOverride',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isPrivate',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isProtected',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isPublic',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isStatic',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isSynthetic',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isVirtual',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('addFacet',128,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Str',false),new fan.std.Param('val','sys::Str',false)], fan.std.Param.$type),{}).$am('facets',8192,'sys::List<sys::Facet>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('facet',8192,'sys::Facet?',fan.sys.List.makeFromJs([new fan.std.Param('type','std::Type',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('hasFacet',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('type','std::Type',false)], fan.std.Param.$type),{}).$am('doc',8192,'sys::Str?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('signature',270337,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isImmutable',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toImmutable',271360,'sys::Obj',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Field.$type.$am('makeSetFunc',40962,'sys::Func<sys::Void,sys::Obj>',fan.sys.List.makeFromJs([new fan.std.Param('vals','std::Map<std::Field,sys::Obj?>',false)], fan.std.Param.$type),{'sys::NoDoc':""}).$am('privateMake',132,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('parent','std::Type',false),new fan.std.Param('name','sys::Str',false),new fan.std.Param('doc','sys::Str?',false),new fan.std.Param('flags','sys::Int',false),new fan.std.Param('typeName','sys::Str',false),new fan.std.Param('id','sys::Int',false)], fan.std.Param.$type),{}).$am('type',8192,'std::Type',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('signature',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('get',270848,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('instance','sys::Obj?',true)], fan.std.Param.$type),{}).$am('set',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('instance','sys::Obj?',false),new fan.std.Param('value','sys::Obj?',false)], fan.std.Param.$type),{}).$am('_unsafeSet',270848,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('instance','sys::Obj?',false),new fan.std.Param('value','sys::Obj?',false),new fan.std.Param('checkConst','sys::Bool',false)], fan.std.Param.$type),{'sys::NoDoc':""});
    fan.std.Method.$type.$am('privateMake',132,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('parent','std::Type',false),new fan.std.Param('name','sys::Str',false),new fan.std.Param('doc','sys::Str?',false),new fan.std.Param('flags','sys::Int',false),new fan.std.Param('returnsName','sys::Str',false),new fan.std.Param('id','sys::Int',false)], fan.std.Param.$type),{}).$am('addParam',128,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('typeName','sys::Str',false),new fan.std.Param('mask','sys::Int',false)], fan.std.Param.$type),{}).$am('returns',8192,'std::Type',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('params',8192,'sys::List<std::Param>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('func',8192,'sys::Func<>',fan.sys.List.makeFromJs([new fan.std.Param('arity','sys::Int',true)], fan.std.Param.$type),{}).$am('signature',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('callList',8192,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('args','sys::List<sys::Obj?>?',false)], fan.std.Param.$type),{}).$am('callOn',8192,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('target','sys::Obj?',false),new fan.std.Param('args','sys::List<sys::Obj?>?',false)], fan.std.Param.$type),{}).$am('call',8704,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('a','sys::Obj?',true),new fan.std.Param('b','sys::Obj?',true),new fan.std.Param('c','sys::Obj?',true),new fan.std.Param('d','sys::Obj?',true),new fan.std.Param('e','sys::Obj?',true),new fan.std.Param('f','sys::Obj?',true),new fan.std.Param('g','sys::Obj?',true),new fan.std.Param('h','sys::Obj?',true)], fan.std.Param.$type),{});
    fan.std.Param.$type.$am('make',132,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('typeName','sys::Str',false),new fan.std.Param('mask','sys::Int',false)], fan.std.Param.$type),{}).$am('name',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('type',8192,'std::Type',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hasDefault',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isImmutable',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toImmutable',271360,'sys::Obj',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.BufCrypto.$type.$af('base64chars',100354,'sys::Str',{}).$af('base64UriChars',100354,'sys::Str',{}).$af('base64inv',100354,'sys::List<sys::Int>',{}).$am('toBase64',1089538,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('buf','std::Buf',false)], fan.std.Param.$type),{}).$am('toBase64Uri',1089538,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('buf','std::Buf',false)], fan.std.Param.$type),{}).$am('doBase64',34818,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('self','std::Buf',false),new fan.std.Param('table','sys::Str',false),new fan.std.Param('pad','sys::Bool',false)], fan.std.Param.$type),{}).$am('fromBase64',40962,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('toDigest',1090050,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('buf','std::Buf',false),new fan.std.Param('algorithm','sys::Str',false)], fan.std.Param.$type),{}).$am('crc',1090050,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('buf','std::Buf',false),new fan.std.Param('algorithm','sys::Str',false)], fan.std.Param.$type),{}).$am('hmac',1090050,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('buf','std::Buf',false),new fan.std.Param('algorithm','sys::Str',false),new fan.std.Param('key','std::Buf',false)], fan.std.Param.$type),{}).$am('pbk',41474,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('algorithm','sys::Str',false),new fan.std.Param('password','sys::Str',false),new fan.std.Param('salt','std::Buf',false),new fan.std.Param('iterations','sys::Int',false),new fan.std.Param('keyLen','sys::Int',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.UriParser.$type.$af('scheme',73728,'sys::Str?',{}).$af('userInfo',73728,'sys::Str?',{}).$af('host',73728,'sys::Str?',{}).$af('port',73728,'sys::Int?',{}).$af('pathStr',73728,'sys::Str',{}).$af('query',73728,'std::Map<sys::Str,sys::Str>?',{}).$af('frag',73728,'sys::Str?',{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('normalize',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('parseQuery',40962,'std::Map<sys::Str,sys::Str>',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('decode','sys::Bool',false)], fan.std.Param.$type),{}).$am('parse',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Uri.$type.$af('str',67586,'sys::Str',{}).$af('defVal',106498,'std::Uri',{}).$af('sectionPath',106498,'sys::Int',{}).$af('sectionQuery',106498,'sys::Int',{}).$af('sectionFrag',106498,'sys::Int',{}).$af('scheme',73730,'sys::Str?',{}).$af('host',73730,'sys::Str?',{}).$af('userInfo',73730,'sys::Str?',{}).$af('port',73730,'sys::Int?',{}).$af('pathStr',73730,'sys::Str',{}).$af('query',73730,'std::Map<sys::Str,sys::Str>',{}).$af('frag',73730,'sys::Str?',{}).$am('fromStr',40966,'std::Uri',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('decode',40962,'std::Uri?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('privateMake',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('scheme','sys::Str?',false),new fan.std.Param('userInfo','sys::Str?',false),new fan.std.Param('host','sys::Str?',false),new fan.std.Param('port','sys::Int?',false),new fan.std.Param('pathStr','sys::Str',false),new fan.std.Param('query','std::Map<sys::Str,sys::Str>?',false),new fan.std.Param('frag','sys::Str?',false)], fan.std.Param.$type),{}).$am('partsToStr',34818,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('scheme','sys::Str?',false),new fan.std.Param('userInfo','sys::Str?',false),new fan.std.Param('host','sys::Str?',false),new fan.std.Param('port','sys::Int?',false),new fan.std.Param('path','sys::Str?',false),new fan.std.Param('query','std::Map<sys::Str,sys::Str>?',false),new fan.std.Param('frag','sys::Str?',false),new fan.std.Param('encode','sys::Bool',false)], fan.std.Param.$type),{}).$am('percentEncodeByte',34818,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('buf','sys::StrBuf',false),new fan.std.Param('c','sys::Int',false)], fan.std.Param.$type),{}).$am('decodeToken',40962,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('section','sys::Int',false)], fan.std.Param.$type),{}).$am('encodeToken',40962,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('section','sys::Int',false)], fan.std.Param.$type),{}).$am('escapeToken',32898,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('section','sys::Int',false)], fan.std.Param.$type),{}).$am('decodeQuery',40962,'std::Map<sys::Str,sys::Str>',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('encodeQuery',40962,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('q','std::Map<sys::Str,sys::Str>',false)], fan.std.Param.$type),{}).$am('isName',40962,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false)], fan.std.Param.$type),{}).$am('checkName',40962,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false)], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toLocale',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('encode',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isAbs',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isRel',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isDir',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('auth',8192,'sys::Str?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('path',8192,'sys::List<sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isPathAbs',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isPathRel',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isPathOnly',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('name',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('basename',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('ext',8192,'sys::Str?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('mimeType',8192,'std::MimeType?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('queryStr',8192,'sys::Str?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('parent',8192,'std::Uri?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('parentPathStr',2048,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('pathStr','sys::Str',false)], fan.std.Param.$type),{}).$am('pathOnly',8192,'std::Uri',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('plus',8192,'std::Uri',fan.sys.List.makeFromJs([new fan.std.Param('toAppend','std::Uri',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('plusName',8192,'std::Uri',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('asDir','sys::Bool',true)], fan.std.Param.$type),{}).$am('plusSlash',8192,'std::Uri',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('plusQuery',8192,'std::Uri',fan.sys.List.makeFromJs([new fan.std.Param('query','std::Map<sys::Str,sys::Str>?',false)], fan.std.Param.$type),{}).$am('relTo',8192,'std::Uri',fan.sys.List.makeFromJs([new fan.std.Param('base','std::Uri',false)], fan.std.Param.$type),{}).$am('relToAuth',8192,'std::Uri',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toFile',8192,'std::File',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('get',8192,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('base','sys::Obj?',true),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('toCode',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toUri',1089538,'std::Uri?',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str?',false)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Buf.$type.$af('size',270337,'sys::Int',{}).$af('capacity',270337,'sys::Int',{}).$af('pos',270337,'sys::Int',{}).$af('endian',270337,'std::Endian',{}).$af('charset',270337,'std::Charset',{}).$af('hexChars',98434,'sys::Str',{}).$af('out$Store',198656,'sys::Obj?',{}).$af('in$Store',198656,'sys::Obj?',{}).$am('make',40966,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('capacity','sys::Int',true)], fan.std.Param.$type),{}).$am('privateMake',4100,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('random',40962,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('bytesEqual',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','std::Buf',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isEmpty',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('remaining',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('more',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('seek',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false)], fan.std.Param.$type),{}).$am('flip',8192,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('get',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('getByte',266241,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false)], fan.std.Param.$type),{}).$am('setByte',266241,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('v','sys::Int',false)], fan.std.Param.$type),{}).$am('getBytes',266241,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('dst','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('setBytes',266241,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('src','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('getRange',270336,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('range','sys::Range',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('dup',270336,'std::Buf',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('set',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('byte','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('clear',8192,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('trim',270336,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('close',270337,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('sync',270337,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fill',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false),new fan.std.Param('times','sys::Int',false)], fan.std.Param.$type),{}).$am('out',2147753984,'std::OutStream',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('write',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('byte','sys::Int',false)], fan.std.Param.$type),{}).$am('writeBuf',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('buf','std::Buf',false),new fan.std.Param('n','sys::Int',true)], fan.std.Param.$type),{}).$am('writeI2',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('writeI4',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('writeI8',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('writeF4',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Float',false)], fan.std.Param.$type),{}).$am('writeF8',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Float',false)], fan.std.Param.$type),{}).$am('writeBool',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Bool',false)], fan.std.Param.$type),{}).$am('writeUtf',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('writeChar',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('char','sys::Int',false)], fan.std.Param.$type),{}).$am('writeChars',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('print',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Obj?',false)], fan.std.Param.$type),{}).$am('printLine',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',true)], fan.std.Param.$type),{}).$am('in',2147753984,'std::InStream',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('privateIn',262272,'std::InStream',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('read',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readBuf',8192,'sys::Int?',fan.sys.List.makeFromJs([new fan.std.Param('buf','std::Buf',false),new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('unread',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('readAllBuf',8192,'std::Buf',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readBufFully',8192,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('buf','std::Buf?',false),new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('peek',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readU1',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readS1',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readU2',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readS2',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readU4',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readS4',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readS8',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readF4',8192,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readF8',8192,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readBool',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readUtf',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readChar',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('unreadChar',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('peekChar',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readChars',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('readLine',8192,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('max','sys::Int',true)], fan.std.Param.$type),{}).$am('readStrToken',8192,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('max','sys::Int?',true),new fan.std.Param('c','sys::Func<sys::Bool,sys::Int>?',true)], fan.std.Param.$type),{}).$am('readAllLines',8192,'sys::List<sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('eachLine',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::Str>',false)], fan.std.Param.$type),{}).$am('readAllStr',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('normalizeNewlines','sys::Bool',true)], fan.std.Param.$type),{}).$am('unsafeArray',266240,'sys::Array<sys::Int8>?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('safeArray',266240,'sys::Array<sys::Int8>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toHex',270336,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('memToHex',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('temp','sys::Array<sys::Int8>',false),new fan.std.Param('n','sys::Int',false),new fan.std.Param('sb','sys::StrBuf',false)], fan.std.Param.$type),{}).$am('parseHex',34818,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('ch','sys::Int',false)], fan.std.Param.$type),{}).$am('fromHex',40962,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('pipeTo',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('out','std::OutStream',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('pipeFrom',266240,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('toFile',270336,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false)], fan.std.Param.$type),{}).$am('out$Once$Buf',133120,'std::OutStream',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('in$Once$Buf',133120,'std::InStream',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.ConstBuf.$type.$af('buf',69632,'sys::Array<sys::Int8>',{}).$af('size',336896,'sys::Int',{}).$af('capacity',271360,'sys::Int',{}).$af('pos',271360,'sys::Int',{}).$af('endian',336896,'std::Endian',{}).$af('charset',336896,'std::Charset',{}).$am('err',4096,'sys::Err',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('makeBuf',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('buf','sys::Array<sys::Int8>',false),new fan.std.Param('size','sys::Int',false),new fan.std.Param('e','std::Endian',false),new fan.std.Param('c','std::Charset',false)], fan.std.Param.$type),{}).$am('unsafeArray',267264,'sys::Array<sys::Int8>?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('getBytes',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('dst','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('setBytes',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('src','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('getByte',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{}).$am('setByte',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('byte','sys::Int',false)], fan.std.Param.$type),{}).$am('trim',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('close',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('sync',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fill',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('byte','sys::Int',false),new fan.std.Param('times','sys::Int',false)], fan.std.Param.$type),{}).$am('out',271360,'std::OutStream',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('in',271360,'std::InStream',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('privateIn',263296,'std::InStream',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('pipeTo',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('out','std::OutStream',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('pipeFrom',267264,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('isImmutable',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toImmutable',271360,'std::Buf',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toFile',271360,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false)], fan.std.Param.$type),{});
    fan.std.InStream.$type.$af('chunkSize',100354,'sys::Int',{}).$af('endian',270337,'std::Endian',{}).$af('charset',270337,'std::Charset',{}).$am('avail',270336,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('read',270337,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('r',128,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readBuf',270336,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('buf','std::Buf',false),new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('readBytes',270336,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('ba','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('unread',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('close',270336,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('skip',270336,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('readAllBuf',270336,'std::Buf',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readBufFully',8192,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('buf','std::Buf?',false),new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('bigEndian',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('peek',270336,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readU1',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readS1',270336,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readU2',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readS2',270336,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readU4',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readS4',270336,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readS8',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readF4',8192,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readF8',8192,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readBool',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readUtf',270336,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readChar',270336,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('unreadChar',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('peekChar',270336,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readChars',270336,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('readLine',270336,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('max','sys::Int',true)], fan.std.Param.$type),{}).$am('readStrToken',8192,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('max','sys::Int',true),new fan.std.Param('callback','sys::Func<sys::Bool,sys::Int>?',true)], fan.std.Param.$type),{}).$am('readNullTerminatedStr',8192,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('max','sys::Int',true)], fan.std.Param.$type),{}).$am('readAllLines',8192,'sys::List<sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('eachLine',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::Str>',false)], fan.std.Param.$type),{}).$am('readAllStr',270336,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('normalizeNewlines','sys::Bool',true)], fan.std.Param.$type),{}).$am('pipe',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('out','std::OutStream',false),new fan.std.Param('toPipe','sys::Int',true),new fan.std.Param('close','sys::Bool',true)], fan.std.Param.$type),{}).$am('use',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,std::InStream>',false)], fan.std.Param.$type),{}).$am('readProps',8192,'std::Map<sys::Str,sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readPropsListVals',8192,'std::Map<sys::Str,sys::List<sys::Str>>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::NoDoc':""}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.ConstBufInStream.$type.$af('endian',336896,'std::Endian',{}).$af('charset',336896,'std::Charset',{}).$af('buf',69632,'std::ConstBuf',{}).$af('pos',69632,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('buf','std::ConstBuf',false)], fan.std.Param.$type),{}).$am('avail',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('read',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('skip',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('readBytes',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('ba','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('unread',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('close',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('peek',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.File.$type.$af('_uri',67586,'std::Uri',{}).$af('modified',270337,'std::TimePoint?',{}).$am('make',41478,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false),new fan.std.Param('checkSlash','sys::Bool',true)], fan.std.Param.$type),{}).$am('fromPath',40962,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('path','sys::Str',false),new fan.std.Param('checkSlash','sys::Bool',true)], fan.std.Param.$type),{}).$am('os',41474,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('osPath','sys::Str',false)], fan.std.Param.$type),{}).$am('osRoots',41474,'sys::List<std::File>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('createTemp',41474,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('prefix','sys::Str',true),new fan.std.Param('suffix','sys::Str',true),new fan.std.Param('dir','std::File?',true)], fan.std.Param.$type),{}).$am('privateMake',4100,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false)], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('uri',8192,'std::Uri',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isDir',270336,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('path',8192,'sys::List<sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('pathStr',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('name',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('basename',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('ext',8192,'sys::Str?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('mimeType',8192,'std::MimeType?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('exists',270337,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('size',270337,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isEmpty',270336,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('osPath',270337,'sys::Str?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('parent',270336,'std::File?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('list',270337,'sys::List<std::File>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('listDirs',270336,'sys::List<std::File>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('listFiles',270336,'sys::List<std::File>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('walk',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Func<sys::Void,std::File>',false)], fan.std.Param.$type),{}).$am('normalize',270337,'std::File',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('plus',270336,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('path','std::Uri',false),new fan.std.Param('checkSlash','sys::Bool',true)], fan.std.Param.$type),{'sys::Operator':""}).$am('store',270336,'std::FileStore?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('create',270337,'std::File',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('createFile',8192,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false)], fan.std.Param.$type),{}).$am('createDir',8192,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false)], fan.std.Param.$type),{}).$am('copyTo',8704,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('to','std::File',false),new fan.std.Param('options','std::Map<sys::Str,sys::Obj>?',true)], fan.std.Param.$type),{}).$am('copyInto',270336,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('dir','std::File',false),new fan.std.Param('options','std::Map<sys::Str,sys::Obj>?',true)], fan.std.Param.$type),{}).$am('moveTo',270337,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('to','std::File',false)], fan.std.Param.$type),{}).$am('moveInto',270336,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('dir','std::File',false)], fan.std.Param.$type),{}).$am('rename',270336,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('newName','sys::Str',false)], fan.std.Param.$type),{}).$am('delete',270337,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('deleteOnExit',270337,'std::File',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('open',270337,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('mode','sys::Str',true)], fan.std.Param.$type),{}).$am('mmap',270337,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('mode','sys::Str',true),new fan.std.Param('pos','sys::Int',true),new fan.std.Param('size','sys::Int',true)], fan.std.Param.$type),{}).$am('in',270337,'std::InStream',fan.sys.List.makeFromJs([new fan.std.Param('bufferSize','sys::Int',true)], fan.std.Param.$type),{}).$am('out',270337,'std::OutStream',fan.sys.List.makeFromJs([new fan.std.Param('append','sys::Bool',true),new fan.std.Param('bufferSize','sys::Int',true)], fan.std.Param.$type),{}).$am('readAllBuf',8192,'std::Buf',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readAllLines',8192,'sys::List<sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('eachLine',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::Str>',false)], fan.std.Param.$type),{}).$am('readAllStr',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('normalizeNewlines','sys::Bool',true)], fan.std.Param.$type),{}).$am('writeAllStr',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false)], fan.std.Param.$type),{}).$am('sep',41474,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('pathSep',41474,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.MemFile.$type.$af('buf',73730,'std::ConstBuf',{}).$af('ts',73730,'std::TimePoint',{}).$af('modified',271360,'std::TimePoint?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('buf','std::ConstBuf',false),new fan.std.Param('uri','std::Uri',false)], fan.std.Param.$type),{}).$am('err',2048,'sys::Err',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('exists',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('size',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('osPath',271360,'sys::Str?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('list',271360,'sys::List<std::File>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('normalize',271360,'std::File',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('create',271360,'std::File',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('moveTo',271360,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('to','std::File',false)], fan.std.Param.$type),{}).$am('delete',271360,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('deleteOnExit',271360,'std::File',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('open',271360,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('mode','sys::Str',true)], fan.std.Param.$type),{}).$am('mmap',271360,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('mode','sys::Str',true),new fan.std.Param('pos','sys::Int',true),new fan.std.Param('size','sys::Int',true)], fan.std.Param.$type),{}).$am('in',271360,'std::InStream',fan.sys.List.makeFromJs([new fan.std.Param('bufferSize','sys::Int',true)], fan.std.Param.$type),{}).$am('out',271360,'std::OutStream',fan.sys.List.makeFromJs([new fan.std.Param('append','sys::Bool',true),new fan.std.Param('bufferSize','sys::Int',true)], fan.std.Param.$type),{});
    fan.std.XmlUtil.$type.$af('xmlEscNewlines',106498,'sys::Int',{}).$af('xmlEscQuotes',106498,'sys::Int',{}).$af('xmlEscUnicode',106498,'sys::Int',{}).$af('xmlEsc',100354,'sys::List<sys::Str?>',{}).$am('writeXml',1089538,'std::OutStream',fan.sys.List.makeFromJs([new fan.std.Param('out','std::OutStream',false),new fan.std.Param('s','sys::Str',false),new fan.std.Param('mask','sys::Int',true)], fan.std.Param.$type),{}).$am('writeXmlEsc',34818,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('out','std::OutStream',false),new fan.std.Param('ch','sys::Int',false)], fan.std.Param.$type),{}).$am('toXml',1089538,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Str',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Endian.$type.$af('big',106506,'std::Endian',{}).$af('little',106506,'std::Endian',{}).$af('vals',106498,'sys::List<std::Endian>',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('$ordinal','sys::Int',false),new fan.std.Param('$name','sys::Str',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'std::Endian?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.StrExt.$type.$am('in',1089538,'std::InStream',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false)], fan.std.Param.$type),{}).$am('out',1089538,'std::OutStream',fan.sys.List.makeFromJs([new fan.std.Param('buf','sys::StrBuf',false)], fan.std.Param.$type),{}).$am('toBuf',1089538,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('charset','std::Charset',true)], fan.std.Param.$type),{}).$am('splitAny',1089538,'sys::List<sys::Str>',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('sp','sys::Str',false),new fan.std.Param('normalize','sys::Bool',true)], fan.std.Param.$type),{}).$am('splitBy',1089538,'sys::List<sys::Str>',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('sp','sys::Str',false),new fan.std.Param('max','sys::Int',true)], fan.std.Param.$type),{}).$am('extract',1089538,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('begin','sys::Str?',false),new fan.std.Param('end','sys::Str?',false)], fan.std.Param.$type),{}).$am('capitalize',1089538,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Str',false)], fan.std.Param.$type),{}).$am('decapitalize',1089538,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Str',false)], fan.std.Param.$type),{}).$am('toDisplayName',1089538,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Str',false)], fan.std.Param.$type),{}).$am('fromDisplayName',1089538,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Str',false)], fan.std.Param.$type),{}).$am('justl',1089538,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Str',false),new fan.std.Param('width','sys::Int',false)], fan.std.Param.$type),{}).$am('justr',1089538,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Str',false),new fan.std.Param('width','sys::Int',false)], fan.std.Param.$type),{}).$am('padl',1089538,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Str',false),new fan.std.Param('width','sys::Int',false),new fan.std.Param('ch','sys::Int',true)], fan.std.Param.$type),{}).$am('padr',1089538,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Str',false),new fan.std.Param('width','sys::Int',false),new fan.std.Param('ch','sys::Int',true)], fan.std.Param.$type),{}).$am('reverse',1089538,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Str',false)], fan.std.Param.$type),{}).$am('numNewlines',1089538,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Str',false)], fan.std.Param.$type),{}).$am('splitLines',1089538,'sys::List<sys::Str>',fan.sys.List.makeFromJs([new fan.std.Param('self','sys::Str',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.StrInStream.$type.$af('endian',336896,'std::Endian',{}).$af('charset',336896,'std::Charset',{}).$af('str',67584,'sys::Str',{}).$af('pos',67584,'sys::Int',{}).$af('size',67584,'sys::Int',{}).$af('pushback',67584,'sys::List<sys::Int>?',{}).$am('make',4100,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false)], fan.std.Param.$type),{}).$am('avail',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('read',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('skip',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('readBytes',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('ba','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('unread',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('close',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readChar',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('unreadChar',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{});
    fan.std.OutStream.$type.$af('endian',270337,'std::Endian',{}).$af('charset',270337,'std::Charset',{}).$am('write',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('byte','sys::Int',false)], fan.std.Param.$type),{}).$am('writeBuf',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('buf','std::Buf',false),new fan.std.Param('n','sys::Int',true)], fan.std.Param.$type),{}).$am('writeBytes',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('ba','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('flush',270336,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('sync',270336,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('close',270336,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('bigEndian',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('writeI2',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('writeI4',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('writeI8',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('writeF4',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Float',false)], fan.std.Param.$type),{}).$am('writeF8',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Float',false)], fan.std.Param.$type),{}).$am('writeBool',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Bool',false)], fan.std.Param.$type),{}).$am('writeUtf',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('writeChar',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('ch','sys::Int',false)], fan.std.Param.$type),{}).$am('writeChars',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('print',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Obj?',false)], fan.std.Param.$type),{}).$am('printLine',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',true)], fan.std.Param.$type),{}).$am('use',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,std::OutStream>',false)], fan.std.Param.$type),{}).$am('writeProps',8192,'std::OutStream',fan.sys.List.makeFromJs([new fan.std.Param('props','std::Map<sys::Str,sys::Str>',false),new fan.std.Param('close','sys::Bool',true)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.StrOutStream.$type.$af('endian',336896,'std::Endian',{}).$af('charset',336896,'std::Charset',{}).$af('buf',67584,'sys::StrBuf',{}).$am('make',4100,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::StrBuf',false)], fan.std.Param.$type),{}).$am('write',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('byte','sys::Int',false)], fan.std.Param.$type),{}).$am('writeBytes',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('ba','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('sync',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('flush',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('close',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('writeChar',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('ch','sys::Int',false)], fan.std.Param.$type),{}).$am('writeChars',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{});
    fan.std.Props.$type.$am('readProps',40962,'std::Map<sys::Str,sys::Str>',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false)], fan.std.Param.$type),{}).$am('readPropsListVals',40962,'std::Map<sys::Str,sys::List<sys::Str>>',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false)], fan.std.Param.$type),{}).$am('doReadProps',34818,'std::Map<sys::Str,sys::Obj>',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false),new fan.std.Param('listVals','sys::Bool',true)], fan.std.Param.$type),{}).$am('addProp',34818,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('props','std::Map<sys::Str,sys::Obj>',false),new fan.std.Param('n','sys::Str',false),new fan.std.Param('v','sys::Str',false),new fan.std.Param('listVals','sys::Bool',false)], fan.std.Param.$type),{}).$am('hex',34818,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Int',false)], fan.std.Param.$type),{}).$am('writeProps',40962,'std::OutStream',fan.sys.List.makeFromJs([new fan.std.Param('out','std::OutStream',false),new fan.std.Param('props','std::Map<sys::Str,sys::Str>',false),new fan.std.Param('close','sys::Bool',true)], fan.std.Param.$type),{}).$am('writePropStr',34818,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('out','std::OutStream',false),new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.FileBuf.$type.$af('size',271872,'sys::Int',{}).$af('capacity',271872,'sys::Int',{}).$af('pos',271872,'sys::Int',{}).$af('endian',271360,'std::Endian',{}).$af('charset',271360,'std::Charset',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('file','std::File',false),new fan.std.Param('mode','sys::Str',false)], fan.std.Param.$type),{}).$am('init',4608,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('file','std::File',false),new fan.std.Param('mode','sys::Str',false)], fan.std.Param.$type),{}).$am('getByte',271872,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{}).$am('setByte',271872,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('byte','sys::Int',false)], fan.std.Param.$type),{}).$am('getBytes',271872,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('dst','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('setBytes',271872,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('src','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('close',271872,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('sync',271872,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.NioBuf.$type.$af('size',271872,'sys::Int',{}).$af('capacity',271872,'sys::Int',{}).$af('pos',271872,'sys::Int',{}).$af('endian',271360,'std::Endian',{}).$af('charset',271360,'std::Charset',{}).$am('fromFile',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('file','std::File',false),new fan.std.Param('mode','sys::Str',false),new fan.std.Param('pos','sys::Int',false),new fan.std.Param('size','sys::Int?',false)], fan.std.Param.$type),{}).$am('make',4100,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('init',4608,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('file','std::File',false),new fan.std.Param('mode','sys::Str',false),new fan.std.Param('pos','sys::Int',false),new fan.std.Param('size','sys::Int?',false)], fan.std.Param.$type),{}).$am('getByte',271872,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{}).$am('setByte',271872,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('byte','sys::Int',false)], fan.std.Param.$type),{}).$am('getBytes',271872,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('dst','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('setBytes',271872,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('src','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('close',271872,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('sync',271872,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.BufOutStream.$type.$af('endian',336896,'std::Endian',{}).$af('charset',336896,'std::Charset',{}).$af('buf',69632,'std::Buf',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('buf','std::Buf',false)], fan.std.Param.$type),{}).$am('write',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('byte','sys::Int',false)], fan.std.Param.$type),{}).$am('writeBytes',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('ba','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('writeChars',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('sync',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('flush',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('close',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.BufInStream.$type.$af('endian',336896,'std::Endian',{}).$af('charset',336896,'std::Charset',{}).$af('buf',69632,'std::Buf',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('buf','std::Buf',false)], fan.std.Param.$type),{}).$am('avail',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('read',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('skip',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('readBytes',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('ba','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('unread',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('close',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('peek',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.MemBuf.$type.$af('buf',69632,'sys::Array<sys::Int8>',{}).$af('size',336896,'sys::Int',{}).$af('capacity',271360,'sys::Int',{}).$af('pos',336896,'sys::Int',{}).$af('endian',271360,'std::Endian',{}).$af('charset',271360,'std::Charset',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('cap','sys::Int',false)], fan.std.Param.$type),{}).$am('makeBuf',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('buf','sys::Array<sys::Int8>',false),new fan.std.Param('size','sys::Int',true),new fan.std.Param('pos','sys::Int',true)], fan.std.Param.$type),{}).$am('unsafeArray',267264,'sys::Array<sys::Int8>?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('getBytes',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('dst','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('setBytes',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('src','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('getByte',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{}).$am('setByte',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('index','sys::Int',false),new fan.std.Param('byte','sys::Int',false)], fan.std.Param.$type),{}).$am('close',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('sync',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('pipeTo',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('out','std::OutStream',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('pipeFrom',267264,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('isImmutable',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toImmutable',271360,'std::Buf',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toFile',271360,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false)], fan.std.Param.$type),{});
    fan.std.Charset.$type.$af('utf8',106498,'std::Charset',{}).$af('defVal',106498,'std::Charset',{}).$af('utf16BE',106498,'std::Charset',{}).$af('utf16LE',106498,'std::Charset',{}).$af('name',73730,'sys::Str',{}).$af('encoder',69634,'std::Encoder',{}).$am('fromStr',40966,'std::Charset',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('privateMake',4100,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('coder','std::Encoder',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('encode',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('ch','sys::Int',false),new fan.std.Param('out','std::OutStream',false)], fan.std.Param.$type),{}).$am('encodeArray',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('ch','sys::Int',false),new fan.std.Param('out','sys::Array<sys::Int8>',false),new fan.std.Param('offset','sys::Int',false)], fan.std.Param.$type),{}).$am('decode',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Encoder.$type.$am('encode',270337,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('ch','sys::Int',false),new fan.std.Param('out','std::OutStream',false)], fan.std.Param.$type),{}).$am('encodeArray',270337,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('ch','sys::Int',false),new fan.std.Param('out','sys::Array<sys::Int8>',false),new fan.std.Param('offset','sys::Int',false)], fan.std.Param.$type),{}).$am('decode',270337,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.NativeCharset.$type.$am('fromStr',41474,'std::Charset?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false)], fan.std.Param.$type),{}).$am('encode',271872,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('ch','sys::Int',false),new fan.std.Param('out','std::OutStream',false)], fan.std.Param.$type),{}).$am('encodeArray',271872,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('ch','sys::Int',false),new fan.std.Param('out','sys::Array<sys::Int8>',false),new fan.std.Param('offset','sys::Int',false)], fan.std.Param.$type),{}).$am('decode',271872,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Utf8.$type.$am('encode',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Int',false),new fan.std.Param('out','std::OutStream',false)], fan.std.Param.$type),{}).$am('encodeArray',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Int',false),new fan.std.Param('out','sys::Array<sys::Int8>',false),new fan.std.Param('offset','sys::Int',false)], fan.std.Param.$type),{}).$am('decode',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Utf16.$type.$af('bigEndian',73730,'sys::Bool',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('bigEndian','sys::Bool',false)], fan.std.Param.$type),{}).$am('writeBE16',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Int',false),new fan.std.Param('out','std::OutStream',false)], fan.std.Param.$type),{}).$am('encode',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Int',false),new fan.std.Param('out','std::OutStream',false)], fan.std.Param.$type),{}).$am('setBE16',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Int',false),new fan.std.Param('out','sys::Array<sys::Int8>',false),new fan.std.Param('i','sys::Int',false)], fan.std.Param.$type),{}).$am('encodeArray',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Int',false),new fan.std.Param('out','sys::Array<sys::Int8>',false),new fan.std.Param('offset','sys::Int',false)], fan.std.Param.$type),{}).$am('readBE16',266240,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false)], fan.std.Param.$type),{}).$am('decode',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false)], fan.std.Param.$type),{});
    fan.std.MimeType.$type.$af('imagePng',106498,'std::MimeType',{}).$af('imageGif',106498,'std::MimeType',{}).$af('imageJpeg',106498,'std::MimeType',{}).$af('textPlain',106498,'std::MimeType',{}).$af('textHtml',106498,'std::MimeType',{}).$af('textXml',106498,'std::MimeType',{}).$af('textCss',106498,'std::MimeType',{}).$af('textJsUtf8',106498,'std::MimeType',{}).$af('textJs',106498,'std::MimeType',{}).$af('textJson',106498,'std::MimeType',{}).$af('textJsonUtf8',106498,'std::MimeType',{}).$af('dir',106498,'std::MimeType',{}).$af('textPlainUtf8',106498,'std::MimeType',{}).$af('textHtmlUtf8',106498,'std::MimeType',{}).$af('textXmlUtf8',106498,'std::MimeType',{}).$af('str',67586,'sys::Str',{}).$af('mediaType',73730,'sys::Str',{}).$af('subType',73730,'sys::Str',{}).$af('params',73730,'std::Map<sys::Str,sys::Str>',{}).$am('fromStr',40966,'std::MimeType',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('parse',34818,'std::MimeType',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('parseParams',40962,'std::Map<sys::Str,sys::Str>?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('parsePair',34818,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('start','sys::Int',false),new fan.std.Param('params','std::Map<sys::Str,sys::Str>',false)], fan.std.Param.$type),{}).$am('forExt',40962,'std::MimeType?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('make',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('mediaType','sys::Str',false),new fan.std.Param('subType','sys::Str',false),new fan.std.Param('params','std::Map<sys::Str,sys::Str>',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('charset',8192,'std::Charset',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('noParams',8192,'std::MimeType',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.ProxyOutStream.$type.$af('out',69632,'std::OutStream',{}).$af('endian',271360,'std::Endian',{}).$af('charset',271360,'std::Charset',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('out','std::OutStream',false)], fan.std.Param.$type),{}).$am('write',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('byte','sys::Int',false)], fan.std.Param.$type),{}).$am('writeBytes',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('ba','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('sync',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('flush',271360,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('close',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('writeChar',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('ch','sys::Int',false)], fan.std.Param.$type),{}).$am('writeChars',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{});
    fan.std.SysOutStream.$type.$af('endian',336896,'std::Endian',{}).$af('charset',336896,'std::Charset',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','std::Endian',false),new fan.std.Param('c','std::Charset',false)], fan.std.Param.$type),{}).$am('write',271872,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('byte','sys::Int',false)], fan.std.Param.$type),{}).$am('writeBytes',271872,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('ba','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('sync',271872,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('flush',271872,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('close',271872,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.UriScheme.$type.$af('cache',100354,'std::ConcurrentMap<sys::Str,std::UriScheme>',{}).$am('find',40962,'std::UriScheme?',fan.sys.List.makeFromJs([new fan.std.Param('scheme','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('get',270337,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false),new fan.std.Param('base','sys::Obj?',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.FanScheme.$type.$am('get',271360,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false),new fan.std.Param('base','sys::Obj?',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.FileScheme.$type.$am('get',271360,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false),new fan.std.Param('base','sys::Obj?',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.FileStore.$type.$af('totalSpace',73730,'sys::Int',{}).$af('availSpace',73730,'sys::Int',{}).$af('freeSpace',73730,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>',false)], fan.std.Param.$type),{});
    fan.std.ProxyInStream.$type.$af('in',69632,'std::InStream',{}).$af('endian',271360,'std::Endian',{}).$af('charset',271360,'std::Charset',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false)], fan.std.Param.$type),{}).$am('avail',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('read',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('skip',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('readBytes',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('ba','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('unread',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('close',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readChar',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('unreadChar',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('peekChar',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readChars',271360,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('readLine',271360,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('max','sys::Int',true)], fan.std.Param.$type),{}).$am('readAllStr',271360,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('normalizeNewlines','sys::Bool',true)], fan.std.Param.$type),{});
    fan.std.SysInStream.$type.$af('endian',336896,'std::Endian',{}).$af('charset',336896,'std::Charset',{}).$am('make',4100,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','std::Endian',false),new fan.std.Param('c','std::Charset',false)], fan.std.Param.$type),{}).$am('toSigned',41474,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('val','sys::Int',false),new fan.std.Param('byteNum','sys::Int',false)], fan.std.Param.$type),{}).$am('avail',271872,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('read',271872,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('skip',271872,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('readBytes',271872,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('ba','sys::Array<sys::Int8>',false),new fan.std.Param('off','sys::Int',true),new fan.std.Param('len','sys::Int',true)], fan.std.Param.$type),{}).$am('unread',271872,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('close',271872,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.LocalFile.$type.$af('peer',69634,'sys::Obj?',{}).$af('modified',271872,'std::TimePoint?',{}).$am('init',2560,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false)], fan.std.Param.$type),{}).$am('store',271872,'std::FileStore?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('exists',271872,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('size',271872,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('osPath',271872,'sys::Str?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('list',271872,'sys::List<std::File>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('normalize',271872,'std::File',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('create',271872,'std::File',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('moveTo',271872,'std::File',fan.sys.List.makeFromJs([new fan.std.Param('to','std::File',false)], fan.std.Param.$type),{}).$am('delete',271872,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('deleteOnExit',271872,'std::File',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('open',271360,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('mode','sys::Str',true)], fan.std.Param.$type),{}).$am('mmap',271360,'std::Buf',fan.sys.List.makeFromJs([new fan.std.Param('mode','sys::Str',true),new fan.std.Param('pos','sys::Int',true),new fan.std.Param('size','sys::Int',true)], fan.std.Param.$type),{}).$am('in',271872,'std::InStream',fan.sys.List.makeFromJs([new fan.std.Param('bufferSize','sys::Int',true)], fan.std.Param.$type),{}).$am('out',271872,'std::OutStream',fan.sys.List.makeFromJs([new fan.std.Param('append','sys::Bool',true),new fan.std.Param('bufferSize','sys::Int',true)], fan.std.Param.$type),{});
    fan.std.TimeZone.$type.$af('utc',106498,'std::TimeZone',{}).$af('rel',106498,'std::TimeZone',{}).$af('defVal',106498,'std::TimeZone',{}).$af('name',73730,'sys::Str',{}).$af('fullName',73730,'sys::Str',{}).$af('baseOffset',67586,'sys::Int',{}).$am('listNames',40962,'sys::List<sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('listFullNames',41474,'sys::List<sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fromStr',40966,'std::TimeZone',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('fromName',41474,'std::TimeZone?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false)], fan.std.Param.$type),{}).$am('cur',41474,'std::TimeZone',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('fullName','sys::Str',false),new fan.std.Param('offset','sys::Int',false)], fan.std.Param.$type),{}).$am('offset',8192,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('year','sys::Int',true)], fan.std.Param.$type),{}).$am('fromGmtOffset',40962,'std::TimeZone',fan.sys.List.makeFromJs([new fan.std.Param('offset','sys::Int',false)], fan.std.Param.$type),{}).$am('dstOffset',8704,'std::Duration?',fan.sys.List.makeFromJs([new fan.std.Param('year','sys::Int',false)], fan.std.Param.$type),{}).$am('stdAbbr',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('year','sys::Int',false)], fan.std.Param.$type),{}).$am('dstAbbr',8192,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('year','sys::Int',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Date.$type.$af('datetime',67586,'std::DateTime',{}).$af('defVal',106498,'std::Date',{}).$am('today',40962,'std::Date',fan.sys.List.makeFromJs([new fan.std.Param('tz','std::TimeZone',true)], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('year','sys::Int',false),new fan.std.Param('month','std::Month',false),new fan.std.Param('day','sys::Int',false)], fan.std.Param.$type),{}).$am('num',34818,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'std::Date',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('compare',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('year',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('month',8192,'std::Month',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('day',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('weekday',8192,'std::Weekday',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('dayOfYear',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('weekOfYear',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('startOfWeek','std::Weekday',true)], fan.std.Param.$type),{}).$am('toLocale',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('pattern','sys::Str?',true),new fan.std.Param('locale','std::Locale',true)], fan.std.Param.$type),{}).$am('fromLocale',40962,'std::Date?',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('pattern','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('fromIso',40962,'std::Date?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('toIso',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('plus',8192,'std::Date',fan.sys.List.makeFromJs([new fan.std.Param('days','std::Duration',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('minus',8192,'std::Date',fan.sys.List.makeFromJs([new fan.std.Param('days','std::Duration',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('minusDate',8192,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('days','std::Date',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('firstOfMonth',8192,'std::Date',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('lastOfMonth',8192,'std::Date',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isYesterday',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isToday',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isTomorrow',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toDateTime',8192,'std::DateTime',fan.sys.List.makeFromJs([new fan.std.Param('t','std::TimeOfDay',false),new fan.std.Param('tz','std::TimeZone',true)], fan.std.Param.$type),{}).$am('midnight',8192,'std::DateTime',fan.sys.List.makeFromJs([new fan.std.Param('tz','std::TimeZone',true)], fan.std.Param.$type),{}).$am('toCode',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('yesterday',40962,'std::Date',fan.sys.List.makeFromJs([new fan.std.Param('tz','std::TimeZone',true)], fan.std.Param.$type),{}).$am('tomorrow',40962,'std::Date',fan.sys.List.makeFromJs([new fan.std.Param('tz','std::TimeZone',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Duration.$type.$af('ticks',67586,'sys::Int',{}).$af('zero',100354,'std::Duration',{}).$af('defVal',106498,'std::Duration',{}).$af('minVal',106498,'std::Duration',{}).$af('maxVal',106498,'std::Duration',{}).$af('nsPerDay',106498,'sys::Int',{}).$af('nsPerHr',106498,'sys::Int',{}).$af('nsPerMin',106498,'sys::Int',{}).$af('nsPerSec',106498,'sys::Int',{}).$af('nsPerMilli',106498,'sys::Int',{}).$af('micrsPerDay',106498,'sys::Int',{}).$af('micrsPerHr',106498,'sys::Int',{}).$af('micrsPerMin',106498,'sys::Int',{}).$af('micrsPerSec',106498,'sys::Int',{}).$af('micrsPerMilli',106498,'sys::Int',{}).$af('milliPerDay',106498,'sys::Int',{}).$af('milliPerHr',106498,'sys::Int',{}).$af('milliPerMin',106498,'sys::Int',{}).$af('milliPerSec',106498,'sys::Int',{}).$af('secPerDay',106498,'sys::Int',{}).$af('secPerHr',106498,'sys::Int',{}).$af('secPerMin',106498,'sys::Int',{}).$am('now',40962,'std::Duration',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Deprecated':""}).$am('nowTicks',40962,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Deprecated':""}).$am('make',34822,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('ticks','sys::Int',false)], fan.std.Param.$type),{}).$am('privateMake',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('t','sys::Int',false)], fan.std.Param.$type),{}).$am('toTicks',2048,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fromTicks',32902,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('t','sys::Int',false)], fan.std.Param.$type),{}).$am('fromDateTime',32902,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('t','sys::Int',false)], fan.std.Param.$type),{}).$am('fromNanos',40966,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('nanao','sys::Int',false)], fan.std.Param.$type),{}).$am('fromMicros',40966,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Int',false)], fan.std.Param.$type),{}).$am('fromMillis',40966,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Int',false)], fan.std.Param.$type),{}).$am('fromSec',40966,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Int',false)], fan.std.Param.$type),{}).$am('fromDay',40966,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Int',false)], fan.std.Param.$type),{}).$am('fromMin',40966,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Int',false)], fan.std.Param.$type),{}).$am('fromHour',40966,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Int',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('compare',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('negate',8192,'std::Duration',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Operator':""}).$am('mult',8192,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('multFloat',8192,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('div',8192,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('divFloat',8192,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('plus',8192,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('b','std::Duration',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('minus',8192,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('b','std::Duration',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('abs',8192,'std::Duration',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('min',8192,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('that','std::Duration',false)], fan.std.Param.$type),{}).$am('max',8192,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('that','std::Duration',false)], fan.std.Param.$type),{}).$am('floor',8192,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('accuracy','std::Duration',false)], fan.std.Param.$type),{}).$am('toNanos',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toMicros',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toMillis',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toSec',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toMin',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toHour',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toDay',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toLocale',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toCode',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toIso',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fromIso',40962,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Locale.$type.$af('str',67586,'sys::Str',{}).$af('en',106498,'std::Locale',{}).$af('lang',73730,'sys::Str',{}).$af('country',73730,'sys::Str?',{}).$am('fromStr',40962,'std::Locale?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('make',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('lang','sys::Str',false),new fan.std.Param('country','sys::Str?',false)], fan.std.Param.$type),{}).$am('cur',41474,'std::Locale',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('setCur',41474,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('locale','std::Locale',false)], fan.std.Param.$type),{}).$am('use',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('func','sys::Func<sys::Void,sys::This>',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.TimeOfDay.$type.$af('ticks',67586,'sys::Int',{}).$af('defVal',106498,'std::TimeOfDay',{}).$am('now',40962,'std::TimeOfDay',fan.sys.List.makeFromJs([new fan.std.Param('tz','std::TimeZone',true)], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('hour','sys::Int',false),new fan.std.Param('min','sys::Int',false),new fan.std.Param('sec','sys::Int',true),new fan.std.Param('ns','sys::Int',true)], fan.std.Param.$type),{}).$am('fromTicks',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('ticks','sys::Int',false)], fan.std.Param.$type),{}).$am('num',34818,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'std::TimeOfDay',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('compare',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hour',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('min',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('sec',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('nanoSec',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toLocale',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('pattern','sys::Str?',true),new fan.std.Param('locale','std::Locale',true)], fan.std.Param.$type),{}).$am('fromLocale',40962,'std::TimeOfDay?',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('pattern','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('fromIso',40962,'std::TimeOfDay?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('toIso',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('plus',8192,'std::TimeOfDay',fan.sys.List.makeFromJs([new fan.std.Param('d','std::Duration',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('minus',8192,'std::TimeOfDay',fan.sys.List.makeFromJs([new fan.std.Param('d','std::Duration',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('fromDuration',40962,'std::TimeOfDay',fan.sys.List.makeFromJs([new fan.std.Param('d','std::Duration',false)], fan.std.Param.$type),{}).$am('toDuration',8192,'std::Duration',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toDateTime',8192,'std::DateTime',fan.sys.List.makeFromJs([new fan.std.Param('d','std::Date',false),new fan.std.Param('tz','std::TimeZone',true)], fan.std.Param.$type),{}).$am('toCode',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isMidnight',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.TimePoint.$type.$af('ticks',67586,'sys::Int',{}).$af('epoch',106498,'std::TimePoint',{}).$am('make',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('ticks','sys::Int',false)], fan.std.Param.$type),{}).$am('nowMillis',41474,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('nanoTicks',41474,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('nowUnique',41474,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('now',40966,'std::TimePoint',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fromMillis',40966,'std::TimePoint',fan.sys.List.makeFromJs([new fan.std.Param('m','sys::Int',false)], fan.std.Param.$type),{}).$am('fromSec',40966,'std::TimePoint',fan.sys.List.makeFromJs([new fan.std.Param('sec','sys::Int',false)], fan.std.Param.$type),{}).$am('toMillis',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toSec',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('compare',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fromStr',40966,'std::TimePoint',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('minusDateTime',8192,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('time','std::TimePoint',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('plus',8192,'std::TimePoint',fan.sys.List.makeFromJs([new fan.std.Param('duration','std::Duration',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('minus',8192,'std::TimePoint',fan.sys.List.makeFromJs([new fan.std.Param('duration','std::Duration',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('floor',8192,'std::TimePoint',fan.sys.List.makeFromJs([new fan.std.Param('accuracy','std::Duration',false)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Weekday.$type.$af('sun',106506,'std::Weekday',{}).$af('mon',106506,'std::Weekday',{}).$af('tue',106506,'std::Weekday',{}).$af('wed',106506,'std::Weekday',{}).$af('thu',106506,'std::Weekday',{}).$af('fri',106506,'std::Weekday',{}).$af('sat',106506,'std::Weekday',{}).$af('vals',106498,'sys::List<std::Weekday>',{}).$af('fullName',67586,'sys::Str',{}).$af('abbrName',67586,'sys::Str',{}).$am('make',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('$ordinal','sys::Int',false),new fan.std.Param('$name','sys::Str',false),new fan.std.Param('fullName','sys::Str',false)], fan.std.Param.$type),{}).$am('increment',8192,'std::Weekday',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Operator':""}).$am('decrement',8192,'std::Weekday',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Operator':""}).$am('toLocale',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('pattern','sys::Str?',true),new fan.std.Param('locale','std::Locale',true)], fan.std.Param.$type),{}).$am('localeAbbr',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('localeFull',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('localeStartOfWeek',40962,'std::Weekday',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('localeVals',40962,'sys::List<std::Weekday>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fromStr',40966,'std::Weekday?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Month.$type.$af('jan',106506,'std::Month',{}).$af('feb',106506,'std::Month',{}).$af('mar',106506,'std::Month',{}).$af('apr',106506,'std::Month',{}).$af('may',106506,'std::Month',{}).$af('jun',106506,'std::Month',{}).$af('jul',106506,'std::Month',{}).$af('aug',106506,'std::Month',{}).$af('sep',106506,'std::Month',{}).$af('oct',106506,'std::Month',{}).$af('nov',106506,'std::Month',{}).$af('dec',106506,'std::Month',{}).$af('vals',106498,'sys::List<std::Month>',{}).$af('fullName',67586,'sys::Str',{}).$af('abbrName',67586,'sys::Str',{}).$af('daysInMon',106498,'sys::List<sys::Int>',{}).$af('daysInMonLeap',106498,'sys::List<sys::Int>',{}).$am('make',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('$ordinal','sys::Int',false),new fan.std.Param('$name','sys::Str',false),new fan.std.Param('fullName','sys::Str',false)], fan.std.Param.$type),{}).$am('increment',8192,'std::Month',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Operator':""}).$am('decrement',8192,'std::Month',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Operator':""}).$am('numDays',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('year','sys::Int',false)], fan.std.Param.$type),{}).$am('toLocale',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('pattern','sys::Str?',true),new fan.std.Param('locale','std::Locale',true)], fan.std.Param.$type),{}).$am('localeAbbr',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('localeFull',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fromStr',40966,'std::Month?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.DateTime.$type.$af('fields',67586,'sys::Int',{}).$af('yearField',67586,'sys::Int',{}).$af('ticks',67586,'sys::Int',{}).$af('timeZone',67586,'std::TimeZone',{}).$af('defVal',106498,'std::DateTime',{}).$af('httpFormats',106498,'sys::List<sys::Str>',{}).$am('now',41474,'std::DateTime',fan.sys.List.makeFromJs([new fan.std.Param('tolerance','std::Duration?',true)], fan.std.Param.$type),{}).$am('nowUtc',41474,'std::DateTime',fan.sys.List.makeFromJs([new fan.std.Param('tolerance','std::Duration?',true)], fan.std.Param.$type),{}).$am('nowTicks',40962,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::NoDoc':""}).$am('nowUnique',40962,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::NoDoc':""}).$am('fromTicks',35330,'std::DateTime',fan.sys.List.makeFromJs([new fan.std.Param('ticks','sys::Int',false),new fan.std.Param('tz','std::TimeZone',true)], fan.std.Param.$type),{}).$am('make',41478,'std::DateTime',fan.sys.List.makeFromJs([new fan.std.Param('year','sys::Int',false),new fan.std.Param('month','std::Month',false),new fan.std.Param('day','sys::Int',false),new fan.std.Param('hour','sys::Int',false),new fan.std.Param('min','sys::Int',false),new fan.std.Param('sec','sys::Int',true),new fan.std.Param('ns','sys::Int',true),new fan.std.Param('tz','std::TimeZone',true)], fan.std.Param.$type),{}).$am('privateMake',132,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('year','sys::Int',false),new fan.std.Param('month','sys::Int',false),new fan.std.Param('day','sys::Int',false),new fan.std.Param('hour','sys::Int',false),new fan.std.Param('min','sys::Int',false),new fan.std.Param('sec','sys::Int',false),new fan.std.Param('ns','sys::Int',false),new fan.std.Param('ticks','sys::Int',false),new fan.std.Param('dst','sys::Int',false),new fan.std.Param('weekday','sys::Int',false),new fan.std.Param('tz','std::TimeZone',true)], fan.std.Param.$type),{}).$am('numDaysInMonth',34818,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('year','sys::Int',false),new fan.std.Param('month','sys::Int',false)], fan.std.Param.$type),{}).$am('num',34818,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('index','sys::Int',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'std::DateTime',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true),new fan.std.Param('iso','sys::Bool',true)], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('compare',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('date',8192,'std::Date',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('time',8192,'std::TimeOfDay',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('year',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('month',8192,'std::Month',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('day',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hour',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('min',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('sec',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('nanoSec',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('weekday',8192,'std::Weekday',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('tz',8192,'std::TimeZone',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('dst',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('tzAbbr',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('dayOfYear',8704,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('weekOfYear',8704,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('startOfWeek','std::Weekday',true)], fan.std.Param.$type),{}).$am('hoursInDay',8704,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toLocale',8704,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('pattern','sys::Str?',true),new fan.std.Param('locale','std::Locale',true)], fan.std.Param.$type),{}).$am('fromLocale',41474,'std::DateTime?',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('pattern','sys::Str',false),new fan.std.Param('tz','std::TimeZone?',true),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('toTimeZone',8192,'std::DateTime',fan.sys.List.makeFromJs([new fan.std.Param('tz','std::TimeZone',false)], fan.std.Param.$type),{}).$am('toUtc',8192,'std::DateTime',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toRel',8192,'std::DateTime',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('minusDateTime',8192,'std::Duration',fan.sys.List.makeFromJs([new fan.std.Param('time','std::DateTime',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('plus',8192,'std::DateTime',fan.sys.List.makeFromJs([new fan.std.Param('duration','std::Duration',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('minus',8192,'std::DateTime',fan.sys.List.makeFromJs([new fan.std.Param('duration','std::Duration',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('floor',8192,'std::DateTime',fan.sys.List.makeFromJs([new fan.std.Param('accuracy','std::Duration',false)], fan.std.Param.$type),{}).$am('midnight',8192,'std::DateTime',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isMidnight',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isLeapYear',40962,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('year','sys::Int',false)], fan.std.Param.$type),{}).$am('weekdayInMonth',41474,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('year','sys::Int',false),new fan.std.Param('mon','std::Month',false),new fan.std.Param('weekday','std::Weekday',false),new fan.std.Param('pos','sys::Int',false)], fan.std.Param.$type),{}).$am('fromJava',40962,'std::DateTime?',fan.sys.List.makeFromJs([new fan.std.Param('millis','sys::Int',false),new fan.std.Param('tz','std::TimeZone',true),new fan.std.Param('negIsNull','sys::Bool',true)], fan.std.Param.$type),{}).$am('toJava',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toTimePoint',8192,'std::TimePoint',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fromTimePoint',40962,'std::DateTime',fan.sys.List.makeFromJs([new fan.std.Param('tp','std::TimePoint',false),new fan.std.Param('tz','std::TimeZone',true)], fan.std.Param.$type),{}).$am('fromIso',40962,'std::DateTime?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('toIso',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fromHttpStr',40962,'std::DateTime?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('toHttpStr',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toCode',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.ObjDecoder.$type.$af('tokenizer',67584,'std::Tokenizer',{}).$af('curt',67584,'sys::Int',{}).$af('options',67584,'std::Map<sys::Str,sys::Obj>?',{}).$af('usings',67584,'sys::List<std::Using>',{}).$am('decode',40962,'sys::Obj',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false),new fan.std.Param('options','std::Map<sys::Str,sys::Obj>?',false)], fan.std.Param.$type),{}).$am('readRootObj',8192,'sys::Obj?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readHeader',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readUsing',2048,'std::Using',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readObj',2048,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('curField','std::Field?',false),new fan.std.Param('peekType','std::Type?',false),new fan.std.Param('root','sys::Bool',false)], fan.std.Param.$type),{}).$am('readTypeOrSlotLiteral',2048,'sys::Obj',fan.sys.List.makeFromJs([new fan.std.Param('line','sys::Int',false),new fan.std.Param('t','std::Type',false)], fan.std.Param.$type),{}).$am('readSimple',2048,'sys::Obj',fan.sys.List.makeFromJs([new fan.std.Param('line','sys::Int',false),new fan.std.Param('t','std::Type',false)], fan.std.Param.$type),{}).$am('readComplex',2048,'sys::Obj',fan.sys.List.makeFromJs([new fan.std.Param('line','sys::Int',false),new fan.std.Param('t','std::Type',false),new fan.std.Param('root','sys::Bool',false)], fan.std.Param.$type),{}).$am('readComplexFields',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('t','std::Type',false),new fan.std.Param('toSet','std::Map<std::Field,sys::Obj?>',false),new fan.std.Param('toAdd','sys::List<sys::Obj?>',false)], fan.std.Param.$type),{}).$am('readComplexSet',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('t','std::Type',false),new fan.std.Param('line','sys::Int',false),new fan.std.Param('name','sys::Str',false),new fan.std.Param('toSet','std::Map<std::Field,sys::Obj?>',false)], fan.std.Param.$type),{}).$am('complexSet',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false),new fan.std.Param('field','std::Field',false),new fan.std.Param('val','sys::Obj?',false),new fan.std.Param('line','sys::Int',false)], fan.std.Param.$type),{}).$am('readComplexAdd',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('t','std::Type',false),new fan.std.Param('line','sys::Int',false),new fan.std.Param('toAdd','sys::List<sys::Obj?>',false)], fan.std.Param.$type),{}).$am('complexAdd',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('t','std::Type',false),new fan.std.Param('obj','sys::Obj',false),new fan.std.Param('addMethod','std::Method',false),new fan.std.Param('val','sys::Obj',false),new fan.std.Param('line','sys::Int',false)], fan.std.Param.$type),{}).$am('readCollection',2048,'sys::Obj',fan.sys.List.makeFromJs([new fan.std.Param('curField','std::Field?',false),new fan.std.Param('t','std::Type?',false)], fan.std.Param.$type),{}).$am('readList',2048,'sys::Obj',fan.sys.List.makeFromJs([new fan.std.Param('first','sys::Obj?',false)], fan.std.Param.$type),{}).$am('readMap',2048,'sys::Obj',fan.sys.List.makeFromJs([new fan.std.Param('firstKey','sys::Obj',false)], fan.std.Param.$type),{}).$am('readType',2048,'std::Type',fan.sys.List.makeFromJs([new fan.std.Param('lbracket','sys::Bool',true)], fan.std.Param.$type),{}).$am('readSimpleType',2048,'std::Type',fan.sys.List.makeFromJs([new fan.std.Param('lbracket','sys::Bool',false)], fan.std.Param.$type),{}).$am('err',2048,'sys::Err',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',false),new fan.std.Param('line','sys::Int',true),new fan.std.Param('e','sys::Err?',true)], fan.std.Param.$type),{}).$am('consumeId',2048,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('expected','sys::Str',false)], fan.std.Param.$type),{}).$am('consumeStr',2048,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('expected','sys::Str',false)], fan.std.Param.$type),{}).$am('consumeAs',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Int',false),new fan.std.Param('expected','sys::Str',false)], fan.std.Param.$type),{}).$am('verify',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Int',false),new fan.std.Param('expected','sys::Str',false)], fan.std.Param.$type),{}).$am('consume',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isEndOfStmt',2048,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('lastLine','sys::Int',false)], fan.std.Param.$type),{}).$am('endOfStmt',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('lastLine','sys::Int',false)], fan.std.Param.$type),{});
    fan.std.Using.$type.$am('resolve',270337,'std::Type?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.UsingPod.$type.$af('pod',73730,'std::Pod',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('p','std::Pod',false)], fan.std.Param.$type),{}).$am('resolve',271360,'std::Type?',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Str',false)], fan.std.Param.$type),{});
    fan.std.UsingType.$type.$af('name',73730,'sys::Str',{}).$af('type',73730,'std::Type',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('t','std::Type',false),new fan.std.Param('n','sys::Str',false)], fan.std.Param.$type),{}).$am('resolve',271360,'std::Type?',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Str',false)], fan.std.Param.$type),{});
    fan.std.Tokenizer.$type.$af('SPACE',100354,'sys::Int',{}).$af('ALPHA',100354,'sys::Int',{}).$af('DIGIT',100354,'sys::Int',{}).$af('charMap',100354,'sys::List<sys::Int>',{}).$af('in',67584,'std::InStream',{}).$af('type',73728,'sys::Int',{}).$af('val',73728,'sys::Obj?',{}).$af('line',73728,'sys::Int',{}).$af('undo',67584,'std::Undo?',{}).$af('cur',67584,'sys::Int',{}).$af('curt',67584,'sys::Int',{}).$af('peek',67584,'sys::Int',{}).$af('peekt',67584,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false)], fan.std.Param.$type),{}).$am('next',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doNext',2048,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('id',2048,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('number',2048,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('neg','sys::Bool',false)], fan.std.Param.$type),{}).$am('hex',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hexChar',40962,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('c','sys::Int',false)], fan.std.Param.$type),{}).$am('str',2048,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('ch',2048,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('escape',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('uri',2048,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('skipCommentSL',2048,'std::Token?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('skipCommentML',2048,'std::Token?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('err',8192,'sys::Err',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',false)], fan.std.Param.$type),{}).$am('consume',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('pushUndo',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Int',false),new fan.std.Param('val','sys::Obj?',false),new fan.std.Param('line','sys::Int',false)], fan.std.Param.$type),{}).$am('reset',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Int',false),new fan.std.Param('val','sys::Obj?',false),new fan.std.Param('line','sys::Int',false)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.std.Undo.$type.$af('type',73728,'sys::Int',{}).$af('val',73728,'sys::Obj?',{}).$af('line',73728,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('t','sys::Int',false),new fan.std.Param('v','sys::Obj?',false),new fan.std.Param('l','sys::Int',false)], fan.std.Param.$type),{}).$am('reset',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('t','std::Tokenizer',false)], fan.std.Param.$type),{});
    fan.std.ObjEncoder.$type.$af('out',67584,'std::OutStream',{}).$af('level',67584,'sys::Int',{}).$af('indent',67584,'sys::Int',{}).$af('skipDefaults',67584,'sys::Bool',{}).$af('skipErrors',67584,'sys::Bool',{}).$af('curFieldType',67584,'std::Type?',{}).$am('encode',40962,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('out','std::OutStream',false),new fan.std.Param('options','std::Map<sys::Str,sys::Obj>?',false)], fan.std.Param.$type),{}).$am('writeObj',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('writeSimple',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('type','std::Type',false),new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{}).$am('writeComplex',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('type','std::Type',false),new fan.std.Param('obj','sys::Obj',false),new fan.std.Param('ser','sys::Serializable',false)], fan.std.Param.$type),{}).$am('writeCollectionItems',2048,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('type','std::Type',false),new fan.std.Param('obj','sys::Obj',false),new fan.std.Param('first','sys::Bool',false)], fan.std.Param.$type),{}).$am('writeList',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('list','sys::List<sys::Obj?>',false)], fan.std.Param.$type),{}).$am('writeMap',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('map','std::Map<sys::Obj,sys::Obj?>',false)], fan.std.Param.$type),{}).$am('isMultiLine',2048,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('t','sys::Obj?',false)], fan.std.Param.$type),{}).$am('wType',2048,'std::ObjEncoder',fan.sys.List.makeFromJs([new fan.std.Param('t','std::Type',false)], fan.std.Param.$type),{}).$am('wStrLiteral',2048,'std::ObjEncoder',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('quote','sys::Int',false)], fan.std.Param.$type),{}).$am('wIndent',2048,'std::ObjEncoder',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('wStr',2048,'std::ObjEncoder',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{}).$am('w',2048,'std::ObjEncoder',fan.sys.List.makeFromJs([new fan.std.Param('ch','sys::Int',false)], fan.std.Param.$type),{}).$am('initOptions',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('options','std::Map<sys::Str,sys::Obj>',false)], fan.std.Param.$type),{});
    fan.std.Token.$type.$af('EOF',106498,'sys::Int',{}).$af('ID',106498,'sys::Int',{}).$af('BOOL_LITERAL',106498,'sys::Int',{}).$af('STR_LITERAL',106498,'sys::Int',{}).$af('INT_LITERAL',106498,'sys::Int',{}).$af('FLOAT_LITERAL',106498,'sys::Int',{}).$af('DECIMAL_LITERAL',106498,'sys::Int',{}).$af('DURATION_LITERAL',106498,'sys::Int',{}).$af('URI_LITERAL',106498,'sys::Int',{}).$af('NULL_LITERAL',106498,'sys::Int',{}).$af('DOT',106498,'sys::Int',{}).$af('SEMICOLON',106498,'sys::Int',{}).$af('COMMA',106498,'sys::Int',{}).$af('COLON',106498,'sys::Int',{}).$af('DOUBLE_COLON',106498,'sys::Int',{}).$af('LBRACE',106498,'sys::Int',{}).$af('RBRACE',106498,'sys::Int',{}).$af('LPAREN',106498,'sys::Int',{}).$af('RPAREN',106498,'sys::Int',{}).$af('LBRACKET',106498,'sys::Int',{}).$af('RBRACKET',106498,'sys::Int',{}).$af('LRBRACKET',106498,'sys::Int',{}).$af('EQ',106498,'sys::Int',{}).$af('POUND',106498,'sys::Int',{}).$af('QUESTION',106498,'sys::Int',{}).$af('AT',106498,'sys::Int',{}).$af('DOLLAR',106498,'sys::Int',{}).$af('AS',106498,'sys::Int',{}).$af('USING',106498,'sys::Int',{}).$af('JAVA_FFI',106498,'sys::Int',{}).$am('isLiteral',40962,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Int',false)], fan.std.Param.$type),{}).$am('keyword',40962,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Int',false)], fan.std.Param.$type),{}).$am('toString',40962,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Int',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    m_meta = {};
    m_meta["pod.name"] = "std";
    m_meta["pod.version"] = "1.0";
    m_meta["pod.depends"] = "sys 2.0";
    m_meta["pod.summary"] = "system std lib";
    m_meta["pod.isScript"] = "false";
    m_meta["fcode.version"] = "1.1.3";
    m_meta["build.host"] = "mywifi.local";
    m_meta["build.user"] = "yangjiandong";
    m_meta["build.ts"] = "2020-04-13T20:44:36.000+08:00 Asia/Harbin";
    m_meta["build.tsKey"] = "200413204436";
    m_meta["build.compiler"] = "1.1";
    m_meta["build.platform"] = "macosx-x86_64";
    m_meta["license.name"] = "Academic Free License 3.0";
    m_meta["pod.docApi"] = "true";
    m_meta["pod.docSrc"] = "false";
    m_meta["pod.native.java"] = "true";
    m_meta["pod.native.jni"] = "false";
    m_meta["pod.native.dotnet"] = "false";
    m_meta["pod.native.js"] = "true";
  }
  fan.std.$clos$_u0 = new fan.sys.ClosureFuncSpec$("std::$clos$_u0",fan.sys.Bool.$type,["v","sys::Obj?","false","k","sys::Obj?","false"]);
  fan.std.$clos$_u1 = new fan.sys.ClosureFuncSpec$("std::$clos$_u1",fan.sys.Void.$type,["v","sys::Obj?","false","k","sys::Obj?","false"]);
  fan.std.$clos$_u2 = new fan.sys.ClosureFuncSpec$("std::$clos$_u2",fan.sys.Obj.$type.toNullable(),["v","sys::Obj?","false","k","sys::Obj?","false"]);
  fan.std.$clos$_u4 = new fan.sys.ClosureFuncSpec$("std::$clos$_u4",fan.sys.Void.$type,["it","sys::List<std::MapEntryList?>","false"]);
  fan.std.$clos$_u16 = new fan.sys.ClosureFuncSpec$("std::$clos$_u16",fan.sys.Void.$type,["v","sys::Obj?","false","k","std::CIKey","false"]);
  fan.std.$clos$_u17 = new fan.sys.ClosureFuncSpec$("std::$clos$_u17",fan.sys.Obj.$type.toNullable(),["v","sys::Obj?","false","k","std::CIKey","false"]);
  fan.std.$clos$_u18 = new fan.sys.ClosureFuncSpec$("std::$clos$_u18",fan.sys.Obj.$type.toNullable(),["it","std::CIKey","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u20 = new fan.sys.ClosureFuncSpec$("std::$clos$_u20",fan.sys.Void.$type,["it","std::HashMap<sys::Obj?,sys::Obj?>","false"]);
  fan.std.$clos$_u21 = new fan.sys.ClosureFuncSpec$("std::$clos$_u21",fan.sys.Void.$type,["v","sys::Obj?","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u22 = new fan.sys.ClosureFuncSpec$("std::$clos$_u22",fan.sys.Void.$type,["obj","sys::Obj?","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u25 = new fan.sys.ClosureFuncSpec$("std::$clos$_u25",fan.sys.Void.$type,["type","std::Type","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u26 = new fan.sys.ClosureFuncSpec$("std::$clos$_u26",fan.sys.Void.$type,["m","std::Method","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u27 = new fan.sys.ClosureFuncSpec$("std::$clos$_u27",fan.sys.Void.$type,["it","sys::Str","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u30 = new fan.sys.ClosureFuncSpec$("std::$clos$_u30",fan.sys.Void.$type,["r","std::LogRec","false"]);
  fan.std.$clos$_u31 = new fan.sys.ClosureFuncSpec$("std::$clos$_u31",fan.sys.Obj.$type.toNullable(),["it","sys::Obj?","false"]);
  fan.std.$clos$_u32 = new fan.sys.ClosureFuncSpec$("std::$clos$_u32",fan.sys.Obj.$type.toNullable(),[]);
  fan.std.$clos$_u35 = new fan.sys.ClosureFuncSpec$("std::$clos$_u35",fan.sys.Void.$type,["h","sys::Func<sys::Void,std::LogRec>","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u36 = new fan.sys.ClosureFuncSpec$("std::$clos$_u36",fan.sys.Bool.$type,["it","std::Type","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u37 = new fan.sys.ClosureFuncSpec$("std::$clos$_u37",fan.sys.Bool.$type,["it","sys::Str","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u39 = new fan.sys.ClosureFuncSpec$("std::$clos$_u39",fan.sys.Obj.$type,[]);
  fan.std.$clos$_u40 = new fan.sys.ClosureFuncSpec$("std::$clos$_u40",fan.sys.Void.$type,["f","std::File","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u41 = new fan.sys.ClosureFuncSpec$("std::$clos$_u41",fan.sys.Void.$type,["v","sys::Str","false","k","sys::Str","false"]);
  fan.std.$clos$_u46 = new fan.sys.ClosureFuncSpec$("std::$clos$_u46",fan.sys.Void.$type,["f","std::FacetData","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u48 = new fan.sys.ClosureFuncSpec$("std::$clos$_u48",fan.sys.Bool.$type,["f","sys::Facet","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u49 = new fan.sys.ClosureFuncSpec$("std::$clos$_u49",fan.sys.Void.$type,["p","sys::Str","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u51 = new fan.sys.ClosureFuncSpec$("std::$clos$_u51",fan.sys.Bool.$type,["it","sys::Int","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u75 = new fan.sys.ClosureFuncSpec$("std::$clos$_u75",fan.sys.Bool.$type,["ch","sys::Int","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u84 = new fan.sys.ClosureFuncSpec$("std::$clos$_u84",fan.sys.Bool.$type,["f","std::File","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u85 = new fan.sys.ClosureFuncSpec$("std::$clos$_u85",fan.sys.Void.$type,["it","std::OutStream","false"]);
  fan.std.$clos$_u106 = new fan.sys.ClosureFuncSpec$("std::$clos$_u106",fan.sys.Void.$type,["val","sys::Str","false","key","sys::Str","false"]);
  fan.std.$clos$_u129 = new fan.sys.ClosureFuncSpec$("std::$clos$_u129",fan.sys.Obj.$type.toNullable(),["it","sys::Str","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u158 = new fan.sys.ClosureFuncSpec$("std::$clos$_u158",fan.sys.Void.$type,["v","sys::Obj?","false","k","std::Field","false"]);
  fan.std.$clos$_u185 = new fan.sys.ClosureFuncSpec$("std::$clos$_u185",fan.sys.Void.$type,["item","sys::Obj?","false"]);
  fan.std.$clos$_u187 = new fan.sys.ClosureFuncSpec$("std::$clos$_u187",fan.sys.Bool.$type,["it","sys::Obj?","false","ignoreparam$1","sys::Int","false"]);
  fan.std.$clos$_u190 = new fan.sys.ClosureFuncSpec$("std::$clos$_u190",fan.sys.Bool.$type,["v","sys::Obj?","false","k","sys::Obj","false"]);
  fan.std.$clos$_u192 = new fan.sys.ClosureFuncSpec$("std::$clos$_u192",fan.sys.Void.$type,["val","sys::Obj?","false","key","sys::Obj","false"]);
}
fan.std.initStatic$ = function() {
  fan.std.Map.static$init();
  fan.std.Test.static$init();
  fan.std.LogLevel.static$init();
  fan.std.Log.static$init();
  fan.std.Regex.static$init();
  fan.std.ScriptCompiler.static$init();
  fan.std.Version.static$init();
  fan.std.ConstFlags.static$init();
  fan.std.BufCrypto.static$init();
  fan.std.Uri.static$init();
  fan.std.Buf.static$init();
  fan.std.InStream.static$init();
  fan.std.XmlUtil.static$init();
  fan.std.Endian.static$init();
  fan.std.Charset.static$init();
  fan.std.MimeType.static$init();
  fan.std.UriScheme.static$init();
  fan.std.TimeZone.static$init();
  fan.std.Date.static$init();
  fan.std.Duration.static$init();
  fan.std.Locale.static$init();
  fan.std.TimeOfDay.static$init();
  fan.std.TimePoint.static$init();
  fan.std.Weekday.static$init();
  fan.std.Month.static$init();
  fan.std.DateTime.static$init();
  fan.std.Tokenizer.static$init();
  fan.std.Token.static$init();
}
fan.sys.initReflect$();
fan.sys.initStatic$();
fan.std.initReflect$();
fan.std.initStatic$();
fan.sys.DateTimeStr = fan.sys.Obj.$extend(fan.sys.Obj);
fan.sys.DateTimeStr.prototype.$ctor = function()
{
  this.pattern = "";
  this.year = 0;
  this.mon  = null;
  this.day  = 0;
  this.hour = 0;
  this.min  = 0;
  this.sec  = 0;
  this.ns   = 0;
  this.weekday  = null;
  this.tz       = null;
  this.tzName   = null;
  this.tzOffset = 0;
  this.dst  = 0;
  this.loc  = null;
  this.str  = "";  // when parsing
  this.pos  = 0;   // index in str for parse
}
fan.sys.DateTimeStr.makeDateTime = function(pattern, locale, dt)
{
  var x = new fan.sys.DateTimeStr();
  x.valDateTime = dt;
  x.pattern = pattern;
  x.loc     = locale;
  x.year    = dt.year();
  x.mon     = dt.month();
  x.day     = dt.day();
  x.hour    = dt.hour();
  x.min     = dt.min();
  x.sec     = dt.sec();
  x.ns      = dt.nanoSec();
  x.weekday = dt.weekday();
  x.tz      = dt.tz();
  x.dst     = dt.dst();
  return x;
}
fan.sys.DateTimeStr.makeDate = function(pattern, locale, d)
{
  var x = new fan.sys.DateTimeStr();
  x.valDate = d;
  x.pattern = pattern;
  x.loc     = locale;
  x.year    = d.year();
  x.mon     = d.month();
  x.day     = d.day();
  try { x.weekday = d.weekday(); } catch (e) {}
  return x;
}
fan.sys.DateTimeStr.makeTime = function(pattern, locale, t)
{
  var x = new fan.sys.DateTimeStr();
  x.pattern = pattern;
  x.loc     = locale;
  x.hour    = t.hour();
  x.min     = t.min();
  x.sec     = t.sec();
  x.ns      = t.nanoSec();
  return x;
}
fan.sys.DateTimeStr.make = function(pattern, locale)
{
  var x = new fan.sys.DateTimeStr();
  x.pattern = pattern;
  x.loc     = locale;
  return x;
}
fan.sys.DateTimeStr.prototype.format = function()
{
  var s = "";
  var len = this.pattern.length;
  for (var i=0; i<len; ++i)
  {
    // character
    var c = this.pattern.charAt(i);
    // literals
    if (c == '\'')
    {
      var numLiterals = 0;
      while (true)
      {
        ++i;
        if (i >= len) throw fan.sys.ArgErr.make("Invalid pattern: unterminated literal");
        c = this.pattern.charAt(i);
        if (c == '\'') break;
        s += c;
        numLiterals++;
      }
      if (numLiterals == 0) s += "'";
      continue;
    }
    // character count
    var n = 1;
    while (i+1<len && this.pattern.charAt(i+1) == c) { ++i; ++n; }
    // switch
    var invalidNum = false;
    switch (c)
    {
      case 'Y':
        var y = this.year;
        switch (n)
        {
          case 2:  y %= 100; if (y < 10) s += '0';
          case 4:  s += y; break;
          default: invalidNum = true;
        }
        break;
      case 'M':
        switch (n)
        {
          case 4:
            s += this.mon.full(this.locale());
            break;
          case 3:
            s += this.mon.abbr(this.locale());
            break;
          case 2:  if (this.mon.ordinal()+1 < 10) s += '0';
          case 1:  s += this.mon.ordinal()+1; break;
          default: invalidNum = true;
        }
        break;
      case 'D':
        switch (n)
        {
          case 3:  s += this.day + fan.sys.DateTimeStr.daySuffix(this.day); break;
          case 2:  if (this.day < 10) s += '0';
          case 1:  s += this.day; break;
          default: invalidNum = true;
        }
        break;
      case 'W':
        switch (n)
        {
          case 4:
            s += this.weekday.full(this.locale());
            break;
          case 3:
            s += this.weekday.abbr(this.locale());
            break;
          default: invalidNum = true;
        }
        break;
      case 'V':
        var woy = this.weekOfYear();
        if (woy < 1) throw fan.sys.ArgErr.make("Week of year not available");
        switch (n)
        {
          case 3:  s += woy + fan.sys.DateTimeStr.daySuffix(woy); break;
          case 2:  if (woy < 10) s += '0';
          case 1:  s += woy; break;
          default: invalidNum = true;
        }
        break;
      case 'h':
      case 'k':
        var h = this.hour;
        if (c == 'k')
        {
          if (h == 0) h = 12;
          else if (h > 12) h -= 12;
        }
        switch (n)
        {
          case 2:  if (h < 10) s += '0';
          case 1:  s += h; break;
          default: invalidNum = true;
        }
        break;
      case 'm':
        switch (n)
        {
          case 2:  if (this.min < 10) s += '0';
          case 1:  s += this.min; break;
          default: invalidNum = true;
        }
        break;
      case 's':
        switch (n)
        {
          case 2:  if (this.sec < 10) s += '0';
          case 1:  s += this.sec; break;
          default: invalidNum = true;
        }
        break;
      case 'S':
        if (this.sec != 0 || this.ns != 0)
        {
          switch (n)
          {
            case 2:  if (this.sec < 10) s += '0';
            case 1:  s += this.sec; break;
            default: invalidNum = true;
          }
        }
        break;
      case 'a':
        switch (n)
        {
          case 1:  s += (this.hour < 12 ? "a"  : "p"); break;
          case 2:  s += (this.hour < 12 ? "am" : "pm"); break;
          default: invalidNum = true;
        }
        break;
      case 'A':
        switch (n)
        {
          case 1:  s += (this.hour < 12 ? "A"  : "P"); break;
          case 2:  s += (this.hour < 12 ? "AM" : "PM"); break;
          default: invalidNum = true;
        }
        break;
      case 'f':
      case 'F':
        var req = 0, opt = 0; // required, optional
        if (c == 'F') opt = n;
        else
        {
          req = n;
          while (i+1<len && this.pattern.charAt(i+1) == 'F') { ++i; ++opt; }
        }
        var frac = this.ns;
        for (var x=0, tenth=100000000; x<9; ++x)
        {
          if (req > 0) req--;
          else
          {
            if (frac == 0 || opt <= 0) break;
            opt--;
          }
          s += Math.floor(frac / tenth);
          frac %= tenth;
          tenth  = Math.floor(tenth / 10);
        }
        break;
      case 'z':
        var rule = this.tz.rule(this.year);
        switch (n)
        {
          case 1:
            var offset = rule.offset;
            if (this.dst) offset += rule.dstOffset;
            if (offset == 0) { s += 'Z'; break; }
            if (offset < 0) { s += '-'; offset = -offset; }
            else { s += '+'; }
            var zh = Math.floor(offset / 3600);
            var zm = Math.floor((offset % 3600) / 60);
            if (zh < 10) s += '0'; s += zh + ':';
            if (zm < 10) s += '0'; s += zm;
            break;
          case 3:
            s += this.dst ? rule.dstAbbr : rule.stdAbbr;
            break;
          case 4:
            s += this.tz.$name();
            break;
          default:
            invalidNum = true;
            break;
        }
        break;
      default:
        if (fan.sys.Int.isAlpha(c.charCodeAt(0)))
          throw fan.sys.ArgErr.make("Invalid pattern: unsupported char '" + c + "'");
        // check for symbol skip
        if (i+1 < len)
        {
          var next = this.pattern.charAt(i+1);
          // don't display symbol between ss.FFF if fractions is zero
          if (next  == 'F' && this.ns == 0) break;
          // don't display symbol between mm:SS if secs is zero
          if (next == 'S' && this.sec == 0 && this.ns == 0) break;
        }
        s += c;
    }
    // if invalid number of characters
    if (invalidNum)
      throw fan.sys.ArgErr.make("Invalid pattern: unsupported num of '" + c + "' (x" + n + ")");
  }
  return s;
}
fan.sys.DateTimeStr.daySuffix = function(day)
{
  // eventually need localization
  if (day == 11 || day == 12 || day == 13) return "th";
  switch (day % 10)
  {
    case 1:  return "st";
    case 2:  return "nd";
    case 3:  return "rd";
    default: return "th";
  }
}
fan.sys.DateTimeStr.prototype.parseDateTime = function(s, defTz, checked)
{
  try
  {
    // parse into fields
    this.tzOffset = null;
    this.parse(s);
    // now figure out what timezone to use
    var defRule = defTz.rule(this.year);
    if (this.tzName != null)
    {
      // use defTz if tzName was specified and matches any variations of defTz
      if (this.tzName == defTz.$name() ||
          this.tzName == defRule.stdAbbr ||
          this.tzName == defRule.dstAbbr)
      {
        this.tz = defTz;
      }
      // try to map tzName to TimeZone, use defTz as fallback
      else
      {
        this.tz = fan.sys.TimeZone.fromStr(this.tzName, false);
        if (this.tz == null) this.tz = defTz;
      }
    }
    // if tzOffset was specified...
    else if (this.tzOffset != null)
    {
      // figure out what expected offset was for defTz
      var time = this.hour*3600 + this.min*60 + this.sec;
      var defOffset = defRule.offset + fan.sys.TimeZone.dstOffset(defRule, this.year, this.mon.ordinal(), this.day, time);
      // if specified offset matches expected offset for defTz then
      // use defTz, otherwise use a vanilla GMT+/- timezone
      if (this.tzOffset == defOffset)
        this.tz = defTz;
      else
        this.tz = fan.sys.TimeZone.fromGmtOffset(this.tzOffset);
    }
    // no tzName or tzOffset specified, use defTz
    else this.tz = defTz;
    // construct DateTime
    return fan.sys.DateTime.doMake(this.year, this.mon, this.day, this.hour, this.min, this.sec, this.ns, this.tzOffset, this.tz);
  }
  catch (err)
  {
    if (checked) throw fan.sys.ParseErr.makeStr("DateTime", s, fan.sys.Err.make(err));
    return null;
  }
}
fan.sys.DateTimeStr.prototype.parseDate = function(s, checked)
{
  try
  {
    this.parse(s);
    return fan.sys.Date.make(this.year, this.mon, this.day);
  }
  catch (err)
  {
    if (checked) throw fan.sys.ParseErr.makeStr("Date", s, fan.sys.Err.make(err));
    return null;
  }
}
fan.sys.DateTimeStr.prototype.parseTime = function(s, checked)
{
  try
  {
    this.parse(s);
    return fan.sys.Time.make(this.hour, this.min, this.sec, this.ns);
  }
  catch (err)
  {
    if (checked) throw fan.sys.ParseErr.makeStr("Time", s, fan.sys.Err.make(err));
    return null;
  }
}
fan.sys.DateTimeStr.prototype.parse = function(s)
{
  this.str = s;
  this.pos = 0;
  var len = this.pattern.length;
  var skippedLast = false;
  for (var i=0; i<len; ++i)
  {
    // character
    var c = this.pattern.charAt(i);
    // character count
    var n = 1;
    while (i+1<len && this.pattern.charAt(i+1) == c) { ++i; ++n; }
    // switch
    switch (c)
    {
      case 'Y':
        this.year = this.parseInt(n);
        if (this.year < 30) this.year += 2000;
        else if (this.year < 100) this.year += 1900;
        break;
      case 'M':
        switch (n)
        {
          case 4:  this.mon = this.parseMon(); break;
          case 3:  this.mon = this.parseMon(); break;
          default: this.mon = fan.sys.Month.m_vals.get(this.parseInt(n)-1); break;
        }
        break;
      case 'D':
        if (n != 3) this.day = this.parseInt(n);
        else
        {
          // suffix like st, nd, th
          this.day = this.parseInt(1);
          this.skipWord();
        }
        break;
      case 'h':
      case 'k':
        this.hour = this.parseInt(n);
        break;
      case 'm':
        this.min = this.parseInt(n);
        break;
      case 's':
        this.sec = this.parseInt(n);
        break;
      case 'S':
        if (!skippedLast) this.sec = this.parseInt(n);
        break;
      case 'a':
      case 'A':
        var amPm = this.str.charAt(this.pos); this.pos += n;
        if (amPm == 'P' || amPm == 'p')
        {
          if (this.hour < 12) this.hour += 12;
        }
        else
        {
          if (this.hour == 12) this.hour = 0;
        }
        break;
      case 'W':
        this.skipWord();
        break;
      case 'F':
        if (skippedLast) break;
        // fall-thru
      case 'f':
        this.ns = 0;
        var tenth = 100000000;
        while (true)
        {
          var digit = this.parseOptDigit();
          if (digit < 0) break;
          this.ns += tenth * digit;
          tenth = Math.floor(tenth / 10);
        }
        break;
      case 'z':
        switch (n)
        {
          case 1:  this.parseTzOffset(); break;
          default: this.parseTzName();
        }
        break;
      case '\'':
        if (n == 2)
        {
          var actual = this.str.charAt(this.pos++);
          if (actual != '\'')
            throw fan.sys.Err.make("Expected single quote, not '" + actual + "' [pos " + this.pos +"]");
        }
        else
        {
          while (true)
          {
            var expected = this.pattern.charAt(++i);
            if (expected == '\'') break;
            var actual = this.str.charAt(this.pos++);
            if (actual != expected)
              throw fan.sys.Err.make("Expected '" + expected + "', not '" + actual + "' [pos " + this.pos +"]");
          }
        }
        break;
      default:
        var match = this.pos+1 < this.str.length ? this.str.charAt(this.pos++) : 0;
        // handle skipped symbols
        if (i+1 < this.pattern.length)
        {
          var next = this.pattern.charAt(i+1);
          if (next == 'F' || next == 'S')
          {
            if (match != c) { skippedLast = true; --this.pos; break; }
          }
        }
        skippedLast = false;
        if (match != c)
          throw fan.sys.Err.make("Expected '" + c + "' literal char, not '" + match + "' [pos " + this.pos +"]");
    }
  }
}
fan.sys.DateTimeStr.prototype.parseInt = function(n)
{
  // parse n digits
  var num = 0;
  for (var i=0; i<n; ++i) num = num*10 + this.parseReqDigit();
  // one char like 'k' really implies one or two digits
  if (n == 1)
  {
    var digit = this.parseOptDigit();
    if (digit >= 0) num = num*10 + digit;
  }
  return num;
}
fan.sys.DateTimeStr.prototype.parseReqDigit = function()
{
  var ch = this.str.charCodeAt(this.pos++);
  if (48 <= ch && ch <= 57) return ch - 48;
  throw fan.sys.Err.make("Expected digit, not '" + String.fromCharCode(ch) + "' [pos " + (this.pos-1) + "]");
}
fan.sys.DateTimeStr.prototype.parseOptDigit = function()
{
  if (this.pos < this.str.length)
  {
    var ch = this.str.charCodeAt(this.pos);
    if (48 <= ch && ch <= 57) { this.pos++; return ch-48; }
  }
  return -1;
}
fan.sys.DateTimeStr.prototype.parseMon = function()
{
  var s = "";
  while (this.pos < this.str.length)
  {
    var ch = this.str.charCodeAt(this.pos);
    if (97 <= ch && ch <= 122) { s += String.fromCharCode(ch); this.pos++; continue; }
    if (65 <= ch && ch <= 90)  { s += String.fromCharCode(fan.sys.Int.lower(ch)); this.pos++; continue; }
    break;
  }
  var m = this.locale().monthByName(s);
  if (m == null) throw fan.sys.Err.make("Invalid month: " + s);
  return m;
}
fan.sys.DateTimeStr.prototype.parseTzOffset = function()
{
  var ch = this.str.charAt(this.pos++);
  var neg = false;
  switch (ch)
  {
    case '-': neg = true; break;
    case '+': neg = false; break;
    case 'Z': this.tzOffset = 0; return;
    default: throw fan.sys.Err.make("Unexpected tz offset char: " + ch + " [pos " + (this.pos-1) + "]");
  }
  var hr = this.parseInt(1);
  var min = 0;
  if (this.pos < this.str.length)
  {
    ch = this.str.charCodeAt(this.pos);
    if (ch == 58)
    {
      this.pos++;
      min = this.parseInt(1);
    }
    else if (48 <= ch && ch <= 57)
    {
      min = this.parseInt(1);
    }
  }
  this.tzOffset = hr*3600 + min*60;
  if (neg) this.tzOffset = -this.tzOffset;
}
fan.sys.DateTimeStr.prototype.parseTzName = function()
{
  var s = "";
  while (this.pos < this.str.length)
  {
    var ch = this.str.charCodeAt(this.pos);
    if ((97 <= ch && ch <= 122) ||
        (65 <= ch && ch <= 90) ||
        (48 <= ch && ch <= 57) ||
        ch == 43 || ch == 45 || ch == 95)
    {
      s += String.fromCharCode(ch);
      this.pos++;
    }
    else break;
  }
  this.tzName = s;
}
fan.sys.DateTimeStr.prototype.skipWord = function()
{
  while (this.pos < this.str.length)
  {
    var ch = this.str.charCodeAt(this.pos);
    if ((97 <= ch && ch <= 122) || (65 <= ch && ch <= 90))
      this.pos++;
    else
      break;
  }
}
fan.sys.DateTimeStr.prototype.locale = function()
{
  if (this.loc == null) this.loc = fan.sys.Locale.cur();
  return this.loc;
}
fan.sys.DateTimeStr.prototype.weekOfYear = function()
{
  var sow = fan.sys.Weekday.localeStartOfWeek(this.locale());
  if (this.valDateTime !== undefined) return this.valDateTime.weekOfYear(sow);
  if (this.valDate !== undefined)     return this.valDate.weekOfYear(sow);
  return 0;
}
fan.std.ThreadLocal = fan.sys.Obj.$extend(fan.sys.Obj);
fan.std.ThreadLocal.prototype.$ctor = function() {}
fan.std.ThreadLocal.prototype.$typeof = function() { return fan.std.ThreadLocal.$type; }
fan.std.ThreadLocal.make = function(init) {
	var self = new fan.std.ThreadLocal();
	if (init != null) self.m_val = init.call();
	else self.m_val = null;
	return self;
}
fan.std.ThreadLocal.prototype.get = function() {
	return this.m_val;
}
fan.std.ThreadLocal.prototype.set = function(val) {
	this.m_val = val;
}
fan.std.ThreadLocal.prototype.remove = function() {
	this.m_val = null;
}
}).call(this);

(function () {
var root=this;
var fan=root.fan;
if (fan === undefined) {
   if (typeof exports !== 'undefined') {
     fan = exports;
   } else {
     fan = root.fan = {};
   }
}
if (!fan.sys && (typeof require !== 'undefined')) fan = require('sys.js');

if (typeof exports !== 'undefined') {
  fan.concurrent = exports;
} else {
  fan.concurrent = root.fan.concurrent = {};
}

fan.concurrent.ActorProxyObj = fan.sys.Obj.$extend(fan.sys.Obj);
fan.concurrent.ActorProxyObj.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.concurrent.ActorProxyObj.prototype.$typeof = function() { return fan.concurrent.ActorProxyObj.$type; }
fan.concurrent.ActorProxyObj.prototype.val = function()
{
  return this.m_val;
}
fan.concurrent.ActorProxyObj.prototype.val$ = function(it)
{
  this.m_val = it;
  return;
}
fan.concurrent.ActorProxyObj.make = function() {
  var self = new fan.concurrent.ActorProxyObj();
  fan.concurrent.ActorProxyObj.make$(self);
  return self;
  }
fan.concurrent.ActorProxyObj.make$ = function(self)
{
  return;
}
fan.concurrent.ActorProxyObj.prototype.m_val = null;
fan.concurrent.Actor = fan.sys.Obj.$extend(fan.sys.Obj);
fan.concurrent.Actor.prototype.$ctor = function() {}
fan.concurrent.Actor.prototype.$typeof = function() { return fan.concurrent.Actor.$type; }
fan.concurrent.Actor.locals = function()
{
  if (fan.concurrent.Actor.$locals == null)
  {
    //var k = fan.sys.Str.$type;
    //var v = fan.sys.Obj.$type.toNullable();
    fan.concurrent.Actor.$locals = fan.std.Map.make();
  }
  return fan.concurrent.Actor.$locals;
}
fan.concurrent.Actor.$locals = null;
fan.concurrent.ActorProxy = fan.sys.Obj.$extend(fan.concurrent.Actor);
fan.concurrent.ActorProxy.prototype.$ctor = function()
{
  fan.concurrent.Actor.prototype.$ctor.call(this);
  var $this = this;
}
fan.concurrent.ActorProxy.prototype.$typeof = function() { return fan.concurrent.ActorProxy.$type; }
fan.concurrent.ActorProxy.make = function(builder,pool) {
  var self = new fan.concurrent.ActorProxy();
  fan.concurrent.ActorProxy.make$(self,builder,pool);
  return self;
  }
fan.concurrent.ActorProxy.make$ = function(self,builder,pool)
{
  if (pool === undefined) pool = fan.concurrent.ActorPool.defVal();
  fan.concurrent.Actor.make$(self,pool);
  self.m_builder = fan.sys.ObjUtil.coerce((function($this) { var $_u0 = builder; if ($_u0 == null) return null; return fan.sys.ObjUtil.toImmutable($_u0); })(self),fan.std.Type.find("sys::Func<sys::Obj>"));
  self.m_base = fan.sys.ObjUtil.coerce(fan.std.Unsafe.make(fan.concurrent.ActorProxyObj.make()),fan.std.Type.find("std::Unsafe<concurrent::ActorProxyObj>"));
  return;
}
fan.concurrent.ActorProxy.prototype.get = function()
{
  var obj = this.m_base.val();
  if (obj.m_val == null)
  {
    obj.m_val = this.m_builder.call();
  }
  ;
  return fan.sys.ObjUtil.coerce(obj.m_val,fan.sys.Obj.$type);
}
fan.concurrent.ActorProxy.prototype.receive = function(msg)
{
  try
  {
    var arg = fan.sys.ObjUtil.coerce(msg,fan.std.Type.find("sys::List<sys::Obj?>?"));
    var $name = fan.sys.ObjUtil.coerce(arg.get(0),fan.sys.Str.$type);
    var args = fan.sys.ObjUtil.coerce(arg.get(1),fan.std.Type.find("sys::List<sys::Obj?>?"));
    return fan.sys.ObjUtil.trap(this.get(),$name,args);
  }
  catch ($_u1)
  {
    $_u1 = fan.sys.Err.make($_u1);
    if ($_u1 instanceof fan.sys.Err)
    {
      var e = $_u1;
      var e;
      e.trace();
      throw e;
    }
    else
    {
      throw $_u1;
    }
  }
  ;
}
fan.concurrent.ActorProxy.prototype.trap = function($name,args)
{
  if (args === undefined) args = null;
  var method = $name;
  return this.send(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type.toNullable(), [method,fan.sys.ObjUtil.coerce(args,fan.sys.Obj.$type.toNullable())]).toImmutable(),fan.sys.Obj.$type.toNullable()));
}
fan.concurrent.ActorProxy.prototype.m_base = null;
fan.concurrent.ActorProxy.prototype.m_builder = null;
fan.concurrent.ActorLocal = fan.sys.Obj.$extend(fan.sys.Obj);
fan.concurrent.ActorLocal.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_key = fan.sys.Int.toStr(((fan.concurrent.ActorLocal.static$init && !fan.concurrent.ActorLocal.static$inited ? (fan.concurrent.ActorLocal.static$inited=true,fan.concurrent.ActorLocal.static$init()) : null),fan.concurrent.ActorLocal.m_counter).incrementAndGet());
  return;
}
fan.concurrent.ActorLocal.prototype.$typeof = function() { return fan.concurrent.ActorLocal.$type; }
fan.concurrent.ActorLocal.make = function(initial) {
  var self = new fan.concurrent.ActorLocal();
  fan.concurrent.ActorLocal.make$(self,initial);
  return self;
  }
fan.concurrent.ActorLocal.make$ = function(self,initial)
{
  if (initial === undefined) initial = null;
  ;
  self.m_initial = fan.sys.ObjUtil.coerce((function($this) { var $_u2 = initial; if ($_u2 == null) return null; return fan.sys.ObjUtil.toImmutable($_u2); })(self),fan.std.Type.find("sys::Func<concurrent::ActorLocal^T>?"));
  return;
}
fan.concurrent.ActorLocal.prototype.get = function()
{
  var val = fan.concurrent.Actor.locals().get(this.m_key);
  if ((val == null && this.m_initial != null))
  {
    val = this.m_initial.call();
    fan.concurrent.Actor.locals().set(this.m_key,val);
  }
  ;
  return val;
}
fan.concurrent.ActorLocal.prototype.set = function(val)
{
  fan.concurrent.Actor.locals().set(this.m_key,val);
  return this;
}
fan.concurrent.ActorLocal.prototype.remove = function()
{
  fan.concurrent.Actor.locals().remove(this.m_key);
  return;
}
fan.concurrent.ActorLocal.static$init = function()
{
  fan.concurrent.ActorLocal.m_counter = fan.std.AtomicInt.make();
  return;
}
fan.concurrent.ActorLocal.m_counter = null;
fan.concurrent.ActorLocal.prototype.m_key = null;
fan.concurrent.ActorLocal.prototype.m_initial = null;
fan.concurrent.ActorPool = fan.sys.Obj.$extend(fan.sys.Obj);
fan.concurrent.ActorPool.prototype.$ctor = function() {}
fan.concurrent.ActorPool.prototype.$typeof = function() { return fan.concurrent.ActorPool.$type; }
fan.concurrent.Future = fan.sys.Obj.$extend(fan.sys.Obj);
fan.concurrent.Future.prototype.$ctor = function() {}
fan.concurrent.Future.prototype.$typeof = function() { return fan.concurrent.Future.$type; }
fan.concurrent.FutureState = fan.sys.Obj.$extend(fan.sys.Enum);
fan.concurrent.FutureState.prototype.$ctor = function()
{
  fan.sys.Enum.prototype.$ctor.call(this);
  this.peer = new fan.sys.EnumPeer(this);
  var $this = this;
}
fan.concurrent.FutureState.prototype.$typeof = function() { return fan.concurrent.FutureState.$type; }
fan.concurrent.FutureState.prototype.isPending = function()
{
  return this === ((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_pending);
}
fan.concurrent.FutureState.prototype.isComplete = function()
{
  return this !== ((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_pending);
}
fan.concurrent.FutureState.make = function($ordinal,$name) {
  var self = new fan.concurrent.FutureState();
  fan.concurrent.FutureState.make$(self,$ordinal,$name);
  return self;
  }
fan.concurrent.FutureState.make$ = function(self,$ordinal,$name)
{
  fan.sys.Enum.make$(self,$ordinal,$name);
  return;
}
fan.concurrent.FutureState.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.sys.Enum.doFromStr("concurrent::FutureState",$name,checked),fan.concurrent.FutureState.$type.toNullable());
}
fan.concurrent.FutureState.static$init = function()
{
  fan.concurrent.FutureState.m_pending = fan.concurrent.FutureState.make(0,"pending");
  fan.concurrent.FutureState.m_ok = fan.concurrent.FutureState.make(1,"ok");
  fan.concurrent.FutureState.m_err = fan.concurrent.FutureState.make(2,"err");
  fan.concurrent.FutureState.m_cancelled = fan.concurrent.FutureState.make(3,"cancelled");
  fan.concurrent.FutureState.m_vals = fan.sys.ObjUtil.coerce((function($this) { var $_u3 = fan.sys.List.make(fan.concurrent.FutureState.$type, [((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_pending),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_ok),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_err),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_cancelled)]); if ($_u3 == null) return null; return fan.sys.ObjUtil.toImmutable($_u3); })(this),fan.std.Type.find("sys::List<concurrent::FutureState>"));
  if (true)
  {
  }
  ;
  return;
}
fan.concurrent.FutureState.m_pending = null;
fan.concurrent.FutureState.m_ok = null;
fan.concurrent.FutureState.m_err = null;
fan.concurrent.FutureState.m_cancelled = null;
fan.concurrent.FutureState.m_vals = null;
fan.concurrent.Promise = function() {}
fan.concurrent.Promise.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.concurrent.Promise.prototype.$typeof = function() { return fan.concurrent.Promise.$type; }
fan.concurrent.Promise.prototype.complete = function(res,success)
{
  throw fan.sys.UnsupportedErr.make();
}
fan.concurrent.Promise.make = function()
{
  return fan.sys.ObjUtil.coerce(fan.concurrent.BasePromise.make(),fan.std.Type.find("concurrent::Promise<concurrent::Promise^T>"));
}
fan.concurrent.BasePromise = fan.sys.Obj.$extend(fan.sys.Obj);
fan.concurrent.BasePromise.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_lock = fan.std.Lock.make();
  this.m_isDone = false;
  return;
}
fan.concurrent.BasePromise.prototype.$typeof = function() { return fan.concurrent.BasePromise.$type; }
fan.concurrent.BasePromise.prototype.lock = function()
{
  return this.m_lock;
}
fan.concurrent.BasePromise.prototype.lock$ = function(it)
{
  this.m_lock = it;
  return;
}
fan.concurrent.BasePromise.prototype.whenDone = function()
{
  return this.m_whenDone;
}
fan.concurrent.BasePromise.prototype.whenDone$ = function(it)
{
  this.m_whenDone = it;
  return;
}
fan.concurrent.BasePromise.prototype.isDone = function()
{
  return this.m_isDone;
}
fan.concurrent.BasePromise.prototype.isDone$ = function(it)
{
  this.m_isDone = it;
  return;
}
fan.concurrent.BasePromise.prototype.result = function()
{
  return this.m_result;
}
fan.concurrent.BasePromise.prototype.result$ = function(it)
{
  this.m_result = it;
  return;
}
fan.concurrent.BasePromise.prototype.err = function()
{
  return this.m_err;
}
fan.concurrent.BasePromise.prototype.err$ = function(it)
{
  this.m_err = it;
  return;
}
fan.concurrent.BasePromise.prototype.complete = function(res,success)
{
  var $this = this;
  this.m_lock.sync(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u4,
    function(it)
    {
      if (success)
      {
        $this.result$(res);
      }
      else
      {
        $this.err$(fan.sys.ObjUtil.coerce(res,fan.sys.Err.$type.toNullable()));
      }
      ;
      $this.isDone$(true);
      (function($this) { var $_u5 = $this.m_whenDone; if ($_u5 == null) return null; return $_u5.call(res,$this.err()); })($this);
      return null;
    }));
  return;
}
fan.concurrent.BasePromise.prototype.then = function(f)
{
  var $this = this;
  this.m_lock.sync(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u4,
    function(it)
    {
      if ($this.isDone())
      {
        f.call($this.result(),$this.err());
      }
      else
      {
        $this.m_whenDone = fan.sys.ObjUtil.coerce(f,fan.std.Type.find("sys::Func<sys::Void,concurrent::BasePromise^T?,sys::Err?>?"));
      }
      ;
      return null;
    }));
  return;
}
fan.concurrent.BasePromise.make = function() {
  var self = new fan.concurrent.BasePromise();
  fan.concurrent.BasePromise.make$(self);
  return self;
  }
fan.concurrent.BasePromise.make$ = function(self)
{
  ;
  return;
}
fan.concurrent.BasePromise.prototype.m_lock = null;
fan.concurrent.BasePromise.prototype.m_whenDone = null;
fan.concurrent.BasePromise.prototype.m_isDone = false;
fan.concurrent.BasePromise.prototype.m_result = null;
fan.concurrent.BasePromise.prototype.m_err = null;
fan.concurrent.Async = fan.sys.Obj.$extend(fan.sys.Obj);
fan.concurrent.Async.prototype.complete = fan.concurrent.Promise.prototype.complete;
fan.concurrent.Async.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_state = 0;
  return;
}
fan.concurrent.Async.prototype.$typeof = function() { return fan.concurrent.Async.$type; }
fan.concurrent.Async.prototype.state = function()
{
  return this.m_state;
}
fan.concurrent.Async.prototype.state$ = function(it)
{
  this.m_state = it;
  return;
}
fan.concurrent.Async.prototype.isDone = function()
{
  return fan.sys.ObjUtil.equals(this.m_state,-1);
}
fan.concurrent.Async.prototype.awaitObj = function()
{
  return this.m_awaitObj;
}
fan.concurrent.Async.prototype.awaitObj$ = function(it)
{
  this.m_awaitObj = it;
  return;
}
fan.concurrent.Async.prototype.result = function()
{
  return this.m_result;
}
fan.concurrent.Async.prototype.result$ = function(it)
{
  this.m_result = it;
  return;
}
fan.concurrent.Async.prototype.err = function()
{
  return this.m_err;
}
fan.concurrent.Async.prototype.err$ = function(it)
{
  this.m_err = it;
  return;
}
fan.concurrent.Async.prototype.whenDone = function()
{
  return this.m_whenDone;
}
fan.concurrent.Async.prototype.whenDone$ = function(it)
{
  this.m_whenDone = it;
  return;
}
fan.concurrent.Async.prototype.then = function(f)
{
  if (this.isDone())
  {
    f.call(this.result(),this.err());
  }
  else
  {
    this.m_whenDone = fan.sys.ObjUtil.coerce(f,fan.std.Type.find("sys::Func<sys::Void,concurrent::Async^T?,sys::Err?>?"));
  }
  ;
  return;
}
fan.concurrent.Async.prototype.next = function()
{
  try
  {
    this.nextStep();
  }
  catch ($_u6)
  {
    $_u6 = fan.sys.Err.make($_u6);
    if ($_u6 instanceof fan.sys.Err)
    {
      var e = $_u6;
      var e;
      this.err$(e);
      this.m_state = -1;
    }
    else
    {
      throw $_u6;
    }
  }
  ;
  if (this.isDone())
  {
    (function($this) { var $_u7 = $this.m_whenDone; if ($_u7 == null) return null; return $_u7.call($this.result(),$this.err()); })(this);
    return false;
  }
  ;
  return true;
}
fan.concurrent.Async.prototype.run = function()
{
  var runner = fan.sys.ObjUtil.coerce(fan.concurrent.Actor.locals().get("async.runner"),fan.std.Type.find("sys::Func<sys::Void,concurrent::Async<>>?"));
  if (runner == null)
  {
    throw fan.sys.Err.make("Expect async.runner in Acotr.locals");
  }
  ;
  runner.call(fan.sys.ObjUtil.coerce(this,fan.std.Type.find("concurrent::Async<>")));
  return this;
}
fan.concurrent.Async.make = function() {
  var self = new fan.concurrent.Async();
  fan.concurrent.Async.make$(self);
  return self;
  }
fan.concurrent.Async.make$ = function(self)
{
  ;
  return;
}
fan.concurrent.Async.prototype.m_state = 0;
fan.concurrent.Async.prototype.m_awaitObj = null;
fan.concurrent.Async.prototype.m_result = null;
fan.concurrent.Async.prototype.m_err = null;
fan.concurrent.Async.prototype.m_whenDone = null;
fan.concurrent.Act = fan.sys.Obj.$extend(fan.sys.Obj);
fan.concurrent.Act.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.concurrent.Act.prototype.$typeof = function() { return fan.concurrent.Act.$type; }
fan.concurrent.Act.prototype.say = function(str)
{
  return fan.sys.Str.plus(str,"2");
}
fan.concurrent.Act.make = function() {
  var self = new fan.concurrent.Act();
  fan.concurrent.Act.make$(self);
  return self;
  }
fan.concurrent.Act.make$ = function(self)
{
  return;
}
fan.concurrent.ActorProxyTest = fan.sys.Obj.$extend(fan.std.Test);
fan.concurrent.ActorProxyTest.prototype.$ctor = function()
{
  fan.std.Test.prototype.$ctor.call(this);
  var $this = this;
}
fan.concurrent.ActorProxyTest.prototype.$typeof = function() { return fan.concurrent.ActorProxyTest.$type; }
fan.concurrent.ActorProxyTest.prototype.testProxy = function()
{
  var $this = this;
  var a = fan.concurrent.ActorProxy.make(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u8,
    function()
    {
      return fan.concurrent.Act.make();
    }));
  var r = fan.sys.ObjUtil.trap(fan.sys.ObjUtil.trap(a,"say",fan.sys.List.make(fan.sys.Obj.$type.toNullable(),["x"])),"get",fan.sys.List.make(fan.sys.Obj.$type.toNullable(),[]));
  this.verifyEq(r,"x2");
  return;
}
fan.concurrent.ActorProxyTest.prototype.testLocal = function()
{
  this.verifyEq(((fan.concurrent.ActorProxyTest.static$init && !fan.concurrent.ActorProxyTest.static$inited ? (fan.concurrent.ActorProxyTest.static$inited=true,fan.concurrent.ActorProxyTest.static$init()) : null),fan.concurrent.ActorProxyTest.m_local).get(),"Hi");
  return;
}
fan.concurrent.ActorProxyTest.make = function() {
  var self = new fan.concurrent.ActorProxyTest();
  fan.concurrent.ActorProxyTest.make$(self);
  return self;
  }
fan.concurrent.ActorProxyTest.make$ = function(self)
{
  fan.std.Test.make$(self);
  return;
}
fan.concurrent.ActorProxyTest.static$init = function()
{
  var $this = this;
  fan.concurrent.ActorProxyTest.m_local = fan.concurrent.ActorLocal.make(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u9,
    function()
    {
      return "Hi";
    }),fan.std.Type.find("sys::Func<sys::Str>?")));
  return;
}
fan.concurrent.ActorProxyTest.m_local = null;
fan.concurrent.AtomicTest = fan.sys.Obj.$extend(fan.std.Test);
fan.concurrent.AtomicTest.prototype.$ctor = function()
{
  fan.std.Test.prototype.$ctor.call(this);
  var $this = this;
}
fan.concurrent.AtomicTest.prototype.$typeof = function() { return fan.concurrent.AtomicTest.$type; }
fan.concurrent.AtomicTest.prototype.testBool = function()
{
  this.verifyEq(fan.sys.ObjUtil.coerce(fan.std.AtomicBool.make().val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(fan.std.AtomicBool.make(true).val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  var a = fan.std.AtomicBool.make();
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  a.val$(true);
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.getAndSet(false),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.compareAndSet(true,true),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.compareAndSet(false,true),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.std.AtomicBool.make(true).toStr(),"true");
  return;
}
fan.concurrent.AtomicTest.prototype.testInt = function()
{
  this.verifyEq(fan.sys.ObjUtil.coerce(fan.std.AtomicInt.make().val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(0,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(fan.std.AtomicInt.make(-55).val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(-55,fan.sys.Obj.$type.toNullable()));
  var a = fan.std.AtomicInt.make();
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(0,fan.sys.Obj.$type.toNullable()));
  a.val$(3022351611780590);
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(3022351611780590,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.getAndSet(1972),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(3022351611780590,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(1972,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.compareAndSet(1973,3),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(1972,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.compareAndSet(1972,3),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(3,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.getAndIncrement(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(3,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(4,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.incrementAndGet(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(5,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(5,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.addAndGet(3),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(8,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(8,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.getAndAdd(-3),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(8,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(5,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.decrementAndGet(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(4,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(4,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.getAndDecrement(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(4,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(3,fan.sys.Obj.$type.toNullable()));
  a.increment();
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(4,fan.sys.Obj.$type.toNullable()));
  a.increment();
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(5,fan.sys.Obj.$type.toNullable()));
  a.add(4);
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(9,fan.sys.Obj.$type.toNullable()));
  a.decrement();
  this.verifyEq(fan.sys.ObjUtil.coerce(a.val(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(8,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.std.AtomicInt.make(-1234).toStr(),"-1234");
  return;
}
fan.concurrent.AtomicTest.prototype.testRef = function()
{
  var $this = this;
  this.verifyEq(fan.std.AtomicRef.make().val(),null);
  this.verifySame(fan.std.AtomicRef.make("foo").val(),"foo");
  this.verifyErr(fan.sys.NotImmutableErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      var x = fan.std.AtomicRef.make($this);
      return;
    }));
  var a = fan.std.AtomicRef.make("foo");
  this.verifySame(a.val(),"foo");
  var dt = fan.std.DateTime.now();
  a.val$(fan.sys.ObjUtil.coerce(dt,fan.sys.Obj.$type.toNullable()));
  this.verifySame(a.val(),fan.sys.ObjUtil.coerce(dt,fan.sys.Obj.$type.toNullable()));
  a.val$(null);
  this.verifyEq(a.val(),null);
  this.verifyErr(fan.sys.NotImmutableErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      a.val$(fan.std.Env.cur().out());
      return;
    }));
  this.verifyEq(a.val(),null);
  this.verifyEq(a.getAndSet(fan.sys.ObjUtil.coerce(dt,fan.sys.Obj.$type.toNullable())),null);
  var ver = fan.std.Version.fromStr("2.0");
  this.verifySame(a.getAndSet(ver),fan.sys.ObjUtil.coerce(dt,fan.sys.Obj.$type.toNullable()));
  this.verifySame(a.val(),ver);
  this.verifyErr(fan.sys.NotImmutableErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      a.getAndSet($this);
      return;
    }));
  this.verifySame(a.val(),ver);
  var num = 99;
  this.verifyEq(fan.sys.ObjUtil.coerce(a.compareAndSet(fan.sys.ObjUtil.coerce(num,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(num,fan.sys.Obj.$type.toNullable())),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  this.verifySame(a.val(),ver);
  this.verifyEq(fan.sys.ObjUtil.coerce(a.compareAndSet(ver,fan.sys.ObjUtil.coerce(num,fan.sys.Obj.$type.toNullable())),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  this.verifySame(a.val(),fan.sys.ObjUtil.coerce(num,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.compareAndSet(null,null),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  this.verifyErr(fan.sys.NotImmutableErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      a.compareAndSet(fan.sys.ObjUtil.coerce(num,fan.sys.Obj.$type.toNullable()),$this);
      return;
    }));
  this.verifySame(a.val(),fan.sys.ObjUtil.coerce(num,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(a.compareAndSet(fan.sys.ObjUtil.coerce(num,fan.sys.Obj.$type.toNullable()),null),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(a.val(),null);
  this.verifyEq(fan.sys.ObjUtil.coerce(a.compareAndSet("x","x"),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(a.val(),null);
  this.verifyEq(fan.sys.ObjUtil.coerce(a.compareAndSet(null,"x"),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  this.verifySame(a.val(),"x");
  this.verifyEq(fan.std.AtomicRef.make("foo").toStr(),"foo");
  return;
}
fan.concurrent.AtomicTest.make = function() {
  var self = new fan.concurrent.AtomicTest();
  fan.concurrent.AtomicTest.make$(self);
  return self;
  }
fan.concurrent.AtomicTest.make$ = function(self)
{
  fan.std.Test.make$(self);
  return;
}
fan.concurrent.AsyncTest = fan.sys.Obj.$extend(fan.std.Test);
fan.concurrent.AsyncTest.prototype.$ctor = function()
{
  fan.std.Test.prototype.$ctor.call(this);
  var $this = this;
}
fan.concurrent.AsyncTest.prototype.$typeof = function() { return fan.concurrent.AsyncTest.$type; }
fan.concurrent.AsyncTest.prototype.doLoop = async function(n)
{
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,n); i = fan.sys.Int.increment(i))
  {
    await i;
  }
  ;
  return;
}
fan.concurrent.AsyncTest.prototype.doTry = async function(n)
{
  try
  {
    var t = await fan.sys.Int.plus(n,1);
    throw fan.sys.Err.make(fan.sys.Int.toStr(t));
    return t;
  }
  catch ($_u11)
  {
    $_u11 = fan.sys.Err.make($_u11);
    if ($_u11 instanceof fan.sys.Err)
    {
      var e = $_u11;
      var e;
      fan.sys.ObjUtil.echo(fan.sys.Str.plus("Err: ",e));
      return 100;
    }
    else
    {
      throw $_u11;
    }
  }
  ;
}
fan.concurrent.AsyncTest.prototype.doValue = async function(n)
{
  return await fan.sys.Int.plus(n,1);
}
fan.concurrent.AsyncTest.prototype.init = function()
{
  var $this = this;
  fan.concurrent.Actor.locals().set("async.runner",fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u12,
    function(s)
    {
      if (s.next())
      {
        fan.sys.ObjUtil.echo(fan.sys.Str.plus("pause :",s.m_awaitObj));
        if (fan.sys.ObjUtil.is(s.m_awaitObj,fan.std.Type.find("concurrent::Promise<>")))
        {
          s.m_awaitObj = fan.sys.ObjUtil.as(s.m_awaitObj,fan.std.Type.find("concurrent::Promise<>")).result();
        }
        ;
        s.run();
      }
      ;
      fan.sys.ObjUtil.echo("end");
      return;
    }),fan.sys.Obj.$type.toNullable()));
  return;
}
fan.concurrent.AsyncTest.prototype.test = function()
{
  this.init();
  var x = this.doValue(10);
  this.verify(fan.sys.ObjUtil.is(x,fan.std.Type.find("concurrent::Async<>")));
  this.doLoop(10);
  return;
}
fan.concurrent.AsyncTest.prototype.testException = function()
{
  this.init();
  var f = this.doTry(10);
  this.verifyEq(fan.sys.ObjUtil.coerce(f.result(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(100,fan.sys.Obj.$type.toNullable()));
  return;
}
fan.concurrent.AsyncTest.prototype.doPromise = function()
{
  return fan.sys.ObjUtil.coerce(fan.concurrent.Promise.make(),fan.std.Type.find("concurrent::Promise<sys::Str>"));
}
fan.concurrent.AsyncTest.prototype.doWaitPromise = async function()
{
  var p = await this.doPromise();
  fan.sys.ObjUtil.echo(fan.sys.ObjUtil.coerce((function($this) { var $_u13 = p; if ($_u13 == null) return null; return fan.sys.Str.size($_u13); })(this),fan.sys.Obj.$type.toNullable()));
  return;
}
fan.concurrent.AsyncTest.prototype.testPromise = function()
{
  this.init();
  this.doWaitPromise();
  return;
}
fan.concurrent.AsyncTest.make = function() {
  var self = new fan.concurrent.AsyncTest();
  fan.concurrent.AsyncTest.make$(self);
  return self;
  }
fan.concurrent.AsyncTest.make$ = function(self)
{
  fan.std.Test.make$(self);
  return;
}
fan.concurrent.ActorTest = fan.sys.Obj.$extend(fan.std.Test);
fan.concurrent.ActorTest.prototype.$ctor = function()
{
  fan.std.Test.prototype.$ctor.call(this);
  var $this = this;
  this.m_pool = fan.concurrent.ActorPool.make();
  return;
}
fan.concurrent.ActorTest.prototype.$typeof = function() { return fan.concurrent.ActorTest.$type; }
fan.concurrent.ActorTest.prototype.pool = function()
{
  return this.m_pool;
}
fan.concurrent.ActorTest.prototype.pool$ = function(it)
{
  this.m_pool = it;
  return;
}
fan.concurrent.ActorTest.prototype.teardown = function()
{
  this.m_pool.kill();
  return;
}
fan.concurrent.ActorTest.prototype.testMake = function()
{
  var $this = this;
  var mutable = fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u14,
    function(msg)
    {
      $this.fail();
      return null;
    });
  this.verifyErr(fan.sys.ArgErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      var x = fan.concurrent.Actor.make($this.m_pool);
      return;
    }));
  this.verifyErr(fan.sys.NotImmutableErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      var x = fan.concurrent.Actor.make($this.m_pool,fan.sys.ObjUtil.coerce(mutable,fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?")));
      return;
    }));
  this.verifyEq(fan.sys.ObjUtil.coerce(fan.concurrent.ActorPool.make().m_maxThreads,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(100,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(fan.concurrent.ActorPool.make(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u15,
    function(it)
    {
      it.m_maxThreads = 2;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,concurrent::ActorPool>?"))).m_maxThreads,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(2,fan.sys.Obj.$type.toNullable()));
  this.verifyErr(fan.sys.ArgErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      var x = fan.concurrent.ActorPool.make(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
        fan.concurrent.$clos$_u15,
        function(it)
        {
          it.m_maxThreads = 0;
          return;
        }),fan.std.Type.find("sys::Func<sys::Void,concurrent::ActorPool>?")));
      return;
    }));
  return;
}
fan.concurrent.ActorTest.prototype.testBasics = function()
{
  var $this = this;
  var g = fan.concurrent.ActorPool.make();
  var a = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("incr").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?")));
  this.verifyType(g,fan.concurrent.ActorPool.$type);
  this.verifyType(a,fan.concurrent.Actor.$type);
  this.verifySame(a.pool(),this.m_pool);
  this.verifyEq(fan.sys.ObjUtil.coerce(g.isStopped(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(g.isDone(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  var futures = fan.sys.List.make(fan.concurrent.Future.$type);
  fan.sys.Int.times(100,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u16,
    function(i)
    {
      futures.add(a.send(fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable())));
      return;
    }));
  futures.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u17,
    function(f,i)
    {
      $this.verifyType(f,fan.concurrent.Future.$type);
      $this.verifyEq(f.get(),fan.sys.ObjUtil.coerce(fan.sys.Int.plus(i,1),fan.sys.Obj.$type.toNullable()));
      $this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_ok));
      $this.verifyEq(f.get(),fan.sys.ObjUtil.coerce(fan.sys.Int.plus(i,1),fan.sys.Obj.$type.toNullable()));
      return;
    }));
  return;
}
fan.concurrent.ActorTest.incr = function(msg)
{
  return fan.sys.Int.plus(msg,1);
}
fan.concurrent.ActorTest.prototype.testOrdering = function()
{
  var $this = this;
  var actors = fan.sys.List.make(fan.concurrent.Actor.$type);
  fan.sys.Int.times(200,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u18,
    function(it)
    {
      actors.add(fan.concurrent.Actor.make($this.m_pool,fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("order").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))));
      return;
    }));
  fan.sys.Int.times(100000,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u16,
    function(i)
    {
      actors.get(fan.sys.Int.random(fan.sys.ObjUtil.coerce(fan.sys.Range.make(0,actors.size(),true),fan.sys.Range.$type.toNullable()))).send(fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()));
      return;
    }));
  var futures = fan.sys.List.make(fan.concurrent.Future.$type);
  actors.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u19,
    function(a,i)
    {
      futures.add(a.send(fan.sys.Str.plus("result-",fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()))));
      return;
    }));
  futures.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u17,
    function(f,i)
    {
      var r = fan.sys.ObjUtil.coerce(f.get(),fan.std.Type.find("sys::List<sys::Int>"));
      r.each(fan.sys.Func.make$closure(
        fan.concurrent.$clos$_u20,
        function(v,j)
        {
          if (fan.sys.ObjUtil.compareGT(j,0))
          {
            $this.verify(fan.sys.ObjUtil.compareGT(v,r.get(fan.sys.Int.minus(j,1))));
          }
          ;
          return;
        }));
      return;
    }));
  return;
}
fan.concurrent.ActorTest.order = function(msg)
{
  var r = fan.sys.ObjUtil.coerce(fan.concurrent.Actor.locals().get("foo"),fan.std.Type.find("sys::List<sys::Int>?"));
  if (r == null)
  {
    fan.concurrent.Actor.locals().set("foo",fan.sys.ObjUtil.coerce(r = fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Int.$type),fan.std.Type.find("sys::List<sys::Int>?")),fan.sys.Obj.$type.toNullable()));
  }
  ;
  if (fan.sys.Str.startsWith(fan.sys.ObjUtil.toStr(msg),"result"))
  {
    return fan.sys.ObjUtil.coerce(r.toImmutable(),fan.sys.Obj.$type.toNullable());
  }
  ;
  r.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(msg,fan.sys.Int.$type),fan.sys.Obj.$type.toNullable()));
  return null;
}
fan.concurrent.ActorTest.prototype.testMessaging = function()
{
  var $this = this;
  var a = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("messaging").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?")));
  var f = a.send("const");
  this.verifySame(f.get(),((fan.concurrent.ActorTest.static$init && !fan.concurrent.ActorTest.static$inited ? (fan.concurrent.ActorTest.static$inited=true,fan.concurrent.ActorTest.static$init()) : null),fan.concurrent.ActorTest.m_constObj));
  this.verifySame(f.get(),((fan.concurrent.ActorTest.static$init && !fan.concurrent.ActorTest.static$inited ? (fan.concurrent.ActorTest.static$inited=true,fan.concurrent.ActorTest.static$init()) : null),fan.concurrent.ActorTest.m_constObj));
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_ok));
  f = a.send("serial");
  this.verifyEq(f.get(),fan.concurrent.SerMsg.make(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u21,
    function(it)
    {
      it.m_i = 123321;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,concurrent::SerMsg>?"))));
  this.verifyEq(f.get(),fan.concurrent.SerMsg.make(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u21,
    function(it)
    {
      it.m_i = 123321;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,concurrent::SerMsg>?"))));
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_ok));
  this.verifyErr(fan.sys.ConstErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      a.send($this);
      return;
    }));
  this.verifyErr(fan.sys.ConstErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      a.send("mutable").get();
      return;
    }));
  f = a.send("throw");
  this.verifyErr(fan.sys.UnknownServiceErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.get();
      return;
    }));
  this.verifyErr(fan.sys.UnknownServiceErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.get();
      return;
    }));
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_err));
  return;
}
fan.concurrent.ActorTest.messaging = function(msg)
{
  var $this = this;
  var $_u22 = msg;
  if (fan.sys.ObjUtil.equals($_u22,"const"))
  {
    return ((fan.concurrent.ActorTest.static$init && !fan.concurrent.ActorTest.static$inited ? (fan.concurrent.ActorTest.static$inited=true,fan.concurrent.ActorTest.static$init()) : null),fan.concurrent.ActorTest.m_constObj);
  }
  else if (fan.sys.ObjUtil.equals($_u22,"serial"))
  {
    return fan.concurrent.SerMsg.make(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
      fan.concurrent.$clos$_u21,
      function(it)
      {
        it.m_i = 123321;
        return;
      }),fan.std.Type.find("sys::Func<sys::Void,concurrent::SerMsg>?")));
  }
  else if (fan.sys.ObjUtil.equals($_u22,"throw"))
  {
    throw fan.sys.UnknownServiceErr.make();
  }
  else if (fan.sys.ObjUtil.equals($_u22,"mutable"))
  {
    return fan.std.Buf.make();
  }
  else
  {
    return "?";
  }
  ;
}
fan.concurrent.ActorTest.prototype.testTimeoutCancel = function()
{
  var $this = this;
  var a = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("sleep").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?")));
  fan.sys.ObjUtil.echo(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("1sec"),fan.sys.Obj.$type.toNullable()));
  var f = a.send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("1sec"),fan.sys.Obj.$type.toNullable()));
  var t1 = fan.std.Duration.now();
  this.verifyErr(fan.sys.TimeoutErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.get(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("50ms"),fan.std.Duration.$type.toNullable()));
      return;
    }));
  var t2 = fan.std.Duration.now();
  this.verify(fan.sys.ObjUtil.compareLT(t2.minus(t1),fan.std.Duration.fromStr("70ms")),t2.minus(t1).toLocale());
  fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u14,
    function(msg)
    {
      return fan.concurrent.ActorTest.cancel(fan.sys.ObjUtil.coerce(msg,fan.concurrent.Future.$type));
    }),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))).send(f);
  this.verifyErr(fan.sys.CancelledErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.get();
      return;
    }));
  this.verifyErr(fan.sys.CancelledErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.get();
      return;
    }));
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_cancelled));
  return;
}
fan.concurrent.ActorTest.sleep = function(msg)
{
  if (fan.sys.ObjUtil.is(msg,fan.std.Duration.$type))
  {
    fan.concurrent.Actor.sleep(fan.sys.ObjUtil.coerce(msg,fan.std.Duration.$type));
  }
  ;
  return msg;
}
fan.concurrent.ActorTest.cancel = function(f)
{
  fan.concurrent.Actor.sleep(fan.std.Duration.fromStr("20ms"));
  f.cancel();
  return f;
}
fan.concurrent.ActorTest.prototype.testStop = function()
{
  var $this = this;
  var actors = fan.sys.List.make(fan.concurrent.Actor.$type);
  var durs = fan.sys.List.make(fan.std.Duration.$type);
  var futures = fan.sys.List.make(fan.concurrent.Future.$type);
  var scheduled = fan.sys.List.make(fan.concurrent.Future.$type);
  fan.sys.Int.times(20,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u16,
    function(i)
    {
      var actor = fan.concurrent.Actor.make($this.m_pool,fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("sleep").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?")));
      actors.add(actor);
      fan.sys.Int.times(fan.sys.Int.random(fan.sys.ObjUtil.coerce(fan.sys.Range.make(100,1000,true),fan.sys.Range.$type.toNullable())),fan.sys.Func.make$closure(
        fan.concurrent.$clos$_u23,
        function(j)
        {
          actor.send(fan.sys.ObjUtil.coerce(j,fan.sys.Obj.$type.toNullable()));
          return;
        }));
      var dur = fan.std.Duration.fromStr("1ms").multFloat(fan.sys.Int.toFloat(fan.sys.Int.random(fan.sys.ObjUtil.coerce(fan.sys.Range.make(0,300,true),fan.sys.Range.$type.toNullable()))));
      if (fan.sys.ObjUtil.equals(i,0))
      {
        dur = fan.std.Duration.fromStr("300ms");
      }
      ;
      durs.add(fan.sys.ObjUtil.coerce(dur,fan.sys.Obj.$type.toNullable()));
      futures.add(actor.send(fan.sys.ObjUtil.coerce(dur,fan.sys.Obj.$type.toNullable())));
      fan.sys.Int.times(3,fan.sys.Func.make$closure(
        fan.concurrent.$clos$_u23,
        function(j)
        {
          scheduled.add(actor.sendLater(fan.std.Duration.fromStr("10sec").plus(fan.std.Duration.fromStr("1sec").multFloat(fan.sys.Int.toFloat(j))),fan.sys.ObjUtil.coerce(j,fan.sys.Obj.$type.toNullable())));
          return;
        }));
      return;
    }));
  this.verifyEq(fan.sys.ObjUtil.coerce(this.m_pool.isStopped(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(this.m_pool.isDone(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  this.verifyErr(fan.sys.Err.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      $this.m_pool.join();
      return;
    }));
  this.verifyErr(fan.sys.Err.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      $this.m_pool.join(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("5sec"),fan.std.Duration.$type.toNullable()));
      return;
    }));
  var t1 = fan.std.Duration.now();
  this.verifyErr(fan.sys.TimeoutErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      $this.m_pool.stop().join(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("100ms"),fan.std.Duration.$type.toNullable()));
      return;
    }));
  var t2 = fan.std.Duration.now();
  this.verify(fan.sys.ObjUtil.compareLE(t2.minus(t1),fan.std.Duration.fromStr("140ms")));
  this.verifyEq(fan.sys.ObjUtil.coerce(this.m_pool.isStopped(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(this.m_pool.isDone(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  actors.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u24,
    function(a,ignoreparam$1)
    {
      $this.verifyErr(fan.sys.Err.$type,fan.sys.Func.make$closure(
        fan.concurrent.$clos$_u10,
        function(it)
        {
          a.send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("10sec"),fan.sys.Obj.$type.toNullable()));
          return;
        }));
      $this.verifyErr(fan.sys.Err.$type,fan.sys.Func.make$closure(
        fan.concurrent.$clos$_u10,
        function(it)
        {
          a.sendLater(fan.std.Duration.fromStr("1sec"),fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("1sec"),fan.sys.Obj.$type.toNullable()));
          return;
        }));
      return;
    }));
  this.m_pool.stop().join();
  t2 = fan.std.Duration.now();
  this.verify(fan.sys.ObjUtil.compareLE(t2.minus(t1),fan.std.Duration.fromStr("340ms")),t2.minus(t1).toLocale());
  this.verifyEq(fan.sys.ObjUtil.coerce(this.m_pool.isStopped(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(this.m_pool.isDone(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  futures.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u25,
    function(f,ignoreparam$1)
    {
      $this.verify(f.state().isComplete());
      return;
    }));
  futures.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u17,
    function(f,i)
    {
      $this.verifyEq(f.get(),fan.sys.ObjUtil.coerce(durs.get(i),fan.sys.Obj.$type.toNullable()));
      return;
    }));
  this.verifyAllCancelled(scheduled);
  return;
}
fan.concurrent.ActorTest.prototype.verifyAllCancelled = function(futures)
{
  var $this = this;
  futures.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u25,
    function(f,ignoreparam$1)
    {
      $this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_cancelled));
      $this.verifyErr(fan.sys.CancelledErr.$type,fan.sys.Func.make$closure(
        fan.concurrent.$clos$_u10,
        function(it)
        {
          f.get();
          return;
        }));
      $this.verifyErr(fan.sys.CancelledErr.$type,fan.sys.Func.make$closure(
        fan.concurrent.$clos$_u10,
        function(it)
        {
          f.get(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("200ms"),fan.std.Duration.$type.toNullable()));
          return;
        }));
      return;
    }));
  return;
}
fan.concurrent.ActorTest.prototype.testKill = function()
{
  var $this = this;
  var futures = fan.sys.List.make(fan.concurrent.Future.$type);
  var durs = fan.sys.List.make(fan.std.Duration.$type);
  var scheduled = fan.sys.List.make(fan.concurrent.Future.$type);
  fan.sys.Int.times(200,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u26,
    function(ignoreparam$0)
    {
      var actor = fan.concurrent.Actor.make($this.m_pool,fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("sleep").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?")));
      fan.sys.Int.times(6,fan.sys.Func.make$closure(
        fan.concurrent.$clos$_u16,
        function(i)
        {
          var dur = fan.std.Duration.fromStr("1ms").multFloat(fan.sys.Int.toFloat(fan.sys.Int.random(fan.sys.ObjUtil.coerce(fan.sys.Range.make(0,50,true),fan.sys.Range.$type.toNullable()))));
          futures.add(actor.send(fan.sys.ObjUtil.coerce(dur,fan.sys.Obj.$type.toNullable())));
          durs.add(fan.sys.ObjUtil.coerce(dur,fan.sys.Obj.$type.toNullable()));
          return;
        }));
      scheduled.add(actor.sendLater(fan.std.Duration.fromStr("3sec"),actor));
      return;
    }));
  this.verifyEq(fan.sys.ObjUtil.coerce(this.m_pool.isStopped(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(this.m_pool.isDone(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  var t1 = fan.std.Duration.now();
  this.m_pool.kill();
  this.verifyEq(fan.sys.ObjUtil.coerce(this.m_pool.isStopped(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  this.verifyErr(fan.sys.Err.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      fan.concurrent.Actor.make($this.m_pool,fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("sleep").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))).send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("10sec"),fan.sys.Obj.$type.toNullable()));
      return;
    }));
  this.m_pool.join();
  var t2 = fan.std.Duration.now();
  this.verify(fan.sys.ObjUtil.compareLT(t2.minus(t1),fan.std.Duration.fromStr("50ms")),t2.minus(t1).toLocale());
  this.verifyEq(fan.sys.ObjUtil.coerce(this.m_pool.isStopped(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(this.m_pool.isDone(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  futures.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u17,
    function(f,i)
    {
      $this.verify(f.state().isComplete(),fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()))," "),fan.sys.ObjUtil.coerce(durs.get(i),fan.sys.Obj.$type.toNullable())));
      return;
    }));
  futures.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u17,
    function(f,i)
    {
      if (fan.sys.ObjUtil.equals(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_cancelled)))
      {
        $this.verifyErr(fan.sys.CancelledErr.$type,fan.sys.Func.make$closure(
          fan.concurrent.$clos$_u10,
          function(it)
          {
            f.get();
            return;
          }));
      }
      else
      {
        try
        {
          $this.verifyEq(f.get(),fan.sys.ObjUtil.coerce(durs.get(i),fan.sys.Obj.$type.toNullable()));
        }
        catch ($_u27)
        {
          $_u27 = fan.sys.Err.make($_u27);
          if ($_u27 instanceof fan.sys.InterruptedErr)
          {
            var e = $_u27;
            var e;
            $this.verifyErr(fan.sys.InterruptedErr.$type,fan.sys.Func.make$closure(
              fan.concurrent.$clos$_u10,
              function(it)
              {
                f.get();
                return;
              }));
          }
          else
          {
            throw $_u27;
          }
        }
        ;
      }
      ;
      return;
    }));
  this.verifyAllCancelled(scheduled);
  return;
}
fan.concurrent.ActorTest.prototype.testLater = function()
{
  var $this = this;
  var receive = fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u14,
    function(msg)
    {
      return fan.concurrent.ActorTest.returnNow(msg);
    });
  fan.sys.Int.times(5,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u18,
    function(it)
    {
      fan.concurrent.Actor.make($this.m_pool,fan.sys.ObjUtil.coerce(receive,fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))).sendLater(fan.std.Duration.fromStr("10ms"),"dummy");
      return;
    }));
  var start = fan.std.Duration.now();
  var x100 = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(receive,fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))).sendLater(fan.std.Duration.fromStr("100ms"),null);
  var x150 = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(receive,fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))).sendLater(fan.std.Duration.fromStr("150ms"),null);
  var x200 = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(receive,fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))).sendLater(fan.std.Duration.fromStr("200ms"),null);
  var x250 = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(receive,fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))).sendLater(fan.std.Duration.fromStr("250ms"),null);
  var x300 = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(receive,fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))).sendLater(fan.std.Duration.fromStr("300ms"),null);
  this.verifyLater(start,x100,fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("100ms"),fan.std.Duration.$type.toNullable()));
  this.verifyLater(start,x150,fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("150ms"),fan.std.Duration.$type.toNullable()));
  this.verifyLater(start,x200,fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("200ms"),fan.std.Duration.$type.toNullable()));
  this.verifyLater(start,x250,fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("250ms"),fan.std.Duration.$type.toNullable()));
  this.verifyLater(start,x300,fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("300ms"),fan.std.Duration.$type.toNullable()));
  start = fan.std.Duration.now();
  x100 = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u14,
    function(msg)
    {
      return fan.concurrent.ActorTest.returnNow(msg);
    }),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))).sendLater(fan.std.Duration.fromStr("100ms"),null);
  this.verifyLater(start,x100,fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("100ms"),fan.std.Duration.$type.toNullable()));
  start = fan.std.Duration.now();
  x300 = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(receive,fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))).sendLater(fan.std.Duration.fromStr("300ms"),null);
  x200 = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(receive,fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))).sendLater(fan.std.Duration.fromStr("200ms"),null);
  x100 = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(receive,fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))).sendLater(fan.std.Duration.fromStr("100ms"),null);
  x150 = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(receive,fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))).sendLater(fan.std.Duration.fromStr("150ms"),null);
  x250 = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(receive,fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))).sendLater(fan.std.Duration.fromStr("250ms"),null);
  this.verifyLater(start,x100,fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("100ms"),fan.std.Duration.$type.toNullable()));
  this.verifyLater(start,x150,fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("150ms"),fan.std.Duration.$type.toNullable()));
  this.verifyLater(start,x200,fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("200ms"),fan.std.Duration.$type.toNullable()));
  this.verifyLater(start,x250,fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("250ms"),fan.std.Duration.$type.toNullable()));
  this.verifyLater(start,x300,fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("300ms"),fan.std.Duration.$type.toNullable()));
  return;
}
fan.concurrent.ActorTest.prototype.testLaterRand = function()
{
  var $this = this;
  fan.sys.Int.times(5,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u18,
    function(it)
    {
      fan.concurrent.Actor.make($this.m_pool,fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("returnNow").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))).sendLater(fan.std.Duration.fromStr("10ms"),"dummy");
      return;
    }));
  var start = fan.std.Duration.now();
  var actors = fan.sys.List.make(fan.concurrent.Actor.$type);
  var futures = fan.sys.List.make(fan.concurrent.Future.$type);
  var durs = fan.sys.List.make(fan.std.Duration.$type.toNullable());
  fan.sys.Int.times(5,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u26,
    function(ignoreparam$0)
    {
      var a = fan.concurrent.Actor.make($this.m_pool,fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("returnNow").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?")));
      fan.sys.Int.times(10,fan.sys.Func.make$closure(
        fan.concurrent.$clos$_u26,
        function(ignoreparam$0)
        {
          var dur = fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("1ms").multFloat(fan.sys.Int.toFloat(fan.sys.Int.random(fan.sys.ObjUtil.coerce(fan.sys.Range.make(0,1000,true),fan.sys.Range.$type.toNullable())))),fan.std.Duration.$type.toNullable());
          var f = a.sendLater(fan.sys.ObjUtil.coerce(dur,fan.std.Duration.$type),fan.sys.ObjUtil.coerce(dur,fan.sys.Obj.$type.toNullable()));
          if (fan.sys.ObjUtil.compareGT(dur,fan.std.Duration.fromStr("500ms")))
          {
            f.cancel();
            dur = null;
          }
          ;
          durs.add(fan.sys.ObjUtil.coerce(dur,fan.sys.Obj.$type.toNullable()));
          futures.add(f);
          return;
        }));
      return;
    }));
  futures.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u17,
    function(f,i)
    {
      $this.verifyLater(start,f,durs.get(i),fan.std.Duration.fromStr("100ms"));
      return;
    }));
  return;
}
fan.concurrent.ActorTest.prototype.verifyLater = function(start,f,expected,tolerance)
{
  if (tolerance === undefined) tolerance = fan.std.Duration.fromStr("20ms");
  var $this = this;
  if (expected == null)
  {
    this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_cancelled));
    this.verifyErr(fan.sys.CancelledErr.$type,fan.sys.Func.make$closure(
      fan.concurrent.$clos$_u10,
      function(it)
      {
        f.get();
        return;
      }));
  }
  else
  {
    var actual = fan.sys.ObjUtil.coerce(f.get(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("3sec"),fan.std.Duration.$type.toNullable())),fan.std.Duration.$type).minus(start);
    var diff = fan.sys.ObjUtil.coerce(expected,fan.std.Duration.$type).minus(actual).abs();
    this.verify(fan.sys.ObjUtil.compareLT(diff,tolerance),fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(expected,fan.std.Duration.$type).toLocale())," != "),actual.toLocale())," ("),diff.toLocale()),")"));
  }
  ;
  return;
}
fan.concurrent.ActorTest.returnNow = function(msg)
{
  return fan.sys.ObjUtil.coerce(fan.std.Duration.now(),fan.sys.Obj.$type.toNullable());
}
fan.concurrent.ActorTest.prototype.testWhenComplete = function()
{
  var $this = this;
  var a = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("whenCompleteA").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?")));
  var b = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("whenCompleteB").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?")));
  var c = fan.concurrent.Actor.make(this.m_pool,fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("whenCompleteB").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?")));
  a.send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("50ms"),fan.sys.Obj.$type.toNullable()));
  var a0 = a.send("start");
  var a1 = a.send("throw");
  var a2 = a.send("cancel");
  a2.cancel();
  this.verifyEq(a0.get(),"start");
  this.verifyErr(fan.sys.IndexErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      a1.get();
      return;
    }));
  this.verifyErr(fan.sys.CancelledErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      a2.get();
      return;
    }));
  var b0 = b.sendWhenComplete(a0,a0);
  var c0 = c.sendWhenComplete(a0,a0);
  var b1 = b.sendWhenComplete(a1,a1);
  var c1 = c.sendWhenComplete(a1,a1);
  var b2 = b.sendWhenComplete(a2,a2);
  var c2 = c.sendWhenComplete(a2,a2);
  a.send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("50ms"),fan.sys.Obj.$type.toNullable()));
  var a3 = a.send("foo");
  var a4 = a.send("bar");
  var a5 = a.send("throw");
  var ax = a.send("cancel again");
  var a6 = a.send("baz");
  var b3 = b.sendWhenComplete(a3,a3);
  var c3 = c.sendWhenComplete(a3,a3);
  var b4 = b.sendWhenComplete(a4,a4);
  var c4 = c.sendWhenComplete(a4,a4);
  var b5 = b.sendWhenComplete(a5,a5);
  var c5 = c.sendWhenComplete(a5,a5);
  var bx = b.sendWhenComplete(ax,ax);
  var cx = c.sendWhenComplete(ax,ax);
  var b6 = b.sendWhenComplete(a6,a6);
  var c6 = c.sendWhenComplete(a6,a6);
  ax.cancel();
  this.verifyWhenComplete(b0,c0,"start");
  this.verifyWhenComplete(b1,c1,"start,IndexErr");
  this.verifyWhenComplete(b2,c2,"start,IndexErr,CancelledErr");
  this.verifyWhenComplete(bx,cx,"start,IndexErr,CancelledErr,CancelledErr");
  this.verifyWhenComplete(b3,c3,"start,IndexErr,CancelledErr,CancelledErr,foo");
  this.verifyWhenComplete(b4,c4,"start,IndexErr,CancelledErr,CancelledErr,foo,bar");
  this.verifyWhenComplete(b5,c5,"start,IndexErr,CancelledErr,CancelledErr,foo,bar,IndexErr");
  this.verifyWhenComplete(b6,c6,"start,IndexErr,CancelledErr,CancelledErr,foo,bar,IndexErr,baz");
  return;
}
fan.concurrent.ActorTest.prototype.verifyWhenComplete = function(b,c,expected)
{
  this.verifyEq(b.get(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("2sec"),fan.std.Duration.$type.toNullable())),expected);
  this.verifyEq(c.get(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("2sec"),fan.std.Duration.$type.toNullable())),expected);
  return;
}
fan.concurrent.ActorTest.whenCompleteA = function(msg)
{
  if (fan.sys.ObjUtil.equals(msg,"throw"))
  {
    throw fan.sys.IndexErr.make();
  }
  ;
  if (fan.sys.ObjUtil.is(msg,fan.std.Duration.$type))
  {
    fan.concurrent.Actor.sleep(fan.sys.ObjUtil.coerce(msg,fan.std.Duration.$type));
  }
  ;
  return msg;
}
fan.concurrent.ActorTest.whenCompleteB = function(msg)
{
  var x = fan.sys.ObjUtil.coerce(fan.concurrent.Actor.locals().get("x",""),fan.sys.Str.$type);
  if (!fan.sys.Str.isEmpty(x))
  {
    x = fan.sys.Str.plus(x,",");
  }
  ;
  if (!msg.state().isComplete())
  {
    throw fan.sys.Err.make("not done yet!");
  }
  ;
  try
  {
    x = fan.sys.Str.plus(x,fan.sys.ObjUtil.toStr(msg.get()));
  }
  catch ($_u28)
  {
    $_u28 = fan.sys.Err.make($_u28);
    if ($_u28 instanceof fan.sys.Err)
    {
      var e = $_u28;
      var e;
      x = fan.sys.Str.plus(x,fan.std.Type.of(e).$name());
    }
    else
    {
      throw $_u28;
    }
  }
  ;
  fan.concurrent.Actor.locals().set("x",x);
  return x;
}
fan.concurrent.ActorTest.prototype.testCoalescing = function()
{
  var $this = this;
  var a = fan.concurrent.Actor.makeCoalescing(this.m_pool,null,null,fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("coalesce").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?")));
  var fstart = a.send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("100ms"),fan.sys.Obj.$type.toNullable()));
  var f1s = fan.sys.List.make(fan.concurrent.Future.$type);
  var f2s = fan.sys.List.make(fan.concurrent.Future.$type);
  var f3s = fan.sys.List.make(fan.concurrent.Future.$type);
  var f4s = fan.sys.List.make(fan.concurrent.Future.$type);
  var ferr = fan.sys.List.make(fan.concurrent.Future.$type);
  var fcancel = fan.sys.List.make(fan.concurrent.Future.$type);
  f1s.add(a.send("one"));
  fcancel.add(a.send("cancel"));
  f2s.add(a.send("two"));
  f1s.add(a.send("one"));
  f2s.add(a.send("two"));
  f3s.add(a.send("three"));
  ferr.add(a.send("throw"));
  f4s.add(a.send("four"));
  fcancel.add(a.send("cancel"));
  f1s.add(a.send("one"));
  ferr.add(a.send("throw"));
  f4s.add(a.send("four"));
  fcancel.add(a.send("cancel"));
  fcancel.add(a.send("cancel"));
  f3s.add(a.send("three"));
  ferr.add(a.send("throw"));
  ferr.add(a.send("throw"));
  fcancel.first().cancel();
  a.send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("10ms"),fan.sys.Obj.$type.toNullable())).get(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("2sec"),fan.std.Duration.$type.toNullable()));
  this.verifyAllSame(fan.sys.ObjUtil.coerce(f1s,fan.std.Type.find("sys::List<sys::Obj>")));
  this.verifyAllSame(fan.sys.ObjUtil.coerce(f2s,fan.std.Type.find("sys::List<sys::Obj>")));
  this.verifyAllSame(fan.sys.ObjUtil.coerce(f3s,fan.std.Type.find("sys::List<sys::Obj>")));
  this.verifyAllSame(fan.sys.ObjUtil.coerce(f4s,fan.std.Type.find("sys::List<sys::Obj>")));
  this.verifyAllSame(fan.sys.ObjUtil.coerce(ferr,fan.std.Type.find("sys::List<sys::Obj>")));
  this.verifyAllSame(fan.sys.ObjUtil.coerce(fcancel,fan.std.Type.find("sys::List<sys::Obj>")));
  f1s.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u25,
    function(f,ignoreparam$1)
    {
      $this.verify(f.state().isComplete());
      $this.verifyEq(f.get(),fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type, ["one"]),fan.sys.Obj.$type.toNullable()));
      return;
    }));
  f2s.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u25,
    function(f,ignoreparam$1)
    {
      $this.verify(f.state().isComplete());
      $this.verifyEq(f.get(),fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type, ["one","two"]),fan.sys.Obj.$type.toNullable()));
      return;
    }));
  f3s.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u25,
    function(f,ignoreparam$1)
    {
      $this.verify(f.state().isComplete());
      $this.verifyEq(f.get(),fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type, ["one","two","three"]),fan.sys.Obj.$type.toNullable()));
      return;
    }));
  f4s.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u25,
    function(f,ignoreparam$1)
    {
      $this.verify(f.state().isComplete());
      $this.verifyEq(f.get(),fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type, ["one","two","three","four"]),fan.sys.Obj.$type.toNullable()));
      return;
    }));
  ferr.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u25,
    function(f,ignoreparam$1)
    {
      $this.verify(f.state().isComplete());
      $this.verifyErr(fan.sys.IndexErr.$type,fan.sys.Func.make$closure(
        fan.concurrent.$clos$_u10,
        function(it)
        {
          f.get();
          return;
        }));
      return;
    }));
  this.verifyAllCancelled(fcancel);
  return;
}
fan.concurrent.ActorTest.coalesce = function(msg)
{
  if (fan.sys.ObjUtil.is(msg,fan.std.Duration.$type))
  {
    fan.concurrent.Actor.sleep(fan.sys.ObjUtil.coerce(msg,fan.std.Duration.$type));
    fan.concurrent.Actor.locals().set("msgs",fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type),fan.sys.Obj.$type.toNullable()));
    return msg;
  }
  ;
  if (fan.sys.ObjUtil.equals(msg,"throw"))
  {
    throw fan.sys.IndexErr.make("foo bar");
  }
  ;
  var msgs = fan.sys.ObjUtil.coerce(fan.concurrent.Actor.locals().get("msgs"),fan.std.Type.find("sys::List<sys::Str>"));
  msgs.add(fan.sys.ObjUtil.coerce(msg,fan.sys.Str.$type));
  return fan.sys.ObjUtil.coerce(msgs.toImmutable(),fan.sys.Obj.$type.toNullable());
}
fan.concurrent.ActorTest.prototype.verifyAllSame = function(list)
{
  var $this = this;
  var x = list.first();
  list.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u29,
    function(y,ignoreparam$1)
    {
      $this.verifySame(x,y);
      return;
    }));
  return;
}
fan.concurrent.ActorTest.prototype.testCoalescingFunc = function()
{
  var $this = this;
  var a = fan.concurrent.Actor.makeCoalescing(this.m_pool,fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("coalesceKey").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?")),fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("coalesceCoalesce").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?,sys::Obj?>?")),fan.sys.ObjUtil.coerce(fan.concurrent.ActorTest.$type.slot("coalesceReceive").func(),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?")));
  var fstart = a.send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("100ms"),fan.sys.Obj.$type.toNullable()));
  var f1s = fan.sys.List.make(fan.concurrent.Future.$type);
  var f2s = fan.sys.List.make(fan.concurrent.Future.$type);
  var f3s = fan.sys.List.make(fan.concurrent.Future.$type);
  var ferr = fan.sys.List.make(fan.concurrent.Future.$type);
  var fcancel = fan.sys.List.make(fan.concurrent.Future.$type);
  ferr.add(a.send(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type, ["throw"]).toImmutable(),fan.sys.Obj.$type.toNullable())));
  f1s.add(a.send(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type, ["1",fan.sys.ObjUtil.coerce(1,fan.sys.Obj.$type)]).toImmutable(),fan.sys.Obj.$type.toNullable())));
  f2s.add(a.send(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type, ["2",fan.sys.ObjUtil.coerce(10,fan.sys.Obj.$type)]).toImmutable(),fan.sys.Obj.$type.toNullable())));
  f2s.add(a.send(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type, ["2",fan.sys.ObjUtil.coerce(20,fan.sys.Obj.$type)]).toImmutable(),fan.sys.Obj.$type.toNullable())));
  ferr.add(a.send(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type, ["throw"]).toImmutable(),fan.sys.Obj.$type.toNullable())));
  f2s.add(a.send(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type, ["2",fan.sys.ObjUtil.coerce(30,fan.sys.Obj.$type)]).toImmutable(),fan.sys.Obj.$type.toNullable())));
  fcancel.add(a.send(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type, ["cancel"]).toImmutable(),fan.sys.Obj.$type.toNullable())));
  fcancel.add(a.send(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type, ["cancel"]).toImmutable(),fan.sys.Obj.$type.toNullable())));
  f3s.add(a.send(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type, ["3",fan.sys.ObjUtil.coerce(100,fan.sys.Obj.$type)]).toImmutable(),fan.sys.Obj.$type.toNullable())));
  f1s.add(a.send(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type, ["1",fan.sys.ObjUtil.coerce(2,fan.sys.Obj.$type)]).toImmutable(),fan.sys.Obj.$type.toNullable())));
  f3s.add(a.send(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type, ["3",fan.sys.ObjUtil.coerce(200,fan.sys.Obj.$type)]).toImmutable(),fan.sys.Obj.$type.toNullable())));
  fcancel.add(a.send(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type, ["cancel"]).toImmutable(),fan.sys.Obj.$type.toNullable())));
  ferr.add(a.send(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type, ["throw"]).toImmutable(),fan.sys.Obj.$type.toNullable())));
  fcancel.first().cancel();
  a.send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("10ms"),fan.sys.Obj.$type.toNullable())).get(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("2sec"),fan.std.Duration.$type.toNullable()));
  this.verifyAllSame(fan.sys.ObjUtil.coerce(f1s,fan.std.Type.find("sys::List<sys::Obj>")));
  this.verifyAllSame(fan.sys.ObjUtil.coerce(f2s,fan.std.Type.find("sys::List<sys::Obj>")));
  this.verifyAllSame(fan.sys.ObjUtil.coerce(f3s,fan.std.Type.find("sys::List<sys::Obj>")));
  this.verifyAllSame(fan.sys.ObjUtil.coerce(ferr,fan.std.Type.find("sys::List<sys::Obj>")));
  this.verifyAllSame(fan.sys.ObjUtil.coerce(fcancel,fan.std.Type.find("sys::List<sys::Obj>")));
  f1s.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u25,
    function(f,ignoreparam$1)
    {
      $this.verify(f.state().isComplete());
      $this.verifyEq(f.get(),fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type, ["1",fan.sys.ObjUtil.coerce(1,fan.sys.Obj.$type),fan.sys.ObjUtil.coerce(2,fan.sys.Obj.$type)]),fan.sys.Obj.$type.toNullable()));
      return;
    }));
  f2s.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u25,
    function(f,ignoreparam$1)
    {
      $this.verify(f.state().isComplete());
      $this.verifyEq(f.get(),fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type, ["2",fan.sys.ObjUtil.coerce(10,fan.sys.Obj.$type),fan.sys.ObjUtil.coerce(20,fan.sys.Obj.$type),fan.sys.ObjUtil.coerce(30,fan.sys.Obj.$type)]),fan.sys.Obj.$type.toNullable()));
      return;
    }));
  f3s.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u25,
    function(f,ignoreparam$1)
    {
      $this.verify(f.state().isComplete());
      $this.verifyEq(f.get(),fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type, ["3",fan.sys.ObjUtil.coerce(100,fan.sys.Obj.$type),fan.sys.ObjUtil.coerce(200,fan.sys.Obj.$type)]),fan.sys.Obj.$type.toNullable()));
      return;
    }));
  ferr.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u25,
    function(f,ignoreparam$1)
    {
      $this.verify(f.state().isComplete());
      $this.verifyErr(fan.sys.IndexErr.$type,fan.sys.Func.make$closure(
        fan.concurrent.$clos$_u10,
        function(it)
        {
          f.get();
          return;
        }));
      return;
    }));
  this.verifyAllCancelled(fcancel);
  return;
}
fan.concurrent.ActorTest.coalesceKey = function(msg)
{
  return (function($this) { if (fan.sys.ObjUtil.is(msg,fan.std.Type.find("sys::List<>"))) return fan.sys.ObjUtil.trap(msg,"get",fan.sys.List.make(fan.sys.Obj.$type.toNullable(),[fan.sys.ObjUtil.coerce(0,fan.sys.Obj.$type.toNullable())])); return null; })(this);
}
fan.concurrent.ActorTest.coalesceCoalesce = function(a,b)
{
  return fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type).add(a.get(0)),fan.std.Type.find("sys::List<sys::Obj>")).addAll(a.getRange(fan.sys.Range.make(1,-1))),fan.std.Type.find("sys::List<sys::Obj>")).addAll(b.getRange(fan.sys.Range.make(1,-1))),fan.std.Type.find("sys::List<sys::Obj>")).toImmutable(),fan.sys.Obj.$type.toNullable());
}
fan.concurrent.ActorTest.coalesceReceive = function(msg)
{
  if (fan.sys.ObjUtil.is(msg,fan.std.Duration.$type))
  {
    fan.concurrent.Actor.sleep(fan.sys.ObjUtil.coerce(msg,fan.std.Duration.$type));
    return msg;
  }
  ;
  if (fan.sys.ObjUtil.equals(fan.sys.ObjUtil.trap(msg,"first",fan.sys.List.make(fan.sys.Obj.$type.toNullable(),[])),"throw"))
  {
    throw fan.sys.IndexErr.make("foo bar");
  }
  ;
  return msg;
}
fan.concurrent.ActorTest.prototype.testLocals = function()
{
  var $this = this;
  var actors = fan.sys.List.make(fan.concurrent.Actor.$type);
  var locales = fan.sys.List.make(fan.std.Locale.$type);
  var localesPool = fan.sys.List.make(fan.std.Locale.$type.toNullable(), [fan.std.Locale.fromStr("en-US"),fan.std.Locale.fromStr("en-UK"),fan.std.Locale.fromStr("fr"),fan.std.Locale.fromStr("ja")]);
  fan.sys.Int.times(300,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u16,
    function(i)
    {
      var locale = localesPool.get(fan.sys.Int.random(fan.sys.ObjUtil.coerce(fan.sys.Range.make(0,localesPool.size(),true),fan.sys.Range.$type.toNullable())));
      actors.add(fan.concurrent.Actor.make($this.m_pool,fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
        fan.concurrent.$clos$_u14,
        function(msg)
        {
          return fan.concurrent.ActorTest.locals(i,fan.sys.ObjUtil.coerce(locale,fan.std.Locale.$type),msg);
        }),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?"))));
      locales.add(fan.sys.ObjUtil.coerce(locale,fan.std.Locale.$type));
      actors.last().send("bar");
      return;
    }));
  actors.each(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u19,
    function(a,i)
    {
      $this.verifyEq(a.send("foo").get(),fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()))," "),locales.get(i)));
      return;
    }));
  return;
}
fan.concurrent.ActorTest.locals = function(num,locale,msg)
{
  if (fan.concurrent.Actor.locals().get("testLocal") == null)
  {
    fan.concurrent.Actor.locals().set("testLocal",fan.sys.ObjUtil.coerce(num,fan.sys.Obj.$type.toNullable()));
    fan.std.Locale.setCur(locale);
  }
  ;
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.ObjUtil.toStr(fan.concurrent.Actor.locals().get("testLocal"))," "),fan.std.Locale.cur());
}
fan.concurrent.ActorTest.prototype.testFuture = function()
{
  var $this = this;
  var f = fan.concurrent.Future.make();
  this.verifyEq(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_pending));
  this.verifySame(fan.std.Type.$typeof(f),fan.concurrent.Future.$type);
  this.verifyErr(fan.sys.ConstErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.complete($this);
      return;
    }));
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_pending));
  f.complete("done!");
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_ok));
  this.verifyEq(f.get(),"done!");
  this.verifyErr(fan.sys.Err.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.complete("no!");
      return;
    }));
  this.verifyErr(fan.sys.Err.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.completeErr(fan.sys.Err.make());
      return;
    }));
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_ok));
  this.verifyEq(f.get(),"done!");
  f = fan.concurrent.Future.make();
  this.verifyEq(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_pending));
  var err = fan.sys.CastErr.make();
  f.completeErr(err);
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_err));
  this.verifyErr(fan.sys.CastErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.get();
      return;
    }));
  this.verifyErr(fan.sys.Err.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.complete("no!");
      return;
    }));
  this.verifyErr(fan.sys.Err.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.completeErr(fan.sys.Err.make());
      return;
    }));
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_err));
  this.verifyErr(fan.sys.CastErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.get();
      return;
    }));
  f = fan.concurrent.Future.make();
  f.cancel();
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_cancelled));
  this.verifyErr(fan.sys.CancelledErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.get();
      return;
    }));
  f.complete("no!");
  f.completeErr(fan.sys.IOErr.make());
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_cancelled));
  this.verifyErr(fan.sys.CancelledErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.get();
      return;
    }));
  return;
}
fan.concurrent.ActorTest.prototype.testFutureWaitFor = function()
{
  var $this = this;
  var pool = fan.concurrent.ActorPool.make();
  var a = this.spawnSleeper(pool);
  var f = a.send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("100ms"),fan.sys.Obj.$type.toNullable()));
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_pending));
  f.waitFor();
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_ok));
  this.verifyEq(f.get(),fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("100ms"),fan.sys.Obj.$type.toNullable()));
  f.waitFor();
  f.waitFor(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("1min"),fan.std.Duration.$type.toNullable()));
  f = a.send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("66ms"),fan.sys.Obj.$type.toNullable()));
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_pending));
  f.waitFor(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("1min"),fan.std.Duration.$type.toNullable()));
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_err));
  this.verifyErr(fan.sys.UnsupportedErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.get();
      return;
    }));
  f = a.send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("3min"),fan.sys.Obj.$type.toNullable()));
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_pending));
  f.cancel();
  f.waitFor();
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_cancelled));
  this.verifyErr(fan.sys.CancelledErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.get();
      return;
    }));
  f = a.send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("1min"),fan.sys.Obj.$type.toNullable()));
  this.verifyErr(fan.sys.TimeoutErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      f.waitFor(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("100ms"),fan.std.Duration.$type.toNullable()));
      return;
    }));
  this.verifySame(f.state(),((fan.concurrent.FutureState.static$init && !fan.concurrent.FutureState.static$inited ? (fan.concurrent.FutureState.static$inited=true,fan.concurrent.FutureState.static$init()) : null),fan.concurrent.FutureState.m_pending));
  var t1 = fan.std.Duration.now();
  var f1 = this.spawnSleeper(pool).send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("200ms"),fan.sys.Obj.$type.toNullable()));
  var f2 = this.spawnSleeper(pool).send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("300ms"),fan.sys.Obj.$type.toNullable()));
  var f3 = this.spawnSleeper(pool).send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("100ms"),fan.sys.Obj.$type.toNullable()));
  var f4 = this.spawnSleeper(pool).send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("50ms"),fan.sys.Obj.$type.toNullable()));
  fan.concurrent.Future.waitForAll(fan.sys.List.make(fan.concurrent.Future.$type, [f1,f2,f3,f4]));
  var t2 = fan.std.Duration.now();
  var dur = t2.minus(t1);
  var fudge = fan.std.Duration.fromStr("15ms");
  this.verify((fan.sys.ObjUtil.compareLE(fan.std.Duration.fromStr("300ms"),dur) && fan.sys.ObjUtil.compareLE(dur,fan.std.Duration.fromStr("300ms").plus(fudge))));
  t1 = fan.std.Duration.now();
  f1 = this.spawnSleeper(pool).send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("200ms"),fan.sys.Obj.$type.toNullable()));
  f2 = this.spawnSleeper(pool).send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("50ms"),fan.sys.Obj.$type.toNullable()));
  f3 = this.spawnSleeper(pool).send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("300ms"),fan.sys.Obj.$type.toNullable()));
  f4 = this.spawnSleeper(pool).send(fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("100ms"),fan.sys.Obj.$type.toNullable()));
  this.verifyErr(fan.sys.TimeoutErr.$type,fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u10,
    function(it)
    {
      fan.concurrent.Future.waitForAll(fan.sys.List.make(fan.concurrent.Future.$type, [f1,f2,f3,f4]),fan.sys.ObjUtil.coerce(fan.std.Duration.fromStr("250ms"),fan.std.Duration.$type.toNullable()));
      return;
    }));
  t2 = fan.std.Duration.now();
  dur = t2.minus(t1);
  this.verify((fan.sys.ObjUtil.compareLE(fan.std.Duration.fromStr("250ms"),dur) && fan.sys.ObjUtil.compareLE(dur,fan.std.Duration.fromStr("250ms").plus(fudge))));
  return;
}
fan.concurrent.ActorTest.prototype.spawnSleeper = function(pool)
{
  var $this = this;
  return fan.concurrent.Actor.make(pool,fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.concurrent.$clos$_u14,
    function(msg)
    {
      fan.concurrent.Actor.sleep(fan.sys.ObjUtil.coerce(msg,fan.std.Duration.$type));
      if (fan.sys.ObjUtil.equals(msg,fan.std.Duration.fromStr("66ms")))
      {
        throw fan.sys.UnsupportedErr.make("bad!");
      }
      ;
      return msg;
    }),fan.std.Type.find("sys::Func<sys::Obj?,sys::Obj?>?")));
}
fan.concurrent.ActorTest.make = function() {
  var self = new fan.concurrent.ActorTest();
  fan.concurrent.ActorTest.make$(self);
  return self;
  }
fan.concurrent.ActorTest.make$ = function(self)
{
  fan.std.Test.make$(self);
  ;
  return;
}
fan.concurrent.ActorTest.static$init = function()
{
  fan.concurrent.ActorTest.m_constObj = (function($this) { var $_u31 = fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Int.$type, [fan.sys.ObjUtil.coerce(1,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(2,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(3,fan.sys.Obj.$type.toNullable())]),fan.sys.Obj.$type); if ($_u31 == null) return null; return fan.sys.ObjUtil.toImmutable($_u31); })(this);
  return;
}
fan.concurrent.ActorTest.prototype.m_pool = null;
fan.concurrent.ActorTest.m_constObj = null;
fan.concurrent.SerMsg = fan.sys.Obj.$extend(fan.sys.Obj);
fan.concurrent.SerMsg.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_i = 7;
  return;
}
fan.concurrent.SerMsg.prototype.$typeof = function() { return fan.concurrent.SerMsg.$type; }
fan.concurrent.SerMsg.make = function(f) {
  var self = new fan.concurrent.SerMsg();
  fan.concurrent.SerMsg.make$(self,f);
  return self;
  }
fan.concurrent.SerMsg.make$ = function(self,f)
{
  if (f === undefined) f = null;
  ;
  f.call(self);
  return;
}
fan.concurrent.SerMsg.prototype.hash = function()
{
  return this.m_i;
}
fan.concurrent.SerMsg.prototype.equals = function(that)
{
  return (fan.sys.ObjUtil.is(that,fan.concurrent.SerMsg.$type) && fan.sys.ObjUtil.equals(this.m_i,fan.sys.ObjUtil.trap(that,"i",fan.sys.List.make(fan.sys.Obj.$type.toNullable(),[]))));
}
fan.concurrent.SerMsg.prototype.m_i = 0;
fan.concurrent.initReflect$ = function() {
  fan.concurrent.$pod = fan.std.Pod.$add('concurrent');
  with (fan.concurrent.$pod)
  {
    fan.concurrent.ActorProxyObj.$type = $at('ActorProxyObj','sys::Obj',[],{},128);
    fan.concurrent.Actor.$type = $at('Actor','sys::Obj',[],{},270850);
    fan.concurrent.ActorProxy.$type = $at('ActorProxy','concurrent::Actor',[],{},270338);
    fan.concurrent.ActorLocal.$type = $at('ActorLocal','sys::Obj',[],{},8226);
    fan.concurrent.ActorPool.$type = $at('ActorPool','sys::Obj',[],{},270850);
    fan.concurrent.Future.$type = $at('Future','sys::Obj',[],{},8738);
    fan.concurrent.FutureState.$type = $at('FutureState','sys::Enum',[],{'sys::Serializable':"sys::Serializable{simple=true;}"},8234);
    fan.concurrent.Promise.$type = $am('Promise','sys::Obj',[],{},8449);
    fan.concurrent.BasePromise.$type = $at('BasePromise','sys::Obj',['concurrent::Promise'],{'sys::NoDoc':""},270336);
    fan.concurrent.Async.$type = $at('Async','sys::Obj',['concurrent::Promise'],{},8193);
    fan.concurrent.Act.$type = $at('Act','sys::Obj',[],{},8192);
    fan.concurrent.ActorProxyTest.$type = $at('ActorProxyTest','std::Test',[],{},8192);
    fan.concurrent.AtomicTest.$type = $at('AtomicTest','std::Test',[],{},8192);
    fan.concurrent.AsyncTest.$type = $at('AsyncTest','std::Test',[],{},8192);
    fan.concurrent.ActorTest.$type = $at('ActorTest','std::Test',[],{},270336);
    fan.concurrent.SerMsg.$type = $at('SerMsg','sys::Obj',[],{'sys::Serializable':""},262274);
    fan.concurrent.ActorProxyObj.$type.$af('val',73728,'sys::Obj?',{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.concurrent.Actor.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('pool','concurrent::ActorPool',true),new fan.std.Param('receive','sys::Func<sys::Obj?,sys::Obj?>?',true)], fan.std.Param.$type),{}).$am('makeCoalescing',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('pool','concurrent::ActorPool',false),new fan.std.Param('toKey','sys::Func<sys::Obj?,sys::Obj?>?',false),new fan.std.Param('coalesce','sys::Func<sys::Obj?,sys::Obj?,sys::Obj?>?',false),new fan.std.Param('receive','sys::Func<sys::Obj?,sys::Obj?>?',true)], fan.std.Param.$type),{}).$am('pool',8192,'concurrent::ActorPool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('send',8192,'concurrent::Future',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Obj?',false)], fan.std.Param.$type),{}).$am('sendLater',8192,'concurrent::Future',fan.sys.List.makeFromJs([new fan.std.Param('d','std::Duration',false),new fan.std.Param('msg','sys::Obj?',false)], fan.std.Param.$type),{}).$am('sendWhenComplete',8192,'concurrent::Future',fan.sys.List.makeFromJs([new fan.std.Param('f','concurrent::Future',false),new fan.std.Param('msg','sys::Obj?',false)], fan.std.Param.$type),{}).$am('sendWhenDone',8192,'concurrent::Future',fan.sys.List.makeFromJs([new fan.std.Param('f','concurrent::Future',false),new fan.std.Param('msg','sys::Obj?',false)], fan.std.Param.$type),{'sys::Deprecated':"sys::Deprecated{msg=\"Use sendWhenComplete\";}"}).$am('receive',266240,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Obj?',false)], fan.std.Param.$type),{}).$am('queueSize',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::NoDoc':""}).$am('queuePeak',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::NoDoc':""}).$am('sleep',40962,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('duration','std::Duration',false)], fan.std.Param.$type),{}).$am('locals',40962,'std::Map<sys::Str,sys::Obj?>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.concurrent.ActorProxy.$type.$af('base',67586,'std::Unsafe<concurrent::ActorProxyObj>',{}).$af('builder',67586,'sys::Func<sys::Obj>',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('builder','sys::Func<sys::Obj>',false),new fan.std.Param('pool','concurrent::ActorPool',true)], fan.std.Param.$type),{}).$am('get',2048,'sys::Obj',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('receive',267264,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Obj?',false)], fan.std.Param.$type),{}).$am('trap',271360,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('args','sys::List<sys::Obj?>?',true)], fan.std.Param.$type),{});
    fan.concurrent.ActorLocal.$type.$af('counter',100354,'std::AtomicInt',{}).$af('key',67586,'sys::Str',{}).$af('initial',67586,'sys::Func<concurrent::ActorLocal^T>?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('initial','sys::Func<concurrent::ActorLocal^T>?',true)], fan.std.Param.$type),{}).$am('get',8192,'concurrent::ActorLocal^T?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('set',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('val','concurrent::ActorLocal^T',false)], fan.std.Param.$type),{}).$am('remove',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.concurrent.ActorPool.$type.$af('name',73730,'sys::Str',{}).$af('maxThreads',73730,'sys::Int',{}).$af('maxMsgsBeforeYield',73730,'sys::Int',{'sys::NoDoc':""}).$am('defVal',40962,'concurrent::ActorPool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>?',true)], fan.std.Param.$type),{}).$am('isStopped',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isDone',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('stop',8192,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('kill',8192,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('join',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('timeout','std::Duration?',true)], fan.std.Param.$type),{});
    fan.concurrent.Future.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('get',8192,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('timeout','std::Duration?',true)], fan.std.Param.$type),{}).$am('state',8192,'concurrent::FutureState',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isDone',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Deprecated':"sys::Deprecated{msg=\"Use Future.state\";}"}).$am('isCancelled',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{'sys::Deprecated':"sys::Deprecated{msg=\"Use Future.state\";}"}).$am('cancel',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('complete',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('val','sys::Obj?',false)], fan.std.Param.$type),{}).$am('completeErr',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('err','sys::Err',false)], fan.std.Param.$type),{}).$am('waitFor',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('timeout','std::Duration?',true)], fan.std.Param.$type),{}).$am('waitForAll',40962,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('futures','sys::List<concurrent::Future>',false),new fan.std.Param('timeout','std::Duration?',true)], fan.std.Param.$type),{});
    fan.concurrent.FutureState.$type.$af('pending',106506,'concurrent::FutureState',{}).$af('ok',106506,'concurrent::FutureState',{}).$af('err',106506,'concurrent::FutureState',{}).$af('cancelled',106506,'concurrent::FutureState',{}).$af('vals',106498,'sys::List<concurrent::FutureState>',{}).$am('isPending',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isComplete',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('$ordinal','sys::Int',false),new fan.std.Param('$name','sys::Str',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'concurrent::FutureState?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.concurrent.Promise.$type.$am('isDone',270337,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('result',270337,'concurrent::Promise^T?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('err',270337,'sys::Err?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('then',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,concurrent::Promise^T?,sys::Err?>',false)], fan.std.Param.$type),{}).$am('complete',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('res','sys::Obj?',false),new fan.std.Param('success','sys::Bool',false)], fan.std.Param.$type),{'sys::NoDoc':""}).$am('make',40966,'concurrent::Promise<concurrent::Promise^T>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.concurrent.BasePromise.$type.$af('lock',67584,'std::Lock',{}).$af('whenDone',67584,'sys::Func<sys::Void,concurrent::BasePromise^T?,sys::Err?>?',{}).$af('isDone',336896,'sys::Bool',{}).$af('result',336896,'concurrent::BasePromise^T?',{}).$af('err',336896,'sys::Err?',{}).$am('complete',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('res','sys::Obj?',false),new fan.std.Param('success','sys::Bool',false)], fan.std.Param.$type),{}).$am('then',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,concurrent::BasePromise^T?,sys::Err?>',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.concurrent.Async.$type.$af('state',69632,'sys::Int',{}).$af('awaitObj',73728,'sys::Obj?',{}).$af('result',336896,'concurrent::Async^T?',{}).$af('err',336896,'sys::Err?',{}).$af('whenDone',67584,'sys::Func<sys::Void,concurrent::Async^T?,sys::Err?>?',{}).$am('isDone',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('then',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,concurrent::Async^T?,sys::Err?>',false)], fan.std.Param.$type),{}).$am('next',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('nextStep',266241,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('run',8192,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.concurrent.Act.$type.$am('say',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.concurrent.ActorProxyTest.$type.$af('local',106498,'concurrent::ActorLocal<sys::Str>',{}).$am('testProxy',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('testLocal',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.concurrent.AtomicTest.$type.$am('testBool',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('testInt',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('testRef',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.concurrent.AsyncTest.$type.$am('doLoop',8396800,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('doTry',8396800,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('doValue',8396800,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('init',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('test',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('testException',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPromise',2048,'concurrent::Promise<sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doWaitPromise',8396800,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('testPromise',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.concurrent.ActorTest.$type.$af('pool',73728,'concurrent::ActorPool',{}).$af('constObj',106498,'sys::Obj',{}).$am('teardown',271360,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('testMake',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('testBasics',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('incr',40962,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Int',false)], fan.std.Param.$type),{}).$am('testOrdering',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('order',40962,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Obj',false)], fan.std.Param.$type),{}).$am('testMessaging',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('messaging',40962,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',false)], fan.std.Param.$type),{}).$am('testTimeoutCancel',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('sleep',40962,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Obj?',false)], fan.std.Param.$type),{}).$am('cancel',40962,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('f','concurrent::Future',false)], fan.std.Param.$type),{}).$am('testStop',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('verifyAllCancelled',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('futures','sys::List<concurrent::Future>',false)], fan.std.Param.$type),{}).$am('testKill',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('testLater',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('testLaterRand',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('verifyLater',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('start','std::Duration',false),new fan.std.Param('f','concurrent::Future',false),new fan.std.Param('expected','std::Duration?',false),new fan.std.Param('tolerance','std::Duration',true)], fan.std.Param.$type),{}).$am('returnNow',40962,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Obj?',false)], fan.std.Param.$type),{}).$am('testWhenComplete',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('verifyWhenComplete',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('b','concurrent::Future',false),new fan.std.Param('c','concurrent::Future',false),new fan.std.Param('expected','sys::Str',false)], fan.std.Param.$type),{}).$am('whenCompleteA',40962,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Obj?',false)], fan.std.Param.$type),{}).$am('whenCompleteB',40962,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('msg','concurrent::Future',false)], fan.std.Param.$type),{}).$am('testCoalescing',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('coalesce',40962,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Obj?',false)], fan.std.Param.$type),{}).$am('verifyAllSame',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('list','sys::List<sys::Obj>',false)], fan.std.Param.$type),{}).$am('testCoalescingFunc',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('coalesceKey',40962,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Obj?',false)], fan.std.Param.$type),{}).$am('coalesceCoalesce',40962,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('a','sys::List<sys::Obj>',false),new fan.std.Param('b','sys::List<sys::Obj>',false)], fan.std.Param.$type),{}).$am('coalesceReceive',40962,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Obj?',false)], fan.std.Param.$type),{}).$am('testLocals',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('locals',40962,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('num','sys::Int',false),new fan.std.Param('locale','std::Locale',false),new fan.std.Param('msg','sys::Obj?',false)], fan.std.Param.$type),{}).$am('testFuture',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('testFutureWaitFor',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('spawnSleeper',8192,'concurrent::Actor',fan.sys.List.makeFromJs([new fan.std.Param('pool','concurrent::ActorPool',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.concurrent.SerMsg.$type.$af('i',73730,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>?',true)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{});
    m_meta = {};
    m_meta["pod.name"] = "concurrent";
    m_meta["pod.version"] = "1.0";
    m_meta["pod.depends"] = "sys 2.0;std 1.0";
    m_meta["pod.summary"] = "Utilities for concurrent programming";
    m_meta["pod.isScript"] = "false";
    m_meta["fcode.version"] = "1.1.3";
    m_meta["build.host"] = "mywifi.local";
    m_meta["build.user"] = "yangjiandong";
    m_meta["build.ts"] = "2020-04-12T16:51:20.000+08:00 Asia/Harbin";
    m_meta["build.tsKey"] = "200412165120";
    m_meta["build.compiler"] = "1.1";
    m_meta["build.platform"] = "macosx-x86_64";
    m_meta["pod.docApi"] = "true";
    m_meta["pod.docSrc"] = "false";
    m_meta["pod.native.java"] = "true";
    m_meta["pod.native.jni"] = "false";
    m_meta["pod.native.dotnet"] = "false";
    m_meta["pod.native.js"] = "true";
  }
  fan.concurrent.$clos$_u4 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u4",fan.sys.Obj.$type.toNullable(),["it","sys::Obj?","false"]);
  fan.concurrent.$clos$_u8 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u8",fan.sys.Obj.$type,[]);
  fan.concurrent.$clos$_u9 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u9",fan.sys.Str.$type,[]);
  fan.concurrent.$clos$_u10 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u10",fan.sys.Void.$type,["it","std::Test","false"]);
  fan.concurrent.$clos$_u12 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u12",fan.sys.Void.$type,["s","concurrent::Async<sys::Obj>","false"]);
  fan.concurrent.$clos$_u14 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u14",fan.sys.Obj.$type.toNullable(),["msg","sys::Obj?","false"]);
  fan.concurrent.$clos$_u15 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u15",fan.sys.Void.$type,["it","concurrent::ActorPool","false"]);
  fan.concurrent.$clos$_u16 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u16",fan.sys.Void.$type,["i","sys::Int","false"]);
  fan.concurrent.$clos$_u17 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u17",fan.sys.Void.$type,["f","concurrent::Future","false","i","sys::Int","false"]);
  fan.concurrent.$clos$_u18 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u18",fan.sys.Void.$type,["it","sys::Int","false"]);
  fan.concurrent.$clos$_u19 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u19",fan.sys.Void.$type,["a","concurrent::Actor","false","i","sys::Int","false"]);
  fan.concurrent.$clos$_u20 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u20",fan.sys.Void.$type,["v","sys::Int","false","j","sys::Int","false"]);
  fan.concurrent.$clos$_u21 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u21",fan.sys.Void.$type,["it","concurrent::SerMsg","false"]);
  fan.concurrent.$clos$_u23 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u23",fan.sys.Void.$type,["j","sys::Int","false"]);
  fan.concurrent.$clos$_u24 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u24",fan.sys.Void.$type,["a","concurrent::Actor","false","ignoreparam$1","sys::Int","false"]);
  fan.concurrent.$clos$_u25 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u25",fan.sys.Void.$type,["f","concurrent::Future","false","ignoreparam$1","sys::Int","false"]);
  fan.concurrent.$clos$_u26 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u26",fan.sys.Void.$type,["ignoreparam$0","sys::Int","false"]);
  fan.concurrent.$clos$_u29 = new fan.sys.ClosureFuncSpec$("concurrent::$clos$_u29",fan.sys.Void.$type,["y","sys::Obj","false","ignoreparam$1","sys::Int","false"]);
}
fan.concurrent.initStatic$ = function() {
  fan.concurrent.ActorLocal.static$init();
  fan.concurrent.FutureState.static$init();
  fan.concurrent.ActorProxyTest.static$init();
  fan.concurrent.ActorTest.static$init();
}
fan.concurrent.initReflect$();
fan.concurrent.initStatic$();
}).call(this);

(function () {
var root=this;
var fan=root.fan;
if (fan === undefined) {
   if (typeof exports !== 'undefined') {
     fan = exports;
   } else {
     fan = root.fan = {};
   }
}
if (!fan.sys && (typeof require !== 'undefined')) fan = require('sys.js');

if (typeof exports !== 'undefined') {
  fan.util = exports;
} else {
  fan.util = root.fan.util = {};
}

fan.util.CsvInStream = fan.sys.Obj.$extend(fan.std.ProxyInStream);
fan.util.CsvInStream.prototype.$ctor = function()
{
  fan.std.ProxyInStream.prototype.$ctor.call(this);
  var $this = this;
  this.m_delimiter = 44;
  this.m_trim = true;
  this.m_rowWidth = 10;
  return;
}
fan.util.CsvInStream.prototype.$typeof = function() { return fan.util.CsvInStream.$type; }
fan.util.CsvInStream.make = function($in) {
  var self = new fan.util.CsvInStream();
  fan.util.CsvInStream.make$(self,$in);
  return self;
  }
fan.util.CsvInStream.make$ = function(self,$in)
{
  fan.std.ProxyInStream.make$(self,$in);
  ;
  return;
}
fan.util.CsvInStream.prototype.delimiter = function()
{
  return this.m_delimiter;
}
fan.util.CsvInStream.prototype.delimiter$ = function(it)
{
  this.m_delimiter = it;
  return;
}
fan.util.CsvInStream.prototype.trim = function()
{
  return this.m_trim;
}
fan.util.CsvInStream.prototype.trim$ = function(it)
{
  this.m_trim = it;
  return;
}
fan.util.CsvInStream.prototype.readAllRows = function()
{
  var $this = this;
  var rows = fan.sys.List.make(fan.std.Type.find("sys::List<sys::Str>"));
  this.eachRow(fan.sys.Func.make$closure(
    fan.util.$clos$_u0,
    function(row)
    {
      rows.add(row);
      return;
    }));
  return rows;
}
fan.util.CsvInStream.prototype.eachRow = function(f)
{
  try
  {
    while (true)
    {
      var row = this.readRow();
      if (row == null)
      {
        break;
      }
      ;
      f.call(fan.sys.ObjUtil.coerce(row,fan.std.Type.find("sys::List<sys::Str>")));
    }
    ;
  }
  finally
  {
    this.close();
  }
  ;
  return;
}
fan.util.CsvInStream.prototype.readRow = function()
{
  this.m_line = this.readLine();
  if (this.m_line == null)
  {
    return null;
  }
  ;
  var cells = fan.sys.List.make(fan.sys.Str.$type);
  cells.capacity$(this.m_rowWidth);
  this.m_pos = 0;
  while (fan.sys.ObjUtil.compareLT(this.m_pos,fan.sys.Str.size(this.m_line)))
  {
    cells.add(this.parseCell());
  }
  ;
  if ((!fan.sys.Str.isEmpty(this.m_line) && fan.sys.ObjUtil.equals(fan.sys.Str.get(this.m_line,fan.sys.Int.minus(fan.sys.Str.size(this.m_line),1)),this.m_delimiter)))
  {
    cells.add("");
  }
  ;
  this.m_rowWidth = cells.size();
  return fan.sys.ObjUtil.coerce(cells,fan.std.Type.find("sys::List<sys::Str>?"));
}
fan.util.CsvInStream.prototype.parseCell = function()
{
  if (this.m_trim)
  {
    while ((fan.sys.ObjUtil.compareLT(this.m_pos,fan.sys.Str.size(this.m_line)) && fan.sys.Int.isSpace(fan.sys.Str.get(this.m_line,this.m_pos))))
    {
      (function($this) { var $_u1 = $this.m_pos; $this.m_pos = fan.sys.Int.increment($this.m_pos); return $_u1; })(this);
    }
    ;
    if (fan.sys.ObjUtil.compareGE(this.m_pos,fan.sys.Str.size(this.m_line)))
    {
      return "";
    }
    ;
  }
  ;
  if (fan.sys.ObjUtil.compareNE(fan.sys.Str.get(this.m_line,this.m_pos),34))
  {
    return this.parseNonQuotedCell();
  }
  else
  {
    return this.parseQuotedCell();
  }
  ;
}
fan.util.CsvInStream.prototype.parseNonQuotedCell = function()
{
  var start = this.m_pos;
  while ((fan.sys.ObjUtil.compareLT(this.m_pos,fan.sys.Str.size(this.m_line)) && fan.sys.ObjUtil.compareNE(fan.sys.Str.get(this.m_line,this.m_pos),this.m_delimiter)))
  {
    this.m_pos = fan.sys.Int.increment(this.m_pos);
  }
  ;
  var end = fan.sys.Int.minus(this.m_pos,1);
  if (this.m_trim)
  {
    while ((fan.sys.ObjUtil.compareGT(end,start) && fan.sys.Int.isSpace(fan.sys.Str.get(this.m_line,end))))
    {
      end = fan.sys.Int.decrement(end);
    }
    ;
  }
  ;
  this.m_pos = fan.sys.Int.increment(this.m_pos);
  if (fan.sys.ObjUtil.compareLT(end,start))
  {
    return "";
  }
  ;
  return fan.sys.Str.getRange(this.m_line,fan.sys.Range.make(start,end));
}
fan.util.CsvInStream.prototype.parseQuotedCell = function()
{
  var s = fan.sys.StrBuf.make();
  this.m_pos = fan.sys.Int.plus(this.m_pos,1);
  while (true)
  {
    var ch = fan.sys.Str.getSafe(this.m_line,(function($this) { var $_u2 = $this.m_pos; $this.m_pos = fan.sys.Int.increment($this.m_pos); return $_u2; })(this),0);
    while (fan.sys.ObjUtil.equals(ch,0))
    {
      this.m_pos = 0;
      this.m_line = this.readLine();
      if (this.m_line == null)
      {
        throw fan.sys.IOErr.make("Unexpected end of file in multi-line quoted cell");
      }
      ;
      s.addChar(10);
      ch = fan.sys.Str.getSafe(this.m_line,(function($this) { var $_u3 = $this.m_pos; $this.m_pos = fan.sys.Int.increment($this.m_pos); return $_u3; })(this),0);
    }
    ;
    if (fan.sys.ObjUtil.compareNE(ch,34))
    {
      s.addChar(ch);
      continue;
    }
    ;
    ch = fan.sys.Str.getSafe(this.m_line,(function($this) { var $_u4 = $this.m_pos; $this.m_pos = fan.sys.Int.increment($this.m_pos); return $_u4; })(this));
    if (fan.sys.ObjUtil.equals(ch,34))
    {
      s.addChar(ch);
      continue;
    }
    ;
    while (fan.sys.ObjUtil.compareNE(ch,this.m_delimiter))
    {
      ch = fan.sys.Str.getSafe(this.m_line,(function($this) { var $_u5 = $this.m_pos; $this.m_pos = fan.sys.Int.increment($this.m_pos); return $_u5; })(this),this.m_delimiter);
    }
    ;
    break;
  }
  ;
  return s.toStr();
}
fan.util.CsvInStream.prototype.rowWidth = function()
{
  return this.m_rowWidth;
}
fan.util.CsvInStream.prototype.rowWidth$ = function(it)
{
  this.m_rowWidth = it;
  return;
}
fan.util.CsvInStream.prototype.line = function()
{
  return this.m_line;
}
fan.util.CsvInStream.prototype.line$ = function(it)
{
  this.m_line = it;
  return;
}
fan.util.CsvInStream.prototype.pos = function()
{
  return this.m_pos;
}
fan.util.CsvInStream.prototype.pos$ = function(it)
{
  this.m_pos = it;
  return;
}
fan.util.CsvInStream.prototype.m_delimiter = 0;
fan.util.CsvInStream.prototype.m_trim = false;
fan.util.CsvInStream.prototype.m_rowWidth = 0;
fan.util.CsvInStream.prototype.m_line = null;
fan.util.CsvInStream.prototype.m_pos = 0;
fan.util.Macro = fan.sys.Obj.$extend(fan.sys.Obj);
fan.util.Macro.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.util.Macro.prototype.$typeof = function() { return fan.util.Macro.$type; }
fan.util.Macro.make = function(pattern) {
  var self = new fan.util.Macro();
  fan.util.Macro.make$(self,pattern);
  return self;
  }
fan.util.Macro.make$ = function(self,pattern)
{
  self.m_pattern = pattern;
  return;
}
fan.util.Macro.prototype.apply = function(resolve)
{
  var resBuf = fan.sys.StrBuf.make();
  var keyBuf = fan.sys.StrBuf.make();
  var pos = 0;
  var start = -1;
  var size = fan.sys.Str.size(this.m_pattern);
  var mode = ((fan.util.Macro.static$init && !fan.util.Macro.static$inited ? (fan.util.Macro.static$inited=true,fan.util.Macro.static$init()) : null),fan.util.Macro.m_norm);
  while (true)
  {
    if (fan.sys.ObjUtil.equals(mode,((fan.util.Macro.static$init && !fan.util.Macro.static$inited ? (fan.util.Macro.static$inited=true,fan.util.Macro.static$init()) : null),fan.util.Macro.m_norm)))
    {
      if (fan.sys.ObjUtil.equals(pos,size))
      {
        break;
      }
      ;
      if ((fan.sys.ObjUtil.equals(fan.sys.Str.get(this.m_pattern,pos),123) && fan.sys.ObjUtil.equals(fan.sys.Str.getSafe(this.m_pattern,fan.sys.Int.plus(pos,1)),123)))
      {
        mode = ((fan.util.Macro.static$init && !fan.util.Macro.static$inited ? (fan.util.Macro.static$inited=true,fan.util.Macro.static$init()) : null),fan.util.Macro.m_inMacro);
        start = pos;
        pos = fan.sys.Int.plus(pos,2);
        keyBuf.clear();
      }
      else
      {
        resBuf.addChar(fan.sys.Str.get(this.m_pattern,(function($this) { var $_u6 = pos; pos = fan.sys.Int.increment(pos); return $_u6; })(this)));
      }
      ;
    }
    else
    {
      if (fan.sys.ObjUtil.equals(mode,((fan.util.Macro.static$init && !fan.util.Macro.static$inited ? (fan.util.Macro.static$inited=true,fan.util.Macro.static$init()) : null),fan.util.Macro.m_inMacro)))
      {
        if (fan.sys.ObjUtil.equals(pos,size))
        {
          throw fan.sys.ParseErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Unterminated macro at index ",fan.sys.ObjUtil.coerce(start,fan.sys.Obj.$type.toNullable())),": "),this.m_pattern));
        }
        ;
        if ((fan.sys.ObjUtil.equals(fan.sys.Str.get(this.m_pattern,pos),125) && fan.sys.ObjUtil.equals(fan.sys.Str.getSafe(this.m_pattern,fan.sys.Int.plus(pos,1)),125)))
        {
          mode = ((fan.util.Macro.static$init && !fan.util.Macro.static$inited ? (fan.util.Macro.static$inited=true,fan.util.Macro.static$init()) : null),fan.util.Macro.m_norm);
          pos = fan.sys.Int.plus(pos,2);
          resBuf.add(resolve.call(keyBuf.toStr()));
        }
        else
        {
          keyBuf.addChar(fan.sys.Str.get(this.m_pattern,(function($this) { var $_u7 = pos; pos = fan.sys.Int.increment(pos); return $_u7; })(this)));
        }
        ;
      }
      else
      {
        throw fan.sys.Err.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Illegal State: mode [",fan.sys.ObjUtil.coerce(mode,fan.sys.Obj.$type.toNullable())),"] pos ["),fan.sys.ObjUtil.coerce(pos,fan.sys.Obj.$type.toNullable())),"]: "),this.m_pattern));
      }
      ;
    }
    ;
  }
  ;
  return resBuf.toStr();
}
fan.util.Macro.prototype.keys = function()
{
  var $this = this;
  var acc = fan.sys.List.make(fan.sys.Str.$type);
  this.apply(fan.sys.Func.make$closure(
    fan.util.$clos$_u8,
    function(key)
    {
      acc.add(key);
      return key;
    }));
  return acc;
}
fan.util.Macro.static$init = function()
{
  fan.util.Macro.m_norm = 0;
  fan.util.Macro.m_inMacro = 1;
  return;
}
fan.util.Macro.prototype.m_pattern = null;
fan.util.Macro.m_norm = 0;
fan.util.Macro.m_inMacro = 0;
fan.util.CsvOutStream = fan.sys.Obj.$extend(fan.std.ProxyOutStream);
fan.util.CsvOutStream.prototype.$ctor = function()
{
  fan.std.ProxyOutStream.prototype.$ctor.call(this);
  var $this = this;
  this.m_delimiter = 44;
  return;
}
fan.util.CsvOutStream.prototype.$typeof = function() { return fan.util.CsvOutStream.$type; }
fan.util.CsvOutStream.make = function(out) {
  var self = new fan.util.CsvOutStream();
  fan.util.CsvOutStream.make$(self,out);
  return self;
  }
fan.util.CsvOutStream.make$ = function(self,out)
{
  fan.std.ProxyOutStream.make$(self,out);
  ;
  return;
}
fan.util.CsvOutStream.prototype.delimiter = function()
{
  return this.m_delimiter;
}
fan.util.CsvOutStream.prototype.delimiter$ = function(it)
{
  this.m_delimiter = it;
  return;
}
fan.util.CsvOutStream.prototype.writeRow = function(row)
{
  var $this = this;
  row.each(fan.sys.Func.make$closure(
    fan.util.$clos$_u9,
    function(cell,i)
    {
      if (fan.sys.ObjUtil.compareGT(i,0))
      {
        $this.writeChar($this.m_delimiter);
      }
      ;
      $this.writeCell(cell);
      return;
    }));
  return fan.sys.ObjUtil.coerce(this.writeChar(10),fan.util.CsvOutStream.$type);
}
fan.util.CsvOutStream.prototype.writeCell = function(cell)
{
  var $this = this;
  if (!this.isQuoteRequired(cell))
  {
    return fan.sys.ObjUtil.coerce(this.print(cell),fan.util.CsvOutStream.$type);
  }
  ;
  this.writeChar(34);
  fan.sys.Str.each(cell,fan.sys.Func.make$closure(
    fan.util.$clos$_u10,
    function(ch,ignoreparam$1)
    {
      if (fan.sys.ObjUtil.equals(ch,34))
      {
        $this.writeChar(34);
      }
      ;
      $this.writeChar(ch);
      return;
    }));
  return fan.sys.ObjUtil.coerce(this.writeChar(34),fan.util.CsvOutStream.$type);
}
fan.util.CsvOutStream.prototype.isQuoteRequired = function(cell)
{
  var $this = this;
  if (fan.sys.Str.isEmpty(cell))
  {
    return true;
  }
  ;
  if ((fan.sys.Int.isSpace(fan.sys.Str.get(cell,0)) || fan.sys.Int.isSpace(fan.sys.Str.get(cell,fan.sys.Int.minus(fan.sys.Str.size(cell),1)))))
  {
    return true;
  }
  ;
  return fan.sys.Str.any(cell,fan.sys.Func.make$closure(
    fan.util.$clos$_u11,
    function(ch,ignoreparam$1)
    {
      return (fan.sys.ObjUtil.equals(ch,$this.m_delimiter) || fan.sys.ObjUtil.equals(ch,34) || fan.sys.ObjUtil.equals(ch,10) || fan.sys.ObjUtil.equals(ch,13));
    }));
}
fan.util.CsvOutStream.prototype.m_delimiter = 0;
fan.util.FloatArray = fan.sys.Obj.$extend(fan.sys.Obj);
fan.util.FloatArray.prototype.$ctor = function() {}
fan.util.FloatArray.prototype.$typeof = function() { return fan.util.FloatArray.$type; }
fan.util.FloatArray.makeF4 = function(size) {
	self = new fan.util.FloatArray()
	self.m_array = new Float32Array(size);
	return self
}
fan.util.FloatArray.makeF8 = function(size) {
	self = new fan.util.FloatArray()
	self.m_array = new Float64Array(size);
	return self
}
fan.util.FloatArray.prototype.get = function(pos) {
	return this.m_array[pos]
}
fan.util.FloatArray.prototype.set = function(pos, val) {
	this.m_array[pos] = val
}
fan.util.FloatArray.prototype.size = function() {
	return this.m_array.length;
}
fan.util.FloatArray.prototype.realloc = function(newSize) {
	if (this.m_array.length == newSize) return this;
	if (newSize > this.m_array.length) {
		for (i = this.m_array.length; i<newSize; ++i) {
			this.m_array.push(null)
		}
		return this;
	}
	var na = fan.util.FloatArray.make(newSize, this.m_of);
	var len = this.m_array.length > newSize ? newSize : this.m_array.length;
	for (var i = 0; i<len; ++i) {
		na.m_array[i] = this.m_array[i]
	}
	return na;
}
fan.util.FloatArray.prototype.fill = function(val, times) {
	for (var i = 0; i < times; ++i) {
		this.m_array[i] = val;
	}
	return this;
}
fan.util.FloatArray.prototype.copyFrom = function(that, thatOffset, thisOffset, length) {
	if (this === that) {
		this.m_array.copyWithin(thisOffset, thatOffset, thatOffset+length)
		return this;
	}
	for (var i = 0; i<length; ++i) {
		this.m_array[thisOffset + i] = that.m_array[i+thatOffset]
	}
	return this;
}
fan.util.IntArray = fan.sys.Obj.$extend(fan.sys.Obj);
fan.util.IntArray.prototype.$ctor = function() {}
fan.util.IntArray.prototype.$typeof = function() { return fan.util.IntArray.$type; }
fan.util.IntArray.makeS1 = function(size) {
	self = new fan.util.IntArray()
	self.m_array = new Int8Array(size);
	return self
}
fan.util.IntArray.makeU1 = function(size) {
	self = new fan.util.IntArray()
	self.m_array = new Uint8Array(size);
	return self
}
fan.util.IntArray.makeS2 = function(size) {
	self = new fan.util.IntArray()
	self.m_array = new Int16Array(size);
	return self
}
fan.util.IntArray.makeU2 = function(size) {
	self = new fan.util.IntArray()
	self.m_array = new Uint16Array(size);
	return self
}
fan.util.IntArray.makeS4 = function(size) {
	self = new fan.util.IntArray()
	self.m_array = new Int32Array(size);
	return self
}
fan.util.IntArray.makeU4 = function(size) {
	self = new fan.util.IntArray()
	self.m_array = new Uint32Array(size);
	return self
}
fan.util.IntArray.makeS8 = function(size) {
	self = new fan.util.IntArray()
	self.m_array = new Int8Array(size);
	return self
}
fan.util.IntArray.prototype.get = function(pos) {
	return this.m_array[pos]
}
fan.util.IntArray.prototype.set = function(pos, val) {
	this.m_array[pos] = val
}
fan.util.IntArray.prototype.size = function() {
	return this.m_array.length;
}
fan.util.IntArray.prototype.realloc = function(newSize) {
	if (this.m_array.length == newSize) return this;
	if (newSize > this.m_array.length) {
		for (i = this.m_array.length; i<newSize; ++i) {
			this.m_array.push(null)
		}
		return this;
	}
	var na = fan.util.IntArray.make(newSize, this.m_of);
	var len = this.m_array.length > newSize ? newSize : this.m_array.length;
	for (var i = 0; i<len; ++i) {
		na.m_array[i] = this.m_array[i]
	}
	return na;
}
fan.util.IntArray.prototype.fill = function(val, times) {
	for (var i = 0; i < times; ++i) {
		this.m_array[i] = val;
	}
	return this;
}
fan.util.IntArray.prototype.copyFrom = function(that, thatOffset, thisOffset, length) {
	if (this === that) {
		this.m_array.copyWithin(thisOffset, thatOffset, thatOffset+length)
		return this;
	}
	for (var i = 0; i<length; ++i) {
		this.m_array[thisOffset + i] = that.m_array[i+thatOffset]
	}
	return this;
}
fan.util.BoolArray = fan.sys.Obj.$extend(fan.sys.Obj);
fan.util.BoolArray.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.util.BoolArray.prototype.$typeof = function() { return fan.util.BoolArray.$type; }
fan.util.BoolArray.prototype._size = function()
{
  return this.m__size;
}
fan.util.BoolArray.prototype._size$ = function(it)
{
  this.m__size = it;
  return;
}
fan.util.BoolArray.prototype.words = function()
{
  return this.m_words;
}
fan.util.BoolArray.prototype.words$ = function(it)
{
  this.m_words = it;
  return;
}
fan.util.BoolArray.make = function(size) {
  var self = new fan.util.BoolArray();
  fan.util.BoolArray.make$(self,size);
  return self;
  }
fan.util.BoolArray.make$ = function(self,size)
{
  self.m__size = size;
  var isize = fan.sys.Int.plus(fan.sys.Int.shiftr(size,5),1);
  self.m_words = fan.util.IntArray.makeS4(isize);
  return;
}
fan.util.BoolArray.prototype.get = function(pos)
{
  var i = fan.sys.Int.shiftr(pos,5);
  var mask = fan.sys.Int.shiftl(1,fan.sys.Int.and(pos,31));
  return fan.sys.ObjUtil.compareNE(fan.sys.Int.and(this.m_words.get(i),mask),0);
}
fan.util.BoolArray.prototype.set = function(pos,val)
{
  var i = fan.sys.Int.shiftr(pos,5);
  var mask = fan.sys.Int.shiftl(1,fan.sys.Int.and(pos,31));
  if (val)
  {
    this.m_words.set(i,fan.sys.Int.or(this.m_words.get(i),mask));
  }
  else
  {
    this.m_words.set(i,fan.sys.Int.and(this.m_words.get(i),fan.sys.Int.not(mask)));
  }
  ;
  return;
}
fan.util.BoolArray.prototype.size = function()
{
  return this.m__size;
}
fan.util.BoolArray.prototype.realloc = function(newSize)
{
  if (fan.sys.ObjUtil.equals(this.m__size,newSize))
  {
    return this;
  }
  ;
  var isize = fan.sys.Int.plus(fan.sys.Int.shiftr(newSize,5),1);
  this.m_words = this.m_words.realloc(isize);
  this.m__size = newSize;
  return this;
}
fan.util.BoolArray.prototype.fill = function(val,times)
{
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,times); i = fan.sys.Int.increment(i))
  {
    this.set(i,val);
  }
  ;
  return this;
}
fan.util.BoolArray.prototype.copyFrom = function(that,thatOffset,thisOffset,length)
{
  var thatOff = fan.sys.Int.shiftr(thatOffset,5);
  var thisOff = fan.sys.Int.shiftr(thisOffset,5);
  var len = fan.sys.Int.plus(fan.sys.Int.shiftr(length,5),1);
  this.m_words.copyFrom(that.m_words,thatOff,thisOff,len);
  return this;
}
fan.util.BoolArray.prototype.m__size = 0;
fan.util.BoolArray.prototype.m_words = null;
fan.util.JVal = fan.sys.Obj.$extend(fan.sys.Obj);
fan.util.JVal.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.util.JVal.prototype.$typeof = function() { return fan.util.JVal.$type; }
fan.util.JVal.prototype.obj = function()
{
  return this.m_obj;
}
fan.util.JVal.prototype.obj$ = function(it)
{
  this.m_obj = it;
  return;
}
fan.util.JVal.make = function(obj) {
  var self = new fan.util.JVal();
  fan.util.JVal.make$(self,obj);
  return self;
  }
fan.util.JVal.make$ = function(self,obj)
{
  self.m_obj = obj;
  return;
}
fan.util.JVal.makeMap = function() {
  var self = new fan.util.JVal();
  fan.util.JVal.makeMap$(self);
  return self;
  }
fan.util.JVal.makeMap$ = function(self)
{
  self.m_obj = fan.sys.ObjUtil.coerce(fan.std.OrderedMap.make(),fan.sys.Obj.$type.toNullable());
  return;
}
fan.util.JVal.makeList = function() {
  var self = new fan.util.JVal();
  fan.util.JVal.makeList$(self);
  return self;
  }
fan.util.JVal.makeList$ = function(self)
{
  self.m_obj = fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type.toNullable()),fan.sys.Obj.$type.toNullable());
  return;
}
fan.util.JVal.prototype.toStr = function()
{
  return fan.sys.Str.plus("",this.m_obj);
}
fan.util.JVal.readJson = function(str)
{
  var obj = fan.util.JsonInStream.make(fan.std.StrExt.$in(str)).readJson();
  return fan.util.JVal.make(obj);
}
fan.util.JVal.prototype.writeJson = function(std,escapeUnicode)
{
  if (std === undefined) std = true;
  if (escapeUnicode === undefined) escapeUnicode = false;
  var buf = fan.sys.StrBuf.make();
  var jout = fan.util.JsonOutStream.make(fan.std.StrExt.out(buf));
  jout.m_std = std;
  jout.m_escapeUnicode = escapeUnicode;
  jout.writeJson(this);
  return buf.toStr();
}
fan.util.JVal.prototype.xpath = function(path)
{
  var buf = fan.sys.StrBuf.make();
  var paths = fan.sys.List.make(fan.sys.Obj.$type);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(path)); i = fan.sys.Int.increment(i))
  {
    var c = fan.sys.Str.get(path,i);
    if (fan.sys.ObjUtil.equals(c,47))
    {
      if (fan.sys.ObjUtil.compareGT(buf.size(),0))
      {
        paths.add(buf.toStr());
        buf.clear();
      }
      ;
    }
    else
    {
      if (fan.sys.ObjUtil.equals(c,91))
      {
        paths.add(buf.toStr());
        buf.clear();
        i = fan.sys.Int.increment(i);
        while (fan.sys.ObjUtil.compareLT(i,fan.sys.Str.size(path)))
        {
          var c2 = fan.sys.Str.get(path,i);
          if (fan.sys.ObjUtil.compareNE(c2,93))
          {
            buf.addChar(c2);
          }
          else
          {
            break;
          }
          ;
          i = fan.sys.Int.increment(i);
        }
        ;
        var pos = buf.toStr();
        buf.clear();
        paths.add(fan.sys.ObjUtil.coerce(fan.sys.Str.toInt(pos),fan.sys.Obj.$type));
      }
      else
      {
        buf.addChar(c);
      }
      ;
    }
    ;
  }
  ;
  if (fan.sys.ObjUtil.compareGT(buf.size(),0))
  {
    paths.add(buf.toStr());
  }
  ;
  return this.getInPath(paths);
}
fan.util.JVal.prototype.getInPath = function(paths)
{
  if (fan.sys.ObjUtil.equals(paths.size(),0))
  {
    return this;
  }
  ;
  var first = paths.first();
  var child = null;
  if (fan.sys.ObjUtil.is(first,fan.sys.Int.$type))
  {
    child = this.getAt(fan.sys.ObjUtil.coerce(first,fan.sys.Int.$type));
  }
  else
  {
    child = this.get(fan.sys.ObjUtil.toStr(first));
  }
  ;
  paths.removeAt(0);
  return child.getInPath(paths);
}
fan.util.JVal.prototype.isMap = function()
{
  return fan.sys.ObjUtil.is(this.m_obj,fan.std.Type.find("std::Map<sys::Str,sys::Obj?>"));
}
fan.util.JVal.prototype.isList = function()
{
  return fan.sys.ObjUtil.is(this.m_obj,fan.std.Type.find("sys::List<sys::Obj?>"));
}
fan.util.JVal.prototype.isStr = function()
{
  return fan.sys.ObjUtil.is(this.m_obj,fan.sys.Str.$type);
}
fan.util.JVal.prototype.isInt = function()
{
  return fan.sys.ObjUtil.is(this.m_obj,fan.sys.Int.$type);
}
fan.util.JVal.prototype.isFloat = function()
{
  return fan.sys.ObjUtil.is(this.m_obj,fan.sys.Float.$type);
}
fan.util.JVal.prototype.isBool = function()
{
  return fan.sys.ObjUtil.is(this.m_obj,fan.sys.Bool.$type);
}
fan.util.JVal.prototype.isNull = function()
{
  return this.m_obj == null;
}
fan.util.JVal.prototype.isNum = function()
{
  return (fan.sys.ObjUtil.is(this.m_obj,fan.sys.Int.$type) || fan.sys.ObjUtil.is(this.m_obj,fan.sys.Float.$type));
}
fan.util.JVal.prototype.asMap = function()
{
  return fan.sys.ObjUtil.coerce((function($this) { var $_u12 = fan.sys.ObjUtil.as($this.m_obj,fan.std.Type.find("std::Map<sys::Str,sys::Obj?>")); if ($_u12 != null) return $_u12; return fan.sys.ObjUtil.coerce(((fan.std.Map.static$init && !fan.std.Map.static$inited ? (fan.std.Map.static$inited=true,fan.std.Map.static$init()) : null),fan.std.Map.m_defVal),fan.std.Map.$type.toNullable()); })(this),fan.std.Type.find("std::Map<sys::Str,sys::Obj?>"));
}
fan.util.JVal.prototype.asList = function()
{
  return fan.sys.ObjUtil.coerce((function($this) { var $_u13 = fan.sys.ObjUtil.as($this.m_obj,fan.std.Type.find("sys::List<sys::Obj?>")); if ($_u13 != null) return $_u13; return fan.sys.ObjUtil.coerce(((fan.sys.List.static$init && !fan.sys.List.static$inited ? (fan.sys.List.static$inited=true,fan.sys.List.static$init()) : null),fan.sys.List.m_defVal),fan.std.Type.find("sys::List<sys::Obj?>?")); })(this),fan.std.Type.find("sys::List<sys::Obj?>"));
}
fan.util.JVal.prototype.asStr = function()
{
  return fan.sys.ObjUtil.coerce((function($this) { var $_u14 = fan.sys.ObjUtil.as($this.m_obj,fan.sys.Str.$type); if ($_u14 != null) return $_u14; return ""; })(this),fan.sys.Str.$type);
}
fan.util.JVal.prototype.asInt = function()
{
  return fan.sys.ObjUtil.coerce((function($this) { var $_u15 = fan.sys.ObjUtil.as($this.m_obj,fan.sys.Int.$type); if ($_u15 != null) return $_u15; return fan.sys.ObjUtil.coerce(0,fan.sys.Int.$type.toNullable()); })(this),fan.sys.Int.$type);
}
fan.util.JVal.prototype.asFloat = function()
{
  return fan.sys.ObjUtil.coerce((function($this) { var $_u16 = fan.sys.ObjUtil.as($this.m_obj,fan.sys.Float.$type); if ($_u16 != null) return $_u16; return fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Float.$type.toNullable()); })(this),fan.sys.Float.$type);
}
fan.util.JVal.prototype.asBool = function()
{
  return fan.sys.ObjUtil.coerce((function($this) { var $_u17 = fan.sys.ObjUtil.as($this.m_obj,fan.sys.Bool.$type); if ($_u17 != null) return $_u17; return fan.sys.ObjUtil.coerce(false,fan.sys.Bool.$type.toNullable()); })(this),fan.sys.Bool.$type);
}
fan.util.JVal.prototype.asNull = function()
{
  return null;
}
fan.util.JVal.prototype.size = function()
{
  if (fan.sys.ObjUtil.is(this.m_obj,fan.std.Type.find("sys::List<sys::Obj?>")))
  {
    return fan.sys.ObjUtil.coerce(this.m_obj,fan.std.Type.find("sys::List<sys::Obj?>")).size();
  }
  else
  {
    if (fan.sys.ObjUtil.is(this.m_obj,fan.std.Type.find("std::Map<sys::Str,sys::Obj?>")))
    {
      return fan.sys.ObjUtil.coerce(this.m_obj,fan.std.Type.find("std::Map<sys::Str,sys::Obj?>")).size();
    }
    ;
  }
  ;
  return 0;
}
fan.util.JVal.prototype.getAt = function(i)
{
  var list = this.asList();
  if (fan.sys.ObjUtil.compareLT(i,0))
  {
    i = fan.sys.Int.plus(i,list.size());
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(i,0) || fan.sys.ObjUtil.compareGE(i,list.size())))
  {
    return fan.util.JVal.make(null);
  }
  ;
  return fan.util.JVal.asVal(list.get(i));
}
fan.util.JVal.prototype.add = function(elem)
{
  var list = fan.sys.ObjUtil.coerce(this.m_obj,fan.std.Type.find("sys::List<sys::Obj?>"));
  elem = fan.util.JVal.asVal(elem);
  list.add(elem);
  return this;
}
fan.util.JVal.prototype.get = function($name,defVal)
{
  if (defVal === undefined) defVal = fan.util.JVal.make(null);
  var map = this.asMap();
  var res = map.get($name,defVal);
  return fan.util.JVal.asVal(res);
}
fan.util.JVal.prototype.set = function($name,elem)
{
  var map = fan.sys.ObjUtil.coerce(this.m_obj,fan.std.Type.find("std::Map<sys::Str,sys::Obj?>"));
  elem = fan.util.JVal.asVal(elem);
  map.set($name,elem);
  return this;
}
fan.util.JVal.asVal = function(obj)
{
  if (!fan.sys.ObjUtil.is(obj,fan.util.JVal.$type))
  {
    return fan.util.JVal.make(obj);
  }
  ;
  return fan.sys.ObjUtil.coerce(obj,fan.util.JVal.$type);
}
fan.util.JVal.prototype.trap = function($name,args)
{
  if (args === undefined) args = null;
  if ((args == null || fan.sys.ObjUtil.equals(args.size(),0)))
  {
    return this.get($name);
  }
  else
  {
    if (fan.sys.ObjUtil.equals(args.size(),1))
    {
      this.set($name,args.first());
      return null;
    }
    ;
  }
  ;
  return fan.sys.ObjUtil.trap(fan.sys.Obj.prototype,$name,args);
}
fan.util.JVal.prototype.m_obj = null;
fan.util.JsonInStream = fan.sys.Obj.$extend(fan.std.ProxyInStream);
fan.util.JsonInStream.prototype.$ctor = function()
{
  fan.std.ProxyInStream.prototype.$ctor.call(this);
  var $this = this;
  this.m_cur = 63;
  this.m_pos = 0;
  return;
}
fan.util.JsonInStream.prototype.$typeof = function() { return fan.util.JsonInStream.$type; }
fan.util.JsonInStream.make = function($in) {
  var self = new fan.util.JsonInStream();
  fan.util.JsonInStream.make$(self,$in);
  return self;
  }
fan.util.JsonInStream.make$ = function(self,$in)
{
  fan.std.ProxyInStream.make$(self,$in);
  ;
  return;
}
fan.util.JsonInStream.prototype.readJson = function()
{
  this.m_pos = 0;
  this.consume();
  this.skipWhitespace();
  return this.parseVal();
}
fan.util.JsonInStream.prototype.parseObj = function()
{
  var pairs = fan.std.OrderedMap.make();
  this.skipWhitespace();
  this.expect(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_objectStart));
  while (true)
  {
    this.skipWhitespace();
    if (this.maybe(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_objectEnd)))
    {
      return fan.sys.ObjUtil.coerce(pairs,fan.std.Type.find("std::Map<sys::Str,sys::Obj?>"));
    }
    ;
    this.parsePair(fan.sys.ObjUtil.coerce(pairs,fan.std.Type.find("std::Map<sys::Str,sys::Obj?>")));
    if (!this.maybe(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_comma)))
    {
      break;
    }
    ;
  }
  ;
  this.expect(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_objectEnd));
  return fan.sys.ObjUtil.coerce(pairs,fan.std.Type.find("std::Map<sys::Str,sys::Obj?>"));
}
fan.util.JsonInStream.prototype.parsePair = function(obj)
{
  this.skipWhitespace();
  var key = this.parseKey();
  this.skipWhitespace();
  this.expect(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_colon));
  this.skipWhitespace();
  var val = this.parseVal();
  this.skipWhitespace();
  obj.set(key,val);
  return;
}
fan.util.JsonInStream.prototype.parseVal = function()
{
  var $this = this;
  if (fan.sys.ObjUtil.equals(this.m_cur,((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_quote)))
  {
    return this.parseStr();
  }
  else
  {
    if ((fan.sys.Int.isDigit(this.m_cur) || fan.sys.ObjUtil.equals(this.m_cur,45)))
    {
      return this.parseNum();
    }
    else
    {
      if (fan.sys.ObjUtil.equals(this.m_cur,((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_objectStart)))
      {
        return fan.sys.ObjUtil.coerce(this.parseObj(),fan.sys.Obj.$type.toNullable());
      }
      else
      {
        if (fan.sys.ObjUtil.equals(this.m_cur,((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_arrayStart)))
        {
          return fan.sys.ObjUtil.coerce(this.parseArray(),fan.sys.Obj.$type.toNullable());
        }
        else
        {
          if (fan.sys.ObjUtil.equals(this.m_cur,116))
          {
            fan.sys.Int.times(4,fan.sys.Func.make$closure(
              fan.util.$clos$_u18,
              function(ignoreparam$0)
              {
                $this.consume();
                return;
              }));
            return fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable());
          }
          else
          {
            if (fan.sys.ObjUtil.equals(this.m_cur,102))
            {
              fan.sys.Int.times(5,fan.sys.Func.make$closure(
                fan.util.$clos$_u18,
                function(ignoreparam$0)
                {
                  $this.consume();
                  return;
                }));
              return fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable());
            }
            else
            {
              if (fan.sys.ObjUtil.equals(this.m_cur,110))
              {
                fan.sys.Int.times(4,fan.sys.Func.make$closure(
                  fan.util.$clos$_u18,
                  function(ignoreparam$0)
                  {
                    $this.consume();
                    return;
                  }));
                return null;
              }
              ;
            }
            ;
          }
          ;
        }
        ;
      }
      ;
    }
    ;
  }
  ;
  if (fan.sys.ObjUtil.compareLT(this.m_cur,0))
  {
    throw this.err("Unexpected end of stream");
  }
  ;
  throw this.err(fan.sys.Str.plus("Unexpected token ",fan.sys.ObjUtil.coerce(this.m_cur,fan.sys.Obj.$type.toNullable())));
}
fan.util.JsonInStream.prototype.parseNum = function()
{
  var integral = fan.sys.StrBuf.make();
  var fractional = fan.sys.StrBuf.make();
  var exponent = fan.sys.StrBuf.make();
  if (this.maybe(45))
  {
    integral.add("-");
  }
  ;
  while (fan.sys.Int.isDigit(this.m_cur))
  {
    integral.addChar(this.m_cur);
    this.consume();
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_cur,46))
  {
    var decimal = true;
    this.consume();
    while (fan.sys.Int.isDigit(this.m_cur))
    {
      fractional.addChar(this.m_cur);
      this.consume();
    }
    ;
  }
  ;
  if ((fan.sys.ObjUtil.equals(this.m_cur,101) || fan.sys.ObjUtil.equals(this.m_cur,69)))
  {
    exponent.addChar(this.m_cur);
    this.consume();
    if (fan.sys.ObjUtil.equals(this.m_cur,43))
    {
      this.consume();
    }
    else
    {
      if (fan.sys.ObjUtil.equals(this.m_cur,45))
      {
        exponent.addChar(this.m_cur);
        this.consume();
      }
      ;
    }
    ;
    while (fan.sys.Int.isDigit(this.m_cur))
    {
      exponent.addChar(this.m_cur);
      this.consume();
    }
    ;
  }
  ;
  var num = null;
  if (fan.sys.ObjUtil.compareGT(fractional.size(),0))
  {
    num = fan.sys.ObjUtil.coerce(fan.sys.Float.fromStr(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(integral.toStr(),"."),fractional.toStr()),exponent.toStr())),fan.sys.Num.$type.toNullable());
  }
  else
  {
    if (fan.sys.ObjUtil.compareGT(exponent.size(),0))
    {
      num = fan.sys.ObjUtil.coerce(fan.sys.Float.fromStr(fan.sys.Str.plus(integral.toStr(),exponent.toStr())),fan.sys.Num.$type.toNullable());
    }
    else
    {
      num = fan.sys.ObjUtil.coerce(fan.sys.Int.fromStr(integral.toStr()),fan.sys.Num.$type.toNullable());
    }
    ;
  }
  ;
  return fan.sys.ObjUtil.coerce(num,fan.sys.Obj.$type);
}
fan.util.JsonInStream.prototype.parseKey = function()
{
  if (fan.sys.ObjUtil.equals(this.m_cur,((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_quote)))
  {
    return this.parseStr();
  }
  ;
  var s = fan.sys.StrBuf.make();
  while ((fan.sys.Int.isAlphaNum(this.m_cur) || fan.sys.ObjUtil.equals(this.m_cur,95) || fan.sys.ObjUtil.equals(this.m_cur,36) || fan.sys.ObjUtil.equals(this.m_cur,45) || fan.sys.ObjUtil.equals(this.m_cur,46)))
  {
    s.addChar(this.m_cur);
    this.consume();
  }
  ;
  return s.toStr();
}
fan.util.JsonInStream.prototype.parseStr = function()
{
  var s = fan.sys.StrBuf.make();
  this.expect(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_quote));
  while (fan.sys.ObjUtil.compareNE(this.m_cur,((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_quote)))
  {
    if (fan.sys.ObjUtil.compareLT(this.m_cur,0))
    {
      throw this.err("Unexpected end of str literal");
    }
    ;
    if (fan.sys.ObjUtil.equals(this.m_cur,92))
    {
      s.addChar(this.escape());
    }
    else
    {
      s.addChar(this.m_cur);
      this.consume();
    }
    ;
  }
  ;
  this.expect(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_quote));
  return s.toStr();
}
fan.util.JsonInStream.prototype.escape = function()
{
  this.expect(92);
  var $_u19 = this.m_cur;
  if (fan.sys.ObjUtil.equals($_u19,98))
  {
    this.consume();
    return 8;
  }
  else if (fan.sys.ObjUtil.equals($_u19,102))
  {
    this.consume();
    return 12;
  }
  else if (fan.sys.ObjUtil.equals($_u19,110))
  {
    this.consume();
    return 10;
  }
  else if (fan.sys.ObjUtil.equals($_u19,114))
  {
    this.consume();
    return 13;
  }
  else if (fan.sys.ObjUtil.equals($_u19,116))
  {
    this.consume();
    return 9;
  }
  else if (fan.sys.ObjUtil.equals($_u19,34))
  {
    this.consume();
    return 34;
  }
  else if (fan.sys.ObjUtil.equals($_u19,92))
  {
    this.consume();
    return 92;
  }
  else if (fan.sys.ObjUtil.equals($_u19,47))
  {
    this.consume();
    return 47;
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_cur,117))
  {
    this.consume();
    var n3 = fan.sys.Int.fromDigit(this.m_cur,16);
    this.consume();
    var n2 = fan.sys.Int.fromDigit(this.m_cur,16);
    this.consume();
    var n1 = fan.sys.Int.fromDigit(this.m_cur,16);
    this.consume();
    var n0 = fan.sys.Int.fromDigit(this.m_cur,16);
    this.consume();
    if ((n3 == null || n2 == null || n1 == null || n0 == null))
    {
      throw this.err("Invalid hex value for \\uxxxx");
    }
    ;
    return fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.shiftl(fan.sys.ObjUtil.coerce(n3,fan.sys.Int.$type),12),fan.sys.Int.shiftl(fan.sys.ObjUtil.coerce(n2,fan.sys.Int.$type),8)),fan.sys.Int.shiftl(fan.sys.ObjUtil.coerce(n1,fan.sys.Int.$type),4)),fan.sys.ObjUtil.coerce(n0,fan.sys.Int.$type));
  }
  ;
  throw this.err("Invalid escape sequence");
}
fan.util.JsonInStream.prototype.parseArray = function()
{
  var array = fan.sys.List.make(fan.sys.Obj.$type.toNullable());
  this.expect(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_arrayStart));
  this.skipWhitespace();
  if (this.maybe(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_arrayEnd)))
  {
    return array;
  }
  ;
  while (true)
  {
    this.skipWhitespace();
    var val = this.parseVal();
    array.add(val);
    this.skipWhitespace();
    if (!this.maybe(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_comma)))
    {
      break;
    }
    ;
  }
  ;
  this.skipWhitespace();
  this.expect(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_arrayEnd));
  return array;
}
fan.util.JsonInStream.prototype.skipWhitespace = function()
{
  while (fan.sys.Int.isSpace(this.m_cur))
  {
    this.consume();
  }
  ;
  return;
}
fan.util.JsonInStream.prototype.expect = function(tt)
{
  if (fan.sys.ObjUtil.compareLT(this.m_cur,0))
  {
    throw this.err(fan.sys.Str.plus("Unexpected end of stream, expected ",fan.sys.Int.toChar(tt)));
  }
  ;
  if (fan.sys.ObjUtil.compareNE(this.m_cur,tt))
  {
    throw this.err(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Expected ",fan.sys.Int.toChar(tt)),", got "),fan.sys.Int.toChar(this.m_cur))," at "),fan.sys.ObjUtil.coerce(this.m_pos,fan.sys.Obj.$type.toNullable())));
  }
  ;
  this.consume();
  return;
}
fan.util.JsonInStream.prototype.maybe = function(tt)
{
  if (fan.sys.ObjUtil.compareNE(this.m_cur,tt))
  {
    return false;
  }
  ;
  this.consume();
  return true;
}
fan.util.JsonInStream.prototype.consume = function()
{
  this.m_cur = this.readChar();
  (function($this) { var $_u20 = $this.m_pos; $this.m_pos = fan.sys.Int.increment($this.m_pos); return $_u20; })(this);
  return;
}
fan.util.JsonInStream.prototype.err = function(msg)
{
  return fan.sys.ParseErr.make(msg);
}
fan.util.JsonInStream.prototype.cur = function()
{
  return this.m_cur;
}
fan.util.JsonInStream.prototype.cur$ = function(it)
{
  this.m_cur = it;
  return;
}
fan.util.JsonInStream.prototype.pos = function()
{
  return this.m_pos;
}
fan.util.JsonInStream.prototype.pos$ = function(it)
{
  this.m_pos = it;
  return;
}
fan.util.JsonInStream.prototype.m_cur = 0;
fan.util.JsonInStream.prototype.m_pos = 0;
fan.util.JsonOutStream = fan.sys.Obj.$extend(fan.std.ProxyOutStream);
fan.util.JsonOutStream.prototype.$ctor = function()
{
  fan.std.ProxyOutStream.prototype.$ctor.call(this);
  var $this = this;
  this.m_std = true;
  this.m_escapeUnicode = false;
  return;
}
fan.util.JsonOutStream.prototype.$typeof = function() { return fan.util.JsonOutStream.$type; }
fan.util.JsonOutStream.prototype.std = function()
{
  return this.m_std;
}
fan.util.JsonOutStream.prototype.std$ = function(it)
{
  this.m_std = it;
  return;
}
fan.util.JsonOutStream.prototype.escapeUnicode = function()
{
  return this.m_escapeUnicode;
}
fan.util.JsonOutStream.prototype.escapeUnicode$ = function(it)
{
  this.m_escapeUnicode = it;
  return;
}
fan.util.JsonOutStream.writeJsonToStr = function(obj)
{
  var buf = fan.sys.StrBuf.make();
  fan.util.JsonOutStream.make(fan.std.StrExt.out(buf)).writeJson(obj);
  return buf.toStr();
}
fan.util.JsonOutStream.make = function(out) {
  var self = new fan.util.JsonOutStream();
  fan.util.JsonOutStream.make$(self,out);
  return self;
  }
fan.util.JsonOutStream.make$ = function(self,out)
{
  fan.std.ProxyOutStream.make$(self,out);
  ;
  return;
}
fan.util.JsonOutStream.prototype.writeJson = function(obj)
{
  if (fan.sys.ObjUtil.is(obj,fan.sys.Str.$type))
  {
    this.writeJsonStr(fan.sys.ObjUtil.coerce(obj,fan.sys.Str.$type));
  }
  else
  {
    if (fan.sys.ObjUtil.is(obj,fan.sys.Num.$type))
    {
      this.writeJsonNum(fan.sys.ObjUtil.coerce(obj,fan.sys.Num.$type));
    }
    else
    {
      if (fan.sys.ObjUtil.is(obj,fan.sys.Bool.$type))
      {
        this.writeJsonBool(fan.sys.ObjUtil.coerce(obj,fan.sys.Bool.$type));
      }
      else
      {
        if (fan.sys.ObjUtil.is(obj,fan.std.Type.find("std::Map<>")))
        {
          this.writeJsonMap(fan.sys.ObjUtil.coerce(obj,fan.std.Type.find("std::Map<sys::Str,sys::Obj?>")));
        }
        else
        {
          if (fan.sys.ObjUtil.is(obj,fan.std.Type.find("sys::List<>")))
          {
            this.writeJsonList(fan.sys.ObjUtil.coerce(obj,fan.std.Type.find("sys::List<sys::Obj?>")));
          }
          else
          {
            if (obj == null)
            {
              this.writeJsonNull();
            }
            else
            {
              if (fan.sys.ObjUtil.is(obj,fan.util.JVal.$type))
              {
                var j = fan.sys.ObjUtil.coerce(obj,fan.util.JVal.$type);
                if (j.isStr())
                {
                  this.writeJsonStr(fan.sys.ObjUtil.coerce(j.m_obj,fan.sys.Str.$type));
                }
                else
                {
                  if (j.isNum())
                  {
                    this.writeJsonNum(fan.sys.ObjUtil.coerce(j.m_obj,fan.sys.Num.$type));
                  }
                  else
                  {
                    if (j.isBool())
                    {
                      this.writeJsonBool(fan.sys.ObjUtil.coerce(j.m_obj,fan.sys.Bool.$type));
                    }
                    else
                    {
                      if (j.isMap())
                      {
                        this.writeJsonMap(fan.sys.ObjUtil.coerce(j.m_obj,fan.std.Type.find("std::Map<sys::Str,sys::Obj?>")));
                      }
                      else
                      {
                        if (j.isList())
                        {
                          this.writeJsonList(fan.sys.ObjUtil.coerce(j.m_obj,fan.std.Type.find("sys::List<sys::Obj?>")));
                        }
                        else
                        {
                          if (j.isNull())
                          {
                            this.writeJsonNull();
                          }
                          else
                          {
                            this.writeJsonObj(fan.sys.ObjUtil.coerce(j.m_obj,fan.sys.Obj.$type));
                          }
                          ;
                        }
                        ;
                      }
                      ;
                    }
                    ;
                  }
                  ;
                }
                ;
              }
              else
              {
                this.writeJsonObj(fan.sys.ObjUtil.coerce(obj,fan.sys.Obj.$type));
              }
              ;
            }
            ;
          }
          ;
        }
        ;
      }
      ;
    }
    ;
  }
  ;
  return this;
}
fan.util.JsonOutStream.prototype.writeJsonObj = function(obj)
{
  var $this = this;
  var type = fan.std.Type.of(obj);
  var ser = fan.sys.ObjUtil.as(type.facet(fan.sys.Serializable.$type,false),fan.sys.Serializable.$type);
  if (ser == null)
  {
    throw fan.sys.IOErr.make(fan.sys.Str.plus("Object type not serializable: ",type));
  }
  ;
  if (ser.m_simple)
  {
    this.writeJsonStr(fan.sys.ObjUtil.toStr(obj));
    return;
  }
  ;
  this.writeChar(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_objectStart));
  var first = true;
  type.fields().each(fan.sys.Func.make$closure(
    fan.util.$clos$_u21,
    function(f,i)
    {
      if ((f.isStatic() || fan.sys.ObjUtil.equals(f.hasFacet(fan.sys.Transient.$type),true)))
      {
        return;
      }
      ;
      if (first)
      {
        first = false;
      }
      else
      {
        $this.writeChar(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_comma));
      }
      ;
      $this.writeJsonPair(f.$name(),f.get(obj));
      return;
    }));
  this.writeChar(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_objectEnd));
  return;
}
fan.util.JsonOutStream.prototype.writeJsonMap = function(map)
{
  var $this = this;
  this.writeChar(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_objectStart));
  var notFirst = false;
  map.each(fan.sys.Func.make$closure(
    fan.util.$clos$_u22,
    function(val,key)
    {
      if (!fan.sys.ObjUtil.is(key,fan.sys.Str.$type))
      {
        throw fan.sys.Err.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("JSON map key is not Str type: ",key)," ["),fan.std.Type.$typeof(key)),"]"));
      }
      ;
      if (notFirst)
      {
        $this.writeChar(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_comma));
      }
      ;
      $this.writeJsonPair(key,val);
      notFirst = true;
      return;
    }));
  this.writeChar(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_objectEnd));
  return;
}
fan.util.JsonOutStream.prototype.writeJsonList = function(array)
{
  var $this = this;
  this.writeChar(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_arrayStart));
  var notFirst = false;
  array.each(fan.sys.Func.make$closure(
    fan.util.$clos$_u23,
    function(item,ignoreparam$1)
    {
      if (notFirst)
      {
        $this.writeChar(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_comma));
      }
      ;
      $this.writeJson(item);
      notFirst = true;
      return;
    }));
  this.writeChar(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_arrayEnd));
  return;
}
fan.util.JsonOutStream.prototype.writeJsonKey = function(str)
{
  if ((this.m_std || !fan.std.Uri.isName(str)))
  {
    this.writeJsonStr(str);
  }
  else
  {
    this.writeChars(str);
  }
  ;
  return;
}
fan.util.JsonOutStream.prototype.writeJsonStr = function(str)
{
  var $this = this;
  this.writeChar(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_quote));
  fan.sys.Str.each(str,fan.sys.Func.make$closure(
    fan.util.$clos$_u24,
    function($char,ignoreparam$1)
    {
      if (fan.sys.ObjUtil.compareLE($char,127))
      {
        var $_u25 = $char;
        if (fan.sys.ObjUtil.equals($_u25,8))
        {
          fan.sys.ObjUtil.coerce($this.writeChar(92),fan.util.JsonOutStream.$type).writeChar(98);
        }
        else if (fan.sys.ObjUtil.equals($_u25,12))
        {
          fan.sys.ObjUtil.coerce($this.writeChar(92),fan.util.JsonOutStream.$type).writeChar(102);
        }
        else if (fan.sys.ObjUtil.equals($_u25,10))
        {
          fan.sys.ObjUtil.coerce($this.writeChar(92),fan.util.JsonOutStream.$type).writeChar(110);
        }
        else if (fan.sys.ObjUtil.equals($_u25,13))
        {
          fan.sys.ObjUtil.coerce($this.writeChar(92),fan.util.JsonOutStream.$type).writeChar(114);
        }
        else if (fan.sys.ObjUtil.equals($_u25,9))
        {
          fan.sys.ObjUtil.coerce($this.writeChar(92),fan.util.JsonOutStream.$type).writeChar(116);
        }
        else if (fan.sys.ObjUtil.equals($_u25,92))
        {
          fan.sys.ObjUtil.coerce($this.writeChar(92),fan.util.JsonOutStream.$type).writeChar(92);
        }
        else if (fan.sys.ObjUtil.equals($_u25,34))
        {
          fan.sys.ObjUtil.coerce($this.writeChar(92),fan.util.JsonOutStream.$type).writeChar(34);
        }
        else
        {
          $this.writeChar($char);
        }
        ;
      }
      else
      {
        if ($this.m_escapeUnicode)
        {
          fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce($this.writeChar(92),fan.util.JsonOutStream.$type).writeChar(117),fan.util.JsonOutStream.$type).print(fan.sys.Int.toHex($char,4));
        }
        else
        {
          $this.writeChar($char);
        }
        ;
      }
      ;
      return;
    }));
  this.writeChar(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_quote));
  return;
}
fan.util.JsonOutStream.prototype.writeJsonNum = function(num)
{
  this.print(num);
  return;
}
fan.util.JsonOutStream.prototype.writeJsonBool = function(bool)
{
  this.print(fan.sys.ObjUtil.coerce(bool,fan.sys.Obj.$type.toNullable()));
  return;
}
fan.util.JsonOutStream.prototype.writeJsonNull = function()
{
  this.print("null");
  return;
}
fan.util.JsonOutStream.prototype.writeJsonPair = function(key,val)
{
  this.writeJsonKey(key);
  this.writeChar(((fan.util.JsonToken.static$init && !fan.util.JsonToken.static$inited ? (fan.util.JsonToken.static$inited=true,fan.util.JsonToken.static$init()) : null),fan.util.JsonToken.m_colon));
  this.writeJson(val);
  return;
}
fan.util.JsonOutStream.prototype.m_std = false;
fan.util.JsonOutStream.prototype.m_escapeUnicode = false;
fan.util.CsvTest = fan.sys.Obj.$extend(fan.std.Test);
fan.util.CsvTest.prototype.$ctor = function()
{
  fan.std.Test.prototype.$ctor.call(this);
  var $this = this;
}
fan.util.CsvTest.prototype.$typeof = function() { return fan.util.CsvTest.$type; }
fan.util.CsvTest.prototype.test = function()
{
  var $this = this;
  this.verifyCsv("one, two , three",fan.sys.List.make(fan.std.Type.find("sys::List<sys::Str>"), [fan.sys.List.make(fan.sys.Str.$type, ["one","two","three"])]),fan.sys.Func.make$closure(
    fan.util.$clos$_u26,
    function(it)
    {
      return;
    }));
  this.verifyCsv("one, two , three",fan.sys.List.make(fan.std.Type.find("sys::List<sys::Str>"), [fan.sys.List.make(fan.sys.Str.$type, ["one"," two "," three"])]),fan.sys.Func.make$closure(
    fan.util.$clos$_u26,
    function(it)
    {
      it.m_trim = false;
      return;
    }));
  this.verifyCsv("1 , 2 , 3\n5 ,   , ",fan.sys.List.make(fan.std.Type.find("sys::List<sys::Str>"), [fan.sys.List.make(fan.sys.Str.$type, ["1","2","3"]),fan.sys.List.make(fan.sys.Str.$type, ["5","",""])]),fan.sys.Func.make$closure(
    fan.util.$clos$_u26,
    function(it)
    {
      return;
    }));
  this.verifyCsv("1|2|3\n4|5|6",fan.sys.List.make(fan.std.Type.find("sys::List<sys::Str>"), [fan.sys.List.make(fan.sys.Str.$type, ["1","2","3"]),fan.sys.List.make(fan.sys.Str.$type, ["4","5","6"])]),fan.sys.Func.make$closure(
    fan.util.$clos$_u26,
    function(it)
    {
      it.m_delimiter = 124;
      return;
    }));
  this.verifyCsv("foo,\"bar\"\n\"baz\",roo\n\"abc\",\"x\"\n\"a\" ,\"b\"",fan.sys.List.make(fan.std.Type.find("sys::List<sys::Str>"), [fan.sys.List.make(fan.sys.Str.$type, ["foo","bar"]),fan.sys.List.make(fan.sys.Str.$type, ["baz","roo"]),fan.sys.List.make(fan.sys.Str.$type, ["abc","x"]),fan.sys.List.make(fan.sys.Str.$type, ["a","b"])]),fan.sys.Func.make$closure(
    fan.util.$clos$_u26,
    function(it)
    {
      return;
    }));
  this.verifyCsv("\" one,two \",\"_\"\"hello\"\"_ \"\n\"\"\"x\"\"\",\" ,y,\"",fan.sys.List.make(fan.std.Type.find("sys::List<sys::Str>"), [fan.sys.List.make(fan.sys.Str.$type, [" one,two ","_\"hello\"_ "]),fan.sys.List.make(fan.sys.Str.$type, ["\"x\""," ,y,"])]),fan.sys.Func.make$closure(
    fan.util.$clos$_u26,
    function(it)
    {
      return;
    }));
  this.verifyCsv("foo, \"bar\"\n\"baz\", roo\n\"abc\", \"x\"",fan.sys.List.make(fan.std.Type.find("sys::List<sys::Str>"), [fan.sys.List.make(fan.sys.Str.$type, ["foo","bar"]),fan.sys.List.make(fan.sys.Str.$type, ["baz","roo"]),fan.sys.List.make(fan.sys.Str.$type, ["abc","x"])]),fan.sys.Func.make$closure(
    fan.util.$clos$_u26,
    function(it)
    {
      return;
    }));
  this.verifyCsv("long,\"line1\nline2\"",fan.sys.List.make(fan.std.Type.find("sys::List<sys::Str>"), [fan.sys.List.make(fan.sys.Str.$type, ["long","line1\nline2"])]),fan.sys.Func.make$closure(
    fan.util.$clos$_u26,
    function(it)
    {
      return;
    }));
  this.verifyCsv("long with empty lines,\"line1\n\nline2\"",fan.sys.List.make(fan.std.Type.find("sys::List<sys::Str>"), [fan.sys.List.make(fan.sys.Str.$type, ["long with empty lines","line1\n\nline2"])]),fan.sys.Func.make$closure(
    fan.util.$clos$_u26,
    function(it)
    {
      return;
    }));
  this.verifyCsv("first;\"a\nb \"\"quote\"\"\nc;\nd\"\nsecond;\"\"\"\nline2\nline3\n\"",fan.sys.List.make(fan.std.Type.find("sys::List<sys::Str>"), [fan.sys.List.make(fan.sys.Str.$type, ["first","a\nb \"quote\"\nc;\nd"]),fan.sys.List.make(fan.sys.Str.$type, ["second","\"\nline2\nline3\n"])]),fan.sys.Func.make$closure(
    fan.util.$clos$_u26,
    function(it)
    {
      it.m_delimiter = 59;
      return;
    }));
  this.verifyCsv("\u0420\u0443\u0441\u0441\u043a\u043e\u0435,\u0441\u043b\u043e\u0432\u043e",fan.sys.List.make(fan.std.Type.find("sys::List<sys::Str>"), [fan.sys.List.make(fan.sys.Str.$type, ["\u0420\u0443\u0441\u0441\u043a\u043e\u0435","\u0441\u043b\u043e\u0432\u043e"])]),fan.sys.Func.make$closure(
    fan.util.$clos$_u26,
    function(it)
    {
      return;
    }));
  this.verifyCsv("a,b,c,d\na,b,c,\na,b,,\na,,,\n,,,\n,b,c,d",fan.sys.List.make(fan.std.Type.find("sys::List<sys::Str>"), [fan.sys.List.make(fan.sys.Str.$type, ["a","b","c","d"]),fan.sys.List.make(fan.sys.Str.$type, ["a","b","c",""]),fan.sys.List.make(fan.sys.Str.$type, ["a","b","",""]),fan.sys.List.make(fan.sys.Str.$type, ["a","","",""]),fan.sys.List.make(fan.sys.Str.$type, ["","","",""]),fan.sys.List.make(fan.sys.Str.$type, ["","b","c","d"])]),fan.sys.Func.make$closure(
    fan.util.$clos$_u26,
    function(it)
    {
      return;
    }));
  return;
}
fan.util.CsvTest.prototype.verifyCsv = function(src,expected,f)
{
  var $this = this;
  var $in = fan.util.CsvInStream.make(fan.std.StrExt.$in(src));
  f.call($in);
  var x = $in.readAllRows();
  this.verifyEq(fan.sys.ObjUtil.coerce(x,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(expected,fan.sys.Obj.$type.toNullable()));
  var i = 0;
  $in = fan.util.CsvInStream.make(fan.std.StrExt.$in(src));
  f.call($in);
  while (true)
  {
    var row = $in.readRow();
    if (row == null)
    {
      break;
    }
    ;
    this.verifyEq(fan.sys.ObjUtil.coerce(row,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(expected.get((function($this) { var $_u27 = i; i = fan.sys.Int.increment(i); return $_u27; })(this)),fan.sys.Obj.$type.toNullable()));
  }
  ;
  this.verifyEq(fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(expected.size(),fan.sys.Obj.$type.toNullable()));
  i = 0;
  $in = fan.util.CsvInStream.make(fan.std.StrExt.$in(src));
  f.call($in);
  $in.eachRow(fan.sys.Func.make$closure(
    fan.util.$clos$_u0,
    function(row)
    {
      $this.verifyEq(fan.sys.ObjUtil.coerce(row,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(expected.get((function($this) { var $_u28 = i; i = fan.sys.Int.increment(i); return $_u28; })($this)),fan.sys.Obj.$type.toNullable()));
      return;
    }));
  this.verifyEq(fan.sys.ObjUtil.coerce(i,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(expected.size(),fan.sys.Obj.$type.toNullable()));
  var buf = fan.std.Buf.make();
  var out = fan.util.CsvOutStream.make(buf.out());
  out.m_delimiter = $in.m_delimiter;
  expected.each(fan.sys.Func.make$closure(
    fan.util.$clos$_u29,
    function(row,ignoreparam$1)
    {
      out.writeRow(row);
      return;
    }));
  var str = buf.flip().readAllStr();
  $in = fan.util.CsvInStream.make(fan.std.StrExt.$in(str));
  f.call($in);
  this.verifyEq(fan.sys.ObjUtil.coerce($in.readAllRows(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(expected,fan.sys.Obj.$type.toNullable()));
  var sb = fan.sys.StrBuf.make();
  out = fan.util.CsvOutStream.make(fan.std.StrExt.out(sb));
  out.m_delimiter = $in.m_delimiter;
  expected.each(fan.sys.Func.make$closure(
    fan.util.$clos$_u29,
    function(row,ignoreparam$1)
    {
      out.writeRow(row);
      return;
    }));
  str = sb.toStr();
  $in = fan.util.CsvInStream.make(fan.std.StrExt.$in(str));
  f.call($in);
  this.verifyEq(fan.sys.ObjUtil.coerce($in.readAllRows(),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(expected,fan.sys.Obj.$type.toNullable()));
  return;
}
fan.util.CsvTest.make = function() {
  var self = new fan.util.CsvTest();
  fan.util.CsvTest.make$(self);
  return self;
  }
fan.util.CsvTest.make$ = function(self)
{
  fan.std.Test.make$(self);
  return;
}
fan.util.MacroTest = fan.sys.Obj.$extend(fan.std.Test);
fan.util.MacroTest.prototype.$ctor = function()
{
  fan.std.Test.prototype.$ctor.call(this);
  var $this = this;
}
fan.util.MacroTest.prototype.$typeof = function() { return fan.util.MacroTest.$type; }
fan.util.MacroTest.prototype.testEmpty = function()
{
  this.verifyEq("",this.apply(""));
  this.verifyEq("",this.apply("{{}}"));
  return;
}
fan.util.MacroTest.prototype.testNoMacros = function()
{
  this.verifyEq("a",this.apply("a"));
  this.verifyEq("{",this.apply("{"));
  this.verifyEq("}",this.apply("}"));
  this.verifyEq("}}",this.apply("}}"));
  this.verifyEq("notAKey}}",this.apply("notAKey}}"));
  this.verifyEq("{notAKey}}",this.apply("{notAKey}}"));
  return;
}
fan.util.MacroTest.prototype.testResolve = function()
{
  this.verifyEq("A",this.apply("{{a}}"));
  this.verifyEq("FOO",this.apply("{{foo}}"));
  this.verifyEq("_FOO",this.apply("_{{foo}}"));
  this.verifyEq("_FOO_",this.apply("_{{foo}}_"));
  this.verifyEq("_FOO_BAR",this.apply("_{{foo}}_{{bar}}"));
  this.verifyEq("_FOO_BAR_",this.apply("_{{foo}}_{{bar}}_"));
  this.verifyEq(" ",this.apply("{{ }}"));
  this.verifyEq(" FOO ",this.apply("{{ foo }}"));
  this.verifyEq("_{{_",this.apply("_{{{{}}_"));
  return;
}
fan.util.MacroTest.prototype.testUnterminated = function()
{
  var $this = this;
  this.verifyErr(fan.sys.ParseErr.$type,fan.sys.Func.make$closure(
    fan.util.$clos$_u30,
    function(it)
    {
      $this.apply("{{");
      return;
    }));
  this.verifyErr(fan.sys.ParseErr.$type,fan.sys.Func.make$closure(
    fan.util.$clos$_u30,
    function(it)
    {
      $this.apply("{{}");
      return;
    }));
  this.verifyErr(fan.sys.ParseErr.$type,fan.sys.Func.make$closure(
    fan.util.$clos$_u30,
    function(it)
    {
      $this.apply("{{a");
      return;
    }));
  this.verifyErr(fan.sys.ParseErr.$type,fan.sys.Func.make$closure(
    fan.util.$clos$_u30,
    function(it)
    {
      $this.apply("{{a}");
      return;
    }));
  return;
}
fan.util.MacroTest.prototype.testKeys = function()
{
  this.verifyEq(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(this.keys("foo"),fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type, [""]),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(this.keys("{{}}"),fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type, [" foo "]),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(this.keys("{{ foo }}"),fan.sys.Obj.$type.toNullable()));
  this.verifyEq(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type, ["a","b","b","c"]),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(this.keys("_{{a}}_{{b}}_{{b}}_{{c}}_"),fan.sys.Obj.$type.toNullable()));
  return;
}
fan.util.MacroTest.prototype.apply = function(text)
{
  var $this = this;
  return fan.util.Macro.make(text).apply(fan.sys.Func.make$closure(
    fan.util.$clos$_u31,
    function(it)
    {
      return fan.sys.Str.upper(it);
    }));
}
fan.util.MacroTest.prototype.keys = function(text)
{
  return fan.util.Macro.make(text).keys();
}
fan.util.MacroTest.make = function() {
  var self = new fan.util.MacroTest();
  fan.util.MacroTest.make$(self);
  return self;
  }
fan.util.MacroTest.make$ = function(self)
{
  fan.std.Test.make$(self);
  return;
}
fan.util.initReflect$ = function() {
  fan.util.$pod = fan.std.Pod.$add('util');
  with (fan.util.$pod)
  {
    fan.util.CsvInStream.$type = $at('CsvInStream','std::ProxyInStream',[],{'sys::Js':""},270336);
    fan.util.Macro.$type = $at('Macro','sys::Obj',[],{'sys::Js':""},8194);
    fan.util.CsvOutStream.$type = $at('CsvOutStream','std::ProxyOutStream',[],{'sys::Js':""},270336);
    fan.util.FloatArray.$type = $at('FloatArray','sys::Obj',[],{'sys::Js':""},270848);
    fan.util.IntArray.$type = $at('IntArray','sys::Obj',[],{'sys::Js':""},270848);
    fan.util.BoolArray.$type = $at('BoolArray','sys::Obj',[],{'sys::Js':""},8192);
    fan.util.JVal.$type = $at('JVal','sys::Obj',[],{'sys::Js':""},270336);
    fan.util.JsonInStream.$type = $at('JsonInStream','std::ProxyInStream',[],{'sys::Js':"",'sys::NoDoc':""},8192);
    fan.util.JsonOutStream.$type = $at('JsonOutStream','std::ProxyOutStream',[],{'sys::Js':"",'sys::NoDoc':""},8192);
    fan.util.CsvTest.$type = $at('CsvTest','std::Test',[],{'sys::Js':""},8192);
    fan.util.MacroTest.$type = $at('MacroTest','std::Test',[],{'sys::Js':""},8192);
    fan.util.CsvInStream.$type.$af('delimiter',73728,'sys::Int',{}).$af('trim',73728,'sys::Bool',{}).$af('rowWidth',67584,'sys::Int',{}).$af('line',67584,'sys::Str?',{}).$af('pos',67584,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false)], fan.std.Param.$type),{}).$am('readAllRows',8192,'sys::List<sys::List<sys::Str>>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('eachRow',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::List<sys::Str>>',false)], fan.std.Param.$type),{}).$am('readRow',270336,'sys::List<sys::Str>?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('parseCell',2048,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('parseNonQuotedCell',2048,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('parseQuotedCell',2048,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.util.Macro.$type.$af('pattern',73730,'sys::Str',{}).$af('norm',100354,'sys::Int',{}).$af('inMacro',100354,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('pattern','sys::Str',false)], fan.std.Param.$type),{}).$am('apply',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('resolve','sys::Func<sys::Str,sys::Str>',false)], fan.std.Param.$type),{}).$am('keys',8192,'sys::List<sys::Str>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.util.CsvOutStream.$type.$af('delimiter',73728,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('out','std::OutStream',false)], fan.std.Param.$type),{}).$am('writeRow',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('row','sys::List<sys::Str>',false)], fan.std.Param.$type),{}).$am('writeCell',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('cell','sys::Str',false)], fan.std.Param.$type),{}).$am('isQuoteRequired',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('cell','sys::Str',false)], fan.std.Param.$type),{});
    fan.util.FloatArray.$type.$am('makeF4',40962,'util::FloatArray',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('makeF8',40962,'util::FloatArray',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('make',132,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('get',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('set',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('val','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('size',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('realloc',8192,'util::FloatArray',fan.sys.List.makeFromJs([new fan.std.Param('newSize','sys::Int',false)], fan.std.Param.$type),{}).$am('fill',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('val','sys::Float',false),new fan.std.Param('times','sys::Int',false)], fan.std.Param.$type),{}).$am('copyFrom',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('that','util::FloatArray',false),new fan.std.Param('thatOffset','sys::Int',false),new fan.std.Param('thisOffset','sys::Int',false),new fan.std.Param('length','sys::Int',false)], fan.std.Param.$type),{}).$am('finalize',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.util.IntArray.$type.$am('makeS1',40962,'util::IntArray',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('makeU1',40962,'util::IntArray',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('makeS2',40962,'util::IntArray',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('makeU2',40962,'util::IntArray',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('makeS4',40962,'util::IntArray',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('makeU4',40962,'util::IntArray',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('makeS8',40962,'util::IntArray',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('make',132,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('get',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('set',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('val','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('size',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('realloc',8192,'util::IntArray',fan.sys.List.makeFromJs([new fan.std.Param('newSize','sys::Int',false)], fan.std.Param.$type),{}).$am('fill',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('val','sys::Int',false),new fan.std.Param('times','sys::Int',false)], fan.std.Param.$type),{}).$am('copyFrom',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('that','util::IntArray',false),new fan.std.Param('thatOffset','sys::Int',false),new fan.std.Param('thisOffset','sys::Int',false),new fan.std.Param('length','sys::Int',false)], fan.std.Param.$type),{}).$am('finalize',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.util.BoolArray.$type.$af('_size',67584,'sys::Int',{}).$af('words',67584,'util::IntArray',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('get',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('set',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('val','sys::Bool',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('size',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('realloc',8192,'util::BoolArray',fan.sys.List.makeFromJs([new fan.std.Param('newSize','sys::Int',false)], fan.std.Param.$type),{}).$am('fill',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('val','sys::Bool',false),new fan.std.Param('times','sys::Int',false)], fan.std.Param.$type),{}).$am('copyFrom',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('that','util::BoolArray',false),new fan.std.Param('thatOffset','sys::Int',false),new fan.std.Param('thisOffset','sys::Int',false),new fan.std.Param('length','sys::Int',false)], fan.std.Param.$type),{});
    fan.util.JVal.$type.$af('obj',73728,'sys::Obj?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('makeMap',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('makeList',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('readJson',40962,'util::JVal',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false)], fan.std.Param.$type),{}).$am('writeJson',8192,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('std','sys::Bool',true),new fan.std.Param('escapeUnicode','sys::Bool',true)], fan.std.Param.$type),{}).$am('xpath',8192,'util::JVal',fan.sys.List.makeFromJs([new fan.std.Param('path','sys::Str',false)], fan.std.Param.$type),{}).$am('getInPath',2048,'util::JVal',fan.sys.List.makeFromJs([new fan.std.Param('paths','sys::List<sys::Obj>',false)], fan.std.Param.$type),{}).$am('isMap',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isList',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isStr',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isInt',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isFloat',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isBool',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isNull',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isNum',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('asMap',8192,'std::Map<sys::Str,sys::Obj?>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('asList',8192,'sys::List<sys::Obj?>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('asStr',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('asInt',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('asFloat',8192,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('asBool',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('asNull',8192,'sys::Obj?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('size',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('getAt',8192,'util::JVal',fan.sys.List.makeFromJs([new fan.std.Param('i','sys::Int',false)], fan.std.Param.$type),{}).$am('add',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('elem','sys::Obj?',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('get',8192,'util::JVal',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('defVal','util::JVal',true)], fan.std.Param.$type),{'sys::Operator':""}).$am('set',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('elem','sys::Obj?',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('asVal',40962,'util::JVal',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('trap',271360,'sys::Obj?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('args','sys::List<sys::Obj?>?',true)], fan.std.Param.$type),{});
    fan.util.JsonInStream.$type.$af('cur',67584,'sys::Int',{}).$af('pos',67584,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false)], fan.std.Param.$type),{}).$am('readJson',8192,'sys::Obj?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('parseObj',2048,'std::Map<sys::Str,sys::Obj?>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('parsePair',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('obj','std::Map<sys::Str,sys::Obj?>',false)], fan.std.Param.$type),{}).$am('parseVal',2048,'sys::Obj?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('parseNum',2048,'sys::Obj',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('parseKey',2048,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('parseStr',2048,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('escape',2048,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('parseArray',2048,'sys::List<sys::Obj?>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('skipWhitespace',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('expect',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('tt','sys::Int',false)], fan.std.Param.$type),{}).$am('maybe',2048,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('tt','sys::Int',false)], fan.std.Param.$type),{}).$am('consume',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('err',2048,'sys::Err',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',false)], fan.std.Param.$type),{});
    fan.util.JsonOutStream.$type.$af('std',73728,'sys::Bool',{}).$af('escapeUnicode',73728,'sys::Bool',{}).$am('writeJsonToStr',40962,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('out','std::OutStream',false)], fan.std.Param.$type),{}).$am('writeJson',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('writeJsonObj',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj',false)], fan.std.Param.$type),{}).$am('writeJsonMap',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('map','std::Map<sys::Str,sys::Obj?>',false)], fan.std.Param.$type),{}).$am('writeJsonList',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('array','sys::List<sys::Obj?>',false)], fan.std.Param.$type),{}).$am('writeJsonKey',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false)], fan.std.Param.$type),{}).$am('writeJsonStr',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false)], fan.std.Param.$type),{}).$am('writeJsonNum',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('num','sys::Num',false)], fan.std.Param.$type),{}).$am('writeJsonBool',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('bool','sys::Bool',false)], fan.std.Param.$type),{}).$am('writeJsonNull',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('writeJsonPair',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('key','sys::Str',false),new fan.std.Param('val','sys::Obj?',false)], fan.std.Param.$type),{});
    fan.util.CsvTest.$type.$am('test',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('verifyCsv',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('src','sys::Str',false),new fan.std.Param('expected','sys::List<sys::List<sys::Str>>',false),new fan.std.Param('f','sys::Func<sys::Void,util::CsvInStream>',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.util.MacroTest.$type.$am('testEmpty',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('testNoMacros',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('testResolve',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('testUnterminated',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('testKeys',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('apply',2048,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('text','sys::Str',false)], fan.std.Param.$type),{}).$am('keys',2048,'sys::List<sys::Str>',fan.sys.List.makeFromJs([new fan.std.Param('text','sys::Str',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    m_meta = {};
    m_meta["pod.name"] = "util";
    m_meta["pod.version"] = "1.0";
    m_meta["pod.depends"] = "sys 2.0;std 1.0;concurrent 1.0";
    m_meta["pod.summary"] = "Utilities";
    m_meta["pod.isScript"] = "false";
    m_meta["fcode.version"] = "1.1.3";
    m_meta["build.host"] = "mywifi.local";
    m_meta["build.user"] = "yangjiandong";
    m_meta["build.ts"] = "2020-04-12T16:51:29.000+08:00 Asia/Harbin";
    m_meta["build.tsKey"] = "200412165129";
    m_meta["build.compiler"] = "1.1";
    m_meta["build.platform"] = "macosx-x86_64";
    m_meta["pod.docApi"] = "true";
    m_meta["pod.docSrc"] = "false";
    m_meta["pod.native.java"] = "true";
    m_meta["pod.native.jni"] = "false";
    m_meta["pod.native.dotnet"] = "false";
    m_meta["pod.native.js"] = "true";
  }
  fan.util.$clos$_u0 = new fan.sys.ClosureFuncSpec$("util::$clos$_u0",fan.sys.Void.$type,["row","sys::List<sys::Str>","false"]);
  fan.util.$clos$_u8 = new fan.sys.ClosureFuncSpec$("util::$clos$_u8",fan.sys.Str.$type,["key","sys::Str","false"]);
  fan.util.$clos$_u9 = new fan.sys.ClosureFuncSpec$("util::$clos$_u9",fan.sys.Void.$type,["cell","sys::Str","false","i","sys::Int","false"]);
  fan.util.$clos$_u10 = new fan.sys.ClosureFuncSpec$("util::$clos$_u10",fan.sys.Void.$type,["ch","sys::Int","false","ignoreparam$1","sys::Int","false"]);
  fan.util.$clos$_u11 = new fan.sys.ClosureFuncSpec$("util::$clos$_u11",fan.sys.Bool.$type,["ch","sys::Int","false","ignoreparam$1","sys::Int","false"]);
  fan.util.$clos$_u18 = new fan.sys.ClosureFuncSpec$("util::$clos$_u18",fan.sys.Void.$type,["ignoreparam$0","sys::Int","false"]);
  fan.util.$clos$_u21 = new fan.sys.ClosureFuncSpec$("util::$clos$_u21",fan.sys.Void.$type,["f","std::Field","false","i","sys::Int","false"]);
  fan.util.$clos$_u22 = new fan.sys.ClosureFuncSpec$("util::$clos$_u22",fan.sys.Void.$type,["val","sys::Obj?","false","key","sys::Str","false"]);
  fan.util.$clos$_u23 = new fan.sys.ClosureFuncSpec$("util::$clos$_u23",fan.sys.Void.$type,["item","sys::Obj?","false","ignoreparam$1","sys::Int","false"]);
  fan.util.$clos$_u24 = new fan.sys.ClosureFuncSpec$("util::$clos$_u24",fan.sys.Void.$type,["$char","sys::Int","false","ignoreparam$1","sys::Int","false"]);
  fan.util.$clos$_u26 = new fan.sys.ClosureFuncSpec$("util::$clos$_u26",fan.sys.Void.$type,["it","util::CsvInStream","false"]);
  fan.util.$clos$_u29 = new fan.sys.ClosureFuncSpec$("util::$clos$_u29",fan.sys.Void.$type,["row","sys::List<sys::Str>","false","ignoreparam$1","sys::Int","false"]);
  fan.util.$clos$_u30 = new fan.sys.ClosureFuncSpec$("util::$clos$_u30",fan.sys.Void.$type,["it","std::Test","false"]);
  fan.util.$clos$_u31 = new fan.sys.ClosureFuncSpec$("util::$clos$_u31",fan.sys.Str.$type,["it","sys::Str","false"]);
}
fan.util.initStatic$ = function() {
  fan.util.Macro.static$init();
}
fan.util.initReflect$();
fan.util.initStatic$();
}).call(this);

(function () {
var root=this;
var fan=root.fan;
if (fan === undefined) {
   if (typeof exports !== 'undefined') {
     fan = exports;
   } else {
     fan = root.fan = {};
   }
}
if (!fan.sys && (typeof require !== 'undefined')) fan = require('sys.js');

if (typeof exports !== 'undefined') {
  fan.vaseMath = exports;
} else {
  fan.vaseMath = root.fan.vaseMath = {};
}

fan.vaseMath.Transform2D = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseMath.Transform2D.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_matrix = fan.vaseMath.Matrix.makeIndentity(3);
  return;
}
fan.vaseMath.Transform2D.prototype.$typeof = function() { return fan.vaseMath.Transform2D.$type; }
fan.vaseMath.Transform2D.prototype.matrix = function()
{
  return this.m_matrix;
}
fan.vaseMath.Transform2D.prototype.matrix$ = function(it)
{
  this.m_matrix = it;
  return;
}
fan.vaseMath.Transform2D.prototype.get = function(x,y)
{
  return this.m_matrix.get(x,y);
}
fan.vaseMath.Transform2D.prototype.set = function(x,y,val)
{
  this.m_matrix.set(x,y,val);
  return;
}
fan.vaseMath.Transform2D.prototype.clone = function()
{
  var $this = this;
  return fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseMath.Transform2D.make(),fan.sys.Func.make$closure(
    fan.vaseMath.$clos$_u0,
    function(it)
    {
      it.m_matrix = $this.m_matrix.clone();
      return;
    })),fan.vaseMath.Transform2D.$type);
}
fan.vaseMath.Transform2D.prototype.mult = function(t)
{
  this.m_matrix = this.m_matrix.multMatrix(t.m_matrix);
  return this;
}
fan.vaseMath.Transform2D.prototype.translate = function(tx,ty)
{
  this.m_matrix = this.m_matrix.multMatrix(fan.vaseMath.Transform2D.makeTranslate(tx,ty));
  return this;
}
fan.vaseMath.Transform2D.prototype.scale = function(x0,y0,sx,sy)
{
  this.m_matrix = this.m_matrix.multMatrix(fan.vaseMath.Transform2D.makeScale(x0,y0,sx,sy));
  return this;
}
fan.vaseMath.Transform2D.prototype.symmetry = function(a,b,d,e)
{
  this.m_matrix = this.m_matrix.multMatrix(fan.vaseMath.Transform2D.makeSymmetry(a,b,d,e));
  return this;
}
fan.vaseMath.Transform2D.prototype.rotate = function(x,y,thta)
{
  this.m_matrix = this.m_matrix.multMatrix(fan.vaseMath.Transform2D.makeRotate(x,y,thta));
  return this;
}
fan.vaseMath.Transform2D.prototype.shear = function(b,d)
{
  this.m_matrix = this.m_matrix.multMatrix(fan.vaseMath.Transform2D.makeShear(b,d));
  return this;
}
fan.vaseMath.Transform2D.prototype.transform = function(xy)
{
  var x = xy.get(0);
  var y = xy.get(1);
  var sour = fan.vaseMath.Matrix.makeZero(1,3);
  sour.set(0,0,x);
  sour.set(0,1,y);
  sour.set(0,2,fan.sys.Float.make(1.0));
  var result = sour.multMatrix(this.m_matrix);
  xy.set(0,fan.sys.ObjUtil.coerce(result.get(0,0),fan.sys.Obj.$type.toNullable()));
  xy.set(1,fan.sys.ObjUtil.coerce(result.get(0,1),fan.sys.Obj.$type.toNullable()));
  return;
}
fan.vaseMath.Transform2D.makeTranslate = function(tx,ty)
{
  var at = fan.vaseMath.Matrix.makeIndentity(3);
  at.set(0,0,fan.sys.Float.make(1.0));
  at.set(1,1,fan.sys.Float.make(1.0));
  at.set(2,2,fan.sys.Float.make(1.0));
  at.set(2,0,tx);
  at.set(2,1,ty);
  return at;
}
fan.vaseMath.Transform2D.makeScale = function(x0,y0,sx,sy)
{
  var at = fan.vaseMath.Matrix.makeIndentity(3);
  at.set(0,0,sx);
  at.set(1,1,sy);
  at.set(2,2,fan.sys.Float.make(1.0));
  at.set(2,0,fan.sys.Float.mult(fan.sys.Int.minusFloat(1,sx),x0));
  at.set(2,1,fan.sys.Float.mult(fan.sys.Int.minusFloat(1,sy),y0));
  return at;
}
fan.vaseMath.Transform2D.makeSymmetry = function(a,b,d,e)
{
  var at = fan.vaseMath.Matrix.makeIndentity(3);
  at.set(0,0,a);
  at.set(1,1,e);
  at.set(2,2,fan.sys.Float.make(1.0));
  at.set(0,1,d);
  at.set(1,0,b);
  return at;
}
fan.vaseMath.Transform2D.makeRotate = function(x,y,thta)
{
  var at = fan.vaseMath.Matrix.makeIndentity(3);
  at.set(0,0,fan.std.Math.cos(thta));
  at.set(1,1,fan.std.Math.cos(thta));
  at.set(2,2,fan.sys.Float.make(1.0));
  at.set(0,1,fan.std.Math.sin(thta));
  at.set(1,0,fan.sys.Float.negate(fan.std.Math.sin(thta)));
  at.set(2,0,fan.sys.Float.plus(fan.sys.Float.mult(fan.sys.Int.minusFloat(1,fan.std.Math.cos(thta)),x),fan.sys.Float.mult(y,fan.std.Math.sin(thta))));
  at.set(2,1,fan.sys.Float.minus(fan.sys.Float.mult(fan.sys.Int.minusFloat(1,fan.std.Math.cos(thta)),y),fan.sys.Float.mult(x,fan.std.Math.sin(thta))));
  return at;
}
fan.vaseMath.Transform2D.makeShear = function(b,d)
{
  var at = fan.vaseMath.Matrix.makeIndentity(3);
  at.set(0,0,fan.sys.Float.make(1.0));
  at.set(1,1,fan.sys.Float.make(1.0));
  at.set(2,2,fan.sys.Float.make(1.0));
  at.set(0,1,d);
  at.set(1,0,b);
  return at;
}
fan.vaseMath.Transform2D.make = function() {
  var self = new fan.vaseMath.Transform2D();
  fan.vaseMath.Transform2D.make$(self);
  return self;
  }
fan.vaseMath.Transform2D.make$ = function(self)
{
  ;
  return;
}
fan.vaseMath.Transform2D.prototype.m_matrix = null;
fan.vaseMath.MatrixErr = fan.sys.Obj.$extend(fan.sys.Err);
fan.vaseMath.MatrixErr.prototype.$ctor = function()
{
  fan.sys.Err.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseMath.MatrixErr.prototype.$typeof = function() { return fan.vaseMath.MatrixErr.$type; }
fan.vaseMath.MatrixErr.make = function(msg) {
  var self = new fan.vaseMath.MatrixErr();
  fan.vaseMath.MatrixErr.make$(self,msg);
  return self;
  }
fan.vaseMath.MatrixErr.make$ = function(self,msg)
{
  fan.sys.Err.make$(self,msg);
  return;
}
fan.vaseMath.Matrix = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseMath.Matrix.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseMath.Matrix.prototype.$typeof = function() { return fan.vaseMath.Matrix.$type; }
fan.vaseMath.Matrix.prototype.a = function()
{
  return this.m_a;
}
fan.vaseMath.Matrix.prototype.a$ = function(it)
{
  this.m_a = it;
  return;
}
fan.vaseMath.Matrix.prototype.m = function()
{
  return this.m_m;
}
fan.vaseMath.Matrix.prototype.m$ = function(it)
{
  this.m_m = it;
  return;
}
fan.vaseMath.Matrix.prototype.n = function()
{
  return this.m_n;
}
fan.vaseMath.Matrix.prototype.n$ = function(it)
{
  this.m_n = it;
  return;
}
fan.vaseMath.Matrix.prototype.$name = function()
{
  return this.m_$name;
}
fan.vaseMath.Matrix.prototype.$name$ = function(it)
{
  this.m_$name = it;
  return;
}
fan.vaseMath.Matrix.make = function(list) {
  var self = new fan.vaseMath.Matrix();
  fan.vaseMath.Matrix.make$(self,list);
  return self;
  }
fan.vaseMath.Matrix.make$ = function(self,list)
{
  self.m_m = list.size();
  self.m_n = list.first().size();
  self.m_a = fan.util.FloatArray.makeF8(fan.sys.Int.mult(self.m_m,self.m_n));
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,self.m_m); (function($this) { var $_u1 = i; i = fan.sys.Int.increment(i); return $_u1; })(self))
  {
    var row = list.get(i);
    if (fan.sys.ObjUtil.compareNE(row.size(),self.m_n))
    {
      throw fan.vaseMath.MatrixErr.make("sawtooth matrix");
    }
    ;
    for (var j = 0; fan.sys.ObjUtil.compareLT(j,self.m_n); (function($this) { var $_u2 = j; j = fan.sys.Int.increment(j); return $_u2; })(self))
    {
      self.set(i,j,row.get(j));
    }
    ;
  }
  ;
  return;
}
fan.vaseMath.Matrix.makeZero = function(am,an) {
  var self = new fan.vaseMath.Matrix();
  fan.vaseMath.Matrix.makeZero$(self,am,an);
  return self;
  }
fan.vaseMath.Matrix.makeZero$ = function(self,am,an)
{
  self.m_m = am;
  self.m_n = an;
  self.m_a = fan.util.FloatArray.makeF8(fan.sys.Int.mult(self.m_m,self.m_n));
  self.m_a.fill(fan.sys.Float.make(0.0),fan.sys.Int.mult(self.m_m,self.m_n));
  return;
}
fan.vaseMath.Matrix.prototype.set = function(r,c,value)
{
  this.m_a.set(fan.sys.Int.plus(r,fan.sys.Int.mult(c,this.m_m)),value);
  return;
}
fan.vaseMath.Matrix.prototype.get = function(r,c)
{
  return this.m_a.get(fan.sys.Int.plus(r,fan.sys.Int.mult(c,this.m_m)));
}
fan.vaseMath.Matrix.prototype.flatten = function()
{
  return this.m_a;
}
fan.vaseMath.Matrix.prototype.clone = function()
{
  var b = fan.vaseMath.Matrix.makeZero(this.m_m,this.m_n);
  b.m_a.copyFrom(this.m_a,0,0,fan.sys.Int.mult(this.m_m,this.m_n));
  return b;
}
fan.vaseMath.Matrix.makeIndentity = function(n)
{
  var b = fan.vaseMath.Matrix.makeZero(n,n);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,n); (function($this) { var $_u3 = i; i = fan.sys.Int.increment(i); return $_u3; })(this))
  {
    b.set(i,i,fan.sys.Float.make(1.0));
  }
  ;
  return b;
}
fan.vaseMath.Matrix.prototype.approx = function(other,tolerance)
{
  if (tolerance === undefined) tolerance = fan.sys.ObjUtil.coerce(fan.sys.Float.make(1.0E-10),fan.sys.Float.$type.toNullable());
  if (fan.sys.ObjUtil.compareNE(this.m_m,other.m_m))
  {
    return false;
  }
  ;
  if (fan.sys.ObjUtil.compareNE(this.m_n,other.m_n))
  {
    return false;
  }
  ;
  if (!this.approxFloatArray(this.m_a,other.m_a,tolerance))
  {
    return false;
  }
  ;
  return true;
}
fan.vaseMath.Matrix.prototype.approxFloatArray = function(a,b,tolerance)
{
  var size = fan.sys.Int.mult(this.m_m,this.m_n);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,size); (function($this) { var $_u4 = i; i = fan.sys.Int.increment(i); return $_u4; })(this))
  {
    if (!fan.std.Math.approx(a.get(i),b.get(i),tolerance))
    {
      return false;
    }
    ;
  }
  ;
  return true;
}
fan.vaseMath.Matrix.prototype.hash = function()
{
  var prime = 31;
  var result = 1;
  result = fan.sys.Int.plus(fan.sys.Int.mult(prime,result),fan.sys.ObjUtil.hash(this.m_a));
  result = fan.sys.Int.plus(fan.sys.Int.mult(prime,result),this.m_m);
  result = fan.sys.Int.plus(fan.sys.Int.mult(prime,result),this.m_n);
  return result;
}
fan.vaseMath.Matrix.prototype.equals = function(obj)
{
  if (this === obj)
  {
    return true;
  }
  ;
  if (obj == null)
  {
    return false;
  }
  ;
  if (fan.sys.ObjUtil.compareNE(fan.std.Type.$typeof(this),fan.std.Type.$typeof(fan.sys.ObjUtil.coerce(obj,fan.sys.Obj.$type))))
  {
    return false;
  }
  ;
  var other = fan.sys.ObjUtil.coerce(obj,fan.vaseMath.Matrix.$type);
  if (fan.sys.ObjUtil.compareNE(this.m_m,other.m_m))
  {
    return false;
  }
  ;
  if (fan.sys.ObjUtil.compareNE(this.m_n,other.m_n))
  {
    return false;
  }
  ;
  if (fan.sys.ObjUtil.compareNE(this.m_a,other.m_a))
  {
    return false;
  }
  ;
  return true;
}
fan.vaseMath.Matrix.prototype.toStr = function()
{
  var s = fan.sys.Str.plus(this.m_$name,":\n");
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_m); (function($this) { var $_u5 = i; i = fan.sys.Int.increment(i); return $_u5; })(this))
  {
    for (var j = 0; fan.sys.ObjUtil.compareLT(j,this.m_n); (function($this) { var $_u6 = j; j = fan.sys.Int.increment(j); return $_u6; })(this))
    {
      s = fan.sys.Str.plus(s,fan.sys.Str.plus(fan.sys.Float.toLocale(this.get(i,j),"0.0000"),"\t"));
    }
    ;
    s = fan.sys.Str.plus(s,"\n");
  }
  ;
  return s;
}
fan.vaseMath.Matrix.prototype.transpose = function()
{
  var c = fan.vaseMath.Matrix.makeZero(this.m_n,this.m_m);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_n); (function($this) { var $_u7 = i; i = fan.sys.Int.increment(i); return $_u7; })(this))
  {
    for (var j = 0; fan.sys.ObjUtil.compareLT(j,this.m_m); (function($this) { var $_u8 = j; j = fan.sys.Int.increment(j); return $_u8; })(this))
    {
      c.set(i,j,this.get(j,i));
    }
    ;
  }
  ;
  return c;
}
fan.vaseMath.Matrix.prototype.plus = function(b)
{
  var m2 = b.m_m;
  var n2 = b.m_n;
  if ((fan.sys.ObjUtil.compareNE(this.m_m,m2) || fan.sys.ObjUtil.compareNE(this.m_n,n2)))
  {
    throw fan.vaseMath.MatrixErr.make("Dimension don't match");
  }
  ;
  var c = fan.vaseMath.Matrix.makeZero(this.m_m,this.m_n);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_m); (function($this) { var $_u9 = i; i = fan.sys.Int.increment(i); return $_u9; })(this))
  {
    for (var j = 0; fan.sys.ObjUtil.compareLT(j,this.m_n); (function($this) { var $_u10 = j; j = fan.sys.Int.increment(j); return $_u10; })(this))
    {
      c.set(i,j,fan.sys.Float.plus(this.get(i,j),b.get(i,j)));
    }
    ;
  }
  ;
  return c;
}
fan.vaseMath.Matrix.prototype.multFloat = function(k)
{
  var c = fan.vaseMath.Matrix.makeZero(this.m_m,this.m_n);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_m); (function($this) { var $_u11 = i; i = fan.sys.Int.increment(i); return $_u11; })(this))
  {
    for (var j = 0; fan.sys.ObjUtil.compareLT(j,this.m_n); (function($this) { var $_u12 = j; j = fan.sys.Int.increment(j); return $_u12; })(this))
    {
      c.set(i,j,fan.sys.Float.mult(this.get(i,j),k));
    }
    ;
  }
  ;
  return c;
}
fan.vaseMath.Matrix.prototype.multMatrix = function(b)
{
  var m2 = b.m_m;
  var n2 = b.m_n;
  if (fan.sys.ObjUtil.compareNE(this.m_n,m2))
  {
    throw fan.vaseMath.MatrixErr.make("Dimension don't match");
  }
  ;
  var c = fan.vaseMath.Matrix.makeZero(this.m_m,n2);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_m); (function($this) { var $_u13 = i; i = fan.sys.Int.increment(i); return $_u13; })(this))
  {
    for (var j = 0; fan.sys.ObjUtil.compareLT(j,n2); (function($this) { var $_u14 = j; j = fan.sys.Int.increment(j); return $_u14; })(this))
    {
      var value = fan.sys.Float.make(0.0);
      for (var k = 0; fan.sys.ObjUtil.compareLT(k,this.m_n); (function($this) { var $_u15 = k; k = fan.sys.Int.increment(k); return $_u15; })(this))
      {
        value = fan.sys.Float.plus(value,fan.sys.Float.mult(this.get(i,k),b.get(k,j)));
      }
      ;
      c.set(i,j,value);
    }
    ;
  }
  ;
  return c;
}
fan.vaseMath.Matrix.prototype.invert = function()
{
  if (fan.sys.ObjUtil.compareNE(this.m_m,this.m_n))
  {
    throw fan.vaseMath.MatrixErr.make("Dimension don't match");
  }
  ;
  var b = fan.vaseMath.Matrix.makeZero(this.m_m,this.m_n);
  var a = this.clone();
  var i = 0;
  var j = 0;
  var row = 0;
  var k = 0;
  var max = fan.sys.Float.make(0.0);
  var temp = fan.sys.Float.make(0.0);
  for (i = 0; fan.sys.ObjUtil.compareLT(i,this.m_n); (function($this) { var $_u16 = i; i = fan.sys.Int.increment(i); return $_u16; })(this))
  {
    b.set(i,i,fan.sys.Float.make(1.0));
  }
  ;
  for (k = 0; fan.sys.ObjUtil.compareLT(k,this.m_n); (function($this) { var $_u17 = k; k = fan.sys.Int.increment(k); return $_u17; })(this))
  {
    max = fan.sys.Float.make(0.0);
    row = k;
    for (i = k; fan.sys.ObjUtil.compareLT(i,this.m_n); (function($this) { var $_u18 = i; i = fan.sys.Int.increment(i); return $_u18; })(this))
    {
      temp = fan.std.Math.abs(a.get(i,k));
      if (fan.sys.ObjUtil.compareLT(max,temp))
      {
        max = temp;
        row = i;
      }
      ;
    }
    ;
    if (fan.sys.ObjUtil.equals(max,fan.sys.Float.make(0.0)))
    {
      throw fan.vaseMath.MatrixErr.make("not exist invert matrix");
    }
    ;
    if (fan.sys.ObjUtil.compareNE(row,k))
    {
      for (j = 0; fan.sys.ObjUtil.compareLT(j,this.m_n); (function($this) { var $_u19 = j; j = fan.sys.Int.increment(j); return $_u19; })(this))
      {
        temp = a.get(row,j);
        a.set(row,j,a.get(k,j));
        a.set(k,j,temp);
        temp = b.get(row,j);
        b.set(row,j,b.get(k,j));
        b.set(k,j,temp);
      }
      ;
    }
    ;
    for (j = fan.sys.Int.plus(k,1); fan.sys.ObjUtil.compareLT(j,this.m_n); (function($this) { var $_u20 = j; j = fan.sys.Int.increment(j); return $_u20; })(this))
    {
      a.set(k,j,fan.sys.Float.div(a.get(k,j),a.get(k,k)));
    }
    ;
    for (j = 0; fan.sys.ObjUtil.compareLT(j,this.m_n); (function($this) { var $_u21 = j; j = fan.sys.Int.increment(j); return $_u21; })(this))
    {
      b.set(k,j,fan.sys.Float.div(b.get(k,j),a.get(k,k)));
    }
    ;
    a.set(k,k,fan.sys.Float.make(1.0));
    for (j = fan.sys.Int.plus(k,1); fan.sys.ObjUtil.compareLT(j,this.m_n); (function($this) { var $_u22 = j; j = fan.sys.Int.increment(j); return $_u22; })(this))
    {
      for (i = 0; fan.sys.ObjUtil.compareLT(i,k); (function($this) { var $_u23 = i; i = fan.sys.Int.increment(i); return $_u23; })(this))
      {
        a.set(i,j,fan.sys.Float.minus(a.get(i,j),fan.sys.Float.mult(a.get(i,k),a.get(k,j))));
      }
      ;
      for (i = fan.sys.Int.plus(k,1); fan.sys.ObjUtil.compareLT(i,this.m_n); (function($this) { var $_u24 = i; i = fan.sys.Int.increment(i); return $_u24; })(this))
      {
        a.set(i,j,fan.sys.Float.minus(a.get(i,j),fan.sys.Float.mult(a.get(i,k),a.get(k,j))));
      }
      ;
    }
    ;
    for (j = 0; fan.sys.ObjUtil.compareLT(j,this.m_n); (function($this) { var $_u25 = j; j = fan.sys.Int.increment(j); return $_u25; })(this))
    {
      for (i = 0; fan.sys.ObjUtil.compareLT(i,k); (function($this) { var $_u26 = i; i = fan.sys.Int.increment(i); return $_u26; })(this))
      {
        b.set(i,j,fan.sys.Float.minus(b.get(i,j),fan.sys.Float.mult(a.get(i,k),b.get(k,j))));
      }
      ;
      for (i = fan.sys.Int.plus(k,1); fan.sys.ObjUtil.compareLT(i,this.m_n); (function($this) { var $_u27 = i; i = fan.sys.Int.increment(i); return $_u27; })(this))
      {
        b.set(i,j,fan.sys.Float.minus(b.get(i,j),fan.sys.Float.mult(a.get(i,k),b.get(k,j))));
      }
      ;
    }
    ;
    for (i = 0; fan.sys.ObjUtil.compareLT(i,this.m_n); (function($this) { var $_u28 = i; i = fan.sys.Int.increment(i); return $_u28; })(this))
    {
      a.set(i,k,fan.sys.Float.make(0.0));
    }
    ;
    a.set(k,k,fan.sys.Float.make(1.0));
  }
  ;
  return b;
}
fan.vaseMath.Matrix.prototype.invertByAdjoint = function()
{
  var d = this.determinant();
  if (fan.sys.ObjUtil.equals(d,fan.sys.Float.make(0.0)))
  {
    throw fan.vaseMath.MatrixErr.make("not exist invert matrix");
  }
  ;
  var Ax = this.adjoint();
  var An = Ax.multFloat(fan.sys.Float.div(fan.sys.Float.make(1.0),d));
  return An;
}
fan.vaseMath.Matrix.prototype.cofactor = function(ai,aj)
{
  if (fan.sys.ObjUtil.compareNE(this.m_m,this.m_n))
  {
    throw fan.vaseMath.MatrixErr.make("Dimension don't match");
  }
  ;
  var n2 = fan.sys.Int.minus(this.m_n,1);
  var b = fan.vaseMath.Matrix.makeZero(n2,n2);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,ai); (function($this) { var $_u29 = i; i = fan.sys.Int.increment(i); return $_u29; })(this))
  {
    for (var j = 0; fan.sys.ObjUtil.compareLT(j,aj); (function($this) { var $_u30 = j; j = fan.sys.Int.increment(j); return $_u30; })(this))
    {
      b.set(i,j,this.get(i,j));
    }
    ;
  }
  ;
  for (var i = ai; fan.sys.ObjUtil.compareLT(i,n2); (function($this) { var $_u31 = i; i = fan.sys.Int.increment(i); return $_u31; })(this))
  {
    for (var j = aj; fan.sys.ObjUtil.compareLT(j,n2); (function($this) { var $_u32 = j; j = fan.sys.Int.increment(j); return $_u32; })(this))
    {
      b.set(i,j,this.get(fan.sys.Int.plus(i,1),fan.sys.Int.plus(j,1)));
    }
    ;
  }
  ;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,ai); (function($this) { var $_u33 = i; i = fan.sys.Int.increment(i); return $_u33; })(this))
  {
    for (var j = aj; fan.sys.ObjUtil.compareLT(j,n2); (function($this) { var $_u34 = j; j = fan.sys.Int.increment(j); return $_u34; })(this))
    {
      b.set(i,j,this.get(i,fan.sys.Int.plus(j,1)));
    }
    ;
  }
  ;
  for (var i = ai; fan.sys.ObjUtil.compareLT(i,n2); (function($this) { var $_u35 = i; i = fan.sys.Int.increment(i); return $_u35; })(this))
  {
    for (var j = 0; fan.sys.ObjUtil.compareLT(j,aj); (function($this) { var $_u36 = j; j = fan.sys.Int.increment(j); return $_u36; })(this))
    {
      b.set(i,j,this.get(fan.sys.Int.plus(i,1),j));
    }
    ;
  }
  ;
  if (fan.sys.ObjUtil.compareNE(fan.sys.Int.mod(fan.sys.Int.plus(ai,aj),2),0))
  {
    for (var i = 0; fan.sys.ObjUtil.compareLT(i,n2); (function($this) { var $_u37 = i; i = fan.sys.Int.increment(i); return $_u37; })(this))
    {
      b.set(i,0,fan.sys.Float.negate(b.get(i,0)));
    }
    ;
  }
  ;
  return b.determinant();
}
fan.vaseMath.Matrix.prototype.determinant = function()
{
  if (fan.sys.ObjUtil.compareNE(this.m_m,this.m_n))
  {
    throw fan.vaseMath.MatrixErr.make("Dimension don't match");
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_n,1))
  {
    return this.get(0,0);
  }
  ;
  var d = fan.sys.Float.make(0.0);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_n); (function($this) { var $_u38 = i; i = fan.sys.Int.increment(i); return $_u38; })(this))
  {
    d = fan.sys.Float.plus(d,fan.sys.Float.mult(this.get(1,i),this.cofactor(1,i)));
  }
  ;
  return d;
}
fan.vaseMath.Matrix.prototype.adjoint = function()
{
  var c = fan.vaseMath.Matrix.makeZero(this.m_m,this.m_n);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_m); (function($this) { var $_u39 = i; i = fan.sys.Int.increment(i); return $_u39; })(this))
  {
    for (var j = 0; fan.sys.ObjUtil.compareLT(j,this.m_n); (function($this) { var $_u40 = j; j = fan.sys.Int.increment(j); return $_u40; })(this))
    {
      c.set(i,j,this.cofactor(j,i));
    }
    ;
  }
  ;
  return c;
}
fan.vaseMath.Matrix.prototype.m_a = null;
fan.vaseMath.Matrix.prototype.m_m = 0;
fan.vaseMath.Matrix.prototype.m_n = 0;
fan.vaseMath.Matrix.prototype.m_$name = null;
fan.vaseMath.Vector = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseMath.Vector.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseMath.Vector.prototype.$typeof = function() { return fan.vaseMath.Vector.$type; }
fan.vaseMath.Vector.make = function(x,y,z) {
  var self = new fan.vaseMath.Vector();
  fan.vaseMath.Vector.make$(self,x,y,z);
  return self;
  }
fan.vaseMath.Vector.make$ = function(self,x,y,z)
{
  self.m_x = x;
  self.m_y = y;
  self.m_z = z;
  return;
}
fan.vaseMath.Vector.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Vector(",fan.sys.ObjUtil.coerce(this.m_x,fan.sys.Obj.$type.toNullable())),", "),fan.sys.ObjUtil.coerce(this.m_y,fan.sys.Obj.$type.toNullable())),", "),fan.sys.ObjUtil.coerce(this.m_z,fan.sys.Obj.$type.toNullable())),")");
}
fan.vaseMath.Vector.prototype.parallelogramArea = function(v2)
{
  var v1 = this;
  return fan.sys.Float.minus(fan.sys.Float.mult(v1.m_x,v2.m_y),fan.sys.Float.mult(v2.m_x,v1.m_y));
}
fan.vaseMath.Vector.prototype.plus = function(v2)
{
  var x = fan.sys.Float.plus(this.m_x,v2.m_x);
  var y = fan.sys.Float.plus(this.m_y,v2.m_y);
  var z = fan.sys.Float.plus(this.m_z,v2.m_z);
  return fan.vaseMath.Vector.make(x,y,z);
}
fan.vaseMath.Vector.prototype.minus = function(v2)
{
  var x = fan.sys.Float.minus(this.m_x,v2.m_x);
  var y = fan.sys.Float.minus(this.m_y,v2.m_y);
  var z = fan.sys.Float.minus(this.m_z,v2.m_z);
  return fan.vaseMath.Vector.make(x,y,z);
}
fan.vaseMath.Vector.prototype.multFloat = function(n)
{
  var x = fan.sys.Float.mult(n,this.m_x);
  var y = fan.sys.Float.mult(n,this.m_y);
  var z = fan.sys.Float.mult(n,this.m_z);
  return fan.vaseMath.Vector.make(x,y,z);
}
fan.vaseMath.Vector.prototype.crossProduct = function(v2)
{
  var x = fan.sys.Float.minus(fan.sys.Float.mult(this.m_y,v2.m_z),fan.sys.Float.mult(v2.m_y,this.m_z));
  var y = fan.sys.Float.minus(fan.sys.Float.mult(this.m_z,v2.m_x),fan.sys.Float.mult(this.m_x,v2.m_z));
  var z = fan.sys.Float.minus(fan.sys.Float.mult(this.m_x,v2.m_y),fan.sys.Float.mult(v2.m_x,this.m_y));
  return fan.vaseMath.Vector.make(x,y,z);
}
fan.vaseMath.Vector.prototype.dotProduct = function(v2)
{
  var x = fan.sys.Float.mult(this.m_x,v2.m_x);
  var y = fan.sys.Float.mult(this.m_y,v2.m_y);
  var z = fan.sys.Float.mult(this.m_z,v2.m_z);
  return fan.sys.Float.plus(fan.sys.Float.plus(x,y),z);
}
fan.vaseMath.Vector.prototype.length = function()
{
  return fan.std.Math.sqrt(fan.sys.Float.plus(fan.sys.Float.plus(fan.sys.Float.mult(this.m_x,this.m_x),fan.sys.Float.mult(this.m_y,this.m_y)),fan.sys.Float.mult(this.m_z,this.m_z)));
}
fan.vaseMath.Vector.prototype.normalize = function()
{
  var x = fan.sys.Float.div(this.m_x,this.length());
  var y = fan.sys.Float.div(this.m_y,this.length());
  var z = fan.sys.Float.div(this.m_z,this.length());
  return fan.vaseMath.Vector.make(x,y,z);
}
fan.vaseMath.Vector.prototype.m_x = fan.sys.Float.make(0);
fan.vaseMath.Vector.prototype.m_y = fan.sys.Float.make(0);
fan.vaseMath.Vector.prototype.m_z = fan.sys.Float.make(0);
fan.vaseMath.Transform3D = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseMath.Transform3D.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_matrix = fan.vaseMath.Matrix.makeIndentity(4);
  return;
}
fan.vaseMath.Transform3D.prototype.$typeof = function() { return fan.vaseMath.Transform3D.$type; }
fan.vaseMath.Transform3D.prototype.matrix = function()
{
  return this.m_matrix;
}
fan.vaseMath.Transform3D.prototype.matrix$ = function(it)
{
  this.m_matrix = it;
  return;
}
fan.vaseMath.Transform3D.prototype.get = function(x,y)
{
  return this.m_matrix.get(x,y);
}
fan.vaseMath.Transform3D.prototype.set = function(x,y,val)
{
  this.m_matrix.set(x,y,val);
  return;
}
fan.vaseMath.Transform3D.prototype.clone = function()
{
  var $this = this;
  return fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseMath.Transform3D.make(),fan.sys.Func.make$closure(
    fan.vaseMath.$clos$_u41,
    function(it)
    {
      it.m_matrix = $this.m_matrix.clone();
      return;
    })),fan.vaseMath.Transform3D.$type);
}
fan.vaseMath.Transform3D.prototype.mult = function(t)
{
  this.m_matrix = this.m_matrix.multMatrix(t.m_matrix);
  return this;
}
fan.vaseMath.Transform3D.prototype.translate = function(x,y,z)
{
  this.m_matrix = this.m_matrix.multMatrix(fan.vaseMath.Transform3D.makeTranslate(x,y,z));
  return this;
}
fan.vaseMath.Transform3D.prototype.scale = function(x,y,z)
{
  this.m_matrix = this.m_matrix.multMatrix(fan.vaseMath.Transform3D.makeScale(x,y,z));
  return this;
}
fan.vaseMath.Transform3D.prototype.rotate = function(theta,x,y,z)
{
  this.m_matrix = this.m_matrix.multMatrix(fan.vaseMath.Transform3D.makeRotate(fan.sys.Float.div(fan.sys.Float.mult(theta,((fan.sys.Float.static$init ? fan.sys.Float.static$init() : null),fan.sys.Float.m_pi)),fan.sys.Float.make(180.0)),x,y,z));
  return this;
}
fan.vaseMath.Transform3D.makeTranslate = function(x,y,z)
{
  var m = fan.vaseMath.Matrix.makeIndentity(4);
  m.set(0,3,x);
  m.set(1,3,y);
  m.set(2,3,z);
  return m;
}
fan.vaseMath.Transform3D.makeScale = function(x,y,z)
{
  var m = fan.vaseMath.Matrix.makeZero(4,4);
  m.set(0,0,x);
  m.set(1,1,y);
  m.set(2,2,z);
  m.set(3,3,fan.sys.Float.make(1.0));
  return m;
}
fan.vaseMath.Transform3D.makeFrustum = function(left,right,bottom,top,znear,zfar)
{
  var X = fan.sys.Float.div(fan.sys.Int.multFloat(2,znear),fan.sys.Float.minus(right,left));
  var Y = fan.sys.Float.div(fan.sys.Int.multFloat(2,znear),fan.sys.Float.minus(top,bottom));
  var A = fan.sys.Float.div(fan.sys.Float.plus(right,left),fan.sys.Float.minus(right,left));
  var B = fan.sys.Float.div(fan.sys.Float.plus(top,bottom),fan.sys.Float.minus(top,bottom));
  var C = fan.sys.Float.div(fan.sys.Float.negate(fan.sys.Float.plus(zfar,znear)),fan.sys.Float.minus(zfar,znear));
  var D = fan.sys.Float.div(fan.sys.Float.mult(fan.sys.Int.multFloat(-2,zfar),znear),fan.sys.Float.minus(zfar,znear));
  return fan.vaseMath.Matrix.make(fan.sys.List.make(fan.std.Type.find("sys::List<sys::Float>"), [fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(X,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(A,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable())]),fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(Y,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(B,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable())]),fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(C,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(D,fan.sys.Obj.$type.toNullable())]),fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(-1.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable())])]));
}
fan.vaseMath.Transform3D.makePerspective = function(fovy,aspect,znear,zfar)
{
  var ymax = fan.sys.Float.mult(znear,fan.std.Math.tan(fan.sys.Float.div(fan.sys.Float.mult(fovy,((fan.sys.Float.static$init ? fan.sys.Float.static$init() : null),fan.sys.Float.m_pi)),fan.sys.Float.make(360.0))));
  var ymin = fan.sys.Float.negate(ymax);
  var xmin = fan.sys.Float.mult(ymin,aspect);
  var xmax = fan.sys.Float.mult(ymax,aspect);
  return fan.vaseMath.Transform3D.makeFrustum(xmin,xmax,ymin,ymax,znear,zfar);
}
fan.vaseMath.Transform3D.makeOrtho = function(left,right,bottom,top,znear,zfar)
{
  var tx = fan.sys.Float.div(fan.sys.Float.negate(fan.sys.Float.plus(right,left)),fan.sys.Float.minus(right,left));
  var ty = fan.sys.Float.div(fan.sys.Float.negate(fan.sys.Float.plus(top,bottom)),fan.sys.Float.minus(top,bottom));
  var tz = fan.sys.Float.div(fan.sys.Float.negate(fan.sys.Float.plus(zfar,znear)),fan.sys.Float.minus(zfar,znear));
  var a = fan.sys.Int.divFloat(2,fan.sys.Float.minus(right,left));
  var b = fan.sys.Int.divFloat(2,fan.sys.Float.minus(top,bottom));
  var c = fan.sys.Int.divFloat(-2,fan.sys.Float.minus(zfar,znear));
  return fan.vaseMath.Matrix.make(fan.sys.List.make(fan.std.Type.find("sys::List<sys::Float>"), [fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(a,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(tx,fan.sys.Obj.$type.toNullable())]),fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(b,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(ty,fan.sys.Obj.$type.toNullable())]),fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(c,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(tz,fan.sys.Obj.$type.toNullable())]),fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(1.0),fan.sys.Obj.$type.toNullable())])]));
}
fan.vaseMath.Transform3D.makeLookAt = function(ex,ey,ez,cx,cy,cz,ux,uy,uz)
{
  var eye = fan.vaseMath.Vector.make(ex,ey,ez);
  var center = fan.vaseMath.Vector.make(cx,cy,cz);
  var up = fan.vaseMath.Vector.make(ux,uy,uz);
  var z = eye.minus(center).normalize();
  var x = up.crossProduct(z).normalize();
  var y = z.crossProduct(x).normalize();
  var m = fan.vaseMath.Matrix.make(fan.sys.List.make(fan.std.Type.find("sys::List<sys::Float>"), [fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(x.m_x,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(y.m_x,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(z.m_x,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable())]),fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(x.m_y,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(y.m_y,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(z.m_y,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable())]),fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(x.m_z,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(y.m_z,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(z.m_z,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable())]),fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(1.0),fan.sys.Obj.$type.toNullable())])]));
  return m;
}
fan.vaseMath.Transform3D.makeRotate = function(theta,x,y,z)
{
  var s = fan.std.Math.sin(theta);
  var c = fan.std.Math.cos(theta);
  var nc = fan.sys.Int.minusFloat(1,c);
  var v = fan.vaseMath.Vector.make(x,y,z);
  var nv = v.normalize();
  var vx = nv.m_x;
  var vy = nv.m_y;
  var vz = nv.m_z;
  var m = fan.vaseMath.Matrix.make(fan.sys.List.make(fan.std.Type.find("sys::List<sys::Float>"), [fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(fan.sys.Float.plus(fan.sys.Float.mult(fan.sys.Float.mult(vx,vx),nc),c),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.minus(fan.sys.Float.mult(fan.sys.Float.mult(vx,vy),nc),fan.sys.Float.mult(vz,s)),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.plus(fan.sys.Float.mult(fan.sys.Float.mult(vx,vz),nc),fan.sys.Float.mult(vy,s)),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable())]),fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(fan.sys.Float.plus(fan.sys.Float.mult(fan.sys.Float.mult(vy,vx),nc),fan.sys.Float.mult(vz,s)),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.plus(fan.sys.Float.mult(fan.sys.Float.mult(vy,vy),nc),c),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.minus(fan.sys.Float.mult(fan.sys.Float.mult(vy,vz),nc),fan.sys.Float.mult(vx,s)),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable())]),fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(fan.sys.Float.minus(fan.sys.Float.mult(fan.sys.Float.mult(vx,vz),nc),fan.sys.Float.mult(vy,s)),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.plus(fan.sys.Float.mult(fan.sys.Float.mult(vy,vz),nc),fan.sys.Float.mult(vx,s)),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.plus(fan.sys.Float.mult(fan.sys.Float.mult(vz,vz),nc),c),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable())]),fan.sys.List.make(fan.sys.Float.$type, [fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(0.0),fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.make(1.0),fan.sys.Obj.$type.toNullable())])]));
  return m;
}
fan.vaseMath.Transform3D.make = function() {
  var self = new fan.vaseMath.Transform3D();
  fan.vaseMath.Transform3D.make$(self);
  return self;
  }
fan.vaseMath.Transform3D.make$ = function(self)
{
  ;
  return;
}
fan.vaseMath.Transform3D.prototype.m_matrix = null;
fan.vaseMath.initReflect$ = function() {
  fan.vaseMath.$pod = fan.std.Pod.$add('vaseMath');
  with (fan.vaseMath.$pod)
  {
    fan.vaseMath.Transform2D.$type = $at('Transform2D','sys::Obj',[],{'sys::Js':""},8192);
    fan.vaseMath.MatrixErr.$type = $at('MatrixErr','sys::Err',[],{'sys::Js':""},8194);
    fan.vaseMath.Matrix.$type = $at('Matrix','sys::Obj',[],{'sys::Js':""},270336);
    fan.vaseMath.Vector.$type = $at('Vector','sys::Obj',[],{'sys::Js':""},270338);
    fan.vaseMath.Transform3D.$type = $at('Transform3D','sys::Obj',[],{'sys::Js':""},8192);
    fan.vaseMath.Transform2D.$type.$af('matrix',73728,'vaseMath::Matrix',{}).$am('get',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false)], fan.std.Param.$type),{}).$am('set',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('val','sys::Float',false)], fan.std.Param.$type),{}).$am('clone',8192,'vaseMath::Transform2D',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('mult',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('t','vaseMath::Transform2D',false)], fan.std.Param.$type),{}).$am('translate',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('tx','sys::Float',false),new fan.std.Param('ty','sys::Float',false)], fan.std.Param.$type),{}).$am('scale',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x0','sys::Float',false),new fan.std.Param('y0','sys::Float',false),new fan.std.Param('sx','sys::Float',false),new fan.std.Param('sy','sys::Float',false)], fan.std.Param.$type),{}).$am('symmetry',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('a','sys::Float',false),new fan.std.Param('b','sys::Float',false),new fan.std.Param('d','sys::Float',false),new fan.std.Param('e','sys::Float',false)], fan.std.Param.$type),{}).$am('rotate',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Float',false),new fan.std.Param('y','sys::Float',false),new fan.std.Param('thta','sys::Float',false)], fan.std.Param.$type),{}).$am('shear',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false),new fan.std.Param('d','sys::Float',false)], fan.std.Param.$type),{}).$am('transform',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('xy','sys::List<sys::Float>',false)], fan.std.Param.$type),{}).$am('makeTranslate',40962,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('tx','sys::Float',false),new fan.std.Param('ty','sys::Float',false)], fan.std.Param.$type),{}).$am('makeScale',40962,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('x0','sys::Float',false),new fan.std.Param('y0','sys::Float',false),new fan.std.Param('sx','sys::Float',false),new fan.std.Param('sy','sys::Float',false)], fan.std.Param.$type),{}).$am('makeSymmetry',40962,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('a','sys::Float',false),new fan.std.Param('b','sys::Float',false),new fan.std.Param('d','sys::Float',false),new fan.std.Param('e','sys::Float',false)], fan.std.Param.$type),{}).$am('makeRotate',40962,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Float',false),new fan.std.Param('y','sys::Float',false),new fan.std.Param('thta','sys::Float',false)], fan.std.Param.$type),{}).$am('makeShear',40962,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('b','sys::Float',false),new fan.std.Param('d','sys::Float',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseMath.MatrixErr.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',false)], fan.std.Param.$type),{});
    fan.vaseMath.Matrix.$type.$af('a',67584,'util::FloatArray',{}).$af('m',73728,'sys::Int',{}).$af('n',73728,'sys::Int',{}).$af('name',73728,'sys::Str?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('list','sys::List<sys::List<sys::Float>>',false)], fan.std.Param.$type),{}).$am('makeZero',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('am','sys::Int',false),new fan.std.Param('an','sys::Int',false)], fan.std.Param.$type),{}).$am('set',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Int',false),new fan.std.Param('c','sys::Int',false),new fan.std.Param('value','sys::Float',false)], fan.std.Param.$type),{}).$am('get',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Int',false),new fan.std.Param('c','sys::Int',false)], fan.std.Param.$type),{}).$am('flatten',8192,'util::FloatArray',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('clone',8192,'vaseMath::Matrix',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('makeIndentity',40962,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Int',false)], fan.std.Param.$type),{}).$am('approx',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('other','vaseMath::Matrix',false),new fan.std.Param('tolerance','sys::Float?',true)], fan.std.Param.$type),{}).$am('approxFloatArray',2048,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('a','util::FloatArray',false),new fan.std.Param('b','util::FloatArray',false),new fan.std.Param('tolerance','sys::Float?',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('transpose',8192,'vaseMath::Matrix',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('plus',8192,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('b','vaseMath::Matrix',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('multFloat',8192,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('k','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('multMatrix',8192,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('b','vaseMath::Matrix',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('invert',8192,'vaseMath::Matrix',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('invertByAdjoint',8192,'vaseMath::Matrix',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('cofactor',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('ai','sys::Int',false),new fan.std.Param('aj','sys::Int',false)], fan.std.Param.$type),{}).$am('determinant',8192,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('adjoint',8192,'vaseMath::Matrix',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseMath.Vector.$type.$af('x',73730,'sys::Float',{}).$af('y',73730,'sys::Float',{}).$af('z',73730,'sys::Float',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Float',false),new fan.std.Param('y','sys::Float',false),new fan.std.Param('z','sys::Float',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('parallelogramArea',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('v2','vaseMath::Vector',false)], fan.std.Param.$type),{}).$am('plus',8192,'vaseMath::Vector',fan.sys.List.makeFromJs([new fan.std.Param('v2','vaseMath::Vector',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('minus',8192,'vaseMath::Vector',fan.sys.List.makeFromJs([new fan.std.Param('v2','vaseMath::Vector',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('multFloat',8192,'vaseMath::Vector',fan.sys.List.makeFromJs([new fan.std.Param('n','sys::Float',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('crossProduct',8192,'vaseMath::Vector',fan.sys.List.makeFromJs([new fan.std.Param('v2','vaseMath::Vector',false)], fan.std.Param.$type),{}).$am('dotProduct',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('v2','vaseMath::Vector',false)], fan.std.Param.$type),{}).$am('length',8192,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('normalize',8192,'vaseMath::Vector',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseMath.Transform3D.$type.$af('matrix',73728,'vaseMath::Matrix',{}).$am('get',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false)], fan.std.Param.$type),{}).$am('set',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('val','sys::Float',false)], fan.std.Param.$type),{}).$am('clone',8192,'vaseMath::Transform3D',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('mult',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('t','vaseMath::Transform2D',false)], fan.std.Param.$type),{}).$am('translate',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Float',false),new fan.std.Param('y','sys::Float',false),new fan.std.Param('z','sys::Float',false)], fan.std.Param.$type),{}).$am('scale',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Float',false),new fan.std.Param('y','sys::Float',false),new fan.std.Param('z','sys::Float',false)], fan.std.Param.$type),{}).$am('rotate',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('theta','sys::Float',false),new fan.std.Param('x','sys::Float',false),new fan.std.Param('y','sys::Float',false),new fan.std.Param('z','sys::Float',false)], fan.std.Param.$type),{}).$am('makeTranslate',40962,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Float',false),new fan.std.Param('y','sys::Float',false),new fan.std.Param('z','sys::Float',false)], fan.std.Param.$type),{}).$am('makeScale',40962,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Float',false),new fan.std.Param('y','sys::Float',false),new fan.std.Param('z','sys::Float',false)], fan.std.Param.$type),{}).$am('makeFrustum',40962,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('left','sys::Float',false),new fan.std.Param('right','sys::Float',false),new fan.std.Param('bottom','sys::Float',false),new fan.std.Param('top','sys::Float',false),new fan.std.Param('znear','sys::Float',false),new fan.std.Param('zfar','sys::Float',false)], fan.std.Param.$type),{}).$am('makePerspective',40962,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('fovy','sys::Float',false),new fan.std.Param('aspect','sys::Float',false),new fan.std.Param('znear','sys::Float',false),new fan.std.Param('zfar','sys::Float',false)], fan.std.Param.$type),{}).$am('makeOrtho',40962,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('left','sys::Float',false),new fan.std.Param('right','sys::Float',false),new fan.std.Param('bottom','sys::Float',false),new fan.std.Param('top','sys::Float',false),new fan.std.Param('znear','sys::Float',false),new fan.std.Param('zfar','sys::Float',false)], fan.std.Param.$type),{}).$am('makeLookAt',40962,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('ex','sys::Float',false),new fan.std.Param('ey','sys::Float',false),new fan.std.Param('ez','sys::Float',false),new fan.std.Param('cx','sys::Float',false),new fan.std.Param('cy','sys::Float',false),new fan.std.Param('cz','sys::Float',false),new fan.std.Param('ux','sys::Float',false),new fan.std.Param('uy','sys::Float',false),new fan.std.Param('uz','sys::Float',false)], fan.std.Param.$type),{}).$am('makeRotate',40962,'vaseMath::Matrix',fan.sys.List.makeFromJs([new fan.std.Param('theta','sys::Float',false),new fan.std.Param('x','sys::Float',false),new fan.std.Param('y','sys::Float',false),new fan.std.Param('z','sys::Float',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    m_meta = {};
    m_meta["pod.name"] = "vaseMath";
    m_meta["pod.version"] = "1.0.73";
    m_meta["pod.depends"] = "sys 2.0;std 1.0;util 1.0";
    m_meta["pod.summary"] = "math lib for 3d transformation";
    m_meta["pod.isScript"] = "false";
    m_meta["fcode.version"] = "1.1.3";
    m_meta["build.host"] = "mywifi.local";
    m_meta["build.user"] = "yangjiandong";
    m_meta["build.ts"] = "2020-04-13T19:26:45.000+08:00 Asia/Harbin";
    m_meta["build.tsKey"] = "200413192645";
    m_meta["build.compiler"] = "1.1";
    m_meta["build.platform"] = "macosx-x86_64";
    m_meta["pod.docApi"] = "true";
    m_meta["pod.docSrc"] = "false";
    m_meta["pod.native.java"] = "false";
    m_meta["pod.native.jni"] = "false";
    m_meta["pod.native.dotnet"] = "false";
    m_meta["pod.native.js"] = "false";
  }
  fan.vaseMath.$clos$_u0 = new fan.sys.ClosureFuncSpec$("vaseMath::$clos$_u0",fan.sys.Void.$type,["it","vaseMath::Transform2D","false"]);
  fan.vaseMath.$clos$_u41 = new fan.sys.ClosureFuncSpec$("vaseMath::$clos$_u41",fan.sys.Void.$type,["it","vaseMath::Transform3D","false"]);
}
fan.vaseMath.initStatic$ = function() {
}
fan.vaseMath.initReflect$();
fan.vaseMath.initStatic$();
}).call(this);

(function () {
var root=this;
var fan=root.fan;
if (fan === undefined) {
   if (typeof exports !== 'undefined') {
     fan = exports;
   } else {
     fan = root.fan = {};
   }
}
if (!fan.sys && (typeof require !== 'undefined')) fan = require('sys.js');

if (typeof exports !== 'undefined') {
  fan.vaseGraphics = exports;
} else {
  fan.vaseGraphics = root.fan.vaseGraphics = {};
}

fan.vaseGraphics.Brush = function() {}
fan.vaseGraphics.Brush.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.Brush.prototype.$typeof = function() { return fan.vaseGraphics.Brush.$type; }
fan.vaseGraphics.Color = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.Color.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.Color.prototype.$typeof = function() { return fan.vaseGraphics.Color.$type; }
fan.vaseGraphics.Color.make = function(argb,hasAlpha) {
  var self = new fan.vaseGraphics.Color();
  fan.vaseGraphics.Color.make$(self,argb,hasAlpha);
  return self;
  }
fan.vaseGraphics.Color.make$ = function(self,argb,hasAlpha)
{
  if (argb === undefined) argb = 0;
  if (hasAlpha === undefined) hasAlpha = false;
  if (!hasAlpha)
  {
    argb = fan.sys.Int.or(argb,4278190080);
  }
  ;
  self.m_argb = argb;
  return;
}
fan.vaseGraphics.Color.makeArgb = function(a,r,g,b)
{
  return fan.vaseGraphics.Color.make(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.shiftl(fan.sys.Int.and(a,255),24),fan.sys.Int.shiftl(fan.sys.Int.and(r,255),16)),fan.sys.Int.shiftl(fan.sys.Int.and(g,255),8)),fan.sys.Int.and(b,255)),true);
}
fan.vaseGraphics.Color.fromArgb = function(a,r,g,b)
{
  return fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.shiftl(fan.sys.Int.and(a,255),24),fan.sys.Int.shiftl(fan.sys.Int.and(r,255),16)),fan.sys.Int.shiftl(fan.sys.Int.and(g,255),8)),fan.sys.Int.and(b,255));
}
fan.vaseGraphics.Color.makeRgb = function(r,g,b)
{
  return fan.vaseGraphics.Color.make(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.shiftl(fan.sys.Int.and(r,255),16),fan.sys.Int.shiftl(fan.sys.Int.and(g,255),8)),fan.sys.Int.and(b,255)),false);
}
fan.vaseGraphics.Color.makeHsv = function(h,s,v)
{
  var r = v;
  var g = v;
  var b = v;
  if (fan.sys.ObjUtil.compareNE(s,fan.sys.Float.make(0.0)))
  {
    if (fan.sys.ObjUtil.equals(h,fan.sys.Float.make(360.0)))
    {
      h = fan.sys.Float.make(0.0);
    }
    ;
    h = fan.sys.Float.div(h,fan.sys.Float.make(60.0));
    var i = fan.std.Math.floor(h);
    var f = fan.sys.Float.minus(h,i);
    var p = fan.sys.Float.mult(v,fan.sys.Float.minus(fan.sys.Float.make(1.0),s));
    var q = fan.sys.Float.mult(v,fan.sys.Float.minus(fan.sys.Float.make(1.0),fan.sys.Float.mult(s,f)));
    var t = fan.sys.Float.mult(v,fan.sys.Float.minus(fan.sys.Float.make(1.0),fan.sys.Float.mult(s,fan.sys.Float.minus(fan.sys.Float.make(1.0),f))));
    var $_u8 = fan.sys.Float.toInt(i);
    if (fan.sys.ObjUtil.equals($_u8,0))
    {
      r = v;
      g = t;
      b = p;
    }
    else if (fan.sys.ObjUtil.equals($_u8,1))
    {
      r = q;
      g = v;
      b = p;
    }
    else if (fan.sys.ObjUtil.equals($_u8,2))
    {
      r = p;
      g = v;
      b = t;
    }
    else if (fan.sys.ObjUtil.equals($_u8,3))
    {
      r = p;
      g = q;
      b = v;
    }
    else if (fan.sys.ObjUtil.equals($_u8,4))
    {
      r = t;
      g = p;
      b = v;
    }
    else if (fan.sys.ObjUtil.equals($_u8,5))
    {
      r = v;
      g = p;
      b = q;
    }
    ;
  }
  ;
  return fan.vaseGraphics.Color.make(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.shiftl(fan.sys.Float.toInt(fan.sys.Float.mult(r,fan.sys.Float.make(255.0))),16),fan.sys.Int.shiftl(fan.sys.Float.toInt(fan.sys.Float.mult(g,fan.sys.Float.make(255.0))),8)),fan.sys.Float.toInt(fan.sys.Float.mult(b,fan.sys.Float.make(255.0)))),false);
}
fan.vaseGraphics.Color.fromStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  try
  {
    if (!fan.sys.Str.startsWith(s,"#"))
    {
      throw fan.sys.Err.make();
    }
    ;
    var sub = fan.sys.Str.getRange(s,fan.sys.Range.make(1,-1));
    var hex = fan.sys.Str.toInt(sub,16);
    var $_u9 = fan.sys.Str.size(sub);
    if (fan.sys.ObjUtil.equals($_u9,3))
    {
      var r = fan.sys.Int.and(fan.sys.Int.shiftr(hex,8),15);
      r = fan.sys.Int.or(fan.sys.Int.shiftl(r,4),r);
      var g = fan.sys.Int.and(fan.sys.Int.shiftr(hex,4),15);
      g = fan.sys.Int.or(fan.sys.Int.shiftl(g,4),g);
      var b = fan.sys.Int.and(fan.sys.Int.shiftr(hex,0),15);
      b = fan.sys.Int.or(fan.sys.Int.shiftl(b,4),b);
      return fan.vaseGraphics.Color.make(fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.shiftl(r,16),fan.sys.Int.shiftl(g,8)),b));
    }
    else if (fan.sys.ObjUtil.equals($_u9,6))
    {
      return fan.vaseGraphics.Color.make(hex,false);
    }
    else if (fan.sys.ObjUtil.equals($_u9,8))
    {
      return fan.vaseGraphics.Color.make(hex,true);
    }
    else
    {
      throw fan.sys.Err.make();
    }
    ;
  }
  catch ($_u10)
  {
  }
  ;
  if (checked)
  {
    throw fan.sys.ParseErr.make(fan.sys.Str.plus("Invalid Color: ",s));
  }
  ;
  return null;
}
fan.vaseGraphics.Color.getA = function(argb)
{
  return fan.sys.Int.and(fan.sys.Int.shiftr(argb,24),255);
}
fan.vaseGraphics.Color.getR = function(argb)
{
  return fan.sys.Int.and(fan.sys.Int.shiftr(argb,16),255);
}
fan.vaseGraphics.Color.getG = function(argb)
{
  return fan.sys.Int.and(fan.sys.Int.shiftr(argb,8),255);
}
fan.vaseGraphics.Color.getB = function(argb)
{
  return fan.sys.Int.and(argb,255);
}
fan.vaseGraphics.Color.prototype.rgb = function()
{
  return fan.sys.Int.and(this.m_argb,16777215);
}
fan.vaseGraphics.Color.prototype.a = function()
{
  return fan.sys.Int.and(fan.sys.Int.shiftr(this.m_argb,24),255);
}
fan.vaseGraphics.Color.prototype.r = function()
{
  return fan.sys.Int.and(fan.sys.Int.shiftr(this.m_argb,16),255);
}
fan.vaseGraphics.Color.prototype.g = function()
{
  return fan.sys.Int.and(fan.sys.Int.shiftr(this.m_argb,8),255);
}
fan.vaseGraphics.Color.prototype.b = function()
{
  return fan.sys.Int.and(this.m_argb,255);
}
fan.vaseGraphics.Color.prototype.h = function()
{
  var r = fan.sys.Int.toFloat(this.r());
  var b = fan.sys.Int.toFloat(this.b());
  var g = fan.sys.Int.toFloat(this.g());
  var min = fan.std.Math.min(r,fan.std.Math.min(b,g));
  var max = fan.std.Math.max(r,fan.std.Math.max(b,g));
  var delta = fan.sys.Float.minus(max,min);
  var s = (function($this) { if (fan.sys.ObjUtil.equals(max,fan.sys.Float.make(0.0))) return fan.sys.Float.make(0.0); return fan.sys.Float.div(delta,max); })(this);
  var h = fan.sys.Float.make(0.0);
  if (fan.sys.ObjUtil.compareNE(s,fan.sys.Float.make(0.0)))
  {
    if (fan.sys.ObjUtil.equals(r,max))
    {
      h = fan.sys.Float.div(fan.sys.Float.minus(g,b),delta);
    }
    else
    {
      if (fan.sys.ObjUtil.equals(g,max))
      {
        h = fan.sys.Float.plus(fan.sys.Float.make(2.0),fan.sys.Float.div(fan.sys.Float.minus(b,r),delta));
      }
      else
      {
        if (fan.sys.ObjUtil.equals(b,max))
        {
          h = fan.sys.Float.plus(fan.sys.Float.make(4.0),fan.sys.Float.div(fan.sys.Float.minus(r,g),delta));
        }
        ;
      }
      ;
    }
    ;
    h = fan.sys.Float.mult(h,fan.sys.Float.make(60.0));
    if (fan.sys.ObjUtil.compareLT(h,fan.sys.Float.make(0.0)))
    {
      h = fan.sys.Float.plus(h,fan.sys.Float.make(360.0));
    }
    ;
  }
  ;
  return h;
}
fan.vaseGraphics.Color.prototype.s = function()
{
  var min = fan.sys.Int.toFloat(fan.sys.Int.min(this.r(),fan.sys.Int.min(this.b(),this.g())));
  var max = fan.sys.Int.toFloat(fan.sys.Int.max(this.r(),fan.sys.Int.max(this.b(),this.g())));
  return (function($this) { if (fan.sys.ObjUtil.equals(max,fan.sys.Float.make(0.0))) return fan.sys.Float.make(0.0); return fan.sys.Float.div(fan.sys.Float.minus(max,min),max); })(this);
}
fan.vaseGraphics.Color.prototype.v = function()
{
  return fan.sys.Float.div(fan.sys.Int.toFloat(fan.sys.Int.max(this.r(),fan.sys.Int.max(this.b(),this.g()))),fan.sys.Float.make(255.0));
}
fan.vaseGraphics.Color.prototype.hash = function()
{
  return this.m_argb;
}
fan.vaseGraphics.Color.prototype.equals = function(that)
{
  var x = fan.sys.ObjUtil.as(that,fan.vaseGraphics.Color.$type);
  return (function($this) { if (x == null) return false; return fan.sys.ObjUtil.equals(x.m_argb,$this.m_argb); })(this);
}
fan.vaseGraphics.Color.prototype.toStr = function()
{
  if (fan.sys.ObjUtil.equals(this.a(),255))
  {
    return fan.sys.Str.plus("#",fan.sys.Int.toHex(this.rgb(),6));
  }
  else
  {
    return fan.sys.Str.plus("#",fan.sys.Int.toHex(this.m_argb,8));
  }
  ;
}
fan.vaseGraphics.Color.prototype.toCss = function()
{
  if (fan.sys.ObjUtil.equals(this.a(),255))
  {
    return fan.sys.Str.plus("#",fan.sys.Int.toHex(this.rgb(),6));
  }
  ;
  var alphaVal = fan.sys.Int.div(fan.sys.Int.mult(this.a(),100),255);
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("rgba(",fan.sys.ObjUtil.coerce(this.r(),fan.sys.Obj.$type.toNullable())),","),fan.sys.ObjUtil.coerce(this.g(),fan.sys.Obj.$type.toNullable())),","),fan.sys.ObjUtil.coerce(this.b(),fan.sys.Obj.$type.toNullable())),",0."),fan.sys.ObjUtil.coerce(alphaVal,fan.sys.Obj.$type.toNullable())),")");
}
fan.vaseGraphics.Color.prototype.lighter = function(percentage)
{
  if (percentage === undefined) percentage = fan.sys.Float.make(0.2);
  var v = fan.std.Math.min(fan.std.Math.max(fan.sys.Float.plus(this.v(),percentage),fan.sys.Float.make(0.0)),fan.sys.Float.make(1.0));
  return fan.vaseGraphics.Color.makeHsv(this.h(),this.s(),v);
}
fan.vaseGraphics.Color.prototype.darker = function(percentage)
{
  if (percentage === undefined) percentage = fan.sys.Float.make(0.2);
  return this.lighter(fan.sys.Float.negate(percentage));
}
fan.vaseGraphics.Color.static$init = function()
{
  if (fan.vaseGraphics.Color.static$inited) return;
  fan.vaseGraphics.Color.static$inited = true;
  fan.vaseGraphics.Color.m_black = fan.vaseGraphics.Color.make(0);
  fan.vaseGraphics.Color.m_white = fan.vaseGraphics.Color.make(16777215);
  fan.vaseGraphics.Color.m_red = fan.vaseGraphics.Color.make(16711680);
  fan.vaseGraphics.Color.m_green = fan.vaseGraphics.Color.make(65280);
  fan.vaseGraphics.Color.m_blue = fan.vaseGraphics.Color.make(255);
  fan.vaseGraphics.Color.m_gray = fan.vaseGraphics.Color.make(8421504);
  fan.vaseGraphics.Color.m_darkGray = fan.vaseGraphics.Color.make(11119017);
  fan.vaseGraphics.Color.m_yellow = fan.vaseGraphics.Color.make(16776960);
  fan.vaseGraphics.Color.m_orange = fan.vaseGraphics.Color.make(16753920);
  fan.vaseGraphics.Color.m_purple = fan.vaseGraphics.Color.make(8388736);
  return;
}
fan.vaseGraphics.Color.m_black = null;
fan.vaseGraphics.Color.m_white = null;
fan.vaseGraphics.Color.m_red = null;
fan.vaseGraphics.Color.m_green = null;
fan.vaseGraphics.Color.m_blue = null;
fan.vaseGraphics.Color.m_gray = null;
fan.vaseGraphics.Color.m_darkGray = null;
fan.vaseGraphics.Color.m_yellow = null;
fan.vaseGraphics.Color.m_orange = null;
fan.vaseGraphics.Color.m_purple = null;
fan.vaseGraphics.Color.prototype.m_argb = 0;
fan.vaseGraphics.Font = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.Font.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_$name = "Serif";
  this.m_size = 11;
  return;
}
fan.vaseGraphics.Font.prototype.$typeof = function() { return fan.vaseGraphics.Font.$type; }
fan.vaseGraphics.Font.privateMake = function(f) {
  var self = new fan.vaseGraphics.Font();
  fan.vaseGraphics.Font.privateMake$(self,f);
  return self;
  }
fan.vaseGraphics.Font.privateMake$ = function(self,f)
{
  ;
  f.call(self);
  return;
}
fan.vaseGraphics.Font.make = function(size,$name,bold,italic)
{
  if (size === undefined) size = 12;
  if ($name === undefined) $name = "Arial";
  if (bold === undefined) bold = false;
  if (italic === undefined) italic = false;
  var func = fan.std.Field.makeSetFunc(fan.sys.ObjUtil.coerce(fan.std.Map.fromLiteral([fan.vaseGraphics.Font.$type.slot("name"),fan.vaseGraphics.Font.$type.slot("size"),fan.vaseGraphics.Font.$type.slot("bold"),fan.vaseGraphics.Font.$type.slot("italic")],[$name,fan.sys.ObjUtil.coerce(size,fan.sys.Obj.$type),fan.sys.ObjUtil.coerce(bold,fan.sys.Obj.$type),fan.sys.ObjUtil.coerce(italic,fan.sys.Obj.$type)],fan.std.Type.find("std::Field"),fan.std.Type.find("sys::Obj")),fan.std.Type.find("std::Map<std::Field,sys::Obj?>")));
  var font = fan.vaseGraphics.GfxEnv.cur().makeFont(fan.sys.ObjUtil.coerce(func,fan.std.Type.find("sys::Func<sys::Void,vaseGraphics::Font>")));
  return font;
}
fan.vaseGraphics.Font.fromStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  try
  {
    var $name = null;
    var size = null;
    var bold = false;
    var italic = false;
    var toks = fan.sys.Str.split(s);
    for (var i = 0; fan.sys.ObjUtil.compareLT(i,toks.size()); i = fan.sys.Int.increment(i))
    {
      var tok = toks.get(i);
      if (fan.sys.ObjUtil.equals(tok,"bold"))
      {
        bold = true;
      }
      else
      {
        if (fan.sys.ObjUtil.equals(tok,"italic"))
        {
          italic = true;
        }
        else
        {
          if (size != null)
          {
            $name = (function($this) { if ($name == null) return tok; return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",$name)," "),tok); })(this);
          }
          else
          {
            if (!fan.sys.Str.endsWith(tok,"pt"))
            {
              throw fan.sys.Err.make();
            }
            else
            {
              size = fan.sys.ObjUtil.coerce(fan.sys.Str.toInt(fan.sys.Str.getRange(tok,fan.sys.Range.make(0,-3))),fan.sys.Int.$type.toNullable());
            }
            ;
          }
          ;
        }
        ;
      }
      ;
    }
    ;
    return fan.vaseGraphics.Font.make(fan.sys.Int.toInt(fan.sys.ObjUtil.coerce(size,fan.sys.Int.$type)),fan.sys.ObjUtil.coerce($name,fan.sys.Str.$type),bold,italic);
  }
  catch ($_u15)
  {
  }
  ;
  if (checked)
  {
    throw fan.sys.ParseErr.make(fan.sys.Str.plus("Invalid Font: ",s));
  }
  ;
  return null;
}
fan.vaseGraphics.Font.prototype.hash = function()
{
  var hash = fan.sys.Int.xor(fan.sys.Str.hash(this.m_$name),this.m_size);
  if (this.m_bold)
  {
    hash = fan.sys.Int.mult(hash,73);
  }
  ;
  if (this.m_italic)
  {
    hash = fan.sys.Int.mult(hash,19);
  }
  ;
  return hash;
}
fan.vaseGraphics.Font.prototype.equals = function(that)
{
  var x = fan.sys.ObjUtil.as(that,fan.vaseGraphics.Font.$type);
  if (x == null)
  {
    return false;
  }
  ;
  return (fan.sys.ObjUtil.equals(this.m_$name,x.m_$name) && fan.sys.ObjUtil.equals(this.m_size,x.m_size) && fan.sys.ObjUtil.equals(this.m_bold,x.m_bold) && fan.sys.ObjUtil.equals(this.m_italic,x.m_italic));
}
fan.vaseGraphics.Font.prototype.toStr = function()
{
  var s = fan.sys.StrBuf.make();
  if (this.m_bold)
  {
    s.add("bold");
  }
  ;
  if (this.m_italic)
  {
    if (!s.isEmpty())
    {
      s.add(" ");
    }
    ;
    s.add("italic");
  }
  ;
  if (!s.isEmpty())
  {
    s.add(" ");
  }
  ;
  s.add(fan.sys.ObjUtil.coerce(this.m_size,fan.sys.Obj.$type.toNullable())).add("pt ").add(this.m_$name);
  return s.toStr();
}
fan.vaseGraphics.Font.prototype.toSize = function(size)
{
  if (fan.sys.ObjUtil.equals(this.m_size,size))
  {
    return this;
  }
  ;
  return fan.vaseGraphics.Font.make(size,this.m_$name,this.m_bold,this.m_italic);
}
fan.vaseGraphics.Font.prototype.toPlain = function()
{
  if ((!this.m_bold && !this.m_italic))
  {
    return this;
  }
  ;
  return fan.vaseGraphics.Font.make(this.m_size,this.m_$name,false,false);
}
fan.vaseGraphics.Font.prototype.toBold = function()
{
  if (this.m_bold)
  {
    return this;
  }
  ;
  return fan.vaseGraphics.Font.make(this.m_size,this.m_$name,true,this.m_italic);
}
fan.vaseGraphics.Font.prototype.toItalic = function()
{
  if (this.m_italic)
  {
    return this;
  }
  ;
  return fan.vaseGraphics.Font.make(this.m_size,this.m_$name,this.m_bold,true);
}
fan.vaseGraphics.Font.prototype.m_$name = null;
fan.vaseGraphics.Font.prototype.m_size = 0;
fan.vaseGraphics.Font.prototype.m_bold = false;
fan.vaseGraphics.Font.prototype.m_italic = false;
fan.vaseGraphics.GfxEnv = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.GfxEnv.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.GfxEnv.prototype.$typeof = function() { return fan.vaseGraphics.GfxEnv.$type; }
fan.vaseGraphics.GfxEnv.cur = function(checked)
{
  if (checked === undefined) checked = true;
  var env = fan.sys.ObjUtil.coerce(fan.concurrent.Actor.locals().get("vaseGraphics.env"),fan.vaseGraphics.GfxEnv.$type.toNullable());
  if (env != null)
  {
    return env;
  }
  ;
  fan.std.Pod.find("vaseWindow").type("ToolkitEnv").method("init").call();
  env = fan.sys.ObjUtil.coerce(fan.concurrent.Actor.locals().get("vaseGraphics.env"),fan.vaseGraphics.GfxEnv.$type.toNullable());
  if (env != null)
  {
    return env;
  }
  ;
  if (checked)
  {
    throw fan.sys.Err.make("No vaseGraphics.env is active");
  }
  ;
  return null;
}
fan.vaseGraphics.GfxEnv.make = function() {
  var self = new fan.vaseGraphics.GfxEnv();
  fan.vaseGraphics.GfxEnv.make$(self);
  return self;
  }
fan.vaseGraphics.GfxEnv.make$ = function(self)
{
  return;
}
fan.vaseGraphics.Image = function() {}
fan.vaseGraphics.Image.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.Image.prototype.$typeof = function() { return fan.vaseGraphics.Image.$type; }
fan.vaseGraphics.ConstImage = function() {}
fan.vaseGraphics.ConstImage.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.ConstImage.prototype.$typeof = function() { return fan.vaseGraphics.ConstImage.$type; }
fan.vaseGraphics.ConstImage.make = function(uri)
{
  return fan.vaseGraphics.GfxEnv.cur().makeConstImage(uri);
}
fan.vaseGraphics.BufImage = function() {}
fan.vaseGraphics.BufImage.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.BufImage.prototype.$typeof = function() { return fan.vaseGraphics.BufImage.$type; }
fan.vaseGraphics.BufImage.fromUri = function(uri,onLoad)
{
  return fan.sys.ObjUtil.coerce(fan.vaseGraphics.GfxEnv.cur().fromUri(uri,fan.sys.ObjUtil.coerce(onLoad,fan.std.Type.find("sys::Func<sys::Void,vaseGraphics::Image>"))),fan.vaseGraphics.BufImage.$type);
}
fan.vaseGraphics.BufImage.fromStream = function($in)
{
  return fan.vaseGraphics.GfxEnv.cur().fromStream($in);
}
fan.vaseGraphics.BufImage.make = function(size)
{
  return fan.sys.ObjUtil.coerce(fan.vaseGraphics.GfxEnv.cur().makeImage(size),fan.vaseGraphics.BufImage.$type);
}
fan.vaseGraphics.Shadow = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.Shadow.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.Shadow.prototype.$typeof = function() { return fan.vaseGraphics.Shadow.$type; }
fan.vaseGraphics.Shadow.make = function(f) {
  var self = new fan.vaseGraphics.Shadow();
  fan.vaseGraphics.Shadow.make$(self,f);
  return self;
  }
fan.vaseGraphics.Shadow.make$ = function(self,f)
{
  f.call(self);
  return;
}
fan.vaseGraphics.Shadow.fromStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  var $this = this;
  try
  {
    var toks = fan.sys.Str.split(s);
    return fan.vaseGraphics.Shadow.make(fan.sys.Func.make$closure(
      fan.vaseGraphics.$clos$_u16,
      function(it)
      {
        it.m_blur = fan.sys.Str.toInt(toks.get(0));
        it.m_offsetX = fan.sys.Str.toInt(toks.get(1));
        it.m_offsetY = fan.sys.Str.toInt(toks.get(2));
        it.m_color = fan.sys.ObjUtil.coerce(fan.vaseGraphics.Color.fromStr(fan.sys.Str.toStr(toks.get(3))),fan.vaseGraphics.Color.$type);
        return;
      }));
  }
  catch ($_u17)
  {
  }
  ;
  if (checked)
  {
    throw fan.sys.ParseErr.make(fan.sys.Str.plus("Invalid Shadow: ",s));
  }
  ;
  return null;
}
fan.vaseGraphics.Shadow.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(this.m_blur,fan.sys.Obj.$type.toNullable())),","),fan.sys.ObjUtil.coerce(this.m_offsetX,fan.sys.Obj.$type.toNullable())),","),fan.sys.ObjUtil.coerce(this.m_offsetY,fan.sys.Obj.$type.toNullable())),","),this.m_color);
}
fan.vaseGraphics.Shadow.prototype.hash = function()
{
  var h = fan.sys.Int.xor(fan.sys.Int.xor(fan.sys.Int.xor(this.m_blur,fan.sys.Int.shiftl(this.m_offsetX,16)),fan.sys.Int.shiftl(this.m_offsetY,20)),fan.sys.Int.shiftl(this.m_color.hash(),31));
  return h;
}
fan.vaseGraphics.Shadow.prototype.equals = function(obj)
{
  var that = fan.sys.ObjUtil.as(obj,fan.vaseGraphics.Shadow.$type);
  if (that == null)
  {
    return false;
  }
  ;
  return (fan.sys.ObjUtil.equals(this.m_blur,that.m_blur) && fan.sys.ObjUtil.equals(this.m_offsetX,that.m_offsetX) && fan.sys.ObjUtil.equals(this.m_offsetY,that.m_offsetY) && fan.sys.ObjUtil.equals(this.m_color,that.m_color));
}
fan.vaseGraphics.Shadow.prototype.m_blur = 0;
fan.vaseGraphics.Shadow.prototype.m_offsetX = 0;
fan.vaseGraphics.Shadow.prototype.m_offsetY = 0;
fan.vaseGraphics.Shadow.prototype.m_color = null;
fan.vaseGraphics.Pattern = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.Pattern.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_valign = ((fan.vaseGraphics.Valign.static$init ? fan.vaseGraphics.Valign.static$init() : null),fan.vaseGraphics.Valign.m_repeat);
  this.m_halign = ((fan.vaseGraphics.Halign.static$init ? fan.vaseGraphics.Halign.static$init() : null),fan.vaseGraphics.Halign.m_repeat);
  return;
}
fan.vaseGraphics.Pattern.prototype.$typeof = function() { return fan.vaseGraphics.Pattern.$type; }
fan.vaseGraphics.Pattern.make = function(image,f) {
  var self = new fan.vaseGraphics.Pattern();
  fan.vaseGraphics.Pattern.make$(self,image,f);
  return self;
  }
fan.vaseGraphics.Pattern.make$ = function(self,image,f)
{
  if (f === undefined) f = null;
  ;
  self.m_image = fan.sys.ObjUtil.coerce(image,fan.vaseGraphics.ConstImage.$type);
  if (f != null)
  {
    f.call(self);
  }
  ;
  if ((self.m_halign === ((fan.vaseGraphics.Halign.static$init ? fan.vaseGraphics.Halign.static$init() : null),fan.vaseGraphics.Halign.m_fill) || self.m_valign === ((fan.vaseGraphics.Valign.static$init ? fan.vaseGraphics.Valign.static$init() : null),fan.vaseGraphics.Valign.m_fill)))
  {
    throw fan.sys.ArgErr.make();
  }
  ;
  return;
}
fan.vaseGraphics.Pattern.prototype.hash = function()
{
  return fan.sys.Int.xor(fan.sys.Int.xor(fan.sys.Int.xor(fan.sys.ObjUtil.hash(this.m_image),(function($this) { if ($this.m_bg == null) return 97; return $this.m_bg.hash(); })(this)),fan.sys.Int.shiftl(fan.sys.ObjUtil.hash(this.m_halign),11)),fan.sys.Int.shiftl(fan.sys.ObjUtil.hash(this.m_valign),7));
}
fan.vaseGraphics.Pattern.prototype.equals = function(obj)
{
  var that = fan.sys.ObjUtil.as(obj,fan.vaseGraphics.Pattern.$type);
  if (that == null)
  {
    return false;
  }
  ;
  return (fan.sys.ObjUtil.equals(this.m_image,that.m_image) && fan.sys.ObjUtil.equals(this.m_bg,that.m_bg) && fan.sys.ObjUtil.equals(this.m_valign,that.m_valign) && fan.sys.ObjUtil.equals(this.m_halign,that.m_halign));
}
fan.vaseGraphics.Pattern.prototype.toStr = function()
{
  var s = fan.sys.StrBuf.make().add(this.m_image);
  if (this.m_bg != null)
  {
    s.add(" bg=").add(this.m_bg);
  }
  ;
  s.add(" valign=").add(this.m_valign).add(" halign=").add(this.m_halign);
  return s.toStr();
}
fan.vaseGraphics.Pattern.prototype.m_image = null;
fan.vaseGraphics.Pattern.prototype.m_bg = null;
fan.vaseGraphics.Pattern.prototype.m_valign = null;
fan.vaseGraphics.Pattern.prototype.m_halign = null;
fan.vaseGraphics.Pen = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.Pen.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_width = 1;
  this.m_cap = ((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_capSquare);
  this.m_join = ((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_joinMiter);
  return;
}
fan.vaseGraphics.Pen.prototype.$typeof = function() { return fan.vaseGraphics.Pen.$type; }
fan.vaseGraphics.Pen.make = function(f) {
  var self = new fan.vaseGraphics.Pen();
  fan.vaseGraphics.Pen.make$(self,f);
  return self;
  }
fan.vaseGraphics.Pen.make$ = function(self,f)
{
  ;
  f.call(self);
  return;
}
fan.vaseGraphics.Pen.fromStr = function(str,checked)
{
  if (checked === undefined) checked = true;
  var $this = this;
  try
  {
    var w = null;
    var c = ((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_capSquare);
    var j = ((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_joinMiter);
    var d = null;
    var b = fan.sys.Str.index(str,"[");
    if (b != null)
    {
      d = fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Int.$type),fan.std.Type.find("sys::List<sys::Int>?"));
      fan.sys.Str.split(fan.sys.Str.getRange(str,fan.sys.Range.make(fan.sys.Int.plus(fan.sys.ObjUtil.coerce(b,fan.sys.Int.$type),1),fan.sys.ObjUtil.coerce(fan.sys.Str.index(str,"]"),fan.sys.Int.$type),true)),fan.sys.ObjUtil.coerce(44,fan.sys.Int.$type.toNullable())).each(fan.sys.Func.make$closure(
        fan.vaseGraphics.$clos$_u19,
        function(tok,ignoreparam$1)
        {
          d.add(fan.sys.ObjUtil.coerce(fan.sys.Str.toInt(tok),fan.sys.Obj.$type.toNullable()));
          return;
        }));
      str = fan.sys.Str.trim(fan.sys.Str.getRange(str,fan.sys.Range.make(0,fan.sys.ObjUtil.coerce(b,fan.sys.Int.$type),true)));
    }
    ;
    fan.sys.Str.split(str).each(fan.sys.Func.make$closure(
      fan.vaseGraphics.$clos$_u20,
      function(s,ignoreparam$1)
      {
        var $_u21 = s;
        if (fan.sys.ObjUtil.equals($_u21,"capSquare"))
        {
          c = ((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_capSquare);
        }
        else if (fan.sys.ObjUtil.equals($_u21,"capButt"))
        {
          c = ((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_capButt);
        }
        else if (fan.sys.ObjUtil.equals($_u21,"capRound"))
        {
          c = ((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_capRound);
        }
        else if (fan.sys.ObjUtil.equals($_u21,"joinMiter"))
        {
          j = ((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_joinMiter);
        }
        else if (fan.sys.ObjUtil.equals($_u21,"joinBevel"))
        {
          j = ((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_joinBevel);
        }
        else if (fan.sys.ObjUtil.equals($_u21,"joinRound"))
        {
          j = ((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_joinRound);
        }
        else
        {
          w = fan.sys.ObjUtil.coerce(fan.sys.Str.toInt(s),fan.sys.Int.$type.toNullable());
        }
        ;
        return;
      }));
    return fan.vaseGraphics.Pen.make(fan.sys.Func.make$closure(
      fan.vaseGraphics.$clos$_u22,
      function(it)
      {
        it.m_width = fan.sys.ObjUtil.coerce(w,fan.sys.Int.$type);
        it.m_cap = c;
        it.m_join = j;
        it.m_dash = fan.sys.ObjUtil.coerce((function($this) { var $_u23 = d; if ($_u23 == null) return null; return fan.sys.ObjUtil.toImmutable($_u23); })($this),fan.std.Type.find("sys::List<sys::Int>?"));
        return;
      }));
  }
  catch ($_u24)
  {
  }
  ;
  if (checked)
  {
    throw fan.sys.ParseErr.make(fan.sys.Str.plus("Invalid Pen: ",str));
  }
  ;
  return null;
}
fan.vaseGraphics.Pen.prototype.hash = function()
{
  var h = fan.sys.Int.xor(fan.sys.Int.xor(this.m_width,fan.sys.Int.shiftl(this.m_cap,16)),fan.sys.Int.shiftl(this.m_join,20));
  if (this.m_dash != null)
  {
    h = fan.sys.Int.xor(h,fan.sys.Int.shiftl(this.m_dash.hash(),32));
  }
  ;
  return h;
}
fan.vaseGraphics.Pen.prototype.equals = function(obj)
{
  var that = fan.sys.ObjUtil.as(obj,fan.vaseGraphics.Pen.$type);
  if (that == null)
  {
    return false;
  }
  ;
  return (fan.sys.ObjUtil.equals(this.m_width,that.m_width) && fan.sys.ObjUtil.equals(this.m_cap,that.m_cap) && fan.sys.ObjUtil.equals(this.m_join,that.m_join) && fan.sys.ObjUtil.equals(this.m_dash,that.m_dash));
}
fan.vaseGraphics.Pen.prototype.capToStr = function()
{
  var $_u25 = this.m_cap;
  if (fan.sys.ObjUtil.equals($_u25,((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_capSquare)))
  {
    return "square";
  }
  else if (fan.sys.ObjUtil.equals($_u25,((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_capButt)))
  {
    return "butt";
  }
  else if (fan.sys.ObjUtil.equals($_u25,((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_capRound)))
  {
    return "round";
  }
  else
  {
    throw fan.sys.Err.make();
  }
  ;
}
fan.vaseGraphics.Pen.prototype.joinToStr = function()
{
  var $_u26 = this.m_join;
  if (fan.sys.ObjUtil.equals($_u26,((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_joinMiter)))
  {
    return "miter";
  }
  else if (fan.sys.ObjUtil.equals($_u26,((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_joinRound)))
  {
    return "round";
  }
  else if (fan.sys.ObjUtil.equals($_u26,((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_joinBevel)))
  {
    return "bevel";
  }
  else
  {
    throw fan.sys.Err.make();
  }
  ;
}
fan.vaseGraphics.Pen.prototype.toStr = function()
{
  var s = fan.sys.Int.toStr(this.m_width);
  var $_u27 = this.m_cap;
  if (fan.sys.ObjUtil.equals($_u27,((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_capButt)))
  {
    s = fan.sys.Str.plus(s," capButt");
  }
  else if (fan.sys.ObjUtil.equals($_u27,((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_capRound)))
  {
    s = fan.sys.Str.plus(s," capRound");
  }
  ;
  var $_u28 = this.m_join;
  if (fan.sys.ObjUtil.equals($_u28,((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_joinBevel)))
  {
    s = fan.sys.Str.plus(s," joinBevel");
  }
  else if (fan.sys.ObjUtil.equals($_u28,((fan.vaseGraphics.Pen.static$init ? fan.vaseGraphics.Pen.static$init() : null),fan.vaseGraphics.Pen.m_joinRound)))
  {
    s = fan.sys.Str.plus(s," joinRound");
  }
  ;
  if (this.m_dash != null)
  {
    s = fan.sys.Str.plus(s,fan.sys.Str.plus(fan.sys.Str.plus(" [",this.m_dash.join(",")),"]"));
  }
  ;
  return s;
}
fan.vaseGraphics.Pen.static$init = function()
{
  if (fan.vaseGraphics.Pen.static$inited) return;
  fan.vaseGraphics.Pen.static$inited = true;
  var $this = this;
  fan.vaseGraphics.Pen.m_capSquare = 0;
  fan.vaseGraphics.Pen.m_capButt = 1;
  fan.vaseGraphics.Pen.m_capRound = 2;
  fan.vaseGraphics.Pen.m_joinMiter = 0;
  fan.vaseGraphics.Pen.m_joinBevel = 1;
  fan.vaseGraphics.Pen.m_joinRound = 3;
  fan.vaseGraphics.Pen.m_defVal = fan.vaseGraphics.Pen.make(fan.sys.Func.make$closure(
    fan.vaseGraphics.$clos$_u22,
    function(it)
    {
      return;
    }));
  return;
}
fan.vaseGraphics.Pen.prototype.m_width = 0;
fan.vaseGraphics.Pen.prototype.m_cap = 0;
fan.vaseGraphics.Pen.m_capSquare = 0;
fan.vaseGraphics.Pen.m_capButt = 0;
fan.vaseGraphics.Pen.m_capRound = 0;
fan.vaseGraphics.Pen.prototype.m_join = 0;
fan.vaseGraphics.Pen.m_joinMiter = 0;
fan.vaseGraphics.Pen.m_joinBevel = 0;
fan.vaseGraphics.Pen.m_joinRound = 0;
fan.vaseGraphics.Pen.prototype.m_dash = null;
fan.vaseGraphics.Pen.m_defVal = null;
fan.vaseGraphics.PointArray = function() {}
fan.vaseGraphics.PointArray.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.PointArray.prototype.$typeof = function() { return fan.vaseGraphics.PointArray.$type; }
fan.vaseGraphics.PointArray.make = function(size)
{
  return fan.vaseGraphics.GfxEnv.cur().makePointArray(size);
}
fan.vaseGraphics.Point = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.Point.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.Point.prototype.$typeof = function() { return fan.vaseGraphics.Point.$type; }
fan.vaseGraphics.Point.make = function(x,y) {
  var self = new fan.vaseGraphics.Point();
  fan.vaseGraphics.Point.make$(self,x,y);
  return self;
  }
fan.vaseGraphics.Point.make$ = function(self,x,y)
{
  self.m_x = x;
  self.m_y = y;
  return;
}
fan.vaseGraphics.Point.fromStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  try
  {
    var comma = fan.sys.Str.index(s,",");
    return fan.vaseGraphics.Point.make(fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(0,fan.sys.ObjUtil.coerce(comma,fan.sys.Int.$type),true)))),fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(fan.sys.Int.plus(fan.sys.ObjUtil.coerce(comma,fan.sys.Int.$type),1),-1)))));
  }
  catch ($_u29)
  {
  }
  ;
  if (checked)
  {
    throw fan.sys.ParseErr.make(fan.sys.Str.plus("Invalid Point: ",s));
  }
  ;
  return null;
}
fan.vaseGraphics.Point.prototype.translate = function(t)
{
  return fan.vaseGraphics.Point.make(fan.sys.Int.plus(this.m_x,t.m_x),fan.sys.Int.plus(this.m_y,t.m_y));
}
fan.vaseGraphics.Point.prototype.hash = function()
{
  return fan.sys.Int.xor(this.m_x,fan.sys.Int.shiftl(this.m_y,16));
}
fan.vaseGraphics.Point.prototype.equals = function(obj)
{
  var that = fan.sys.ObjUtil.as(obj,fan.vaseGraphics.Point.$type);
  if (that == null)
  {
    return false;
  }
  ;
  return (fan.sys.ObjUtil.equals(this.m_x,that.m_x) && fan.sys.ObjUtil.equals(this.m_y,that.m_y));
}
fan.vaseGraphics.Point.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(this.m_x,fan.sys.Obj.$type.toNullable())),","),fan.sys.ObjUtil.coerce(this.m_y,fan.sys.Obj.$type.toNullable()));
}
fan.vaseGraphics.Point.static$init = function()
{
  if (fan.vaseGraphics.Point.static$inited) return;
  fan.vaseGraphics.Point.static$inited = true;
  fan.vaseGraphics.Point.m_defVal = fan.vaseGraphics.Point.make(0,0);
  return;
}
fan.vaseGraphics.Point.m_defVal = null;
fan.vaseGraphics.Point.prototype.m_x = 0;
fan.vaseGraphics.Point.prototype.m_y = 0;
fan.vaseGraphics.Size = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.Size.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.Size.prototype.$typeof = function() { return fan.vaseGraphics.Size.$type; }
fan.vaseGraphics.Size.make = function(w,h) {
  var self = new fan.vaseGraphics.Size();
  fan.vaseGraphics.Size.make$(self,w,h);
  return self;
  }
fan.vaseGraphics.Size.make$ = function(self,w,h)
{
  self.m_w = w;
  self.m_h = h;
  return;
}
fan.vaseGraphics.Size.fromStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  try
  {
    var comma = fan.sys.Str.index(s,",");
    return fan.vaseGraphics.Size.make(fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(0,fan.sys.ObjUtil.coerce(comma,fan.sys.Int.$type),true)))),fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(fan.sys.Int.plus(fan.sys.ObjUtil.coerce(comma,fan.sys.Int.$type),1),-1)))));
  }
  catch ($_u30)
  {
  }
  ;
  if (checked)
  {
    throw fan.sys.ParseErr.make(fan.sys.Str.plus("Invalid Size: ",s));
  }
  ;
  return null;
}
fan.vaseGraphics.Size.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(this.m_w,fan.sys.Obj.$type.toNullable())),","),fan.sys.ObjUtil.coerce(this.m_h,fan.sys.Obj.$type.toNullable()));
}
fan.vaseGraphics.Size.prototype.hash = function()
{
  return fan.sys.Int.xor(this.m_w,fan.sys.Int.shiftl(this.m_h,16));
}
fan.vaseGraphics.Size.prototype.equals = function(obj)
{
  var that = fan.sys.ObjUtil.as(obj,fan.vaseGraphics.Size.$type);
  if (that == null)
  {
    return false;
  }
  ;
  return (fan.sys.ObjUtil.equals(this.m_w,that.m_w) && fan.sys.ObjUtil.equals(this.m_h,that.m_h));
}
fan.vaseGraphics.Size.static$init = function()
{
  if (fan.vaseGraphics.Size.static$inited) return;
  fan.vaseGraphics.Size.static$inited = true;
  fan.vaseGraphics.Size.m_defVal = fan.vaseGraphics.Size.make(0,0);
  return;
}
fan.vaseGraphics.Size.m_defVal = null;
fan.vaseGraphics.Size.prototype.m_w = 0;
fan.vaseGraphics.Size.prototype.m_h = 0;
fan.vaseGraphics.Rect = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.Rect.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.Rect.prototype.$typeof = function() { return fan.vaseGraphics.Rect.$type; }
fan.vaseGraphics.Rect.make = function(x,y,w,h) {
  var self = new fan.vaseGraphics.Rect();
  fan.vaseGraphics.Rect.make$(self,x,y,w,h);
  return self;
  }
fan.vaseGraphics.Rect.make$ = function(self,x,y,w,h)
{
  self.m_x = x;
  self.m_y = y;
  self.m_w = w;
  self.m_h = h;
  return;
}
fan.vaseGraphics.Rect.makePosSize = function(p,s) {
  var self = new fan.vaseGraphics.Rect();
  fan.vaseGraphics.Rect.makePosSize$(self,p,s);
  return self;
  }
fan.vaseGraphics.Rect.makePosSize$ = function(self,p,s)
{
  self.m_x = p.m_x;
  self.m_y = p.m_y;
  self.m_w = s.m_w;
  self.m_h = s.m_h;
  return;
}
fan.vaseGraphics.Rect.fromStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  try
  {
    var c1 = fan.sys.Str.index(s,",");
    var c2 = fan.sys.Str.index(s,",",fan.sys.Int.plus(fan.sys.ObjUtil.coerce(c1,fan.sys.Int.$type),1));
    var c3 = fan.sys.Str.index(s,",",fan.sys.Int.plus(fan.sys.ObjUtil.coerce(c2,fan.sys.Int.$type),1));
    return fan.vaseGraphics.Rect.make(fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(0,fan.sys.ObjUtil.coerce(c1,fan.sys.Int.$type),true)))),fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(fan.sys.Int.plus(fan.sys.ObjUtil.coerce(c1,fan.sys.Int.$type),1),fan.sys.ObjUtil.coerce(c2,fan.sys.Int.$type),true)))),fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(fan.sys.Int.plus(fan.sys.ObjUtil.coerce(c2,fan.sys.Int.$type),1),fan.sys.ObjUtil.coerce(c3,fan.sys.Int.$type),true)))),fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(fan.sys.Int.plus(fan.sys.ObjUtil.coerce(c3,fan.sys.Int.$type),1),-1)))));
  }
  catch ($_u31)
  {
  }
  ;
  if (checked)
  {
    throw fan.sys.ParseErr.make(fan.sys.Str.plus("Invalid Rect: ",s));
  }
  ;
  return null;
}
fan.vaseGraphics.Rect.prototype.pos = function()
{
  return fan.vaseGraphics.Point.make(this.m_x,this.m_y);
}
fan.vaseGraphics.Rect.prototype.center = function()
{
  return fan.vaseGraphics.Point.make(fan.sys.Int.plus(this.m_x,fan.sys.Int.div(this.m_w,2)),fan.sys.Int.plus(this.m_y,fan.sys.Int.div(this.m_h,2)));
}
fan.vaseGraphics.Rect.prototype.size = function()
{
  return fan.vaseGraphics.Size.make(this.m_w,this.m_h);
}
fan.vaseGraphics.Rect.prototype.contains = function(x,y)
{
  return (fan.sys.ObjUtil.compareGE(x,this.m_x) && fan.sys.ObjUtil.compareLE(x,fan.sys.Int.plus(this.m_x,this.m_w)) && fan.sys.ObjUtil.compareGE(y,this.m_y) && fan.sys.ObjUtil.compareLE(y,fan.sys.Int.plus(this.m_y,this.m_h)));
}
fan.vaseGraphics.Rect.prototype.intersects = function(that)
{
  var ax1 = this.m_x;
  var ay1 = this.m_y;
  var ax2 = fan.sys.Int.plus(ax1,this.m_w);
  var ay2 = fan.sys.Int.plus(ay1,this.m_h);
  var bx1 = that.m_x;
  var by1 = that.m_y;
  var bx2 = fan.sys.Int.plus(bx1,that.m_w);
  var by2 = fan.sys.Int.plus(by1,that.m_h);
  return !(fan.sys.ObjUtil.compareLE(ax2,bx1) || fan.sys.ObjUtil.compareLE(bx2,ax1) || fan.sys.ObjUtil.compareLE(ay2,by1) || fan.sys.ObjUtil.compareLE(by2,ay1));
}
fan.vaseGraphics.Rect.prototype.intersection = function(that)
{
  var ax1 = this.m_x;
  var ay1 = this.m_y;
  var ax2 = fan.sys.Int.plus(ax1,this.m_w);
  var ay2 = fan.sys.Int.plus(ay1,this.m_h);
  var bx1 = that.m_x;
  var by1 = that.m_y;
  var bx2 = fan.sys.Int.plus(bx1,that.m_w);
  var by2 = fan.sys.Int.plus(by1,that.m_h);
  var rx1 = fan.sys.Int.max(ax1,bx1);
  var rx2 = fan.sys.Int.min(ax2,bx2);
  var ry1 = fan.sys.Int.max(ay1,by1);
  var ry2 = fan.sys.Int.min(ay2,by2);
  var rw = fan.sys.Int.minus(rx2,rx1);
  var rh = fan.sys.Int.minus(ry2,ry1);
  if ((fan.sys.ObjUtil.compareLE(rw,0) || fan.sys.ObjUtil.compareLE(rh,0)))
  {
    return ((fan.vaseGraphics.Rect.static$init ? fan.vaseGraphics.Rect.static$init() : null),fan.vaseGraphics.Rect.m_defVal);
  }
  ;
  return fan.vaseGraphics.Rect.make(rx1,ry1,rw,rh);
}
fan.vaseGraphics.Rect.prototype.union = function(that)
{
  var ax1 = this.m_x;
  var ay1 = this.m_y;
  var ax2 = fan.sys.Int.plus(ax1,this.m_w);
  var ay2 = fan.sys.Int.plus(ay1,this.m_h);
  var bx1 = that.m_x;
  var by1 = that.m_y;
  var bx2 = fan.sys.Int.plus(bx1,that.m_w);
  var by2 = fan.sys.Int.plus(by1,that.m_h);
  var rx1 = fan.sys.Int.min(ax1,bx1);
  var rx2 = fan.sys.Int.max(ax2,bx2);
  var ry1 = fan.sys.Int.min(ay1,by1);
  var ry2 = fan.sys.Int.max(ay2,by2);
  var rw = fan.sys.Int.minus(rx2,rx1);
  var rh = fan.sys.Int.minus(ry2,ry1);
  if ((fan.sys.ObjUtil.compareLE(rw,0) || fan.sys.ObjUtil.compareLE(rh,0)))
  {
    return ((fan.vaseGraphics.Rect.static$init ? fan.vaseGraphics.Rect.static$init() : null),fan.vaseGraphics.Rect.m_defVal);
  }
  ;
  return fan.vaseGraphics.Rect.make(rx1,ry1,rw,rh);
}
fan.vaseGraphics.Rect.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(this.m_x,fan.sys.Obj.$type.toNullable())),","),fan.sys.ObjUtil.coerce(this.m_y,fan.sys.Obj.$type.toNullable())),","),fan.sys.ObjUtil.coerce(this.m_w,fan.sys.Obj.$type.toNullable())),","),fan.sys.ObjUtil.coerce(this.m_h,fan.sys.Obj.$type.toNullable()));
}
fan.vaseGraphics.Rect.prototype.hash = function()
{
  return fan.sys.Int.xor(fan.sys.Int.xor(fan.sys.Int.xor(this.m_x,fan.sys.Int.shiftl(this.m_y,8)),fan.sys.Int.shiftl(this.m_w,16)),fan.sys.Int.shiftl(this.m_w,24));
}
fan.vaseGraphics.Rect.prototype.equals = function(obj)
{
  var that = fan.sys.ObjUtil.as(obj,fan.vaseGraphics.Rect.$type);
  if (that == null)
  {
    return false;
  }
  ;
  return (fan.sys.ObjUtil.equals(this.m_x,that.m_x) && fan.sys.ObjUtil.equals(this.m_y,that.m_y) && fan.sys.ObjUtil.equals(this.m_w,that.m_w) && fan.sys.ObjUtil.equals(this.m_h,that.m_h));
}
fan.vaseGraphics.Rect.static$init = function()
{
  if (fan.vaseGraphics.Rect.static$inited) return;
  fan.vaseGraphics.Rect.static$inited = true;
  fan.vaseGraphics.Rect.m_defVal = fan.vaseGraphics.Rect.make(0,0,0,0);
  return;
}
fan.vaseGraphics.Rect.m_defVal = null;
fan.vaseGraphics.Rect.prototype.m_x = 0;
fan.vaseGraphics.Rect.prototype.m_y = 0;
fan.vaseGraphics.Rect.prototype.m_w = 0;
fan.vaseGraphics.Rect.prototype.m_h = 0;
fan.vaseGraphics.Gradient = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.Gradient.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_mode = ((fan.vaseGraphics.GradientMode.static$init ? fan.vaseGraphics.GradientMode.static$init() : null),fan.vaseGraphics.GradientMode.m_linear);
  this.m_x1 = 0;
  this.m_y1 = 0;
  this.m_x2 = 100;
  this.m_y2 = 100;
  this.m_x1Unit = ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_pixel);
  this.m_y1Unit = ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_pixel);
  this.m_x2Unit = ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_pixel);
  this.m_y2Unit = ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_pixel);
  this.m_stops = fan.sys.ObjUtil.coerce((function($this) { var $_u32 = ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_defStops); if ($_u32 == null) return null; return fan.sys.ObjUtil.toImmutable($_u32); })(this),fan.std.Type.find("sys::List<vaseGraphics::GradientStop>"));
  return;
}
fan.vaseGraphics.Gradient.prototype.$typeof = function() { return fan.vaseGraphics.Gradient.$type; }
fan.vaseGraphics.Gradient.fromStr = function(str,checked)
{
  if (checked === undefined) checked = true;
  try
  {
    return fan.vaseGraphics.Gradient.makeStr(str);
  }
  catch ($_u33)
  {
  }
  ;
  if (checked)
  {
    throw fan.sys.ParseErr.make(fan.sys.Str.plus("Invalid Gradient: ",str));
  }
  ;
  return null;
}
fan.vaseGraphics.Gradient.makeStr = function(str) {
  var self = new fan.vaseGraphics.Gradient();
  fan.vaseGraphics.Gradient.makeStr$(self,str);
  return self;
  }
fan.vaseGraphics.Gradient.makeStr$ = function(self,str)
{
  var $this = self;
  ;
  if (fan.sys.ObjUtil.equals(fan.sys.Str.get(str,-1),41))
  {
    if (fan.sys.Str.startsWith(str,"radial("))
    {
      self.m_mode = ((fan.vaseGraphics.GradientMode.static$init ? fan.vaseGraphics.GradientMode.static$init() : null),fan.vaseGraphics.GradientMode.m_radial);
    }
    else
    {
      if (!fan.sys.Str.startsWith(str,"linear("))
      {
        throw fan.sys.Err.make();
      }
      ;
    }
    ;
    str = fan.sys.Str.getRange(str,fan.sys.Range.make(7,-2));
  }
  ;
  var parts = fan.sys.Str.split(str,fan.sys.ObjUtil.coerce(44,fan.sys.Int.$type.toNullable()));
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,2); i = fan.sys.Int.increment(i))
  {
    var pos = parts.get(i);
    var coor = fan.sys.Str.split(pos);
    if (fan.sys.ObjUtil.compareNE(coor.size(),2))
    {
      throw fan.sys.Err.make();
    }
    ;
    var x = null;
    var y = null;
    var xUnit = null;
    var yUnit = null;
    var xs = coor.get(0);
    if (fan.sys.Str.endsWith(xs,"%"))
    {
      x = fan.sys.ObjUtil.coerce(fan.sys.Str.toInt(fan.sys.Str.getRange(xs,fan.sys.Range.make(0,-2))),fan.sys.Int.$type.toNullable());
      xUnit = ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_percent);
    }
    else
    {
      if (fan.sys.Str.endsWith(xs,"px"))
      {
        x = fan.sys.ObjUtil.coerce(fan.sys.Str.toInt(fan.sys.Str.getRange(xs,fan.sys.Range.make(0,-3))),fan.sys.Int.$type.toNullable());
        xUnit = ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_pixel);
      }
      else
      {
        throw fan.sys.Err.make();
      }
      ;
    }
    ;
    var ys = coor.get(1);
    if (fan.sys.Str.endsWith(ys,"%"))
    {
      y = fan.sys.ObjUtil.coerce(fan.sys.Str.toInt(fan.sys.Str.getRange(ys,fan.sys.Range.make(0,-2))),fan.sys.Int.$type.toNullable());
      yUnit = ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_percent);
    }
    else
    {
      if (fan.sys.Str.endsWith(ys,"px"))
      {
        y = fan.sys.ObjUtil.coerce(fan.sys.Str.toInt(fan.sys.Str.getRange(ys,fan.sys.Range.make(0,-3))),fan.sys.Int.$type.toNullable());
        yUnit = ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_pixel);
      }
      else
      {
        throw fan.sys.Err.make();
      }
      ;
    }
    ;
    if (fan.sys.ObjUtil.equals(i,0))
    {
      self.m_x1 = fan.sys.ObjUtil.coerce(x,fan.sys.Int.$type);
      self.m_x1Unit = fan.sys.ObjUtil.coerce(xUnit,fan.sys.Str.$type);
      self.m_y1 = fan.sys.ObjUtil.coerce(y,fan.sys.Int.$type);
      self.m_y1Unit = fan.sys.ObjUtil.coerce(yUnit,fan.sys.Str.$type);
    }
    else
    {
      self.m_x2 = fan.sys.ObjUtil.coerce(x,fan.sys.Int.$type);
      self.m_x2Unit = fan.sys.ObjUtil.coerce(xUnit,fan.sys.Str.$type);
      self.m_y2 = fan.sys.ObjUtil.coerce(y,fan.sys.Int.$type);
      self.m_y2Unit = fan.sys.ObjUtil.coerce(yUnit,fan.sys.Str.$type);
    }
    ;
  }
  ;
  var stopColors = fan.sys.List.make(fan.vaseGraphics.Color.$type);
  var stopPos = fan.sys.List.make(fan.sys.Str.$type.toNullable());
  for (var i = 2; fan.sys.ObjUtil.compareLT(i,parts.size()); i = fan.sys.Int.increment(i))
  {
    var stopPart = parts.get(i);
    var space = fan.sys.Str.index(stopPart," ");
    if (space == null)
    {
      stopColors.add(fan.sys.ObjUtil.coerce(fan.vaseGraphics.Color.fromStr(stopPart),fan.vaseGraphics.Color.$type));
      stopPos.add(null);
    }
    else
    {
      stopColors.add(fan.sys.ObjUtil.coerce(fan.vaseGraphics.Color.fromStr(fan.sys.Str.getRange(stopPart,fan.sys.Range.make(0,fan.sys.ObjUtil.coerce(space,fan.sys.Int.$type),true))),fan.vaseGraphics.Color.$type));
      stopPos.add(fan.sys.Str.getRange(stopPart,fan.sys.Range.make(fan.sys.Int.plus(fan.sys.ObjUtil.coerce(space,fan.sys.Int.$type),1),-1)));
    }
    ;
  }
  ;
  if (fan.sys.ObjUtil.compareLT(stopColors.size(),2))
  {
    throw fan.sys.Err.make();
  }
  ;
  self.m_stops = fan.sys.ObjUtil.coerce((function($this) { var $_u34 = fan.sys.ObjUtil.coerce(stopColors.map(fan.sys.Func.make$closure(
    fan.vaseGraphics.$clos$_u35,
    function(color,i)
    {
      var pos = (function($this) { var $_u36 = (function($this) { var $_u37 = stopPos.get(i); if ($_u37 == null) return null; return fan.sys.Str.toFloat($_u37); })($this); if ($_u36 != null) return $_u36; return fan.sys.ObjUtil.coerce(fan.sys.Float.div(fan.sys.Int.toFloat(fan.sys.Int.div(fan.sys.Int.mult(i,100),fan.sys.Int.minus(stopPos.size(),1))),fan.sys.Float.make(100.0)),fan.sys.Float.$type.toNullable()); })($this);
      return fan.vaseGraphics.GradientStop.make(color,fan.sys.ObjUtil.coerce(pos,fan.sys.Float.$type));
    })),fan.std.Type.find("sys::List<vaseGraphics::GradientStop>")); if ($_u34 == null) return null; return fan.sys.ObjUtil.toImmutable($_u34); })(self),fan.std.Type.find("sys::List<vaseGraphics::GradientStop>"));
  return;
}
fan.vaseGraphics.Gradient.make = function(f) {
  var self = new fan.vaseGraphics.Gradient();
  fan.vaseGraphics.Gradient.make$(self,f);
  return self;
  }
fan.vaseGraphics.Gradient.make$ = function(self,f)
{
  if (f === undefined) f = null;
  ;
  if (f != null)
  {
    f.call(self);
  }
  ;
  if ((self.m_x1Unit !== ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_percent) && self.m_x1Unit !== ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_pixel)))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("Invalid x1Unit: ",self.m_x1Unit));
  }
  ;
  if ((self.m_y1Unit !== ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_percent) && self.m_y1Unit !== ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_pixel)))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("Invalid y1Unit: ",self.m_y1Unit));
  }
  ;
  if ((self.m_x2Unit !== ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_percent) && self.m_x2Unit !== ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_pixel)))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("Invalid x2Unit: ",self.m_x2Unit));
  }
  ;
  if ((self.m_y2Unit !== ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_percent) && self.m_y2Unit !== ((fan.vaseGraphics.Gradient.static$init ? fan.vaseGraphics.Gradient.static$init() : null),fan.vaseGraphics.Gradient.m_pixel)))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("Invalid y2Unit: ",self.m_y2Unit));
  }
  ;
  if (fan.sys.ObjUtil.compareLT(self.m_stops.size(),2))
  {
    throw fan.sys.ArgErr.make("Must have 2 or more stops");
  }
  ;
  return;
}
fan.vaseGraphics.Gradient.prototype.hash = function()
{
  return fan.sys.Int.xor(fan.sys.Int.xor(fan.sys.Int.xor(fan.sys.Int.xor(fan.sys.Int.xor(fan.sys.Int.shiftl(fan.sys.ObjUtil.hash(this.m_mode),28),fan.sys.Int.shiftl(fan.sys.Int.hash(this.m_x1),21)),fan.sys.Int.shiftl(fan.sys.Int.hash(this.m_y1),14)),fan.sys.Int.shiftl(fan.sys.Int.hash(this.m_x2),21)),fan.sys.Int.shiftl(fan.sys.Int.hash(this.m_y2),14)),this.m_stops.hash());
}
fan.vaseGraphics.Gradient.prototype.equals = function(obj)
{
  var that = fan.sys.ObjUtil.as(obj,fan.vaseGraphics.Gradient.$type);
  if (that == null)
  {
    return false;
  }
  ;
  return (fan.sys.ObjUtil.equals(this.m_mode,that.m_mode) && fan.sys.ObjUtil.equals(this.m_x1,that.m_x1) && fan.sys.ObjUtil.equals(this.m_y1,that.m_y1) && fan.sys.ObjUtil.equals(this.m_x1Unit,that.m_x1Unit) && fan.sys.ObjUtil.equals(this.m_y1Unit,that.m_y1Unit) && fan.sys.ObjUtil.equals(this.m_x2,that.m_x2) && fan.sys.ObjUtil.equals(this.m_y2,that.m_y2) && fan.sys.ObjUtil.equals(this.m_x2Unit,that.m_x2Unit) && fan.sys.ObjUtil.equals(this.m_y2Unit,that.m_y2Unit) && fan.sys.ObjUtil.equals(this.m_stops,that.m_stops));
}
fan.vaseGraphics.Gradient.prototype.toStr = function()
{
  var $this = this;
  var s = fan.sys.StrBuf.make();
  s.add(this.m_mode.$name()).addChar(40);
  s.add(fan.sys.ObjUtil.coerce(this.m_x1,fan.sys.Obj.$type.toNullable())).add(this.m_x1Unit).addChar(32);
  s.add(fan.sys.ObjUtil.coerce(this.m_y1,fan.sys.Obj.$type.toNullable())).add(this.m_y1Unit).addChar(44);
  s.add(fan.sys.ObjUtil.coerce(this.m_x2,fan.sys.Obj.$type.toNullable())).add(this.m_x2Unit).addChar(32);
  s.add(fan.sys.ObjUtil.coerce(this.m_y2,fan.sys.Obj.$type.toNullable())).add(this.m_y2Unit);
  this.m_stops.each(fan.sys.Func.make$closure(
    fan.vaseGraphics.$clos$_u38,
    function(stop,ignoreparam$1)
    {
      s.addChar(44).add(stop);
      return;
    }));
  return s.addChar(41).toStr();
}
fan.vaseGraphics.Gradient.static$init = function()
{
  if (fan.vaseGraphics.Gradient.static$inited) return;
  fan.vaseGraphics.Gradient.static$inited = true;
  fan.vaseGraphics.Gradient.m_percent = "%";
  fan.vaseGraphics.Gradient.m_pixel = "px";
  fan.vaseGraphics.Gradient.m_defStops = fan.sys.ObjUtil.coerce((function($this) { var $_u39 = fan.sys.List.make(fan.vaseGraphics.GradientStop.$type, [fan.vaseGraphics.GradientStop.make(((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_white),fan.sys.Float.make(0.0)),fan.vaseGraphics.GradientStop.make(((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_black),fan.sys.Float.make(1.0))]); if ($_u39 == null) return null; return fan.sys.ObjUtil.toImmutable($_u39); })(this),fan.std.Type.find("sys::List<vaseGraphics::GradientStop>"));
  return;
}
fan.vaseGraphics.Gradient.m_percent = null;
fan.vaseGraphics.Gradient.m_pixel = null;
fan.vaseGraphics.Gradient.prototype.m_mode = null;
fan.vaseGraphics.Gradient.prototype.m_x1 = 0;
fan.vaseGraphics.Gradient.prototype.m_y1 = 0;
fan.vaseGraphics.Gradient.prototype.m_x2 = 0;
fan.vaseGraphics.Gradient.prototype.m_y2 = 0;
fan.vaseGraphics.Gradient.prototype.m_x1Unit = null;
fan.vaseGraphics.Gradient.prototype.m_y1Unit = null;
fan.vaseGraphics.Gradient.prototype.m_x2Unit = null;
fan.vaseGraphics.Gradient.prototype.m_y2Unit = null;
fan.vaseGraphics.Gradient.prototype.m_stops = null;
fan.vaseGraphics.Gradient.m_defStops = null;
fan.vaseGraphics.GradientStop = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.GradientStop.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.GradientStop.prototype.$typeof = function() { return fan.vaseGraphics.GradientStop.$type; }
fan.vaseGraphics.GradientStop.make = function(color,pos) {
  var self = new fan.vaseGraphics.GradientStop();
  fan.vaseGraphics.GradientStop.make$(self,color,pos);
  return self;
  }
fan.vaseGraphics.GradientStop.make$ = function(self,color,pos)
{
  self.m_color = color;
  self.m_pos = pos;
  return;
}
fan.vaseGraphics.GradientStop.prototype.hash = function()
{
  return fan.sys.Int.xor(fan.sys.Float.hash(this.m_pos),this.m_color.hash());
}
fan.vaseGraphics.GradientStop.prototype.equals = function(obj)
{
  var that = fan.sys.ObjUtil.as(obj,fan.vaseGraphics.GradientStop.$type);
  if (that == null)
  {
    return false;
  }
  ;
  return (fan.sys.ObjUtil.equals(this.m_pos,that.m_pos) && fan.sys.ObjUtil.equals(this.m_color,that.m_color));
}
fan.vaseGraphics.GradientStop.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",this.m_color)," "),fan.sys.ObjUtil.coerce(this.m_pos,fan.sys.Obj.$type.toNullable()));
}
fan.vaseGraphics.GradientStop.prototype.m_color = null;
fan.vaseGraphics.GradientStop.prototype.m_pos = fan.sys.Float.make(0);
fan.vaseGraphics.Path = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.Path.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_steps = fan.sys.List.make(fan.vaseGraphics.PathStep.$type);
  return;
}
fan.vaseGraphics.Path.prototype.$typeof = function() { return fan.vaseGraphics.Path.$type; }
fan.vaseGraphics.Path.prototype.steps = function()
{
  return this.m_steps;
}
fan.vaseGraphics.Path.prototype.steps$ = function(it)
{
  this.m_steps = it;
  return;
}
fan.vaseGraphics.Path.prototype.clear = function()
{
  this.m_steps.clear();
  return this;
}
fan.vaseGraphics.Path.prototype.contains = function(x,y)
{
  return fan.vaseGraphics.GfxEnv.cur().contains(this,x,y);
}
fan.vaseGraphics.Path.prototype.close = function()
{
  this.m_steps.add(fan.vaseGraphics.PathClose.make());
  return this;
}
fan.vaseGraphics.Path.prototype.moveTo = function(x,y)
{
  var $this = this;
  this.m_steps.add(fan.vaseGraphics.PathMoveTo.make(fan.sys.Func.make$closure(
    fan.vaseGraphics.$clos$_u40,
    function(it)
    {
      it.m_x = x;
      it.m_y = y;
      return;
    })));
  return this;
}
fan.vaseGraphics.Path.prototype.lineTo = function(x,y)
{
  var $this = this;
  this.m_steps.add(fan.vaseGraphics.PathLineTo.make(fan.sys.Func.make$closure(
    fan.vaseGraphics.$clos$_u41,
    function(it)
    {
      it.m_x = x;
      it.m_y = y;
      return;
    })));
  return this;
}
fan.vaseGraphics.Path.prototype.quadTo = function(cx,cy,x,y)
{
  var $this = this;
  this.m_steps.add(fan.vaseGraphics.PathQuadTo.make(fan.sys.Func.make$closure(
    fan.vaseGraphics.$clos$_u42,
    function(it)
    {
      it.m_cx = cx;
      it.m_cy = cy;
      it.m_x = x;
      it.m_y = y;
      return;
    })));
  return this;
}
fan.vaseGraphics.Path.prototype.cubicTo = function(cx1,cy1,cx2,cy2,x,y)
{
  var $this = this;
  this.m_steps.add(fan.vaseGraphics.PathCubicTo.make(fan.sys.Func.make$closure(
    fan.vaseGraphics.$clos$_u43,
    function(it)
    {
      it.m_cx1 = cx1;
      it.m_cy1 = cy1;
      it.m_cx2 = cx2;
      it.m_cy2 = cy2;
      it.m_x = x;
      it.m_y = y;
      return;
    })));
  return this;
}
fan.vaseGraphics.Path.make = function() {
  var self = new fan.vaseGraphics.Path();
  fan.vaseGraphics.Path.make$(self);
  return self;
  }
fan.vaseGraphics.Path.make$ = function(self)
{
  ;
  return;
}
fan.vaseGraphics.Path.prototype.m_steps = null;
fan.vaseGraphics.PathStep = function() {}
fan.vaseGraphics.PathStep.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.PathStep.prototype.$typeof = function() { return fan.vaseGraphics.PathStep.$type; }
fan.vaseGraphics.PathMoveTo = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.PathMoveTo.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.PathMoveTo.prototype.$typeof = function() { return fan.vaseGraphics.PathMoveTo.$type; }
fan.vaseGraphics.PathMoveTo.make = function(f) {
  var self = new fan.vaseGraphics.PathMoveTo();
  fan.vaseGraphics.PathMoveTo.make$(self,f);
  return self;
  }
fan.vaseGraphics.PathMoveTo.make$ = function(self,f)
{
  f.call(self);
  return;
}
fan.vaseGraphics.PathMoveTo.prototype.m_x = fan.sys.Float.make(0);
fan.vaseGraphics.PathMoveTo.prototype.m_y = fan.sys.Float.make(0);
fan.vaseGraphics.PathLineTo = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.PathLineTo.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.PathLineTo.prototype.$typeof = function() { return fan.vaseGraphics.PathLineTo.$type; }
fan.vaseGraphics.PathLineTo.make = function(f) {
  var self = new fan.vaseGraphics.PathLineTo();
  fan.vaseGraphics.PathLineTo.make$(self,f);
  return self;
  }
fan.vaseGraphics.PathLineTo.make$ = function(self,f)
{
  f.call(self);
  return;
}
fan.vaseGraphics.PathLineTo.prototype.m_x = fan.sys.Float.make(0);
fan.vaseGraphics.PathLineTo.prototype.m_y = fan.sys.Float.make(0);
fan.vaseGraphics.PathQuadTo = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.PathQuadTo.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.PathQuadTo.prototype.$typeof = function() { return fan.vaseGraphics.PathQuadTo.$type; }
fan.vaseGraphics.PathQuadTo.make = function(f) {
  var self = new fan.vaseGraphics.PathQuadTo();
  fan.vaseGraphics.PathQuadTo.make$(self,f);
  return self;
  }
fan.vaseGraphics.PathQuadTo.make$ = function(self,f)
{
  f.call(self);
  return;
}
fan.vaseGraphics.PathQuadTo.prototype.m_cx = fan.sys.Float.make(0);
fan.vaseGraphics.PathQuadTo.prototype.m_cy = fan.sys.Float.make(0);
fan.vaseGraphics.PathQuadTo.prototype.m_x = fan.sys.Float.make(0);
fan.vaseGraphics.PathQuadTo.prototype.m_y = fan.sys.Float.make(0);
fan.vaseGraphics.PathCubicTo = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.PathCubicTo.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.PathCubicTo.prototype.$typeof = function() { return fan.vaseGraphics.PathCubicTo.$type; }
fan.vaseGraphics.PathCubicTo.make = function(f) {
  var self = new fan.vaseGraphics.PathCubicTo();
  fan.vaseGraphics.PathCubicTo.make$(self,f);
  return self;
  }
fan.vaseGraphics.PathCubicTo.make$ = function(self,f)
{
  f.call(self);
  return;
}
fan.vaseGraphics.PathCubicTo.prototype.m_cx1 = fan.sys.Float.make(0);
fan.vaseGraphics.PathCubicTo.prototype.m_cy1 = fan.sys.Float.make(0);
fan.vaseGraphics.PathCubicTo.prototype.m_cx2 = fan.sys.Float.make(0);
fan.vaseGraphics.PathCubicTo.prototype.m_cy2 = fan.sys.Float.make(0);
fan.vaseGraphics.PathCubicTo.prototype.m_x = fan.sys.Float.make(0);
fan.vaseGraphics.PathCubicTo.prototype.m_y = fan.sys.Float.make(0);
fan.vaseGraphics.PathClose = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGraphics.PathClose.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.PathClose.prototype.$typeof = function() { return fan.vaseGraphics.PathClose.$type; }
fan.vaseGraphics.PathClose.make = function() {
  var self = new fan.vaseGraphics.PathClose();
  fan.vaseGraphics.PathClose.make$(self);
  return self;
  }
fan.vaseGraphics.PathClose.make$ = function(self)
{
  return;
}
fan.vaseGraphics.Graphics = function() {}
fan.vaseGraphics.Graphics.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGraphics.Graphics.prototype.$typeof = function() { return fan.vaseGraphics.Graphics.$type; }
fan.vaseGraphics.Graphics.prototype.m_brush = null;
fan.vaseGraphics.Graphics.prototype.m_pen = null;
fan.vaseGraphics.Graphics.prototype.m_font = null;
fan.vaseGraphics.Graphics.prototype.m_antialias = false;
fan.vaseGraphics.Graphics.prototype.m_alpha = 0;
fan.vaseGraphics.Graphics.prototype.m_composite = null;
fan.vaseGraphics.Composite = fan.sys.Obj.$extend(fan.sys.Enum);
fan.vaseGraphics.Composite.prototype.$ctor = function()
{
  fan.sys.Enum.prototype.$ctor.call(this);
  this.peer = new fan.sys.EnumPeer(this);
  var $this = this;
}
fan.vaseGraphics.Composite.prototype.$typeof = function() { return fan.vaseGraphics.Composite.$type; }
fan.vaseGraphics.Composite.make = function($ordinal,$name) {
  var self = new fan.vaseGraphics.Composite();
  fan.vaseGraphics.Composite.make$(self,$ordinal,$name);
  return self;
  }
fan.vaseGraphics.Composite.make$ = function(self,$ordinal,$name)
{
  fan.sys.Enum.make$(self,$ordinal,$name);
  return;
}
fan.vaseGraphics.Composite.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.sys.Enum.doFromStr("vaseGraphics::Composite",$name,checked),fan.vaseGraphics.Composite.$type.toNullable());
}
fan.vaseGraphics.Composite.static$init = function()
{
  if (fan.vaseGraphics.Composite.static$inited) return;
  fan.vaseGraphics.Composite.static$inited = true;
  fan.vaseGraphics.Composite.m_srcAtop = fan.vaseGraphics.Composite.make(0,"srcAtop");
  fan.vaseGraphics.Composite.m_srcIn = fan.vaseGraphics.Composite.make(1,"srcIn");
  fan.vaseGraphics.Composite.m_srcOut = fan.vaseGraphics.Composite.make(2,"srcOut");
  fan.vaseGraphics.Composite.m_dstAtop = fan.vaseGraphics.Composite.make(3,"dstAtop");
  fan.vaseGraphics.Composite.m_dstIn = fan.vaseGraphics.Composite.make(4,"dstIn");
  fan.vaseGraphics.Composite.m_dstOut = fan.vaseGraphics.Composite.make(5,"dstOut");
  fan.vaseGraphics.Composite.m_dstOver = fan.vaseGraphics.Composite.make(6,"dstOver");
  fan.vaseGraphics.Composite.m_lighter = fan.vaseGraphics.Composite.make(7,"lighter");
  fan.vaseGraphics.Composite.m_copy = fan.vaseGraphics.Composite.make(8,"copy");
  fan.vaseGraphics.Composite.m_xor = fan.vaseGraphics.Composite.make(9,"xor");
  fan.vaseGraphics.Composite.m_clear = fan.vaseGraphics.Composite.make(10,"clear");
  fan.vaseGraphics.Composite.m_vals = fan.sys.ObjUtil.coerce((function($this) { var $_u44 = fan.sys.List.make(fan.vaseGraphics.Composite.$type, [((fan.vaseGraphics.Composite.static$init ? fan.vaseGraphics.Composite.static$init() : null),fan.vaseGraphics.Composite.m_srcAtop),((fan.vaseGraphics.Composite.static$init ? fan.vaseGraphics.Composite.static$init() : null),fan.vaseGraphics.Composite.m_srcIn),((fan.vaseGraphics.Composite.static$init ? fan.vaseGraphics.Composite.static$init() : null),fan.vaseGraphics.Composite.m_srcOut),((fan.vaseGraphics.Composite.static$init ? fan.vaseGraphics.Composite.static$init() : null),fan.vaseGraphics.Composite.m_dstAtop),((fan.vaseGraphics.Composite.static$init ? fan.vaseGraphics.Composite.static$init() : null),fan.vaseGraphics.Composite.m_dstIn),((fan.vaseGraphics.Composite.static$init ? fan.vaseGraphics.Composite.static$init() : null),fan.vaseGraphics.Composite.m_dstOut),((fan.vaseGraphics.Composite.static$init ? fan.vaseGraphics.Composite.static$init() : null),fan.vaseGraphics.Composite.m_dstOver),((fan.vaseGraphics.Composite.static$init ? fan.vaseGraphics.Composite.static$init() : null),fan.vaseGraphics.Composite.m_lighter),((fan.vaseGraphics.Composite.static$init ? fan.vaseGraphics.Composite.static$init() : null),fan.vaseGraphics.Composite.m_copy),((fan.vaseGraphics.Composite.static$init ? fan.vaseGraphics.Composite.static$init() : null),fan.vaseGraphics.Composite.m_xor),((fan.vaseGraphics.Composite.static$init ? fan.vaseGraphics.Composite.static$init() : null),fan.vaseGraphics.Composite.m_clear)]); if ($_u44 == null) return null; return fan.sys.ObjUtil.toImmutable($_u44); })(this),fan.std.Type.find("sys::List<vaseGraphics::Composite>"));
  if (true)
  {
  }
  ;
  return;
}
fan.vaseGraphics.Composite.m_srcAtop = null;
fan.vaseGraphics.Composite.m_srcIn = null;
fan.vaseGraphics.Composite.m_srcOut = null;
fan.vaseGraphics.Composite.m_dstAtop = null;
fan.vaseGraphics.Composite.m_dstIn = null;
fan.vaseGraphics.Composite.m_dstOut = null;
fan.vaseGraphics.Composite.m_dstOver = null;
fan.vaseGraphics.Composite.m_lighter = null;
fan.vaseGraphics.Composite.m_copy = null;
fan.vaseGraphics.Composite.m_xor = null;
fan.vaseGraphics.Composite.m_clear = null;
fan.vaseGraphics.Composite.m_vals = null;
fan.vaseGraphics.Halign = fan.sys.Obj.$extend(fan.sys.Enum);
fan.vaseGraphics.Halign.prototype.$ctor = function()
{
  fan.sys.Enum.prototype.$ctor.call(this);
  this.peer = new fan.sys.EnumPeer(this);
  var $this = this;
}
fan.vaseGraphics.Halign.prototype.$typeof = function() { return fan.vaseGraphics.Halign.$type; }
fan.vaseGraphics.Halign.make = function($ordinal,$name) {
  var self = new fan.vaseGraphics.Halign();
  fan.vaseGraphics.Halign.make$(self,$ordinal,$name);
  return self;
  }
fan.vaseGraphics.Halign.make$ = function(self,$ordinal,$name)
{
  fan.sys.Enum.make$(self,$ordinal,$name);
  return;
}
fan.vaseGraphics.Halign.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.sys.Enum.doFromStr("vaseGraphics::Halign",$name,checked),fan.vaseGraphics.Halign.$type.toNullable());
}
fan.vaseGraphics.Halign.static$init = function()
{
  if (fan.vaseGraphics.Halign.static$inited) return;
  fan.vaseGraphics.Halign.static$inited = true;
  fan.vaseGraphics.Halign.m_left = fan.vaseGraphics.Halign.make(0,"left");
  fan.vaseGraphics.Halign.m_center = fan.vaseGraphics.Halign.make(1,"center");
  fan.vaseGraphics.Halign.m_right = fan.vaseGraphics.Halign.make(2,"right");
  fan.vaseGraphics.Halign.m_fill = fan.vaseGraphics.Halign.make(3,"fill");
  fan.vaseGraphics.Halign.m_repeat = fan.vaseGraphics.Halign.make(4,"repeat");
  fan.vaseGraphics.Halign.m_vals = fan.sys.ObjUtil.coerce((function($this) { var $_u45 = fan.sys.List.make(fan.vaseGraphics.Halign.$type, [((fan.vaseGraphics.Halign.static$init ? fan.vaseGraphics.Halign.static$init() : null),fan.vaseGraphics.Halign.m_left),((fan.vaseGraphics.Halign.static$init ? fan.vaseGraphics.Halign.static$init() : null),fan.vaseGraphics.Halign.m_center),((fan.vaseGraphics.Halign.static$init ? fan.vaseGraphics.Halign.static$init() : null),fan.vaseGraphics.Halign.m_right),((fan.vaseGraphics.Halign.static$init ? fan.vaseGraphics.Halign.static$init() : null),fan.vaseGraphics.Halign.m_fill),((fan.vaseGraphics.Halign.static$init ? fan.vaseGraphics.Halign.static$init() : null),fan.vaseGraphics.Halign.m_repeat)]); if ($_u45 == null) return null; return fan.sys.ObjUtil.toImmutable($_u45); })(this),fan.std.Type.find("sys::List<vaseGraphics::Halign>"));
  if (true)
  {
  }
  ;
  return;
}
fan.vaseGraphics.Halign.m_left = null;
fan.vaseGraphics.Halign.m_center = null;
fan.vaseGraphics.Halign.m_right = null;
fan.vaseGraphics.Halign.m_fill = null;
fan.vaseGraphics.Halign.m_repeat = null;
fan.vaseGraphics.Halign.m_vals = null;
fan.vaseGraphics.Valign = fan.sys.Obj.$extend(fan.sys.Enum);
fan.vaseGraphics.Valign.prototype.$ctor = function()
{
  fan.sys.Enum.prototype.$ctor.call(this);
  this.peer = new fan.sys.EnumPeer(this);
  var $this = this;
}
fan.vaseGraphics.Valign.prototype.$typeof = function() { return fan.vaseGraphics.Valign.$type; }
fan.vaseGraphics.Valign.make = function($ordinal,$name) {
  var self = new fan.vaseGraphics.Valign();
  fan.vaseGraphics.Valign.make$(self,$ordinal,$name);
  return self;
  }
fan.vaseGraphics.Valign.make$ = function(self,$ordinal,$name)
{
  fan.sys.Enum.make$(self,$ordinal,$name);
  return;
}
fan.vaseGraphics.Valign.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.sys.Enum.doFromStr("vaseGraphics::Valign",$name,checked),fan.vaseGraphics.Valign.$type.toNullable());
}
fan.vaseGraphics.Valign.static$init = function()
{
  if (fan.vaseGraphics.Valign.static$inited) return;
  fan.vaseGraphics.Valign.static$inited = true;
  fan.vaseGraphics.Valign.m_top = fan.vaseGraphics.Valign.make(0,"top");
  fan.vaseGraphics.Valign.m_center = fan.vaseGraphics.Valign.make(1,"center");
  fan.vaseGraphics.Valign.m_bottom = fan.vaseGraphics.Valign.make(2,"bottom");
  fan.vaseGraphics.Valign.m_fill = fan.vaseGraphics.Valign.make(3,"fill");
  fan.vaseGraphics.Valign.m_repeat = fan.vaseGraphics.Valign.make(4,"repeat");
  fan.vaseGraphics.Valign.m_vals = fan.sys.ObjUtil.coerce((function($this) { var $_u46 = fan.sys.List.make(fan.vaseGraphics.Valign.$type, [((fan.vaseGraphics.Valign.static$init ? fan.vaseGraphics.Valign.static$init() : null),fan.vaseGraphics.Valign.m_top),((fan.vaseGraphics.Valign.static$init ? fan.vaseGraphics.Valign.static$init() : null),fan.vaseGraphics.Valign.m_center),((fan.vaseGraphics.Valign.static$init ? fan.vaseGraphics.Valign.static$init() : null),fan.vaseGraphics.Valign.m_bottom),((fan.vaseGraphics.Valign.static$init ? fan.vaseGraphics.Valign.static$init() : null),fan.vaseGraphics.Valign.m_fill),((fan.vaseGraphics.Valign.static$init ? fan.vaseGraphics.Valign.static$init() : null),fan.vaseGraphics.Valign.m_repeat)]); if ($_u46 == null) return null; return fan.sys.ObjUtil.toImmutable($_u46); })(this),fan.std.Type.find("sys::List<vaseGraphics::Valign>"));
  if (true)
  {
  }
  ;
  return;
}
fan.vaseGraphics.Valign.m_top = null;
fan.vaseGraphics.Valign.m_center = null;
fan.vaseGraphics.Valign.m_bottom = null;
fan.vaseGraphics.Valign.m_fill = null;
fan.vaseGraphics.Valign.m_repeat = null;
fan.vaseGraphics.Valign.m_vals = null;
fan.vaseGraphics.Orientation = fan.sys.Obj.$extend(fan.sys.Enum);
fan.vaseGraphics.Orientation.prototype.$ctor = function()
{
  fan.sys.Enum.prototype.$ctor.call(this);
  this.peer = new fan.sys.EnumPeer(this);
  var $this = this;
}
fan.vaseGraphics.Orientation.prototype.$typeof = function() { return fan.vaseGraphics.Orientation.$type; }
fan.vaseGraphics.Orientation.make = function($ordinal,$name) {
  var self = new fan.vaseGraphics.Orientation();
  fan.vaseGraphics.Orientation.make$(self,$ordinal,$name);
  return self;
  }
fan.vaseGraphics.Orientation.make$ = function(self,$ordinal,$name)
{
  fan.sys.Enum.make$(self,$ordinal,$name);
  return;
}
fan.vaseGraphics.Orientation.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.sys.Enum.doFromStr("vaseGraphics::Orientation",$name,checked),fan.vaseGraphics.Orientation.$type.toNullable());
}
fan.vaseGraphics.Orientation.static$init = function()
{
  if (fan.vaseGraphics.Orientation.static$inited) return;
  fan.vaseGraphics.Orientation.static$inited = true;
  fan.vaseGraphics.Orientation.m_horizontal = fan.vaseGraphics.Orientation.make(0,"horizontal");
  fan.vaseGraphics.Orientation.m_vertical = fan.vaseGraphics.Orientation.make(1,"vertical");
  fan.vaseGraphics.Orientation.m_vals = fan.sys.ObjUtil.coerce((function($this) { var $_u47 = fan.sys.List.make(fan.vaseGraphics.Orientation.$type, [((fan.vaseGraphics.Orientation.static$init ? fan.vaseGraphics.Orientation.static$init() : null),fan.vaseGraphics.Orientation.m_horizontal),((fan.vaseGraphics.Orientation.static$init ? fan.vaseGraphics.Orientation.static$init() : null),fan.vaseGraphics.Orientation.m_vertical)]); if ($_u47 == null) return null; return fan.sys.ObjUtil.toImmutable($_u47); })(this),fan.std.Type.find("sys::List<vaseGraphics::Orientation>"));
  if (true)
  {
  }
  ;
  return;
}
fan.vaseGraphics.Orientation.m_horizontal = null;
fan.vaseGraphics.Orientation.m_vertical = null;
fan.vaseGraphics.Orientation.m_vals = null;
fan.vaseGraphics.GradientMode = fan.sys.Obj.$extend(fan.sys.Enum);
fan.vaseGraphics.GradientMode.prototype.$ctor = function()
{
  fan.sys.Enum.prototype.$ctor.call(this);
  this.peer = new fan.sys.EnumPeer(this);
  var $this = this;
}
fan.vaseGraphics.GradientMode.prototype.$typeof = function() { return fan.vaseGraphics.GradientMode.$type; }
fan.vaseGraphics.GradientMode.make = function($ordinal,$name) {
  var self = new fan.vaseGraphics.GradientMode();
  fan.vaseGraphics.GradientMode.make$(self,$ordinal,$name);
  return self;
  }
fan.vaseGraphics.GradientMode.make$ = function(self,$ordinal,$name)
{
  fan.sys.Enum.make$(self,$ordinal,$name);
  return;
}
fan.vaseGraphics.GradientMode.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.sys.Enum.doFromStr("vaseGraphics::GradientMode",$name,checked),fan.vaseGraphics.GradientMode.$type.toNullable());
}
fan.vaseGraphics.GradientMode.static$init = function()
{
  if (fan.vaseGraphics.GradientMode.static$inited) return;
  fan.vaseGraphics.GradientMode.static$inited = true;
  fan.vaseGraphics.GradientMode.m_linear = fan.vaseGraphics.GradientMode.make(0,"linear");
  fan.vaseGraphics.GradientMode.m_radial = fan.vaseGraphics.GradientMode.make(1,"radial");
  fan.vaseGraphics.GradientMode.m_vals = fan.sys.ObjUtil.coerce((function($this) { var $_u48 = fan.sys.List.make(fan.vaseGraphics.GradientMode.$type, [((fan.vaseGraphics.GradientMode.static$init ? fan.vaseGraphics.GradientMode.static$init() : null),fan.vaseGraphics.GradientMode.m_linear),((fan.vaseGraphics.GradientMode.static$init ? fan.vaseGraphics.GradientMode.static$init() : null),fan.vaseGraphics.GradientMode.m_radial)]); if ($_u48 == null) return null; return fan.sys.ObjUtil.toImmutable($_u48); })(this),fan.std.Type.find("sys::List<vaseGraphics::GradientMode>"));
  if (true)
  {
  }
  ;
  return;
}
fan.vaseGraphics.GradientMode.m_linear = null;
fan.vaseGraphics.GradientMode.m_radial = null;
fan.vaseGraphics.GradientMode.m_vals = null;
fan.vaseGraphics.initReflect$ = function() {
  fan.vaseGraphics.$pod = fan.std.Pod.$add('vaseGraphics');
  with (fan.vaseGraphics.$pod)
  {
    fan.vaseGraphics.Brush.$type = $am('Brush','sys::Obj',[],{'sys::Js':""},8451);
    fan.vaseGraphics.Color.$type = $at('Color','sys::Obj',['vaseGraphics::Brush'],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},270338);
    fan.vaseGraphics.Font.$type = $at('Font','sys::Obj',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},8195);
    fan.vaseGraphics.GfxEnv.$type = $at('GfxEnv','sys::Obj',[],{'sys::NoDoc':"",'sys::Js':""},8195);
    fan.vaseGraphics.Image.$type = $am('Image','sys::Obj',[],{'sys::Js':""},8449);
    fan.vaseGraphics.ConstImage.$type = $am('ConstImage','sys::Obj',['vaseGraphics::Image'],{'sys::Js':""},8451);
    fan.vaseGraphics.BufImage.$type = $am('BufImage','sys::Obj',['vaseGraphics::Image'],{'sys::Js':""},8449);
    fan.vaseGraphics.Shadow.$type = $at('Shadow','sys::Obj',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},270338);
    fan.vaseGraphics.Pattern.$type = $at('Pattern','sys::Obj',['vaseGraphics::Brush'],{'sys::Js':"",'sys::Serializable':""},270338);
    fan.vaseGraphics.Pen.$type = $at('Pen','sys::Obj',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},270338);
    fan.vaseGraphics.PointArray.$type = $am('PointArray','sys::Obj',[],{'sys::Js':""},8449);
    fan.vaseGraphics.Point.$type = $at('Point','sys::Obj',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},270338);
    fan.vaseGraphics.Size.$type = $at('Size','sys::Obj',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},270338);
    fan.vaseGraphics.Rect.$type = $at('Rect','sys::Obj',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},270338);
    fan.vaseGraphics.Gradient.$type = $at('Gradient','sys::Obj',['vaseGraphics::Brush'],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},270338);
    fan.vaseGraphics.GradientStop.$type = $at('GradientStop','sys::Obj',[],{'sys::Js':""},270338);
    fan.vaseGraphics.Path.$type = $at('Path','sys::Obj',[],{'sys::Js':""},8192);
    fan.vaseGraphics.PathStep.$type = $am('PathStep','sys::Obj',[],{'sys::NoDoc':"",'sys::Js':""},8451);
    fan.vaseGraphics.PathMoveTo.$type = $at('PathMoveTo','sys::Obj',['vaseGraphics::PathStep'],{'sys::NoDoc':"",'sys::Js':""},8194);
    fan.vaseGraphics.PathLineTo.$type = $at('PathLineTo','sys::Obj',['vaseGraphics::PathStep'],{'sys::NoDoc':"",'sys::Js':""},8194);
    fan.vaseGraphics.PathQuadTo.$type = $at('PathQuadTo','sys::Obj',['vaseGraphics::PathStep'],{'sys::NoDoc':"",'sys::Js':""},8194);
    fan.vaseGraphics.PathCubicTo.$type = $at('PathCubicTo','sys::Obj',['vaseGraphics::PathStep'],{'sys::NoDoc':"",'sys::Js':""},8194);
    fan.vaseGraphics.PathClose.$type = $at('PathClose','sys::Obj',['vaseGraphics::PathStep'],{'sys::NoDoc':"",'sys::Js':""},8194);
    fan.vaseGraphics.Graphics.$type = $am('Graphics','sys::Obj',[],{'sys::Js':""},8449);
    fan.vaseGraphics.Composite.$type = $at('Composite','sys::Enum',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},8234);
    fan.vaseGraphics.Halign.$type = $at('Halign','sys::Enum',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},8234);
    fan.vaseGraphics.Valign.$type = $at('Valign','sys::Enum',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},8234);
    fan.vaseGraphics.Orientation.$type = $at('Orientation','sys::Enum',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},8234);
    fan.vaseGraphics.GradientMode.$type = $at('GradientMode','sys::Enum',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},8234);
    fan.vaseGraphics.Color.$type.$af('black',106498,'vaseGraphics::Color',{}).$af('white',106498,'vaseGraphics::Color',{}).$af('red',106498,'vaseGraphics::Color',{}).$af('green',106498,'vaseGraphics::Color',{}).$af('blue',106498,'vaseGraphics::Color',{}).$af('gray',106498,'vaseGraphics::Color',{}).$af('darkGray',106498,'vaseGraphics::Color',{}).$af('yellow',106498,'vaseGraphics::Color',{}).$af('orange',106498,'vaseGraphics::Color',{}).$af('purple',106498,'vaseGraphics::Color',{}).$af('argb',73730,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('argb','sys::Int',true),new fan.std.Param('hasAlpha','sys::Bool',true)], fan.std.Param.$type),{}).$am('makeArgb',40962,'vaseGraphics::Color',fan.sys.List.makeFromJs([new fan.std.Param('a','sys::Int',false),new fan.std.Param('r','sys::Int',false),new fan.std.Param('g','sys::Int',false),new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('fromArgb',40962,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('a','sys::Int',false),new fan.std.Param('r','sys::Int',false),new fan.std.Param('g','sys::Int',false),new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('makeRgb',40962,'vaseGraphics::Color',fan.sys.List.makeFromJs([new fan.std.Param('r','sys::Int',false),new fan.std.Param('g','sys::Int',false),new fan.std.Param('b','sys::Int',false)], fan.std.Param.$type),{}).$am('makeHsv',40962,'vaseGraphics::Color',fan.sys.List.makeFromJs([new fan.std.Param('h','sys::Float',false),new fan.std.Param('s','sys::Float',false),new fan.std.Param('v','sys::Float',false)], fan.std.Param.$type),{}).$am('fromStr',40962,'vaseGraphics::Color?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('getA',40962,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('argb','sys::Int',false)], fan.std.Param.$type),{}).$am('getR',40962,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('argb','sys::Int',false)], fan.std.Param.$type),{}).$am('getG',40962,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('argb','sys::Int',false)], fan.std.Param.$type),{}).$am('getB',40962,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('argb','sys::Int',false)], fan.std.Param.$type),{}).$am('rgb',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('a',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('r',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('g',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('b',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('h',8192,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('s',8192,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('v',8192,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toCss',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('lighter',8192,'vaseGraphics::Color',fan.sys.List.makeFromJs([new fan.std.Param('percentage','sys::Float',true)], fan.std.Param.$type),{}).$am('darker',8192,'vaseGraphics::Color',fan.sys.List.makeFromJs([new fan.std.Param('percentage','sys::Float',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.Font.$type.$af('name',73730,'sys::Str',{}).$af('size',73730,'sys::Int',{}).$af('bold',73730,'sys::Bool',{}).$af('italic',73730,'sys::Bool',{}).$am('privateMake',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>',false)], fan.std.Param.$type),{}).$am('make',40966,'vaseGraphics::Font',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',true),new fan.std.Param('name','sys::Str',true),new fan.std.Param('bold','sys::Bool',true),new fan.std.Param('italic','sys::Bool',true)], fan.std.Param.$type),{}).$am('fromStr',40962,'vaseGraphics::Font?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('dispose',270337,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toSize',8192,'vaseGraphics::Font',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('toPlain',8192,'vaseGraphics::Font',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toBold',8192,'vaseGraphics::Font',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toItalic',8192,'vaseGraphics::Font',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('height',270337,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('ascent',270337,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('descent',270337,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('leading',270337,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('width',270337,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false)], fan.std.Param.$type),{});
    fan.vaseGraphics.GfxEnv.$type.$am('cur',40962,'vaseGraphics::GfxEnv?',fan.sys.List.makeFromJs([new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('makeFont',270337,'vaseGraphics::Font',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,vaseGraphics::Font>',false)], fan.std.Param.$type),{}).$am('fromUri',270337,'vaseGraphics::Image',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false),new fan.std.Param('onLoad','sys::Func<sys::Void,vaseGraphics::Image>',false)], fan.std.Param.$type),{}).$am('makeConstImage',270337,'vaseGraphics::ConstImage',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false)], fan.std.Param.$type),{}).$am('makeImage',270337,'vaseGraphics::Image',fan.sys.List.makeFromJs([new fan.std.Param('size','vaseGraphics::Size',false)], fan.std.Param.$type),{}).$am('fromStream',270337,'vaseGraphics::Image',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false)], fan.std.Param.$type),{}).$am('contains',270337,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('path','vaseGraphics::Path',false),new fan.std.Param('x','sys::Float',false),new fan.std.Param('y','sys::Float',false)], fan.std.Param.$type),{}).$am('makePointArray',270337,'vaseGraphics::PointArray',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.Image.$type.$am('size',270337,'vaseGraphics::Size',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.ConstImage.$type.$am('make',40966,'vaseGraphics::ConstImage',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false)], fan.std.Param.$type),{}).$am('isReady',270337,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.BufImage.$type.$am('getPixel',270337,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false)], fan.std.Param.$type),{}).$am('setPixel',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('value','sys::Int',false)], fan.std.Param.$type),{}).$am('toConst',270337,'vaseGraphics::ConstImage',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('save',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('out','std::OutStream',false),new fan.std.Param('format','std::MimeType',true)], fan.std.Param.$type),{}).$am('isLoaded',270337,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('fromUri',40966,'vaseGraphics::BufImage',fan.sys.List.makeFromJs([new fan.std.Param('uri','std::Uri',false),new fan.std.Param('onLoad','sys::Func<sys::Void,sys::This>',false)], fan.std.Param.$type),{}).$am('fromStream',40962,'vaseGraphics::Image',fan.sys.List.makeFromJs([new fan.std.Param('in','std::InStream',false)], fan.std.Param.$type),{}).$am('make',40966,'vaseGraphics::BufImage',fan.sys.List.makeFromJs([new fan.std.Param('size','vaseGraphics::Size',false)], fan.std.Param.$type),{}).$am('graphics',270337,'vaseGraphics::Graphics',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('dispose',270337,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.Shadow.$type.$af('blur',73730,'sys::Int',{}).$af('offsetX',73730,'sys::Int',{}).$af('offsetY',73730,'sys::Int',{}).$af('color',73730,'vaseGraphics::Color',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>',false)], fan.std.Param.$type),{}).$am('fromStr',40962,'vaseGraphics::Shadow?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{});
    fan.vaseGraphics.Pattern.$type.$af('image',73730,'vaseGraphics::ConstImage',{}).$af('bg',73730,'vaseGraphics::Color?',{}).$af('valign',73730,'vaseGraphics::Valign',{}).$af('halign',73730,'vaseGraphics::Halign',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('image','vaseGraphics::Image',false),new fan.std.Param('f','sys::Func<sys::Void,sys::This>?',true)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.Pen.$type.$af('width',73730,'sys::Int',{}).$af('cap',73730,'sys::Int',{}).$af('capSquare',106498,'sys::Int',{}).$af('capButt',106498,'sys::Int',{}).$af('capRound',106498,'sys::Int',{}).$af('join',73730,'sys::Int',{}).$af('joinMiter',106498,'sys::Int',{}).$af('joinBevel',106498,'sys::Int',{}).$af('joinRound',106498,'sys::Int',{}).$af('dash',73730,'sys::List<sys::Int>?',{}).$af('defVal',106498,'vaseGraphics::Pen',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>',false)], fan.std.Param.$type),{}).$am('fromStr',40962,'vaseGraphics::Pen?',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('capToStr',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('joinToStr',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.PointArray.$type.$am('size',270337,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',40966,'vaseGraphics::PointArray',fan.sys.List.makeFromJs([new fan.std.Param('size','sys::Int',false)], fan.std.Param.$type),{}).$am('getX',270337,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('i','sys::Int',false)], fan.std.Param.$type),{}).$am('setX',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('i','sys::Int',false),new fan.std.Param('v','sys::Int',false)], fan.std.Param.$type),{}).$am('getY',270337,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('i','sys::Int',false)], fan.std.Param.$type),{}).$am('setY',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('i','sys::Int',false),new fan.std.Param('v','sys::Int',false)], fan.std.Param.$type),{});
    fan.vaseGraphics.Point.$type.$af('defVal',106498,'vaseGraphics::Point',{}).$af('x',73730,'sys::Int',{}).$af('y',73730,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false)], fan.std.Param.$type),{}).$am('fromStr',40962,'vaseGraphics::Point?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('translate',8192,'vaseGraphics::Point',fan.sys.List.makeFromJs([new fan.std.Param('t','vaseGraphics::Point',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.Size.$type.$af('defVal',106498,'vaseGraphics::Size',{}).$af('w',73730,'sys::Int',{}).$af('h',73730,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false)], fan.std.Param.$type),{}).$am('fromStr',40962,'vaseGraphics::Size?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.Rect.$type.$af('defVal',106498,'vaseGraphics::Rect',{}).$af('x',73730,'sys::Int',{}).$af('y',73730,'sys::Int',{}).$af('w',73730,'sys::Int',{}).$af('h',73730,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false)], fan.std.Param.$type),{}).$am('makePosSize',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('p','vaseGraphics::Point',false),new fan.std.Param('s','vaseGraphics::Size',false)], fan.std.Param.$type),{}).$am('fromStr',40962,'vaseGraphics::Rect?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('pos',8192,'vaseGraphics::Point',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('center',8192,'vaseGraphics::Point',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('size',8192,'vaseGraphics::Size',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('contains',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false)], fan.std.Param.$type),{}).$am('intersects',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','vaseGraphics::Rect',false)], fan.std.Param.$type),{}).$am('intersection',8192,'vaseGraphics::Rect',fan.sys.List.makeFromJs([new fan.std.Param('that','vaseGraphics::Rect',false)], fan.std.Param.$type),{}).$am('union',8192,'vaseGraphics::Rect',fan.sys.List.makeFromJs([new fan.std.Param('that','vaseGraphics::Rect',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.Gradient.$type.$af('percent',106498,'sys::Str',{}).$af('pixel',106498,'sys::Str',{}).$af('mode',73730,'vaseGraphics::GradientMode',{}).$af('x1',73730,'sys::Int',{}).$af('y1',73730,'sys::Int',{}).$af('x2',73730,'sys::Int',{}).$af('y2',73730,'sys::Int',{}).$af('x1Unit',73730,'sys::Str',{}).$af('y1Unit',73730,'sys::Str',{}).$af('x2Unit',73730,'sys::Str',{}).$af('y2Unit',73730,'sys::Str',{}).$af('stops',73730,'sys::List<vaseGraphics::GradientStop>',{}).$af('defStops',100354,'sys::List<vaseGraphics::GradientStop>',{}).$am('fromStr',40962,'vaseGraphics::Gradient?',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('makeStr',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('str','sys::Str',false)], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>?',true)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.GradientStop.$type.$af('color',73730,'vaseGraphics::Color',{}).$af('pos',73730,'sys::Float',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('color','vaseGraphics::Color',false),new fan.std.Param('pos','sys::Float',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.Path.$type.$af('steps',73728,'sys::List<vaseGraphics::PathStep>',{}).$am('clear',8192,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('contains',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Float',false),new fan.std.Param('y','sys::Float',false)], fan.std.Param.$type),{}).$am('close',8192,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('moveTo',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Float',false),new fan.std.Param('y','sys::Float',false)], fan.std.Param.$type),{}).$am('lineTo',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Float',false),new fan.std.Param('y','sys::Float',false)], fan.std.Param.$type),{}).$am('quadTo',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('cx','sys::Float',false),new fan.std.Param('cy','sys::Float',false),new fan.std.Param('x','sys::Float',false),new fan.std.Param('y','sys::Float',false)], fan.std.Param.$type),{}).$am('cubicTo',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('cx1','sys::Float',false),new fan.std.Param('cy1','sys::Float',false),new fan.std.Param('cx2','sys::Float',false),new fan.std.Param('cy2','sys::Float',false),new fan.std.Param('x','sys::Float',false),new fan.std.Param('y','sys::Float',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.PathMoveTo.$type.$af('x',73730,'sys::Float',{}).$af('y',73730,'sys::Float',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>',false)], fan.std.Param.$type),{});
    fan.vaseGraphics.PathLineTo.$type.$af('x',73730,'sys::Float',{}).$af('y',73730,'sys::Float',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>',false)], fan.std.Param.$type),{});
    fan.vaseGraphics.PathQuadTo.$type.$af('cx',73730,'sys::Float',{}).$af('cy',73730,'sys::Float',{}).$af('x',73730,'sys::Float',{}).$af('y',73730,'sys::Float',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>',false)], fan.std.Param.$type),{});
    fan.vaseGraphics.PathCubicTo.$type.$af('cx1',73730,'sys::Float',{}).$af('cy1',73730,'sys::Float',{}).$af('cx2',73730,'sys::Float',{}).$af('cy2',73730,'sys::Float',{}).$af('x',73730,'sys::Float',{}).$af('y',73730,'sys::Float',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>',false)], fan.std.Param.$type),{});
    fan.vaseGraphics.PathClose.$type.$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.Graphics.$type.$af('brush',270337,'vaseGraphics::Brush',{}).$af('pen',270337,'vaseGraphics::Pen',{}).$af('font',270337,'vaseGraphics::Font',{}).$af('antialias',270337,'sys::Bool',{}).$af('alpha',270337,'sys::Int',{}).$af('composite',270337,'vaseGraphics::Composite',{}).$am('drawLine',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x1','sys::Int',false),new fan.std.Param('y1','sys::Int',false),new fan.std.Param('x2','sys::Int',false),new fan.std.Param('y2','sys::Int',false)], fan.std.Param.$type),{}).$am('drawPolyline',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('ps','vaseGraphics::PointArray',false)], fan.std.Param.$type),{}).$am('drawPolygon',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('ps','vaseGraphics::PointArray',false)], fan.std.Param.$type),{}).$am('fillPolygon',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('ps','vaseGraphics::PointArray',false)], fan.std.Param.$type),{}).$am('drawRect',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false)], fan.std.Param.$type),{}).$am('fillRect',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false)], fan.std.Param.$type),{}).$am('clearRect',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false)], fan.std.Param.$type),{}).$am('drawRoundRect',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false),new fan.std.Param('wArc','sys::Int',false),new fan.std.Param('hArc','sys::Int',false)], fan.std.Param.$type),{}).$am('fillRoundRect',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false),new fan.std.Param('wArc','sys::Int',false),new fan.std.Param('hArc','sys::Int',false)], fan.std.Param.$type),{}).$am('drawOval',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false)], fan.std.Param.$type),{}).$am('fillOval',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false)], fan.std.Param.$type),{}).$am('drawArc',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false),new fan.std.Param('startAngle','sys::Int',false),new fan.std.Param('arcAngle','sys::Int',false)], fan.std.Param.$type),{}).$am('fillArc',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false),new fan.std.Param('startAngle','sys::Int',false),new fan.std.Param('arcAngle','sys::Int',false)], fan.std.Param.$type),{}).$am('drawText',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false)], fan.std.Param.$type),{}).$am('drawImage',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('image','vaseGraphics::Image',false),new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false)], fan.std.Param.$type),{}).$am('copyImage',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('image','vaseGraphics::Image',false),new fan.std.Param('src','vaseGraphics::Rect',false),new fan.std.Param('dest','vaseGraphics::Rect',false)], fan.std.Param.$type),{}).$am('clip',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('r','vaseGraphics::Rect',false)], fan.std.Param.$type),{}).$am('clipBounds',270337,'vaseGraphics::Rect',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('push',270337,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('pop',270337,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('dispose',270337,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('drawPath',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('path','vaseGraphics::Path',false)], fan.std.Param.$type),{}).$am('fillPath',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('path','vaseGraphics::Path',false)], fan.std.Param.$type),{}).$am('transform',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('mat','vaseMath::Transform2D',false)], fan.std.Param.$type),{}).$am('clipPath',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('path','vaseGraphics::Path',false)], fan.std.Param.$type),{}).$am('setShadow',270337,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('shadow','vaseGraphics::Shadow?',false)], fan.std.Param.$type),{});
    fan.vaseGraphics.Composite.$type.$af('srcAtop',106506,'vaseGraphics::Composite',{}).$af('srcIn',106506,'vaseGraphics::Composite',{}).$af('srcOut',106506,'vaseGraphics::Composite',{}).$af('dstAtop',106506,'vaseGraphics::Composite',{}).$af('dstIn',106506,'vaseGraphics::Composite',{}).$af('dstOut',106506,'vaseGraphics::Composite',{}).$af('dstOver',106506,'vaseGraphics::Composite',{}).$af('lighter',106506,'vaseGraphics::Composite',{}).$af('copy',106506,'vaseGraphics::Composite',{}).$af('xor',106506,'vaseGraphics::Composite',{}).$af('clear',106506,'vaseGraphics::Composite',{}).$af('vals',106498,'sys::List<vaseGraphics::Composite>',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('$ordinal','sys::Int',false),new fan.std.Param('$name','sys::Str',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'vaseGraphics::Composite?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.Halign.$type.$af('left',106506,'vaseGraphics::Halign',{}).$af('center',106506,'vaseGraphics::Halign',{}).$af('right',106506,'vaseGraphics::Halign',{}).$af('fill',106506,'vaseGraphics::Halign',{}).$af('repeat',106506,'vaseGraphics::Halign',{}).$af('vals',106498,'sys::List<vaseGraphics::Halign>',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('$ordinal','sys::Int',false),new fan.std.Param('$name','sys::Str',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'vaseGraphics::Halign?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.Valign.$type.$af('top',106506,'vaseGraphics::Valign',{}).$af('center',106506,'vaseGraphics::Valign',{}).$af('bottom',106506,'vaseGraphics::Valign',{}).$af('fill',106506,'vaseGraphics::Valign',{}).$af('repeat',106506,'vaseGraphics::Valign',{}).$af('vals',106498,'sys::List<vaseGraphics::Valign>',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('$ordinal','sys::Int',false),new fan.std.Param('$name','sys::Str',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'vaseGraphics::Valign?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.Orientation.$type.$af('horizontal',106506,'vaseGraphics::Orientation',{}).$af('vertical',106506,'vaseGraphics::Orientation',{}).$af('vals',106498,'sys::List<vaseGraphics::Orientation>',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('$ordinal','sys::Int',false),new fan.std.Param('$name','sys::Str',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'vaseGraphics::Orientation?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGraphics.GradientMode.$type.$af('linear',106506,'vaseGraphics::GradientMode',{}).$af('radial',106506,'vaseGraphics::GradientMode',{}).$af('vals',106498,'sys::List<vaseGraphics::GradientMode>',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('$ordinal','sys::Int',false),new fan.std.Param('$name','sys::Str',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'vaseGraphics::GradientMode?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    m_meta = {};
    m_meta["pod.name"] = "vaseGraphics";
    m_meta["pod.version"] = "1.0.73";
    m_meta["pod.depends"] = "sys 2.0;std 1.0;concurrent 1.0;vaseMath 1.0";
    m_meta["pod.summary"] = "Graphics 2D API";
    m_meta["pod.isScript"] = "false";
    m_meta["fcode.version"] = "1.1.3";
    m_meta["build.host"] = "mywifi.local";
    m_meta["build.user"] = "yangjiandong";
    m_meta["build.ts"] = "2020-04-13T19:26:49.000+08:00 Asia/Harbin";
    m_meta["build.tsKey"] = "200413192649";
    m_meta["build.compiler"] = "1.1";
    m_meta["build.platform"] = "macosx-x86_64";
    m_meta["pod.docApi"] = "true";
    m_meta["pod.docSrc"] = "false";
    m_meta["pod.native.java"] = "false";
    m_meta["pod.native.jni"] = "false";
    m_meta["pod.native.dotnet"] = "false";
    m_meta["pod.native.js"] = "false";
  }
  fan.vaseGraphics.$clos$_u16 = new fan.sys.ClosureFuncSpec$("vaseGraphics::$clos$_u16",fan.sys.Void.$type,["it","vaseGraphics::Shadow","false"]);
  fan.vaseGraphics.$clos$_u19 = new fan.sys.ClosureFuncSpec$("vaseGraphics::$clos$_u19",fan.sys.Void.$type,["tok","sys::Str","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseGraphics.$clos$_u20 = new fan.sys.ClosureFuncSpec$("vaseGraphics::$clos$_u20",fan.sys.Void.$type,["s","sys::Str","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseGraphics.$clos$_u22 = new fan.sys.ClosureFuncSpec$("vaseGraphics::$clos$_u22",fan.sys.Void.$type,["it","vaseGraphics::Pen","false"]);
  fan.vaseGraphics.$clos$_u35 = new fan.sys.ClosureFuncSpec$("vaseGraphics::$clos$_u35",fan.sys.Obj.$type.toNullable(),["color","vaseGraphics::Color","false","i","sys::Int","false"]);
  fan.vaseGraphics.$clos$_u38 = new fan.sys.ClosureFuncSpec$("vaseGraphics::$clos$_u38",fan.sys.Void.$type,["stop","vaseGraphics::GradientStop","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseGraphics.$clos$_u40 = new fan.sys.ClosureFuncSpec$("vaseGraphics::$clos$_u40",fan.sys.Void.$type,["it","vaseGraphics::PathMoveTo","false"]);
  fan.vaseGraphics.$clos$_u41 = new fan.sys.ClosureFuncSpec$("vaseGraphics::$clos$_u41",fan.sys.Void.$type,["it","vaseGraphics::PathLineTo","false"]);
  fan.vaseGraphics.$clos$_u42 = new fan.sys.ClosureFuncSpec$("vaseGraphics::$clos$_u42",fan.sys.Void.$type,["it","vaseGraphics::PathQuadTo","false"]);
  fan.vaseGraphics.$clos$_u43 = new fan.sys.ClosureFuncSpec$("vaseGraphics::$clos$_u43",fan.sys.Void.$type,["it","vaseGraphics::PathCubicTo","false"]);
}
fan.vaseGraphics.initStatic$ = function() {
  fan.vaseGraphics.Color.static$init();
  fan.vaseGraphics.Pen.static$init();
  fan.vaseGraphics.Point.static$init();
  fan.vaseGraphics.Size.static$init();
  fan.vaseGraphics.Rect.static$init();
  fan.vaseGraphics.Gradient.static$init();
  fan.vaseGraphics.Composite.static$init();
  fan.vaseGraphics.Halign.static$init();
  fan.vaseGraphics.Valign.static$init();
  fan.vaseGraphics.Orientation.static$init();
  fan.vaseGraphics.GradientMode.static$init();
}
fan.vaseGraphics.initReflect$();
fan.vaseGraphics.initStatic$();
}).call(this);

(function () {
var root=this;
var fan=root.fan;
if (fan === undefined) {
   if (typeof exports !== 'undefined') {
     fan = exports;
   } else {
     fan = root.fan = {};
   }
}
if (!fan.sys && (typeof require !== 'undefined')) fan = require('sys.js');

if (typeof exports !== 'undefined') {
  fan.vaseWindow = exports;
} else {
  fan.vaseWindow = root.fan.vaseWindow = {};
}

fan.vaseWindow.View = function() {}
fan.vaseWindow.View.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseWindow.View.prototype.$typeof = function() { return fan.vaseWindow.View.$type; }
fan.vaseWindow.View.prototype.onPaint = function(g)
{
  return;
}
fan.vaseWindow.View.prototype.onMotionEvent = function(e)
{
  return;
}
fan.vaseWindow.View.prototype.onKeyEvent = function(e)
{
  return;
}
fan.vaseWindow.View.prototype.onWindowEvent = function(e)
{
  return;
}
fan.vaseWindow.View.prototype.getPrefSize = function(hintsWidth,hintsHeight)
{
  return fan.vaseGraphics.Size.make(hintsWidth,hintsHeight);
}
fan.vaseWindow.View.prototype.m_host = null;
fan.vaseWindow.Window = function() {}
fan.vaseWindow.Window.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseWindow.Window.prototype.$typeof = function() { return fan.vaseWindow.Window.$type; }
fan.vaseWindow.TextInput = function() {}
fan.vaseWindow.TextInput.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseWindow.TextInput.prototype.$typeof = function() { return fan.vaseWindow.TextInput.$type; }
fan.vaseWindow.TextInput.static$init = function()
{
  if (fan.vaseWindow.TextInput.static$inited) return;
  fan.vaseWindow.TextInput.static$inited = true;
  fan.vaseWindow.TextInput.m_inputTypeText = 1;
  fan.vaseWindow.TextInput.m_inputTypeIntNumber = 2;
  fan.vaseWindow.TextInput.m_inputTypeFloatNumber = 3;
  fan.vaseWindow.TextInput.m_inputTypePassword = 4;
  return;
}
fan.vaseWindow.TextInput.prototype.m_host = null;
fan.vaseWindow.TextInput.m_inputTypeText = 0;
fan.vaseWindow.TextInput.m_inputTypeIntNumber = 0;
fan.vaseWindow.TextInput.m_inputTypeFloatNumber = 0;
fan.vaseWindow.TextInput.m_inputTypePassword = 0;
fan.vaseWindow.TextInputPeer = function() {}
fan.vaseWindow.TextInputPeer.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseWindow.TextInputPeer.prototype.$typeof = function() { return fan.vaseWindow.TextInputPeer.$type; }
fan.vaseWindow.Toolkit = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseWindow.Toolkit.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseWindow.Toolkit.prototype.$typeof = function() { return fan.vaseWindow.Toolkit.$type; }
fan.vaseWindow.Toolkit.cur = function()
{
  var env = fan.sys.ObjUtil.coerce(fan.concurrent.Actor.locals().get("vaseWindow.env"),fan.vaseWindow.Toolkit.$type.toNullable());
  if (env != null)
  {
    return fan.sys.ObjUtil.coerce(env,fan.vaseWindow.Toolkit.$type);
  }
  ;
  fan.vaseWindow.ToolkitEnv.init();
  env = fan.sys.ObjUtil.coerce(fan.concurrent.Actor.locals().get("vaseWindow.env"),fan.vaseWindow.Toolkit.$type.toNullable());
  if (env != null)
  {
    return fan.sys.ObjUtil.coerce(env,fan.vaseWindow.Toolkit.$type);
  }
  ;
  throw fan.sys.Err.make("No vaseWindow.env is active");
}
fan.vaseWindow.Toolkit.tryInitAsyncRunner = function()
{
  var client = fan.std.Pod.find("vaseClient",false);
  if (client != null)
  {
    client.type("AsyncRunner").method("init").call();
  }
  ;
  return;
}
fan.vaseWindow.Toolkit.prototype.dpi = function()
{
  return 135;
}
fan.vaseWindow.Toolkit.prototype.density = function()
{
  return fan.sys.Int.divFloat(this.dpi(),fan.sys.Float.make(160.0));
}
fan.vaseWindow.Toolkit.make = function() {
  var self = new fan.vaseWindow.Toolkit();
  fan.vaseWindow.Toolkit.make$(self);
  return self;
  }
fan.vaseWindow.Toolkit.make$ = function(self)
{
  return;
}
fan.vaseWindow.ToolkitEnv = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseWindow.ToolkitEnv.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.vaseWindow.ToolkitEnvPeer(this);
  var $this = this;
}
fan.vaseWindow.ToolkitEnv.prototype.$typeof = function() { return fan.vaseWindow.ToolkitEnv.$type; }
fan.vaseWindow.ToolkitEnv.init = function()
{
  return fan.vaseWindow.ToolkitEnvPeer.init();
}
fan.vaseWindow.ToolkitEnv.make = function() {
  var self = new fan.vaseWindow.ToolkitEnv();
  fan.vaseWindow.ToolkitEnv.make$(self);
  return self;
  }
fan.vaseWindow.ToolkitEnv.make$ = function(self)
{
  return;
}
fan.vaseWindow.ToolkitEnvPeer = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseWindow.ToolkitEnvPeer.prototype.$ctor = function(self) {}
fan.vaseWindow.ToolkitEnvPeer.init = function() {
   fan.concurrent.Actor.locals().set("vaseGraphics.env", new fan.vaseWindow.GfxEnv());
   fan.concurrent.Actor.locals().set("vaseWindow.env", new fan.vaseWindow.Toolkit());
}
fan.vaseWindow.Toolkit.prototype.window = function(view) {
  if (view) {
   this.m_curWindow = fan.vaseWindow.WtkWindow.make(view);
   this.m_curWindow.show(null);
  }
  return this.m_curWindow;
}
fan.vaseWindow.Toolkit.prototype.name = function() {
  return "HTML5"
}
fan.vaseWindow.Toolkit.prototype.$name = function() {
  return "HTML5"
}
fan.vaseWindow.Toolkit.prototype.density = function() {
  return 1;
}
fan.vaseWindow.Toolkit.prototype.callLater = function(delay, callback)
{
  window.setTimeout(function(){ callback.call(); }, delay);
}
fan.vaseWindow.Toolkit.prototype.clipboard = function()
{
  if (!fan.vaseWindow.Toolkit.m_clipboard) {
    fan.vaseWindow.Toolkit.m_clipboard = new fan.vaseWindow.JSClipboard();
  }
  return fan.vaseWindow.Toolkit.m_clipboard;
}
fan.vaseWindow.Clipboard = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseWindow.Clipboard.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseWindow.Clipboard.prototype.$typeof = function() { return fan.vaseWindow.Clipboard.$type; }
fan.vaseWindow.Clipboard.make = function() {
  var self = new fan.vaseWindow.Clipboard();
  fan.vaseWindow.Clipboard.make$(self);
  return self;
  }
fan.vaseWindow.Clipboard.make$ = function(self)
{
  return;
}
fan.vaseWindow.Event = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseWindow.Event.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_consumed = false;
  this.m_time = fan.std.DateTime.now();
  this.m_id = -1;
  this.m_type = -1;
  this.m_flag = -1;
  return;
}
fan.vaseWindow.Event.prototype.$typeof = function() { return fan.vaseWindow.Event.$type; }
fan.vaseWindow.Event.prototype.consumed = function()
{
  return this.m_consumed;
}
fan.vaseWindow.Event.prototype.consumed$ = function(it)
{
  this.m_consumed = it;
  return;
}
fan.vaseWindow.Event.prototype.consume = function()
{
  this.m_consumed = true;
  return;
}
fan.vaseWindow.Event.prototype.time = function()
{
  return this.m_time;
}
fan.vaseWindow.Event.prototype.time$ = function(it)
{
  this.m_time = it;
  return;
}
fan.vaseWindow.Event.prototype.src = function()
{
  return this.m_src;
}
fan.vaseWindow.Event.prototype.src$ = function(it)
{
  this.m_src = it;
  return;
}
fan.vaseWindow.Event.prototype.data = function()
{
  return this.m_data;
}
fan.vaseWindow.Event.prototype.data$ = function(it)
{
  this.m_data = it;
  return;
}
fan.vaseWindow.Event.prototype.id = function()
{
  return this.m_id;
}
fan.vaseWindow.Event.prototype.id$ = function(it)
{
  this.m_id = it;
  return;
}
fan.vaseWindow.Event.prototype.type = function()
{
  return this.m_type;
}
fan.vaseWindow.Event.prototype.type$ = function(it)
{
  this.m_type = it;
  return;
}
fan.vaseWindow.Event.prototype.flag = function()
{
  return this.m_flag;
}
fan.vaseWindow.Event.prototype.flag$ = function(it)
{
  this.m_flag = it;
  return;
}
fan.vaseWindow.Event.prototype.rawEvent = function()
{
  return this.m_rawEvent;
}
fan.vaseWindow.Event.prototype.rawEvent$ = function(it)
{
  this.m_rawEvent = it;
  return;
}
fan.vaseWindow.Event.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("type:",fan.sys.ObjUtil.coerce(this.m_type,fan.sys.Obj.$type.toNullable())),", consumed:"),fan.sys.ObjUtil.coerce(this.m_consumed,fan.sys.Obj.$type.toNullable()));
}
fan.vaseWindow.Event.make = function() {
  var self = new fan.vaseWindow.Event();
  fan.vaseWindow.Event.make$(self);
  return self;
  }
fan.vaseWindow.Event.make$ = function(self)
{
  ;
  return;
}
fan.vaseWindow.Event.prototype.m_consumed = false;
fan.vaseWindow.Event.prototype.m_time = null;
fan.vaseWindow.Event.prototype.m_src = null;
fan.vaseWindow.Event.prototype.m_data = null;
fan.vaseWindow.Event.prototype.m_id = 0;
fan.vaseWindow.Event.prototype.m_type = 0;
fan.vaseWindow.Event.prototype.m_flag = 0;
fan.vaseWindow.Event.prototype.m_rawEvent = null;
fan.vaseWindow.StateChangedEvent = fan.sys.Obj.$extend(fan.vaseWindow.Event);
fan.vaseWindow.StateChangedEvent.prototype.$ctor = function()
{
  fan.vaseWindow.Event.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseWindow.StateChangedEvent.prototype.$typeof = function() { return fan.vaseWindow.StateChangedEvent.$type; }
fan.vaseWindow.StateChangedEvent.prototype.oldValue = function()
{
  return this.m_oldValue;
}
fan.vaseWindow.StateChangedEvent.prototype.oldValue$ = function(it)
{
  this.m_oldValue = it;
  return;
}
fan.vaseWindow.StateChangedEvent.prototype.newValue = function()
{
  return this.m_newValue;
}
fan.vaseWindow.StateChangedEvent.prototype.newValue$ = function(it)
{
  this.m_newValue = it;
  return;
}
fan.vaseWindow.StateChangedEvent.make = function(oldValue,newValue,field,src) {
  var self = new fan.vaseWindow.StateChangedEvent();
  fan.vaseWindow.StateChangedEvent.make$(self,oldValue,newValue,field,src);
  return self;
  }
fan.vaseWindow.StateChangedEvent.make$ = function(self,oldValue,newValue,field,src)
{
  fan.vaseWindow.Event.make$(self);
  self.m_oldValue = oldValue;
  self.m_newValue = newValue;
  self.m_field = fan.sys.ObjUtil.coerce((function($this) { var $_u1 = field; if ($_u1 == null) return null; return fan.sys.ObjUtil.toImmutable($_u1); })(self),fan.std.Field.$type.toNullable());
  self.m_src = src;
  return;
}
fan.vaseWindow.StateChangedEvent.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("old: ",this.m_oldValue),", new: "),this.m_newValue);
}
fan.vaseWindow.StateChangedEvent.prototype.m_oldValue = null;
fan.vaseWindow.StateChangedEvent.prototype.m_newValue = null;
fan.vaseWindow.StateChangedEvent.prototype.m_field = null;
fan.vaseWindow.KeyEvent = fan.sys.Obj.$extend(fan.vaseWindow.Event);
fan.vaseWindow.KeyEvent.prototype.$ctor = function()
{
  fan.vaseWindow.Event.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseWindow.KeyEvent.prototype.$typeof = function() { return fan.vaseWindow.KeyEvent.$type; }
fan.vaseWindow.KeyEvent.prototype.keyChar = function()
{
  return this.m_keyChar;
}
fan.vaseWindow.KeyEvent.prototype.keyChar$ = function(it)
{
  this.m_keyChar = it;
  return;
}
fan.vaseWindow.KeyEvent.prototype.key = function()
{
  return this.m_key;
}
fan.vaseWindow.KeyEvent.prototype.key$ = function(it)
{
  this.m_key = it;
  return;
}
fan.vaseWindow.KeyEvent.make = function(type) {
  var self = new fan.vaseWindow.KeyEvent();
  fan.vaseWindow.KeyEvent.make$(self,type);
  return self;
  }
fan.vaseWindow.KeyEvent.make$ = function(self,type)
{
  fan.vaseWindow.Event.make$(self);
  self.m_type = type;
  return;
}
fan.vaseWindow.KeyEvent.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.vaseWindow.Event.prototype.toStr.call(this),fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(", KeyEvent: key:",this.m_key),", keyChar:"),fan.sys.Int.toChar(fan.sys.ObjUtil.coerce(this.m_keyChar,fan.sys.Int.$type))));
}
fan.vaseWindow.KeyEvent.static$init = function()
{
  if (fan.vaseWindow.KeyEvent.static$inited) return;
  fan.vaseWindow.KeyEvent.static$inited = true;
  fan.vaseWindow.KeyEvent.m_pressed = 9;
  fan.vaseWindow.KeyEvent.m_released = 10;
  fan.vaseWindow.KeyEvent.m_typed = 11;
  return;
}
fan.vaseWindow.KeyEvent.prototype.m_keyChar = null;
fan.vaseWindow.KeyEvent.prototype.m_key = null;
fan.vaseWindow.KeyEvent.m_pressed = 0;
fan.vaseWindow.KeyEvent.m_released = 0;
fan.vaseWindow.KeyEvent.m_typed = 0;
fan.vaseWindow.MotionEvent = fan.sys.Obj.$extend(fan.vaseWindow.Event);
fan.vaseWindow.MotionEvent.prototype.$ctor = function()
{
  fan.vaseWindow.Event.prototype.$ctor.call(this);
  var $this = this;
  this.m_pointerId = 0;
  return;
}
fan.vaseWindow.MotionEvent.prototype.$typeof = function() { return fan.vaseWindow.MotionEvent.$type; }
fan.vaseWindow.MotionEvent.prototype.x = function()
{
  return this.m_x;
}
fan.vaseWindow.MotionEvent.prototype.x$ = function(it)
{
  this.m_x = it;
  return;
}
fan.vaseWindow.MotionEvent.prototype.y = function()
{
  return this.m_y;
}
fan.vaseWindow.MotionEvent.prototype.y$ = function(it)
{
  this.m_y = it;
  return;
}
fan.vaseWindow.MotionEvent.prototype.deltaX = function()
{
  return this.m_deltaX;
}
fan.vaseWindow.MotionEvent.prototype.deltaX$ = function(it)
{
  this.m_deltaX = it;
  return;
}
fan.vaseWindow.MotionEvent.prototype.deltaY = function()
{
  return this.m_deltaY;
}
fan.vaseWindow.MotionEvent.prototype.deltaY$ = function(it)
{
  this.m_deltaY = it;
  return;
}
fan.vaseWindow.MotionEvent.prototype.delta = function()
{
  return this.m_delta;
}
fan.vaseWindow.MotionEvent.prototype.delta$ = function(it)
{
  this.m_delta = it;
  return;
}
fan.vaseWindow.MotionEvent.prototype.count = function()
{
  return this.m_count;
}
fan.vaseWindow.MotionEvent.prototype.count$ = function(it)
{
  this.m_count = it;
  return;
}
fan.vaseWindow.MotionEvent.prototype.button = function()
{
  return this.m_button;
}
fan.vaseWindow.MotionEvent.prototype.button$ = function(it)
{
  this.m_button = it;
  return;
}
fan.vaseWindow.MotionEvent.prototype.key = function()
{
  return this.m_key;
}
fan.vaseWindow.MotionEvent.prototype.key$ = function(it)
{
  this.m_key = it;
  return;
}
fan.vaseWindow.MotionEvent.prototype.pressure = function()
{
  return this.m_pressure;
}
fan.vaseWindow.MotionEvent.prototype.pressure$ = function(it)
{
  this.m_pressure = it;
  return;
}
fan.vaseWindow.MotionEvent.prototype.size = function()
{
  return this.m_size;
}
fan.vaseWindow.MotionEvent.prototype.size$ = function(it)
{
  this.m_size = it;
  return;
}
fan.vaseWindow.MotionEvent.prototype.pointers = function()
{
  return this.m_pointers;
}
fan.vaseWindow.MotionEvent.prototype.pointers$ = function(it)
{
  this.m_pointers = it;
  return;
}
fan.vaseWindow.MotionEvent.prototype.speed = function()
{
  return this.m_speed;
}
fan.vaseWindow.MotionEvent.prototype.speed$ = function(it)
{
  this.m_speed = it;
  return;
}
fan.vaseWindow.MotionEvent.prototype.relativeX = function()
{
  return this.m_relativeX;
}
fan.vaseWindow.MotionEvent.prototype.relativeX$ = function(it)
{
  this.m_relativeX = it;
  return;
}
fan.vaseWindow.MotionEvent.prototype.relativeY = function()
{
  return this.m_relativeY;
}
fan.vaseWindow.MotionEvent.prototype.relativeY$ = function(it)
{
  this.m_relativeY = it;
  return;
}
fan.vaseWindow.MotionEvent.prototype.pointerId = function()
{
  return this.m_pointerId;
}
fan.vaseWindow.MotionEvent.prototype.pointerId$ = function(it)
{
  this.m_pointerId = it;
  return;
}
fan.vaseWindow.MotionEvent.make = function(type) {
  var self = new fan.vaseWindow.MotionEvent();
  fan.vaseWindow.MotionEvent.make$(self,type);
  return self;
  }
fan.vaseWindow.MotionEvent.make$ = function(self,type)
{
  fan.vaseWindow.Event.make$(self);
  ;
  self.m_type = type;
  return;
}
fan.vaseWindow.MotionEvent.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.vaseWindow.Event.prototype.toStr.call(this),fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(", MotionEvent: x:",fan.sys.ObjUtil.coerce(this.m_x,fan.sys.Obj.$type.toNullable())),", y:"),fan.sys.ObjUtil.coerce(this.m_y,fan.sys.Obj.$type.toNullable())),", key:"),this.m_key),", count:"),fan.sys.ObjUtil.coerce(this.m_count,fan.sys.Obj.$type.toNullable())),", button:"),fan.sys.ObjUtil.coerce(this.m_button,fan.sys.Obj.$type.toNullable())));
}
fan.vaseWindow.MotionEvent.static$init = function()
{
  if (fan.vaseWindow.MotionEvent.static$inited) return;
  fan.vaseWindow.MotionEvent.static$inited = true;
  fan.vaseWindow.MotionEvent.m_pressed = 0;
  fan.vaseWindow.MotionEvent.m_released = 1;
  fan.vaseWindow.MotionEvent.m_moved = 2;
  fan.vaseWindow.MotionEvent.m_longPressed = 3;
  fan.vaseWindow.MotionEvent.m_clicked = 4;
  fan.vaseWindow.MotionEvent.m_cancel = 5;
  fan.vaseWindow.MotionEvent.m_wheel = 6;
  fan.vaseWindow.MotionEvent.m_other = 7;
  return;
}
fan.vaseWindow.MotionEvent.prototype.m_x = null;
fan.vaseWindow.MotionEvent.prototype.m_y = null;
fan.vaseWindow.MotionEvent.prototype.m_deltaX = null;
fan.vaseWindow.MotionEvent.prototype.m_deltaY = null;
fan.vaseWindow.MotionEvent.prototype.m_delta = null;
fan.vaseWindow.MotionEvent.prototype.m_count = null;
fan.vaseWindow.MotionEvent.prototype.m_button = null;
fan.vaseWindow.MotionEvent.prototype.m_key = null;
fan.vaseWindow.MotionEvent.prototype.m_pressure = null;
fan.vaseWindow.MotionEvent.prototype.m_size = null;
fan.vaseWindow.MotionEvent.prototype.m_pointers = null;
fan.vaseWindow.MotionEvent.prototype.m_speed = null;
fan.vaseWindow.MotionEvent.prototype.m_relativeX = null;
fan.vaseWindow.MotionEvent.prototype.m_relativeY = null;
fan.vaseWindow.MotionEvent.prototype.m_pointerId = 0;
fan.vaseWindow.MotionEvent.m_pressed = 0;
fan.vaseWindow.MotionEvent.m_released = 0;
fan.vaseWindow.MotionEvent.m_moved = 0;
fan.vaseWindow.MotionEvent.m_longPressed = 0;
fan.vaseWindow.MotionEvent.m_clicked = 0;
fan.vaseWindow.MotionEvent.m_cancel = 0;
fan.vaseWindow.MotionEvent.m_wheel = 0;
fan.vaseWindow.MotionEvent.m_other = 0;
fan.vaseWindow.Key = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseWindow.Key.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseWindow.Key.prototype.$typeof = function() { return fan.vaseWindow.Key.$type; }
fan.vaseWindow.Key.predefine = function(mask,str,mod) {
  var self = new fan.vaseWindow.Key();
  fan.vaseWindow.Key.predefine$(self,mask,str,mod);
  return self;
  }
fan.vaseWindow.Key.predefine$ = function(self,mask,str,mod)
{
  if (mod === undefined) mod = false;
  self.m_mask = mask;
  self.m_str = str;
  return;
}
fan.vaseWindow.Key.fromStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  var $this = this;
  try
  {
    var key = ((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_byStr).get(s);
    if (key != null)
    {
      return key;
    }
    ;
    var toks = fan.sys.Str.split(s,fan.sys.ObjUtil.coerce(43,fan.sys.Int.$type.toNullable()));
    if (fan.sys.ObjUtil.equals(toks.size(),1))
    {
      var x = toks.first();
      if ((fan.sys.ObjUtil.equals(fan.sys.Str.size(x),1) && !fan.sys.Int.isAlpha(fan.sys.Str.get(x,0))))
      {
        return fan.vaseWindow.Key.makeNew(fan.sys.Str.get(x,0),x);
      }
      ;
      throw fan.sys.Err.make();
    }
    ;
    var mask = 0;
    var gotBase = false;
    toks.each(fan.sys.Func.make$closure(
      fan.vaseWindow.$clos$_u2,
      function(tok,ignoreparam$1)
      {
        var part = fan.vaseWindow.Key.fromStr(tok);
        if (!part.isModifier())
        {
          if (gotBase)
          {
            throw fan.sys.Err.make();
          }
          ;
          gotBase = true;
        }
        ;
        mask = fan.sys.Int.or(mask,part.m_mask);
        return;
      }));
    return fan.vaseWindow.Key.makeNew(mask,null);
  }
  catch ($_u3)
  {
  }
  ;
  if (checked)
  {
    throw fan.sys.ParseErr.make(fan.sys.Str.plus("Invalid Key: ",s));
  }
  ;
  return null;
}
fan.vaseWindow.Key.fromMask = function(mask)
{
  return fan.sys.ObjUtil.coerce((function($this) { var $_u4 = ((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_byMask).get(fan.sys.ObjUtil.coerce(mask,fan.sys.Obj.$type.toNullable())); if ($_u4 != null) return $_u4; return fan.vaseWindow.Key.makeNew(mask,fan.sys.Int.toChar(mask)); })(this),fan.vaseWindow.Key.$type);
}
fan.vaseWindow.Key.makeNew = function(mask,str) {
  var self = new fan.vaseWindow.Key();
  fan.vaseWindow.Key.makeNew$(self,mask,str);
  return self;
  }
fan.vaseWindow.Key.makeNew$ = function(self,mask,str)
{
  self.m_mask = mask;
  self.m_str = str;
  return;
}
fan.vaseWindow.Key.prototype.hash = function()
{
  return this.m_mask;
}
fan.vaseWindow.Key.prototype.equals = function(that)
{
  var x = fan.sys.ObjUtil.as(that,fan.vaseWindow.Key.$type);
  if (x == null)
  {
    return false;
  }
  ;
  return fan.sys.ObjUtil.equals(this.m_mask,x.m_mask);
}
fan.vaseWindow.Key.prototype.toStr = function()
{
  if (this.m_str != null)
  {
    return fan.sys.ObjUtil.coerce(this.m_str,fan.sys.Str.$type);
  }
  ;
  var s = fan.sys.StrBuf.make();
  if (this.isShift())
  {
    s.join(((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_shift).m_str,"+");
  }
  ;
  if (this.isAlt())
  {
    s.join(((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_alt).m_str,"+");
  }
  ;
  if (this.isCtrl())
  {
    s.join(((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_ctrl).m_str,"+");
  }
  ;
  if (this.isCommand())
  {
    s.join(((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_command).m_str,"+");
  }
  ;
  var baseMask = fan.sys.Int.and(this.m_mask,((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_modifierUnmask));
  if (fan.sys.ObjUtil.compareNE(baseMask,0))
  {
    s.join(fan.vaseWindow.Key.fromMask(baseMask).m_str,"+");
  }
  ;
  return s.toStr();
}
fan.vaseWindow.Key.prototype.list = function()
{
  var $this = this;
  return fan.sys.ObjUtil.coerce(fan.sys.Str.split(this.toStr(),fan.sys.ObjUtil.coerce(43,fan.sys.Int.$type.toNullable())).map(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.vaseWindow.$clos$_u5,
    function(tok,ignoreparam$1)
    {
      return fan.sys.ObjUtil.coerce(fan.vaseWindow.Key.fromStr(tok),fan.vaseWindow.Key.$type);
    }),fan.std.Type.find("sys::Func<sys::Obj?,sys::Str,sys::Int>"))),fan.std.Type.find("sys::List<vaseWindow::Key>"));
}
fan.vaseWindow.Key.prototype.primary = function()
{
  return fan.vaseWindow.Key.fromMask(fan.sys.Int.and(this.m_mask,((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_modifierUnmask)));
}
fan.vaseWindow.Key.prototype.modifiers = function()
{
  var key = ((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_none);
  if (this.isAlt())
  {
    key = key.plus(((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_alt));
  }
  ;
  if (this.isShift())
  {
    key = key.plus(((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_shift));
  }
  ;
  if (this.isCtrl())
  {
    key = key.plus(((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_ctrl));
  }
  ;
  if (this.isCommand())
  {
    key = key.plus(((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_command));
  }
  ;
  return key;
}
fan.vaseWindow.Key.prototype.isModifier = function()
{
  return fan.sys.ObjUtil.equals(fan.sys.Int.and(this.m_mask,((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_modifierUnmask)),0);
}
fan.vaseWindow.Key.prototype.hasModifier = function()
{
  return fan.sys.ObjUtil.compareNE(fan.sys.Int.and(this.m_mask,((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_modifierMask)),0);
}
fan.vaseWindow.Key.prototype.isDown = function(modifier)
{
  return fan.sys.ObjUtil.compareNE(fan.sys.Int.and(this.m_mask,modifier.m_mask),0);
}
fan.vaseWindow.Key.prototype.isShift = function()
{
  return this.isDown(((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_shift));
}
fan.vaseWindow.Key.prototype.isAlt = function()
{
  return this.isDown(((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_alt));
}
fan.vaseWindow.Key.prototype.isCtrl = function()
{
  return this.isDown(((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_ctrl));
}
fan.vaseWindow.Key.prototype.isCommand = function()
{
  return this.isDown(((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_command));
}
fan.vaseWindow.Key.prototype.plus = function(x)
{
  if ((!this.isModifier() && !x.isModifier()))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Neither is modifier: ",this)," + "),x));
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_mask,0))
  {
    return x;
  }
  ;
  if (fan.sys.ObjUtil.equals(x.m_mask,0))
  {
    return this;
  }
  ;
  return fan.vaseWindow.Key.makeNew(fan.sys.Int.or(this.m_mask,x.m_mask),null);
}
fan.vaseWindow.Key.prototype.minus = function(x)
{
  if ((fan.sys.ObjUtil.equals(fan.sys.Int.and(this.m_mask,x.m_mask),0) || !x.isModifier()))
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("Not modifier: ",this)," - "),x));
  }
  ;
  return fan.vaseWindow.Key.makeNew(fan.sys.Int.and(this.m_mask,fan.sys.Int.not(x.m_mask)),null);
}
fan.vaseWindow.Key.prototype.replace = function(modFrom,modTo)
{
  if (fan.sys.ObjUtil.equals(fan.sys.Int.and(this.m_mask,modFrom.m_mask),0))
  {
    return this;
  }
  ;
  return fan.vaseWindow.Key.makeNew(fan.sys.Int.or(fan.sys.Int.and(this.m_mask,fan.sys.Int.not(modFrom.m_mask)),modTo.m_mask),null);
}
fan.vaseWindow.Key.static$init = function()
{
  if (fan.vaseWindow.Key.static$inited) return;
  fan.vaseWindow.Key.static$inited = true;
  var $this = this;
  fan.vaseWindow.Key.m_a = fan.vaseWindow.Key.predefine(65,"A");
  fan.vaseWindow.Key.m_b = fan.vaseWindow.Key.predefine(66,"B");
  fan.vaseWindow.Key.m_c = fan.vaseWindow.Key.predefine(67,"C");
  fan.vaseWindow.Key.m_d = fan.vaseWindow.Key.predefine(68,"D");
  fan.vaseWindow.Key.m_e = fan.vaseWindow.Key.predefine(69,"E");
  fan.vaseWindow.Key.m_f = fan.vaseWindow.Key.predefine(70,"F");
  fan.vaseWindow.Key.m_g = fan.vaseWindow.Key.predefine(71,"G");
  fan.vaseWindow.Key.m_h = fan.vaseWindow.Key.predefine(72,"H");
  fan.vaseWindow.Key.m_i = fan.vaseWindow.Key.predefine(73,"I");
  fan.vaseWindow.Key.m_j = fan.vaseWindow.Key.predefine(74,"J");
  fan.vaseWindow.Key.m_k = fan.vaseWindow.Key.predefine(75,"K");
  fan.vaseWindow.Key.m_l = fan.vaseWindow.Key.predefine(76,"L");
  fan.vaseWindow.Key.m_m = fan.vaseWindow.Key.predefine(77,"M");
  fan.vaseWindow.Key.m_n = fan.vaseWindow.Key.predefine(78,"N");
  fan.vaseWindow.Key.m_o = fan.vaseWindow.Key.predefine(79,"O");
  fan.vaseWindow.Key.m_p = fan.vaseWindow.Key.predefine(80,"P");
  fan.vaseWindow.Key.m_q = fan.vaseWindow.Key.predefine(81,"Q");
  fan.vaseWindow.Key.m_r = fan.vaseWindow.Key.predefine(82,"R");
  fan.vaseWindow.Key.m_s = fan.vaseWindow.Key.predefine(83,"S");
  fan.vaseWindow.Key.m_t = fan.vaseWindow.Key.predefine(84,"T");
  fan.vaseWindow.Key.m_u = fan.vaseWindow.Key.predefine(85,"U");
  fan.vaseWindow.Key.m_v = fan.vaseWindow.Key.predefine(86,"V");
  fan.vaseWindow.Key.m_w = fan.vaseWindow.Key.predefine(87,"W");
  fan.vaseWindow.Key.m_x = fan.vaseWindow.Key.predefine(88,"X");
  fan.vaseWindow.Key.m_y = fan.vaseWindow.Key.predefine(89,"Y");
  fan.vaseWindow.Key.m_z = fan.vaseWindow.Key.predefine(90,"Z");
  fan.vaseWindow.Key.m_num0 = fan.vaseWindow.Key.predefine(48,"0");
  fan.vaseWindow.Key.m_num1 = fan.vaseWindow.Key.predefine(49,"1");
  fan.vaseWindow.Key.m_num2 = fan.vaseWindow.Key.predefine(50,"2");
  fan.vaseWindow.Key.m_num3 = fan.vaseWindow.Key.predefine(51,"3");
  fan.vaseWindow.Key.m_num4 = fan.vaseWindow.Key.predefine(52,"4");
  fan.vaseWindow.Key.m_num5 = fan.vaseWindow.Key.predefine(53,"5");
  fan.vaseWindow.Key.m_num6 = fan.vaseWindow.Key.predefine(54,"6");
  fan.vaseWindow.Key.m_num7 = fan.vaseWindow.Key.predefine(55,"7");
  fan.vaseWindow.Key.m_num8 = fan.vaseWindow.Key.predefine(56,"8");
  fan.vaseWindow.Key.m_num9 = fan.vaseWindow.Key.predefine(57,"9");
  fan.vaseWindow.Key.m_space = fan.vaseWindow.Key.predefine(32,"Space");
  fan.vaseWindow.Key.m_backspace = fan.vaseWindow.Key.predefine(8,"Backspace");
  fan.vaseWindow.Key.m_enter = fan.vaseWindow.Key.predefine(13,"Enter");
  fan.vaseWindow.Key.m_$delete = fan.vaseWindow.Key.predefine(127,"Del");
  fan.vaseWindow.Key.m_esc = fan.vaseWindow.Key.predefine(27,"Esc");
  fan.vaseWindow.Key.m_tab = fan.vaseWindow.Key.predefine(9,"Tab");
  fan.vaseWindow.Key.m_comma = fan.vaseWindow.Key.predefine(44,"Comma");
  fan.vaseWindow.Key.m_period = fan.vaseWindow.Key.predefine(46,"Period");
  fan.vaseWindow.Key.m_slash = fan.vaseWindow.Key.predefine(47,"Slash");
  fan.vaseWindow.Key.m_semicolon = fan.vaseWindow.Key.predefine(59,"Semicolon");
  fan.vaseWindow.Key.m_quote = fan.vaseWindow.Key.predefine(39,"Quote");
  fan.vaseWindow.Key.m_openBracket = fan.vaseWindow.Key.predefine(91,"OpenBracket");
  fan.vaseWindow.Key.m_closeBracket = fan.vaseWindow.Key.predefine(93,"CloseBracket");
  fan.vaseWindow.Key.m_backSlash = fan.vaseWindow.Key.predefine(92,"BackSlash");
  fan.vaseWindow.Key.m_backtick = fan.vaseWindow.Key.predefine(96,"Backtick");
  fan.vaseWindow.Key.m_up = fan.vaseWindow.Key.predefine(16777217,"Up");
  fan.vaseWindow.Key.m_down = fan.vaseWindow.Key.predefine(16777218,"Down");
  fan.vaseWindow.Key.m_left = fan.vaseWindow.Key.predefine(16777219,"Left");
  fan.vaseWindow.Key.m_right = fan.vaseWindow.Key.predefine(16777220,"Right");
  fan.vaseWindow.Key.m_pageUp = fan.vaseWindow.Key.predefine(16777221,"PageUp");
  fan.vaseWindow.Key.m_pageDown = fan.vaseWindow.Key.predefine(16777222,"PageDown");
  fan.vaseWindow.Key.m_home = fan.vaseWindow.Key.predefine(16777223,"Home");
  fan.vaseWindow.Key.m_end = fan.vaseWindow.Key.predefine(16777224,"End");
  fan.vaseWindow.Key.m_insert = fan.vaseWindow.Key.predefine(16777225,"Insert");
  fan.vaseWindow.Key.m_f1 = fan.vaseWindow.Key.predefine(16777226,"F1");
  fan.vaseWindow.Key.m_f2 = fan.vaseWindow.Key.predefine(16777227,"F2");
  fan.vaseWindow.Key.m_f3 = fan.vaseWindow.Key.predefine(16777228,"F3");
  fan.vaseWindow.Key.m_f4 = fan.vaseWindow.Key.predefine(16777229,"F4");
  fan.vaseWindow.Key.m_f5 = fan.vaseWindow.Key.predefine(16777230,"F5");
  fan.vaseWindow.Key.m_f6 = fan.vaseWindow.Key.predefine(16777231,"F6");
  fan.vaseWindow.Key.m_f7 = fan.vaseWindow.Key.predefine(16777232,"F7");
  fan.vaseWindow.Key.m_f8 = fan.vaseWindow.Key.predefine(16777233,"F8");
  fan.vaseWindow.Key.m_f9 = fan.vaseWindow.Key.predefine(16777234,"F9");
  fan.vaseWindow.Key.m_f10 = fan.vaseWindow.Key.predefine(16777235,"F10");
  fan.vaseWindow.Key.m_f11 = fan.vaseWindow.Key.predefine(16777236,"F11");
  fan.vaseWindow.Key.m_f12 = fan.vaseWindow.Key.predefine(16777237,"F12");
  fan.vaseWindow.Key.m_keypadMult = fan.vaseWindow.Key.predefine(16777258,"Keypad*");
  fan.vaseWindow.Key.m_keypadPlus = fan.vaseWindow.Key.predefine(16777259,"Keypad+");
  fan.vaseWindow.Key.m_keypadMinus = fan.vaseWindow.Key.predefine(16777261,"Keypad-");
  fan.vaseWindow.Key.m_keypadDot = fan.vaseWindow.Key.predefine(16777262,"Keypad.");
  fan.vaseWindow.Key.m_keypadDiv = fan.vaseWindow.Key.predefine(16777263,"Keypad/");
  fan.vaseWindow.Key.m_keypad0 = fan.vaseWindow.Key.predefine(16777264,"Keypad0");
  fan.vaseWindow.Key.m_keypad1 = fan.vaseWindow.Key.predefine(16777265,"Keypad1");
  fan.vaseWindow.Key.m_keypad2 = fan.vaseWindow.Key.predefine(16777266,"Keypad2");
  fan.vaseWindow.Key.m_keypad3 = fan.vaseWindow.Key.predefine(16777267,"Keypad3");
  fan.vaseWindow.Key.m_keypad4 = fan.vaseWindow.Key.predefine(16777268,"Keypad4");
  fan.vaseWindow.Key.m_keypad5 = fan.vaseWindow.Key.predefine(16777269,"Keypad5");
  fan.vaseWindow.Key.m_keypad6 = fan.vaseWindow.Key.predefine(16777270,"Keypad6");
  fan.vaseWindow.Key.m_keypad7 = fan.vaseWindow.Key.predefine(16777271,"Keypad7");
  fan.vaseWindow.Key.m_keypad8 = fan.vaseWindow.Key.predefine(16777272,"Keypad8");
  fan.vaseWindow.Key.m_keypad9 = fan.vaseWindow.Key.predefine(16777273,"Keypad9");
  fan.vaseWindow.Key.m_keypadEqual = fan.vaseWindow.Key.predefine(16777277,"Keypad=");
  fan.vaseWindow.Key.m_keypadEnter = fan.vaseWindow.Key.predefine(16777296,"KeypadEnter");
  fan.vaseWindow.Key.m_capsLock = fan.vaseWindow.Key.predefine(16777298,"CapsLock");
  fan.vaseWindow.Key.m_numLock = fan.vaseWindow.Key.predefine(16777299,"NumLock");
  fan.vaseWindow.Key.m_scrollLock = fan.vaseWindow.Key.predefine(16777300,"ScrollLock");
  fan.vaseWindow.Key.m_pause = fan.vaseWindow.Key.predefine(16777301,"Pause");
  fan.vaseWindow.Key.m_printScreen = fan.vaseWindow.Key.predefine(16777303,"PrintScreen");
  fan.vaseWindow.Key.m_alt = fan.vaseWindow.Key.predefine(65536,"Alt");
  fan.vaseWindow.Key.m_shift = fan.vaseWindow.Key.predefine(131072,"Shift");
  fan.vaseWindow.Key.m_ctrl = fan.vaseWindow.Key.predefine(262144,"Ctrl");
  fan.vaseWindow.Key.m_command = fan.vaseWindow.Key.predefine(4194304,"Command");
  fan.vaseWindow.Key.m_modifierMask = fan.sys.Int.or(fan.sys.Int.or(fan.sys.Int.or(((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_alt).m_mask,((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_shift).m_mask),((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_ctrl).m_mask),((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_command).m_mask);
  fan.vaseWindow.Key.m_modifierUnmask = fan.sys.Int.not(((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_modifierMask));
  fan.vaseWindow.Key.m_none = fan.vaseWindow.Key.predefine(0,"");
  if (true)
  {
    var m = fan.std.Map.fromLiteral([],[],fan.std.Type.find("sys::Int"),fan.std.Type.find("vaseWindow::Key"));
    var s = fan.std.Map.fromLiteral([],[],fan.std.Type.find("sys::Str"),fan.std.Type.find("vaseWindow::Key"));
    fan.vaseWindow.Key.$type.fields().each(fan.sys.Func.make$closure(
      fan.vaseWindow.$clos$_u6,
      function(f,ignoreparam$1)
      {
        if ((f.isStatic() && fan.sys.ObjUtil.equals(f.type(),fan.vaseWindow.Key.$type)))
        {
          var key = fan.sys.ObjUtil.coerce(f.get(null),fan.vaseWindow.Key.$type);
          m.set(fan.sys.ObjUtil.coerce(key.m_mask,fan.sys.Obj.$type.toNullable()),key);
          if (!fan.sys.Str.isEmpty(key.m_str))
          {
            s.set(fan.sys.ObjUtil.coerce(key.m_str,fan.sys.Str.$type),key);
          }
          ;
        }
        ;
        return;
      }));
    fan.vaseWindow.Key.m_byMask = fan.sys.ObjUtil.coerce((function($this) { var $_u7 = m; if ($_u7 == null) return null; return fan.sys.ObjUtil.toImmutable($_u7); })(this),fan.std.Type.find("std::Map<sys::Int,vaseWindow::Key>"));
    fan.vaseWindow.Key.m_byStr = fan.sys.ObjUtil.coerce((function($this) { var $_u8 = s; if ($_u8 == null) return null; return fan.sys.ObjUtil.toImmutable($_u8); })(this),fan.std.Type.find("std::Map<sys::Str,vaseWindow::Key>"));
  }
  ;
  return;
}
fan.vaseWindow.Key.m_a = null;
fan.vaseWindow.Key.m_b = null;
fan.vaseWindow.Key.m_c = null;
fan.vaseWindow.Key.m_d = null;
fan.vaseWindow.Key.m_e = null;
fan.vaseWindow.Key.m_f = null;
fan.vaseWindow.Key.m_g = null;
fan.vaseWindow.Key.m_h = null;
fan.vaseWindow.Key.m_i = null;
fan.vaseWindow.Key.m_j = null;
fan.vaseWindow.Key.m_k = null;
fan.vaseWindow.Key.m_l = null;
fan.vaseWindow.Key.m_m = null;
fan.vaseWindow.Key.m_n = null;
fan.vaseWindow.Key.m_o = null;
fan.vaseWindow.Key.m_p = null;
fan.vaseWindow.Key.m_q = null;
fan.vaseWindow.Key.m_r = null;
fan.vaseWindow.Key.m_s = null;
fan.vaseWindow.Key.m_t = null;
fan.vaseWindow.Key.m_u = null;
fan.vaseWindow.Key.m_v = null;
fan.vaseWindow.Key.m_w = null;
fan.vaseWindow.Key.m_x = null;
fan.vaseWindow.Key.m_y = null;
fan.vaseWindow.Key.m_z = null;
fan.vaseWindow.Key.m_num0 = null;
fan.vaseWindow.Key.m_num1 = null;
fan.vaseWindow.Key.m_num2 = null;
fan.vaseWindow.Key.m_num3 = null;
fan.vaseWindow.Key.m_num4 = null;
fan.vaseWindow.Key.m_num5 = null;
fan.vaseWindow.Key.m_num6 = null;
fan.vaseWindow.Key.m_num7 = null;
fan.vaseWindow.Key.m_num8 = null;
fan.vaseWindow.Key.m_num9 = null;
fan.vaseWindow.Key.m_space = null;
fan.vaseWindow.Key.m_backspace = null;
fan.vaseWindow.Key.m_enter = null;
fan.vaseWindow.Key.m_$delete = null;
fan.vaseWindow.Key.m_esc = null;
fan.vaseWindow.Key.m_tab = null;
fan.vaseWindow.Key.m_comma = null;
fan.vaseWindow.Key.m_period = null;
fan.vaseWindow.Key.m_slash = null;
fan.vaseWindow.Key.m_semicolon = null;
fan.vaseWindow.Key.m_quote = null;
fan.vaseWindow.Key.m_openBracket = null;
fan.vaseWindow.Key.m_closeBracket = null;
fan.vaseWindow.Key.m_backSlash = null;
fan.vaseWindow.Key.m_backtick = null;
fan.vaseWindow.Key.m_up = null;
fan.vaseWindow.Key.m_down = null;
fan.vaseWindow.Key.m_left = null;
fan.vaseWindow.Key.m_right = null;
fan.vaseWindow.Key.m_pageUp = null;
fan.vaseWindow.Key.m_pageDown = null;
fan.vaseWindow.Key.m_home = null;
fan.vaseWindow.Key.m_end = null;
fan.vaseWindow.Key.m_insert = null;
fan.vaseWindow.Key.m_f1 = null;
fan.vaseWindow.Key.m_f2 = null;
fan.vaseWindow.Key.m_f3 = null;
fan.vaseWindow.Key.m_f4 = null;
fan.vaseWindow.Key.m_f5 = null;
fan.vaseWindow.Key.m_f6 = null;
fan.vaseWindow.Key.m_f7 = null;
fan.vaseWindow.Key.m_f8 = null;
fan.vaseWindow.Key.m_f9 = null;
fan.vaseWindow.Key.m_f10 = null;
fan.vaseWindow.Key.m_f11 = null;
fan.vaseWindow.Key.m_f12 = null;
fan.vaseWindow.Key.m_keypadMult = null;
fan.vaseWindow.Key.m_keypadPlus = null;
fan.vaseWindow.Key.m_keypadMinus = null;
fan.vaseWindow.Key.m_keypadDot = null;
fan.vaseWindow.Key.m_keypadDiv = null;
fan.vaseWindow.Key.m_keypad0 = null;
fan.vaseWindow.Key.m_keypad1 = null;
fan.vaseWindow.Key.m_keypad2 = null;
fan.vaseWindow.Key.m_keypad3 = null;
fan.vaseWindow.Key.m_keypad4 = null;
fan.vaseWindow.Key.m_keypad5 = null;
fan.vaseWindow.Key.m_keypad6 = null;
fan.vaseWindow.Key.m_keypad7 = null;
fan.vaseWindow.Key.m_keypad8 = null;
fan.vaseWindow.Key.m_keypad9 = null;
fan.vaseWindow.Key.m_keypadEqual = null;
fan.vaseWindow.Key.m_keypadEnter = null;
fan.vaseWindow.Key.m_capsLock = null;
fan.vaseWindow.Key.m_numLock = null;
fan.vaseWindow.Key.m_scrollLock = null;
fan.vaseWindow.Key.m_pause = null;
fan.vaseWindow.Key.m_printScreen = null;
fan.vaseWindow.Key.m_alt = null;
fan.vaseWindow.Key.m_shift = null;
fan.vaseWindow.Key.m_ctrl = null;
fan.vaseWindow.Key.m_command = null;
fan.vaseWindow.Key.m_modifierMask = 0;
fan.vaseWindow.Key.m_modifierUnmask = 0;
fan.vaseWindow.Key.m_none = null;
fan.vaseWindow.Key.m_byMask = null;
fan.vaseWindow.Key.m_byStr = null;
fan.vaseWindow.Key.prototype.m_mask = 0;
fan.vaseWindow.Key.prototype.m_str = null;
fan.vaseWindow.EventListeners = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseWindow.EventListeners.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_listeners = fan.sys.List.make(fan.std.Type.find("sys::Func<sys::Void,vaseWindow::Event?>"));
  return;
}
fan.vaseWindow.EventListeners.prototype.$typeof = function() { return fan.vaseWindow.EventListeners.$type; }
fan.vaseWindow.EventListeners.prototype.list = function()
{
  return fan.sys.ObjUtil.coerce(this.m_listeners.ro(),fan.std.Type.find("sys::List<sys::Func<sys::Void,vaseWindow::Event?>>"));
}
fan.vaseWindow.EventListeners.prototype.isEmpty = function()
{
  return this.m_listeners.isEmpty();
}
fan.vaseWindow.EventListeners.prototype.size = function()
{
  return this.m_listeners.size();
}
fan.vaseWindow.EventListeners.prototype.add = function(cb)
{
  this.m_listeners.add(cb);
  this.modified();
  return;
}
fan.vaseWindow.EventListeners.prototype.remove = function(cb)
{
  this.m_listeners.remove(cb);
  this.modified();
  return;
}
fan.vaseWindow.EventListeners.prototype.fire = function(event)
{
  var $this = this;
  this.m_listeners.each(fan.sys.Func.make$closure(
    fan.vaseWindow.$clos$_u9,
    function(cb,ignoreparam$1)
    {
      try
      {
        if ((event == null || !event.m_consumed))
        {
          cb.call(event);
        }
        ;
      }
      catch ($_u10)
      {
        $_u10 = fan.sys.Err.make($_u10);
        if ($_u10 instanceof fan.sys.Err)
        {
          var e = $_u10;
          var e;
          e.trace();
        }
        else
        {
          throw $_u10;
        }
      }
      ;
      return;
    }));
  return;
}
fan.vaseWindow.EventListeners.prototype.modified = function()
{
  try
  {
    (function($this) { var $_u11 = $this.m_onModify; if ($_u11 == null) return null; return $_u11.call($this); })(this);
  }
  catch ($_u12)
  {
    $_u12 = fan.sys.Err.make($_u12);
    if ($_u12 instanceof fan.sys.Err)
    {
      var e = $_u12;
      var e;
      e.trace();
    }
    else
    {
      throw $_u12;
    }
  }
  ;
  return;
}
fan.vaseWindow.EventListeners.prototype.listeners = function()
{
  return this.m_listeners;
}
fan.vaseWindow.EventListeners.prototype.listeners$ = function(it)
{
  this.m_listeners = it;
  return;
}
fan.vaseWindow.EventListeners.prototype.onModify = function()
{
  return this.m_onModify;
}
fan.vaseWindow.EventListeners.prototype.onModify$ = function(it)
{
  this.m_onModify = it;
  return;
}
fan.vaseWindow.EventListeners.make = function() {
  var self = new fan.vaseWindow.EventListeners();
  fan.vaseWindow.EventListeners.make$(self);
  return self;
  }
fan.vaseWindow.EventListeners.make$ = function(self)
{
  ;
  return;
}
fan.vaseWindow.EventListeners.prototype.m_listeners = null;
fan.vaseWindow.EventListeners.prototype.m_onModify = null;
fan.vaseWindow.WindowEvent = fan.sys.Obj.$extend(fan.vaseWindow.Event);
fan.vaseWindow.WindowEvent.prototype.$ctor = function()
{
  fan.vaseWindow.Event.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseWindow.WindowEvent.prototype.$typeof = function() { return fan.vaseWindow.WindowEvent.$type; }
fan.vaseWindow.WindowEvent.make = function(type) {
  var self = new fan.vaseWindow.WindowEvent();
  fan.vaseWindow.WindowEvent.make$(self,type);
  return self;
  }
fan.vaseWindow.WindowEvent.make$ = function(self,type)
{
  fan.vaseWindow.Event.make$(self);
  self.m_type = type;
  return;
}
fan.vaseWindow.WindowEvent.prototype.toStr = function()
{
  return fan.sys.Str.plus("WindowEvent: ",fan.sys.ObjUtil.coerce(this.m_type,fan.sys.Obj.$type.toNullable()));
}
fan.vaseWindow.WindowEvent.static$init = function()
{
  if (fan.vaseWindow.WindowEvent.static$inited) return;
  fan.vaseWindow.WindowEvent.static$inited = true;
  fan.vaseWindow.WindowEvent.m_opened = 0;
  fan.vaseWindow.WindowEvent.m_closing = 1;
  fan.vaseWindow.WindowEvent.m_closed = 2;
  fan.vaseWindow.WindowEvent.m_deactivated = 3;
  fan.vaseWindow.WindowEvent.m_activated = 4;
  fan.vaseWindow.WindowEvent.m_deiconified = 5;
  fan.vaseWindow.WindowEvent.m_iconified = 6;
  fan.vaseWindow.WindowEvent.m_lostFocus = 7;
  fan.vaseWindow.WindowEvent.m_gainedFocus = 8;
  return;
}
fan.vaseWindow.WindowEvent.m_opened = 0;
fan.vaseWindow.WindowEvent.m_closing = 0;
fan.vaseWindow.WindowEvent.m_closed = 0;
fan.vaseWindow.WindowEvent.m_deactivated = 0;
fan.vaseWindow.WindowEvent.m_activated = 0;
fan.vaseWindow.WindowEvent.m_deiconified = 0;
fan.vaseWindow.WindowEvent.m_iconified = 0;
fan.vaseWindow.WindowEvent.m_lostFocus = 0;
fan.vaseWindow.WindowEvent.m_gainedFocus = 0;
fan.vaseWindow.initReflect$ = function() {
  fan.vaseWindow.$pod = fan.std.Pod.$add('vaseWindow');
  with (fan.vaseWindow.$pod)
  {
    fan.vaseWindow.View.$type = $am('View','sys::Obj',[],{'sys::Js':""},8449);
    fan.vaseWindow.Window.$type = $am('Window','sys::Obj',[],{'sys::Js':""},8449);
    fan.vaseWindow.TextInput.$type = $am('TextInput','sys::Obj',[],{'sys::Js':""},8449);
    fan.vaseWindow.TextInputPeer.$type = $am('TextInputPeer','sys::Obj',[],{'sys::Js':""},8449);
    fan.vaseWindow.Toolkit.$type = $at('Toolkit','sys::Obj',[],{'sys::Js':""},8195);
    fan.vaseWindow.ToolkitEnv.$type = $at('ToolkitEnv','sys::Obj',[],{'sys::Js':"",'sys::NoDoc':""},8192);
    fan.vaseWindow.Clipboard.$type = $at('Clipboard','sys::Obj',[],{'sys::Js':""},8193);
    fan.vaseWindow.Event.$type = $at('Event','sys::Obj',[],{'sys::Js':""},270336);
    fan.vaseWindow.StateChangedEvent.$type = $at('StateChangedEvent','vaseWindow::Event',[],{'sys::Js':""},270336);
    fan.vaseWindow.KeyEvent.$type = $at('KeyEvent','vaseWindow::Event',[],{'sys::Js':""},270336);
    fan.vaseWindow.MotionEvent.$type = $at('MotionEvent','vaseWindow::Event',[],{'sys::Js':""},270336);
    fan.vaseWindow.Key.$type = $at('Key','sys::Obj',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},270338);
    fan.vaseWindow.EventListeners.$type = $at('EventListeners','sys::Obj',[],{'sys::Js':""},8192);
    fan.vaseWindow.WindowEvent.$type = $at('WindowEvent','vaseWindow::Event',[],{'sys::Js':""},270336);
    fan.vaseWindow.View.$type.$af('host',270337,'vaseWindow::Window?',{}).$am('onPaint',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('onMotionEvent',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('onKeyEvent',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::KeyEvent',false)], fan.std.Param.$type),{}).$am('onWindowEvent',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::WindowEvent',false)], fan.std.Param.$type),{}).$am('getPrefSize',270336,'vaseGraphics::Size',fan.sys.List.makeFromJs([new fan.std.Param('hintsWidth','sys::Int',false),new fan.std.Param('hintsHeight','sys::Int',false)], fan.std.Param.$type),{});
    fan.vaseWindow.Window.$type.$am('view',270337,'vaseWindow::View',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('repaint',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('dirty','vaseGraphics::Rect?',true)], fan.std.Param.$type),{}).$am('pos',270337,'vaseGraphics::Point',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('size',270337,'vaseGraphics::Size',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hasFocus',270337,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('focus',270337,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('textInput',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('edit','vaseWindow::TextInput',false)], fan.std.Param.$type),{}).$am('fileDialog',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('accept','sys::Str',false),new fan.std.Param('f','sys::Func<sys::Void,sys::List<sys::Obj>?>',false)], fan.std.Param.$type),{});
    fan.vaseWindow.TextInput.$type.$af('host',270337,'vaseWindow::TextInputPeer?',{}).$af('inputTypeText',106498,'sys::Int',{}).$af('inputTypeIntNumber',106498,'sys::Int',{}).$af('inputTypeFloatNumber',106498,'sys::Int',{}).$af('inputTypePassword',106498,'sys::Int',{}).$am('textChange',270337,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('text','sys::Str',false)], fan.std.Param.$type),{}).$am('keyAction',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('text','sys::Str',false)], fan.std.Param.$type),{}).$am('onKeyEvent',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::KeyEvent',false)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseWindow.TextInputPeer.$type.$am('close',270337,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('setPos',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false)], fan.std.Param.$type),{}).$am('setStyle',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('font','vaseGraphics::Font',false),new fan.std.Param('textColor','vaseGraphics::Color',false),new fan.std.Param('backgroundColor','vaseGraphics::Color',false)], fan.std.Param.$type),{}).$am('setText',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('text','sys::Str',false)], fan.std.Param.$type),{}).$am('setType',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('multiLine','sys::Int',false),new fan.std.Param('inputType','sys::Int',false),new fan.std.Param('editable','sys::Bool',false)], fan.std.Param.$type),{}).$am('focus',270337,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('select',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('start','sys::Int',false),new fan.std.Param('end','sys::Int',false)], fan.std.Param.$type),{}).$am('caretPos',270337,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseWindow.Toolkit.$type.$am('cur',40962,'vaseWindow::Toolkit',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('tryInitAsyncRunner',32898,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('window',270337,'vaseWindow::Window?',fan.sys.List.makeFromJs([new fan.std.Param('view','vaseWindow::View?',true)], fan.std.Param.$type),{}).$am('callLater',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('delay','sys::Int',false),new fan.std.Param('f','sys::Func<sys::Void>',false)], fan.std.Param.$type),{}).$am('dpi',266240,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('density',270336,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('name',270337,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('clipboard',270337,'vaseWindow::Clipboard',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseWindow.ToolkitEnv.$type.$am('init',41474,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseWindow.Clipboard.$type.$am('getText',270337,'sys::Str?',fan.sys.List.makeFromJs([new fan.std.Param('callback','sys::Func<sys::Void,sys::Str?>',false)], fan.std.Param.$type),{}).$am('setText',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('data','sys::Str',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseWindow.Event.$type.$af('consumed',73728,'sys::Bool',{}).$af('time',73728,'std::DateTime',{}).$af('src',73728,'sys::Obj?',{}).$af('data',73728,'sys::Obj?',{}).$af('id',73728,'sys::Int',{}).$af('type',73728,'sys::Int',{}).$af('flag',73728,'sys::Int',{}).$af('rawEvent',73728,'sys::Obj?',{}).$am('consume',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseWindow.StateChangedEvent.$type.$af('oldValue',73728,'sys::Obj?',{}).$af('newValue',73728,'sys::Obj?',{}).$af('field',73730,'std::Field?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('oldValue','sys::Obj?',false),new fan.std.Param('newValue','sys::Obj?',false),new fan.std.Param('field','std::Field?',false),new fan.std.Param('src','sys::Obj?',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseWindow.KeyEvent.$type.$af('keyChar',73728,'sys::Int?',{}).$af('key',73728,'vaseWindow::Key?',{}).$af('pressed',106498,'sys::Int',{}).$af('released',106498,'sys::Int',{}).$af('typed',106498,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Int',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseWindow.MotionEvent.$type.$af('x',73728,'sys::Int?',{}).$af('y',73728,'sys::Int?',{}).$af('deltaX',73728,'sys::Int?',{}).$af('deltaY',73728,'sys::Int?',{}).$af('delta',73728,'sys::Int?',{}).$af('count',73728,'sys::Int?',{}).$af('button',73728,'sys::Int?',{}).$af('key',73728,'vaseWindow::Key?',{}).$af('pressure',73728,'sys::Float?',{}).$af('size',73728,'sys::Float?',{}).$af('pointers',73728,'sys::List<vaseWindow::MotionEvent>?',{}).$af('speed',73728,'sys::Float?',{}).$af('relativeX',73728,'sys::Int?',{}).$af('relativeY',73728,'sys::Int?',{}).$af('pointerId',73728,'sys::Int',{}).$af('pressed',106498,'sys::Int',{}).$af('released',106498,'sys::Int',{}).$af('moved',106498,'sys::Int',{}).$af('longPressed',106498,'sys::Int',{}).$af('clicked',106498,'sys::Int',{}).$af('cancel',106498,'sys::Int',{}).$af('wheel',106498,'sys::Int',{}).$af('other',106498,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Int',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseWindow.Key.$type.$af('a',106498,'vaseWindow::Key',{}).$af('b',106498,'vaseWindow::Key',{}).$af('c',106498,'vaseWindow::Key',{}).$af('d',106498,'vaseWindow::Key',{}).$af('e',106498,'vaseWindow::Key',{}).$af('f',106498,'vaseWindow::Key',{}).$af('g',106498,'vaseWindow::Key',{}).$af('h',106498,'vaseWindow::Key',{}).$af('i',106498,'vaseWindow::Key',{}).$af('j',106498,'vaseWindow::Key',{}).$af('k',106498,'vaseWindow::Key',{}).$af('l',106498,'vaseWindow::Key',{}).$af('m',106498,'vaseWindow::Key',{}).$af('n',106498,'vaseWindow::Key',{}).$af('o',106498,'vaseWindow::Key',{}).$af('p',106498,'vaseWindow::Key',{}).$af('q',106498,'vaseWindow::Key',{}).$af('r',106498,'vaseWindow::Key',{}).$af('s',106498,'vaseWindow::Key',{}).$af('t',106498,'vaseWindow::Key',{}).$af('u',106498,'vaseWindow::Key',{}).$af('v',106498,'vaseWindow::Key',{}).$af('w',106498,'vaseWindow::Key',{}).$af('x',106498,'vaseWindow::Key',{}).$af('y',106498,'vaseWindow::Key',{}).$af('z',106498,'vaseWindow::Key',{}).$af('num0',106498,'vaseWindow::Key',{}).$af('num1',106498,'vaseWindow::Key',{}).$af('num2',106498,'vaseWindow::Key',{}).$af('num3',106498,'vaseWindow::Key',{}).$af('num4',106498,'vaseWindow::Key',{}).$af('num5',106498,'vaseWindow::Key',{}).$af('num6',106498,'vaseWindow::Key',{}).$af('num7',106498,'vaseWindow::Key',{}).$af('num8',106498,'vaseWindow::Key',{}).$af('num9',106498,'vaseWindow::Key',{}).$af('space',106498,'vaseWindow::Key',{}).$af('backspace',106498,'vaseWindow::Key',{}).$af('enter',106498,'vaseWindow::Key',{}).$af('delete',106498,'vaseWindow::Key',{}).$af('esc',106498,'vaseWindow::Key',{}).$af('tab',106498,'vaseWindow::Key',{}).$af('comma',106498,'vaseWindow::Key',{}).$af('period',106498,'vaseWindow::Key',{}).$af('slash',106498,'vaseWindow::Key',{}).$af('semicolon',106498,'vaseWindow::Key',{}).$af('quote',106498,'vaseWindow::Key',{}).$af('openBracket',106498,'vaseWindow::Key',{}).$af('closeBracket',106498,'vaseWindow::Key',{}).$af('backSlash',106498,'vaseWindow::Key',{}).$af('backtick',106498,'vaseWindow::Key',{}).$af('up',106498,'vaseWindow::Key',{}).$af('down',106498,'vaseWindow::Key',{}).$af('left',106498,'vaseWindow::Key',{}).$af('right',106498,'vaseWindow::Key',{}).$af('pageUp',106498,'vaseWindow::Key',{}).$af('pageDown',106498,'vaseWindow::Key',{}).$af('home',106498,'vaseWindow::Key',{}).$af('end',106498,'vaseWindow::Key',{}).$af('insert',106498,'vaseWindow::Key',{}).$af('f1',106498,'vaseWindow::Key',{}).$af('f2',106498,'vaseWindow::Key',{}).$af('f3',106498,'vaseWindow::Key',{}).$af('f4',106498,'vaseWindow::Key',{}).$af('f5',106498,'vaseWindow::Key',{}).$af('f6',106498,'vaseWindow::Key',{}).$af('f7',106498,'vaseWindow::Key',{}).$af('f8',106498,'vaseWindow::Key',{}).$af('f9',106498,'vaseWindow::Key',{}).$af('f10',106498,'vaseWindow::Key',{}).$af('f11',106498,'vaseWindow::Key',{}).$af('f12',106498,'vaseWindow::Key',{}).$af('keypadMult',106498,'vaseWindow::Key',{}).$af('keypadPlus',106498,'vaseWindow::Key',{}).$af('keypadMinus',106498,'vaseWindow::Key',{}).$af('keypadDot',106498,'vaseWindow::Key',{}).$af('keypadDiv',106498,'vaseWindow::Key',{}).$af('keypad0',106498,'vaseWindow::Key',{}).$af('keypad1',106498,'vaseWindow::Key',{}).$af('keypad2',106498,'vaseWindow::Key',{}).$af('keypad3',106498,'vaseWindow::Key',{}).$af('keypad4',106498,'vaseWindow::Key',{}).$af('keypad5',106498,'vaseWindow::Key',{}).$af('keypad6',106498,'vaseWindow::Key',{}).$af('keypad7',106498,'vaseWindow::Key',{}).$af('keypad8',106498,'vaseWindow::Key',{}).$af('keypad9',106498,'vaseWindow::Key',{}).$af('keypadEqual',106498,'vaseWindow::Key',{}).$af('keypadEnter',106498,'vaseWindow::Key',{}).$af('capsLock',106498,'vaseWindow::Key',{}).$af('numLock',106498,'vaseWindow::Key',{}).$af('scrollLock',106498,'vaseWindow::Key',{}).$af('pause',106498,'vaseWindow::Key',{}).$af('printScreen',106498,'vaseWindow::Key',{}).$af('alt',106498,'vaseWindow::Key',{}).$af('shift',106498,'vaseWindow::Key',{}).$af('ctrl',106498,'vaseWindow::Key',{}).$af('command',106498,'vaseWindow::Key',{}).$af('modifierMask',100354,'sys::Int',{}).$af('modifierUnmask',100354,'sys::Int',{}).$af('none',100354,'vaseWindow::Key',{}).$af('byMask',100354,'std::Map<sys::Int,vaseWindow::Key>',{}).$af('byStr',100354,'std::Map<sys::Str,vaseWindow::Key>',{}).$af('mask',65666,'sys::Int',{}).$af('str',65666,'sys::Str?',{}).$am('predefine',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('mask','sys::Int',false),new fan.std.Param('str','sys::Str',false),new fan.std.Param('mod','sys::Bool',true)], fan.std.Param.$type),{}).$am('fromStr',40962,'vaseWindow::Key?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('fromMask',32898,'vaseWindow::Key',fan.sys.List.makeFromJs([new fan.std.Param('mask','sys::Int',false)], fan.std.Param.$type),{}).$am('makeNew',2052,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('mask','sys::Int',false),new fan.std.Param('str','sys::Str?',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('that','sys::Obj?',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('list',8192,'sys::List<vaseWindow::Key>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('primary',8192,'vaseWindow::Key',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('modifiers',8192,'vaseWindow::Key',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isModifier',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hasModifier',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isDown',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('modifier','vaseWindow::Key',false)], fan.std.Param.$type),{}).$am('isShift',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isAlt',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isCtrl',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isCommand',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('plus',8192,'vaseWindow::Key',fan.sys.List.makeFromJs([new fan.std.Param('x','vaseWindow::Key',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('minus',8192,'vaseWindow::Key',fan.sys.List.makeFromJs([new fan.std.Param('x','vaseWindow::Key',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('replace',8192,'vaseWindow::Key',fan.sys.List.makeFromJs([new fan.std.Param('modFrom','vaseWindow::Key',false),new fan.std.Param('modTo','vaseWindow::Key',false)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseWindow.EventListeners.$type.$af('listeners',67584,'sys::List<sys::Func<sys::Void,vaseWindow::Event?>>',{}).$af('onModify',65664,'sys::Func<sys::Void,vaseWindow::EventListeners>?',{}).$am('list',8192,'sys::List<sys::Func<sys::Void,vaseWindow::Event?>>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isEmpty',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('size',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('add',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('cb','sys::Func<sys::Void,vaseWindow::Event?>',false)], fan.std.Param.$type),{}).$am('remove',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('cb','sys::Func<sys::Void,vaseWindow::Event?>',false)], fan.std.Param.$type),{}).$am('fire',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('event','vaseWindow::Event?',false)], fan.std.Param.$type),{}).$am('modified',128,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseWindow.WindowEvent.$type.$af('opened',106498,'sys::Int',{}).$af('closing',106498,'sys::Int',{}).$af('closed',106498,'sys::Int',{}).$af('deactivated',106498,'sys::Int',{}).$af('activated',106498,'sys::Int',{}).$af('deiconified',106498,'sys::Int',{}).$af('iconified',106498,'sys::Int',{}).$af('lostFocus',106498,'sys::Int',{}).$af('gainedFocus',106498,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Int',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    m_meta = {};
    m_meta["pod.name"] = "vaseWindow";
    m_meta["pod.version"] = "1.0.73";
    m_meta["pod.depends"] = "sys 2.0;std 1.0;vaseGraphics 1.0;concurrent 1.0;vaseMath 1.0";
    m_meta["pod.summary"] = "Window toolkit";
    m_meta["pod.isScript"] = "false";
    m_meta["fcode.version"] = "1.1.3";
    m_meta["build.host"] = "mywifi.local";
    m_meta["build.user"] = "yangjiandong";
    m_meta["build.ts"] = "2020-04-14T21:10:23.000+08:00 Asia/Harbin";
    m_meta["build.tsKey"] = "200414211023";
    m_meta["build.compiler"] = "1.1";
    m_meta["build.platform"] = "macosx-x86_64";
    m_meta["pod.docApi"] = "true";
    m_meta["pod.docSrc"] = "false";
    m_meta["pod.native.java"] = "true";
    m_meta["pod.native.jni"] = "false";
    m_meta["pod.native.dotnet"] = "false";
    m_meta["pod.native.js"] = "true";
  }
  fan.vaseWindow.$clos$_u2 = new fan.sys.ClosureFuncSpec$("vaseWindow::$clos$_u2",fan.sys.Void.$type,["tok","sys::Str","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseWindow.$clos$_u5 = new fan.sys.ClosureFuncSpec$("vaseWindow::$clos$_u5",fan.vaseWindow.Key.$type,["tok","sys::Str","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseWindow.$clos$_u6 = new fan.sys.ClosureFuncSpec$("vaseWindow::$clos$_u6",fan.sys.Void.$type,["f","std::Field","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseWindow.$clos$_u9 = new fan.sys.ClosureFuncSpec$("vaseWindow::$clos$_u9",fan.sys.Void.$type,["cb","sys::Func<sys::Void,vaseWindow::Event?>","false","ignoreparam$1","sys::Int","false"]);
}
fan.vaseWindow.initStatic$ = function() {
  fan.vaseWindow.TextInput.static$init();
  fan.vaseWindow.KeyEvent.static$init();
  fan.vaseWindow.MotionEvent.static$init();
  fan.vaseWindow.Key.static$init();
  fan.vaseWindow.WindowEvent.static$init();
}
fan.vaseWindow.initReflect$();
fan.vaseWindow.initStatic$();
fan.vaseWindow.JSClipboard = fan.sys.Obj.$extend(fan.vaseWindow.Clipboard);
fan.vaseWindow.JSClipboard.prototype.$ctor = function() {}
fan.vaseWindow.JSClipboard.prototype.getText = function(callback)
{
  navigator.clipboard.readText()
  .then(text => {
    // `text` contains the text read from the clipboard
    callback.call(text);
  })
  .catch(err => {
    // maybe user didn't grant access to read from clipboard
    console.log('Something went wrong', err);
    callback.call(null);
  });
}
fan.vaseWindow.JSClipboard.prototype.setText = function(text) {
  navigator.clipboard.writeText(text)
  .then(() => {
    // Success!
  })
  .catch(err => {
    console.log('Something went wrong', err);
  });
}
fan.vaseWindow.GfxEnv = fan.sys.Obj.$extend(fan.vaseGraphics.GfxEnv);
fan.vaseWindow.GfxEnv.prototype.$ctor = function() {}
fan.vaseWindow.GfxEnv.prototype.fromUri = function(uri, onLoaded)
{
  return fan.vaseWindow.Image.fromUri(uri, onLoaded);
}
fan.vaseWindow.GfxEnv.prototype.makeConstImage = function(uri)
{
  var p = new fan.vaseWindow.ConstImage();
  p.m_uri = uri;
  var image = new Image();
  p.m_image = image;
  fan.vaseWindow.GfxUtil.addEventListener(image, "load", function(){
    p.m_size = fan.vaseGraphics.Size.make(image.width, image.height);
    p.m_isLoaded = true;
  });
  image.src = fan.vaseWindow.GfxUtil.uriToImageSrc(p.m_uri);
  return p;
}
fan.vaseWindow.GfxEnv.prototype.makeImage = function(size)
{
  return fan.vaseWindow.Image.make(size);
}
fan.vaseWindow.GfxEnv.prototype.contains = function(path, x, y)
{
  var canvas = document.createElement("canvas");
  var cx = canvas.getContext("2d");
  fan.vaseWindow.GfxUtil.doJsPath(cx, path);
  return cx.isPointInPath(x, y);
}
fan.vaseWindow.GfxEnv.prototype.makeFont = function(func)
{
  var font = new fan.vaseGraphics.Font();
  func.call(font);
  return font;
}
fan.vaseWindow.GfxEnv.prototype.makePointArray = function(size)
{
  return fan.vaseWindow.PointArray.make(size);
}
fan.vaseWindow.PointArray = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseWindow.PointArray.prototype.$ctor = function() {}
fan.vaseWindow.PointArray.prototype.$typeof = function()
{
  return fan.vaseGraphics.PointArray.$type;
}
fan.vaseWindow.PointArray.prototype.xArray = null;
fan.vaseWindow.PointArray.prototype.yArray = null;
fan.vaseWindow.PointArray.make = function(size)
{
  var p = new fan.vaseWindow.PointArray();
  p.xArray = new Array(size);
  p.yArray = new Array(size);
  p.m_size = size;
  return p;
}
fan.vaseWindow.PointArray.prototype.size = function() { return this.m_size; }
fan.vaseWindow.PointArray.prototype.getX = function(i) { return this.xArray[i]; }
fan.vaseWindow.PointArray.prototype.getY = function(i) { return this.yArray[i]; }
fan.vaseWindow.PointArray.prototype.setX = function(i, v) { return this.xArray[i] = v; }
fan.vaseWindow.PointArray.prototype.setY = function(i, v) { return this.yArray[i] = v; }
fan.vaseWindow.ConstImage = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseWindow.ConstImage.prototype.$ctor = function() {}
fan.vaseWindow.ConstImage.prototype.$typeof = function()
{
  return fan.vaseGraphics.ConstImage.$type;
}
fan.vaseWindow.ConstImage.prototype.m_image = null;
fan.vaseWindow.ConstImage.prototype.m_isLoaded = false;
fan.vaseWindow.ConstImage.prototype.m_uri = null;
fan.vaseWindow.ConstImage.prototype.m_size = null;
fan.vaseWindow.ConstImage.prototype.size = function() { return this.m_size; }
fan.vaseWindow.ConstImage.prototype.getImage = function(widget)
{
  return this.m_image;
}
fan.vaseWindow.ConstImage.prototype.isLoaded = function() { return this.m_isLoaded; }
fan.vaseWindow.ConstImage.prototype.isReady = function() { return this.m_isLoaded; }
fan.vaseGraphics.Font.fontCx = null;
fan.vaseGraphics.Font.prototype.height = function()
{
  // fudge this as 150% of size
  return Math.round((this.m_size-3) * 1.5);
}
fan.vaseGraphics.Font.prototype.ascent = function()
{
  // fudge this as 100% of size
  return this.m_size-3;
}
fan.vaseGraphics.Font.prototype.descent = function()
{
  // fudge this as 30% of size
  return Math.round((this.m_size-3) * 0.3);
}
fan.vaseGraphics.Font.prototype.leading = function()
{
  // fudge this as 16% of size
  return Math.round((this.m_size-3) * 0.16);
}
fan.vaseGraphics.Font.prototype.width = function(str)
{
  if (!str) return 0;
  try
  {
    // use global var to store a context for computing string width
    if (fan.vaseGraphics.Font.fontCx == null)
    {
      fan.vaseGraphics.Font.fontCx = document.createElement("canvas").getContext("2d");
    }
    fan.vaseGraphics.Font.fontCx.font = fan.vaseWindow.GfxUtil.fontToCss(this);
    return Math.round(fan.vaseGraphics.Font.fontCx.measureText(str).width);
  }
  catch (err)
  {
    // fallback if canvas not supported
    return str.length * 7;
  }
}
fan.vaseWindow.WtkGraphics = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseWindow.WtkGraphics.prototype.$ctor = function() {}
fan.vaseWindow.WtkGraphics.prototype.$typeof = function()
{
  return fan.vaseGraphics.Graphics.$type;
}
fan.vaseWindow.WtkGraphics.prototype.widget = null;
fan.vaseWindow.WtkGraphics.prototype.size = null;
fan.vaseWindow.WtkGraphics.prototype.cx = null;
fan.vaseWindow.WtkGraphics.prototype.m_clip = null;
fan.vaseWindow.WtkGraphics.prototype.init = function(cx, bounds)
{
  this.size = bounds.size();
  this.m_clip = bounds;
  this.cx = cx;
  //this.cx.save();
  //this.cx.lineWidth = 1;
  this.cx.lineCap = "square";
  //this.cx.lineJoin = "miter";
  //this.cx.textBaseline = "top";
  //this.cx.font = fan.vaseWindow.GfxUtil.fontToCss(fan.fwt.DesktopPeer.$sysFont);
  this.brush$(fan.vaseGraphics.Color.m_black);
  this.pen$(fan.vaseGraphics.Pen.m_defVal);
  //this.font$(fan.fwt.Desktop.sysFont());
  //f(this);
  //this.cx.restore();
}
fan.vaseWindow.WtkGraphics.prototype.m_brush = null
fan.vaseWindow.WtkGraphics.prototype.brush   = function() { return this.m_brush }
fan.vaseWindow.WtkGraphics.prototype.brush$  = function(b)
{
  this.m_brush = b;
  if (b instanceof fan.vaseGraphics.Color)
  {
    var style = b.toCss();
    this.cx.fillStyle = style;
    this.cx.strokeStyle = style;
  }
  else if (b instanceof fan.vaseGraphics.Gradient)
  {
    var x1 = b.m_x1;
    var y1 = b.m_y1;
    var x2 = b.m_x2;
    var y2 = b.m_y2;
    // handle percent
    if (b.m_x1Unit == "%") x1 = this.size.m_w * (x1 / 100);
    if (b.m_y1Unit == "%") y1 = this.size.m_h * (y1 / 100);
    if (b.m_x2Unit == "%") x2 = this.size.m_w * (x2 / 100);
    if (b.m_y2Unit == "%") y2 = this.size.m_h * (y2 / 100);
    // add stops
    var style = this.cx.createLinearGradient(x1, y1, x2, y2);
    var stops = b.m_stops;
    for (var i=0; i<stops.size(); i++)
    {
      var s = stops.get(i);
      style.addColorStop(s.m_pos, s.m_color.toCss());
    }
    this.cx.fillStyle = style;
    this.cx.strokeStyle = style;
  }
  else if (b instanceof fan.vaseGraphics.Pattern)
  {
    var jsImg = b.m_image.getImage();
    if (!image.isLoaded())
    {
      fan.vaseWindow.WtkGraphics.loadImage(this, jsImg);
    }
    var style = (jsImg.width > 0 && jsImg.height > 0)
      ? this.cx.createPattern(jsImg, 'repeat')
      : "rgba(0,0,0,0)";
    this.cx.fillStyle = style;
    this.cx.strokeStyle = style;
  }
  else
  {
    fan.sys.ObjUtil.echo("ERROR: unknown brush type: " + b);
  }
}
fan.vaseWindow.WtkGraphics.prototype.m_pen = null
fan.vaseWindow.WtkGraphics.prototype.pen   = function() { return this.m_pen }
fan.vaseWindow.WtkGraphics.prototype.pen$  = function(p)
{
  this.m_pen = p;
  this.cx.lineWidth = p.m_width;
  this.cx.lineCap   = p.capToStr();
  this.cx.lineJoin  = p.joinToStr();
  // dashes not supported
}
fan.vaseWindow.WtkGraphics.prototype.m_font = null
fan.vaseWindow.WtkGraphics.prototype.font   = function() { return this.m_font }
fan.vaseWindow.WtkGraphics.prototype.font$  = function(f)
{
  this.m_font = f;
  this.cx.font = fan.vaseWindow.GfxUtil.fontToCss(f);
}
fan.vaseWindow.WtkGraphics.prototype.m_antialias = true;
fan.vaseWindow.WtkGraphics.prototype.antialias   = function() { return this.m_antialias }
fan.vaseWindow.WtkGraphics.prototype.antialias$  = function(aa)
{
  // Note: canvas has no control over anti-aliasing (Jun 09)
  this.m_antialias = aa;
}
fan.vaseWindow.WtkGraphics.prototype.m_alpha = 255;
fan.vaseWindow.WtkGraphics.prototype.alpha   = function() { return this.m_alpha}
fan.vaseWindow.WtkGraphics.prototype.alpha$  = function(a)
{
  this.m_alpha = a;
  this.cx.globalAlpha = a / 255;
}
fan.vaseWindow.WtkGraphics.prototype.drawLine = function(x1, y1, x2, y2)
{
  this.cx.beginPath();
  this.cx.moveTo(x1+0.5, y1+0.5);
  this.cx.lineTo(x2+0.5, y2+0.5);
  this.cx.closePath();
  this.cx.stroke();
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.drawPolygon = function(p)
{
  this.cx.beginPath();
  var size = p.size();
  var x;
  var y;
  for (var i=0; i<size; i++)
  {
    var x = p.getX(i);
    var y = p.getY(i);
    if (i == 0) this.cx.moveTo(x, y);
    else this.cx.lineTo(x, y);
  }
  this.cx.closePath();
  this.cx.stroke();
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.drawRect = function(x, y, w, h)
{
  this.cx.strokeRect(x+0.5, y+0.5, w, h);
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.fillRect = function(x, y, w, h)
{
  this.cx.fillRect(x, y, w, h);
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.clearRect = function(x, y, w, h)
{
  this.cx.clearRect(x, y, w, h);
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.drawRoundRect = function(x, y, w, h, wArc, hArc)
{
  this.pathRoundRect(x+0.5, y+0.5, w, h, wArc*1.1, hArc*1.1)
  this.cx.stroke();
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.fillRoundRect = function(x, y, w, h, wArc, hArc)
{
  this.pathRoundRect(x, y, w, h, wArc*1.1, hArc*1.1)
  this.cx.fill();
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.pathRoundRect = function(x, y, w, h, wArc, hArc)
{
  this.cx.beginPath();
  this.cx.moveTo(x + wArc, y);
  this.cx.lineTo(x + w - wArc, y);
  this.cx.quadraticCurveTo(x + w, y, x + w, y + hArc);
  this.cx.lineTo(x + w, y + h - hArc);
  this.cx.quadraticCurveTo(x + w, y + h , x + w - wArc, y + h);
  this.cx.lineTo(x + wArc, y + h);
  this.cx.quadraticCurveTo(x, y + h , x, y + h - hArc);
  this.cx.lineTo(x, y + hArc);
  this.cx.quadraticCurveTo(x, y, x + wArc, y);
}
fan.vaseWindow.WtkGraphics.prototype.oval = function(x, y, w, h)
{
  // Public Domain by Christopher Clay - http://canvaspaint.org/blog/
  var kappa = 4 * ((Math.sqrt(2) -1) / 3);
  var rx = w/2;
  var ry = h/2;
  var cx = x+rx+0.5;
  var cy = y+ry+0.5;
  this.cx.beginPath();
  this.cx.moveTo(cx, cy - ry);
  this.cx.bezierCurveTo(cx + (kappa * rx), cy - ry,  cx + rx, cy - (kappa * ry), cx + rx, cy);
  this.cx.bezierCurveTo(cx + rx, cy + (kappa * ry), cx + (kappa * rx), cy + ry, cx, cy + ry);
  this.cx.bezierCurveTo(cx - (kappa * rx), cy + ry, cx - rx, cy + (kappa * ry), cx - rx, cy);
  this.cx.bezierCurveTo(cx - rx, cy - (kappa * ry), cx - (kappa * rx), cy - ry, cx, cy - ry);
  this.cx.closePath();
}
fan.vaseWindow.WtkGraphics.prototype.drawOval = function(x, y, w, h)
{
  this.oval(x, y, w, h)
  this.cx.stroke();
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.fillOval = function(x, y, w, h)
{
  this.oval(x, y, w, h)
  this.cx.fill();
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.drawArc = function(x, y, w, h, startAngle, arcAngle)
{
  // TODO FIXIT: support for elliptical arc curves
  var cx  = x + (w/2);
  var cy  = y + (h/2);
  var rad = Math.min(w/2, h/2);
  var sa  = Math.PI / 180 * startAngle;
  var ea  = Math.PI / 180 * (startAngle + arcAngle);
  this.cx.beginPath();
  this.cx.arc(cx, cy, rad, -sa, -ea, true);
  this.cx.stroke();
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.fillArc = function(x, y, w, h, startAngle, arcAngle)
{
  // TODO FIXIT: support for elliptical arc curves
  var cx = x + (w/2);
  var cy = y + (h/2);
  var radius = Math.min(w/2, h/2);
  var startRads = Math.PI / 180 * startAngle;
  var x1 = cx + (Math.cos(-startRads) * radius);
  var y1 = cy + (Math.sin(-startRads) * radius);
  var endRads = Math.PI / 180 * (startAngle + arcAngle);
  var x2 = cx + (Math.cos(-endRads) * radius);
  var y2 = cy + (Math.sin(-endRads) * radius);
  this.cx.beginPath();
  this.cx.moveTo(cx, cy);
  this.cx.lineTo(x1, y1);
  this.cx.arc(cx, cy, radius, -startRads, -endRads, true);
  this.cx.lineTo(x2, y2);
  this.cx.closePath();
  this.cx.fill();
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.drawText = function (s, x, y)
{
  this.cx.fillText(s, x, y)
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.clip = function (rect)
{
  this.m_clip = this.m_clip.intersection(rect);
  this.cx.beginPath();
  this.cx.moveTo(rect.m_x, rect.m_y);
  this.cx.lineTo(rect.m_x+rect.m_w, rect.m_y);
  this.cx.lineTo(rect.m_x+rect.m_w, rect.m_y+rect.m_h);
  this.cx.lineTo(rect.m_x, rect.m_y+rect.m_h);
  this.cx.closePath();
  this.cx.clip();
  return this
}
fan.vaseWindow.WtkGraphics.prototype.clipBounds = function ()
{
  return this.m_clip;
}
fan.vaseWindow.WtkGraphics.prototype.push = function ()
{
  this.cx.save();
  var state = new Object();
  state.brush     = this.m_brush;
  state.pen       = this.m_pen;
  state.font      = this.m_font;
  state.antialias = this.m_antialias;
  state.alpha     = this.m_alpha;
  state.clip      = this.m_clip;
  //state.transform = this.m_transform.clone();
  this.stack.push(state);
}
fan.vaseWindow.WtkGraphics.prototype.pop = function ()
{
  this.cx.restore();
  var state = this.stack.pop();
  this.m_brush     = state.brush;
  this.m_pen       = state.pen;
  this.m_font      = state.font;
  this.m_antialias = state.antialias;
  this.m_alpha     = state.alpha;
  this.m_clip      = state.clip;
  //this.m_transform = state.transform;
}
fan.vaseWindow.WtkGraphics.prototype.dispose = function ()
{
  // no-op
}
fan.vaseWindow.WtkGraphics.prototype.stack = new Array();
fan.vaseWindow.WtkGraphics.prototype.drawImage = function(image, x, y)
{
  var jsImg = image.getImage();
  if (image.isLoaded() && jsImg.width > 0 && jsImg.height > 0)
    this.cx.drawImage(jsImg, x, y);
  else
  {
    fan.vaseWindow.WtkGraphics.loadImage(this, jsImg);
  }
  return this;
}
fan.vaseWindow.WtkGraphics.loadImage = function(self, jsImg)
{
  fan.vaseWindow.GfxUtil.addEventListener(jsImg, "load",
    function(){ if(self.widget){ self.widget.invalid(); }; });
}
fan.vaseWindow.WtkGraphics.prototype.copyImage = function(image, src, dst)
{
  var jsImg = image.getImage();
  if (image.isLoaded() && jsImg.width > 0 && jsImg.height > 0)
    this.cx.drawImage(jsImg, src.m_x, src.m_y, src.m_w, src.m_h, dst.m_x, dst.m_y, dst.m_w, dst.m_h)
  else
  {
    fan.vaseWindow.WtkGraphics.loadImage(this, jsImg);
  }
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.drawPath = function(path)
{
  fan.vaseWindow.GfxUtil.doJsPath(this.cx, path);
  this.cx.stroke();
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.fillPath = function(path)
{
  fan.vaseWindow.GfxUtil.doJsPath(this.cx, path);
  this.cx.fill();
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.drawPolyline = function(p)
{
  this.cx.beginPath();
  var size = p.size();
  var x;
  var y;
  for (var i=0; i < size; i++)
  {
    x = p.getX(i);
    y = p.getY(i);
    if (i == 0) this.cx.moveTo(x, y);
    else this.cx.lineTo(x, y);
  }
  this.cx.stroke();
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.fillPolygon = function(p)
{
  this.cx.beginPath();
  var size = p.size();
  var x;
  var y;
  for (var i=0; i < size; i++)
  {
    x = p.getX(i);
    y = p.getY(i);
    if (i == 0) this.cx.moveTo(x, y);
    else this.cx.lineTo(x, y);
  }
  this.cx.closePath();
  this.cx.fill();
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.transform = function(trans)
{
  fan.vaseWindow.GfxUtil.doJsTransform(this.cx, trans);
  //this.m_transform = trans.clone();
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.clipPath = function(path)
{
  fan.vaseWindow.GfxUtil.doJsPath(this.cx, path);
  this.cx.clip();
  return this;
}
fan.vaseWindow.WtkGraphics.prototype.m_composite = null;
fan.vaseWindow.WtkGraphics.prototype.composite = function() { return this.m_composite; }
fan.vaseWindow.WtkGraphics.prototype.composite$ = function(c)
{
  var cmp = "source-over";
  if (c.name = "srcAtop")
  {
    cmp = "source-atop";
  }
  else if (c.name = "srcIn")
  {
    cmp = "source-in";
  }
  else if (c.name = "srcOut")
  {
    cmp = "source-out";
  }
  else if (c.name = "dstAtop")
  {
    cmp = "destination-atop";
  }
  else if (c.name = "dstIn")
  {
    cmp = "destination-in";
  }
  else if (c.name = "dstOut")
  {
    cmp = "destination-out";
  }
  else if (c.name = "dstOver")
  {
    cmp = "destination-over";
  }
  else if (c.name = "lighter")
  {
    cmp = "lighter";
  }
  else if (c.name = "copy")
  {
    cmp = "source-over";
  }
  else if (c.name = "xor")
  {
    cmp = "xor";
  }
  this.cx.globalCompositeOperation = cmp
  this.m_composite = c;
}
fan.vaseWindow.WtkGraphics.prototype.setShadow = function(shadow){
  if (shadow) {
    this.cx.shadowColor = shadow.m_color.toCss();
    this.cx.shadowBlur = shadow.m_blur;
    this.cx.shadowOffsetX = shadow.m_offsetX;
    this.cs.shadowOffsetY = shadow.m_offsetY;
  } else {
    this.cx.shadowColor = "rgba(0,0,0,0)";
    this.cx.shadowBlur = 0;
    this.cx.shadowOffsetX = 0;
    this.cs.shadowOffsetY = 0;
  }
  return this;
}
fan.vaseWindow.Event.toKey = function(event)
{
  // find primary key
  var key = null;
  if (event.keyCode != null && event.keyCode > 0)
  {
    // force alpha keys to lowercase so we map correctly
    var code = event.keyCode;
    //if (code >= 65 && code <= 90) code += 32;
    key = fan.vaseWindow.Event.keyCodeToKey(code);
  }
  if (event.shiftKey)   key = key==null ? fan.vaseWindow.Key.m_shift : key.plus(fan.vaseWindow.Key.m_shift);
  if (event.altKey)     key = key==null ? fan.vaseWindow.Key.m_alt   : key.plus(fan.vaseWindow.Key.m_alt);
  if (event.ctrlKey)    key = key==null ? fan.vaseWindow.Key.m_ctrl  : key.plus(fan.vaseWindow.Key.m_ctrl);
  // TODO FIXIT
  //if (event.commandKey) key = key.plus(Key.command);
  return key;
}
fan.vaseWindow.Event.keyCodeToKey = function(keyCode)
{
  // TODO FIXIT: map rest of non-alpha keys
  switch (keyCode)
  {
    case 8:   return fan.vaseWindow.Key.m_backspace;
    case 13:  return fan.vaseWindow.Key.m_enter;
    case 32:  return fan.vaseWindow.Key.m_space;
    case 37:  return fan.vaseWindow.Key.m_left;
    case 38:  return fan.vaseWindow.Key.m_up;
    case 39:  return fan.vaseWindow.Key.m_right;
    case 40:  return fan.vaseWindow.Key.m_down;
    case 46:  return fan.vaseWindow.Key.m_$delete;
    case 91:  return fan.vaseWindow.Key.m_command;  // left cmd
    case 93:  return fan.vaseWindow.Key.m_command;  // right cmd
    case 186: return fan.vaseWindow.Key.m_semicolon;
    case 188: return fan.vaseWindow.Key.m_comma;
    case 190: return fan.vaseWindow.Key.m_period;
    case 191: return fan.vaseWindow.Key.m_slash;
    case 192: return fan.vaseWindow.Key.m_backtick;
    case 219: return fan.vaseWindow.Key.m_openBracket;
    case 220: return fan.vaseWindow.Key.m_backSlash;
    case 221: return fan.vaseWindow.Key.m_closeBracket;
    case 222: return fan.vaseWindow.Key.m_quote;
    default: return fan.vaseWindow.Key.fromMask(keyCode);
  }
}
fan.vaseWindow.Event.toWheelDelta = function(e)
{
  var wx = 0;
  var wy = 0;
  if (e.wheelDeltaX != null)
  {
    // WebKit
    wx = -e.wheelDeltaX;
    wy = -e.wheelDeltaY;
    // Safari
    if (wx % 120 == 0) wx = wx / 40;
    if (wy % 120 == 0) wy = wy / 40;
  }
  else if (e.wheelDelta != null)
  {
    // IE
    wy = -e.wheelDelta;
    if (wy % 120 == 0) wy = wy / 40;
  }
  else if (e.detail != null)
  {
    // Firefox
    wx = e.axis == 1 ? e.detail : 0;
    wy = e.axis == 2 ? e.detail : 0;
  }
  // make sure we have ints and return
  wx = wx > 0 ? Math.ceil(wx) : Math.floor(wx);
  wy = wy > 0 ? Math.ceil(wy) : Math.floor(wy);
  //return fan.gfx.Point.make(wx, wy);
  return wy
}
fan.vaseWindow.WtkEditText = fan.sys.Obj.$extend(fan.vaseWindow.TextInputPeer);
fan.vaseWindow.WtkEditText.prototype.$ctor = function() {}
fan.vaseWindow.WtkEditText.prototype.$typeof = function() {
  return fan.vaseWindow.WtkEditText.$type;
}
fan.vaseWindow.WtkEditText.prototype.view = null;
fan.vaseWindow.WtkEditText.prototype.elem = null;
fan.vaseWindow.WtkEditText.prototype.make = function(view) {
  this.view = view;
  //view.host$(this);
  var field = document.createElement("input");
  field.type = "text";
  this.elem = field;
  this.init(field);
}
fan.vaseWindow.WtkEditText.prototype.init = function(field) {
  var view = this.view;
  field.style.position = "absolute";
  field.style.border = "0";
  field.style.outline = "0";
  fan.vaseWindow.GfxUtil.addEventListener(field, "input", function() {
    view.textChange(field.value);
  });
  this.addKeyEvent(field, "keydown",    fan.vaseWindow.KeyEvent.m_pressed);
  this.addKeyEvent(field, "keyup",      fan.vaseWindow.KeyEvent.m_released);
  this.addKeyEvent(field, "keypress",   fan.vaseWindow.KeyEvent.m_typed);
}
fan.vaseWindow.WtkEditText.prototype.addKeyEvent = function(elem, type, id)
{
  var view = this.view;
  var mouseEvent = function(e)
  {
    //console.log(e);
    var event = fan.vaseWindow.KeyEvent.make(id);
    //event.m_id = id;
    event.m_widget = this.elem;
    event.m_key = fan.vaseWindow.Event.toKey(e);
    event.m_keyChar =  e.charCode || e.keyCode;
    view.onKeyEvent(event);
    //console.log(event.m_consumed)
    if (event.m_consumed) {
      e.stopPropagation();
      e.preventDefault();
      e.cancelBubble = true;
    }
  };
  fan.vaseWindow.GfxUtil.addEventListener(elem, type, mouseEvent);
}
fan.vaseWindow.WtkEditText.prototype.focus = function() {
  this.elem.focus();
  var elem = this.elem;
  setTimeout(function() {
    //elem.scrollIntoView(false);
    //console.log("scrollIntoView:"+elem);
    elem.scrollIntoViewIfNeeded();
  }, 200);
}
fan.vaseWindow.WtkEditText.prototype.setPos = function(x, y, w, h) {
  this.elem.style.left = x + "px";
  this.elem.style.top = y + "px";
  this.elem.style.width = w + "px";
  this.elem.style.height = h + "px";
  this.elem.style.margin = 0;
  this.elem.style.padding = 0;
}
fan.vaseWindow.WtkEditText.prototype.setStyle = function(font, textColor, backgroundColor) {
  this.elem.style.background = backgroundColor.toCss();
  this.elem.style.color = textColor.toCss();
  this.elem.style.font = fan.vaseWindow.GfxUtil.fontToCss(font);
}
fan.vaseWindow.WtkEditText.prototype.setText = function( text) {
  this.elem.value = text;
}
fan.vaseWindow.WtkEditText.prototype.setType = function( multiLine,  inputType,  editable) {
  if (multiLine <= 1) {
    if (this.elem.type != "text") {
      this.close();
      var field = document.createElement("input");
      field.type = "text";
      this.elem = field;
      this.init(field);
    }
  }
  else {
    if (this.elem.type == "text") {
      this.close();
      var field = document.createElement("textarea");
      field.rows = multiLine;
      this.elem = field;
      this.init(field);
    }
  }
  this.elem.disabled = !editable;
  this.elem.inputType = inputType;
}
fan.vaseWindow.WtkEditText.prototype.close = function() {
  if (this.elem.parentNode)
    this.elem.parentNode.removeChild(this.elem);
}
fan.vaseWindow.WtkEditText.prototype.select = function(start, end) {
  this.elem.setSelectionRange(start, end);
}
fan.vaseWindow.WtkEditText.prototype.caretPos = function() {
  return this.elem.selectionStart;
}
fan.vaseWindow.Image = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseWindow.Image.prototype.$ctor = function() {}
fan.vaseWindow.Image.prototype.$typeof = function()
{
  return fan.vaseGraphics.BufImage.$type;
}
fan.vaseWindow.Image.prototype.m_canvas = null;
fan.vaseWindow.Image.prototype.m_imageData = null; //image data
fan.vaseWindow.Image.prototype.m_image = null; //image element
fan.vaseWindow.Image.prototype.m_context  = null; //canvas rendering context
fan.vaseWindow.Image.prototype.m_graphics = null; //vaseGraphics graphics context
fan.vaseWindow.Image.prototype.m_isLoaded = false;
fan.vaseWindow.Image.prototype.isLoaded = function() { return this.m_isLoaded; }
fan.vaseWindow.Image.prototype.m_uri = null;
fan.vaseWindow.Image.prototype.m_imageChanged = false;
fan.vaseWindow.Image.prototype.m_size = null;
fan.vaseWindow.Image.prototype.size = function() { return this.m_size; }
fan.vaseWindow.Image.prototype.getImage = function()
{
  if (!this.m_isLoaded)
  {
    return this.m_image;
  }
  this.flush();
  return this.m_canvas;
}
fan.vaseWindow.Image.prototype.initFromImage = function(image)
{
  this.m_canvas = document.createElement("canvas");
  this.m_size = fan.vaseGraphics.Size.make(image.width, image.height);
  this.m_canvas.width = this.m_size.m_w;
  this.m_canvas.height = this.m_size.m_h;
  this.context().drawImage(this.m_image, 0, 0);
  this.m_isLoaded = true;
}
fan.vaseWindow.Image.fromUri = function(uri, onLoaded)
{
  var p = new fan.vaseWindow.Image();
  p.m_uri = uri;
  p.m_isLoaded = false;
  var image = new Image();
  p.m_image = image;
  fan.vaseWindow.GfxUtil.addEventListener(image, "load", function(){
    p.initFromImage(image);
    onLoaded.call(p);
  });
  image.src = fan.vaseWindow.GfxUtil.uriToImageSrc(p.m_uri);
  return p;
}
fan.vaseWindow.Image.prototype.flush = function()
{
  if (this.m_imageData && this.m_imageChanged)
  {
    this.context().putImageData(this.m_imageData, 0, 0);
    this.m_imageChanged = false;
  }
}
fan.vaseWindow.Image.prototype.getImageData = function()
{
  if (!this.m_imageData)
  {
    this.m_imageData = this.context().getImageData(0, 0, this.m_size.m_w, this.m_size.m_h);
  }
  return this.m_imageData;
}
fan.vaseWindow.Image.prototype.getPixel = function(x, y)
{
  var index = (y * this.getImageData().width + x)*4;
  var r = this.getImageData().data[index];
  var g = this.getImageData().data[index +1];
  var b = this.getImageData().data[index +2];
  var a = this.getImageData().data[index +3];
  //return fan.gfx.Color.makeArgb(a, r, g, b);
  return (a << 24) | (r << 16) | (g << 8) | b
}
fan.vaseWindow.Image.prototype.setPixel = function(x, y, value)
{
  var index = (y * this.getImageData().width + x)*4;
  var r = (value >> 16) & 0xff;
  var g = (value >> 8) & 0xff;
  var b = value & 0xff;
  var a = (value >> 24) & 0xff;
  this.getImageData().data[index]   = r
  this.getImageData().data[index+1] = g
  this.getImageData().data[index+2] = b
  this.getImageData().data[index+3] = a;
  this.m_imageChanged = true;
}
fan.vaseWindow.Image.prototype.context = function()
{
  if (!this.m_context)
  {
    this.m_context = this.m_canvas.getContext("2d");
  }
  return this.m_context;
}
fan.vaseWindow.Image.make = function(size)
{
  var p = new fan.vaseWindow.Image();
  p.m_size = size;
  p.m_canvas = document.createElement("canvas");
  p.m_canvas.width = size.m_w;
  p.m_canvas.height = size.m_h;
  p.m_isLoaded = true;
  p.m_uri = p.m_canvas.toDataURL();
  return p;
}
fan.vaseWindow.Image.prototype.graphics = function()
{
  this.flush();
  if (!this.m_graphics)
  {
    //create cx
    var g = new fan.vaseWindow.WtkGraphics();
    var rect = new fan.vaseGraphics.Rect.make(0,0, this.m_size.m_w, this.m_size.m_h);
    g.init(this.context(), rect);
    this.m_graphics = g;
  }
  return this.m_graphics;
}
fan.vaseWindow.Image.prototype.toConst = function()
{
  throw fan.sys.UnsupportedErr.make();
}
fan.vaseWindow.Image.prototype.save = function(out, format)
{
  //TODO
}
fan.vaseWindow.GfxUtil = {}
fan.vaseWindow.GfxUtil.fontToCss = function(font)
{
  var s = "";
  if (font.m_bold)   s += "bold ";
  if (font.m_italic) s += "italic ";
  s += font.m_size + "px ";
  s += font.m_$name;
  return s;
}
fan.vaseWindow.GfxUtil.uriToImageSrc = function(uri)
{
  if ("fan" == uri.scheme)
    return fan.sys.UriPodBase + uri.host() + uri.pathStr()
  else
    return uri.toStr();
}
fan.vaseWindow.GfxUtil.addEventListener = function(obj, type, func)
{
  // for IE
  if (!obj.addEventListener) {
    obj.attachEvent("on" + type, func);
  }
  else {
    obj.addEventListener(type, func, false);
  }
}
fan.vaseWindow.GfxUtil.doJsPath = function(cx, path)
{
  var size = path.steps().size();
  cx.beginPath();
  for (var i =0; i < size; ++i)
  {
    var s = path.steps().get(i);
    if (s instanceof fan.vaseGraphics.PathMoveTo)
    {
      cx.moveTo(s.m_x, s.m_y);
    }
    else if (s instanceof fan.vaseGraphics.PathLineTo)
    {
      cx.lineTo(s.m_x, s.m_y);
    }
    else if (s instanceof fan.vaseGraphics.PathQuadTo)
    {
      cx.quadraticCurveTo(s.m_cx, s.m_cy, s.m_x, s.m_y);
    }
    else if (s instanceof fan.vaseGraphics.PathCubicTo)
    {
      cx.bezierCurveTo(s.m_cx1, s.m_cy1, s.m_cx2, s.m_cy2, s.m_x, s.m_y);
    }
    else if (s instanceof fan.vaseGraphics.PathClose)
    {
      cx.closePath();
    }
    else
    {
      throw fan.sys.Err.make("unreachable");
    }
  }
}
fan.vaseWindow.GfxUtil.doJsTransform = function(cx, trans)
{
  cx.transform(
       trans.get(0,0),
       trans.get(0,1),
       trans.get(1,0),
       trans.get(1,1),
       trans.get(2,0),
       trans.get(2,1)
     );
}
fan.vaseWindow.WtkWindow = fan.sys.Obj.$extend(fan.vaseWindow.Window);
fan.vaseWindow.WtkWindow.prototype.$ctor = function() {}
fan.vaseWindow.WtkWindow.prototype.$typeof = function() {
  return fan.vaseWindow.WtkWindow.$type;
}
fan.vaseWindow.WtkWindow.prototype.m_view = null;
fan.vaseWindow.WtkWindow.prototype.m_size = null;
fan.vaseWindow.WtkWindow.prototype.elem = null;
fan.vaseWindow.WtkWindow.prototype.needRepaint = true;
fan.vaseWindow.WtkWindow.prototype.graphics = null;
fan.vaseWindow.WtkWindow.prototype.invalid = function()
{
  this.needRepaint = true;
}
fan.vaseWindow.WtkWindow.prototype.bindEvent = function(elem)
{
  //this.addEvent(this.elem, "mouseover",  fan.fwt.EventId.m_mouseEnter, self.onMouseEnter());
  //this.addEvent(this.elem, "mouseout",   fan.fwt.EventId.m_mouseExit,  self.onMouseExit());
  this.addMotionEvent(this.elem, "mousedown",  fan.vaseWindow.MotionEvent.m_pressed);
  this.addMotionEvent(this.elem, "mousemove",  fan.vaseWindow.MotionEvent.m_moved);
  this.addMotionEvent(this.elem, "mouseup",    fan.vaseWindow.MotionEvent.m_released);
  this.addMotionEvent(this.elem, "mousewheel", fan.vaseWindow.MotionEvent.m_wheel);
  this.addKeyEvent(this.elem, "keydown",    fan.vaseWindow.KeyEvent.m_pressed);
  this.addKeyEvent(this.elem, "keyup",      fan.vaseWindow.KeyEvent.m_released);
  this.addKeyEvent(this.elem, "keypress",   fan.vaseWindow.KeyEvent.m_typed);
  //this.addEvent(this.elem, "blur",       fan.vaseWindow.InputEvent.m_blur);
  //this.addEvent(this.elem, "focus",      fan.vaseWindow.InputEvent.m_focus);
}
fan.vaseWindow.WtkWindow.prototype.addMotionEvent = function(elem, type, id)
{
  var view = this.m_view;
  var mouseEvent = function(e)
  {
    //console.log(e);
    var event = fan.vaseWindow.MotionEvent.make(id);
    //event.m_id = id;
    event.m_x = e.clientX;
    event.m_y = e.clientY;
    event.m_widget = this.elem;
    if (type == "mousewheel")
    {
      event.m_delta = fan.vaseWindow.Event.toWheelDelta(e);
    }
    event.m_key = fan.vaseWindow.Event.toKey(e);
    view.onMotionEvent(event);
  };
  fan.vaseWindow.GfxUtil.addEventListener(elem, type, mouseEvent);
}
fan.vaseWindow.WtkWindow.prototype.addKeyEvent = function(elem, type, id)
{
  var view = this.m_view;
  var mouseEvent = function(e)
  {
    //console.log(e);
    var event = fan.vaseWindow.KeyEvent.make(id);
    //event.m_id = id;
    event.m_widget = this.elem;
    event.m_key = fan.vaseWindow.Event.toKey(e);
    event.m_keyChar =  e.charCode || e.keyCode;
    view.onKeyEvent(event);
  };
  fan.vaseWindow.GfxUtil.addEventListener(elem, type, mouseEvent);
}
fan.vaseWindow.WtkWindow.prototype.focus = function() {
  this.elem.focus();
}
fan.vaseWindow.WtkWindow.prototype.hasFocus = function() {
  return document.activeElement == this.elem;
}
fan.vaseWindow.WtkWindow.prototype.pos = function() {
  var x = this.elem.offsetLeft;
  var y = this.elem.offsetTop;
  return fan.vaseGraphics.Point.make(x, y);
}
fan.vaseWindow.WtkWindow.prototype.repaint = function(r) {
  this.needRepaint = true;
  var self = this;
  if (requestAnimationFrame && !self.callback) {
    self.callback = function() { self.update(); }
    requestAnimationFrame(self.callback);
  }
}
fan.vaseWindow.WtkWindow.prototype.repaintNow = function(r) {
  this.graphics.push();
  this.m_view.onPaint(this.graphics);
  this.graphics.pop();
}
fan.vaseWindow.WtkWindow.prototype.size = function() {
  return this.m_size;
}
fan.vaseWindow.WtkWindow.prototype.view = function() {
  return this.m_view;
}
fan.vaseWindow.WtkWindow.prototype.update = function() {
  var self = this;
  self.callback = null;
  if (!self.needRepaint) return;
  self.needRepaint = false;
  self.repaintNow();
}
fan.vaseWindow.WtkWindow.make = function(view) {
  var nativeView = new fan.vaseWindow.WtkWindow();
  view.host$(nativeView);
  nativeView.m_view = view;
  return nativeView;
}
fan.vaseWindow.WtkWindow.prototype.createCanvas = function(shell, size) {
  // if (this.elem) {
  //   shell.removeChild(this.elem);
  // }
  if (size && this.m_size) {
    if (size.equlas(this.m_size)) return;
  }
  if (!size) {
    size = this.m_view.getPrefSize(shell.offsetWidth, shell.offsetHeight);
  }
  //console.log(size)
  this.m_size = size;
  //create canvas
  var c = document.createElement("canvas");
  var density = window.devicePixelRatio || 1;
  c.width  = size.m_w * density;
  c.height = size.m_h * density;
  c.style.width = size.m_w+"px";
  c.style.height = size.m_h +"px";
  if (this.elem) {
    shell.replaceChild(c, this.elem);
    this.elem = c;
    this.bindEvent(c);
    c.setAttribute('tabindex','0');
  }
  else {
    this.elem = c;
    shell.appendChild(this.elem);
    this.bindEvent(c);
    c.setAttribute('tabindex','0');
    c.focus();
  }
  //create fan graphics
  var g = new fan.vaseWindow.WtkGraphics();
  g.widget = this;
  this.graphics = g;
  fan.vaseWindow.WtkWindow.graphics = g;
  //init graphics
  var cx = this.elem.getContext("2d");
  cx.scale(density, density);
  var rect = new fan.vaseGraphics.Rect.make(0,0, size.m_w, size.m_h);
  g.init(cx, rect);
}
fan.vaseWindow.WtkWindow.prototype.show = function(size)
{
  // check for alt root
  var rootId = fan.std.Env.cur().vars().get("fwt.window.root")
  if (rootId == null) this.root = document.body;
  else
  {
    this.root = document.getElementById(rootId);
    if (this.root == null) throw fan.sys.ArgErr.make("No root found");
  }
  // mount shell we use to attach widgets to
  var shell = document.createElement("div")
  with (shell.style)
  {
    position   = "absolute";//this.root === document.body ? "fixed" : "absolute";
    top        = "0";
    left       = "0";
    width      = "100%";
    height     = "100%";
    background = "#fff";
  }
  this.root.appendChild(shell);
  this.shell = shell;
  var self = this;
  fan.vaseWindow.WtkWindow.instance = this;
  this.createCanvas(shell, size);
  // attach resize listener
  fan.vaseWindow.GfxUtil.addEventListener(window, "resize", function() {
    self.createCanvas(shell, null);
    self.repaint();
  });
  //fire event
  var event = fan.vaseWindow.WindowEvent.make(fan.vaseWindow.WindowEvent.m_opened);
  this.m_view.onWindowEvent(event);
  //paint
  this.needRepaint = false;
  this.repaintNow();
  //Repaint handling
  if (!requestAnimationFrame) {
    setInterval(function(){
      if (!self.needRepaint) return;
      self.needRepaint = false;
      self.repaintNow();
    }, 17);
  }
}
fan.vaseWindow.WtkWindow.prototype.textInput = function(view) {
  if (!view.host()) {
    var jsEditText = new fan.vaseWindow.WtkEditText();
    jsEditText.make(view);
    view.host$(jsEditText);
  }
  var jsEditText = view.host();
  if (!jsEditText.elem.parentNode) {
    this.shell.appendChild(jsEditText.elem);
  }
  //jsEditText.update();
}
fan.vaseWindow.WtkWindow.prototype.fileDialog = function(accept, callback)
{
  var field = document.createElement("input");
  field.type = "file";
  field.style.display = "none";
  field.accept = accept;
  field.multiple="multiple";
  field.addEventListener('change', function() {
    fileList = field.files;
    files = fan.sys.List.make();
    for (var i = 0; i<fileList.length; ++i) {
      files.add(fileList[i]);
    }
    callback.call(files);
  });
  field.click();
}
}).call(this);

(function () {
var root=this;
var fan=root.fan;
if (fan === undefined) {
   if (typeof exports !== 'undefined') {
     fan = exports;
   } else {
     fan = root.fan = {};
   }
}
if (!fan.sys && (typeof require !== 'undefined')) fan = require('sys.js');

if (typeof exports !== 'undefined') {
  fan.vaseClient = exports;
} else {
  fan.vaseClient = root.fan.vaseClient = {};
}

fan.vaseClient.AsyncRunner = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseClient.AsyncRunner.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseClient.AsyncRunner.prototype.$typeof = function() { return fan.vaseClient.AsyncRunner.$type; }
fan.vaseClient.AsyncRunner.init = function()
{
  var $this = this;
  fan.sys.ObjUtil.echo("AsyncRunner init");
  fan.concurrent.Actor.locals().set("async.runner",fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.vaseClient.$clos$_u0,
    function(s)
    {
      fan.vaseClient.AsyncRunner.run(s);
      return;
    }),fan.sys.Obj.$type.toNullable()));
  return;
}
fan.vaseClient.AsyncRunner.run = function(s)
{
  var $this = this;
  if (s.next())
  {
    var awaitObj = s.awaitObj();
    fan.sys.ObjUtil.echo(fan.sys.Str.plus("pause :",awaitObj));
    if (fan.sys.ObjUtil.is(awaitObj,fan.std.Type.find("concurrent::Promise<>")))
    {
      var promise = fan.sys.ObjUtil.coerce(awaitObj,fan.std.Type.find("concurrent::Promise<>"));
      promise.then(fan.sys.Func.make$closure(
        fan.vaseClient.$clos$_u1,
        function(res,err)
        {
          s.awaitObj$(res);
          s.err$(err);
          fan.vaseWindow.Toolkit.cur().callLater(0,fan.sys.Func.make$closure(
            fan.vaseClient.$clos$_u2,
            function(it)
            {
              s.run();
              return;
            }));
          return;
        }));
    }
    else
    {
      if (fan.sys.ObjUtil.is(awaitObj,fan.concurrent.Future.$type))
      {
        var future = fan.sys.ObjUtil.coerce(awaitObj,fan.concurrent.Future.$type);
        var checkFuture = null;
        checkFuture = fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
          fan.vaseClient.$clos$_u3,
          function()
          {
            if (future.state().isComplete())
            {
              var res = null;
              try
              {
                res = future.get();
              }
              catch ($_u4)
              {
                $_u4 = fan.sys.Err.make($_u4);
                if ($_u4 instanceof fan.sys.Err)
                {
                  var e = $_u4;
                  var e;
                  res = e;
                }
                else
                {
                  throw $_u4;
                }
              }
              ;
            }
            else
            {
              fan.vaseWindow.Toolkit.cur().callLater(100,fan.sys.ObjUtil.coerce(checkFuture,fan.std.Type.find("sys::Func<sys::Void>")));
            }
            ;
            return;
          }),fan.std.Type.find("sys::Func<sys::Void>?"));
        fan.vaseWindow.Toolkit.cur().callLater(100,fan.sys.ObjUtil.coerce(checkFuture,fan.std.Type.find("sys::Func<sys::Void>")));
      }
      else
      {
        fan.vaseWindow.Toolkit.cur().callLater(0,fan.sys.Func.make$closure(
          fan.vaseClient.$clos$_u2,
          function(it)
          {
            s.run();
            return;
          }));
      }
      ;
    }
    ;
  }
  ;
  fan.sys.ObjUtil.echo(fan.sys.Str.plus("end: ",fan.sys.ObjUtil.coerce(s,fan.sys.Obj.$type.toNullable())));
  return;
}
fan.vaseClient.AsyncRunner.make = function() {
  var self = new fan.vaseClient.AsyncRunner();
  fan.vaseClient.AsyncRunner.make$(self);
  return self;
  }
fan.vaseClient.AsyncRunner.make$ = function(self)
{
  return;
}
fan.vaseClient.HttpReq = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseClient.HttpReq.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  this.peer = new fan.vaseClient.HttpReqPeer(this);
  var $this = this;
  this.m_uri = fan.std.Uri.fromStr("#");
  this.m_headers = fan.sys.ObjUtil.coerce((function($this) { var $_u5 = fan.std.Map.fromLiteral([],[],fan.std.Type.find("sys::Str"),fan.std.Type.find("sys::Str")); if ($_u5 == null) return null; return fan.sys.ObjUtil.toImmutable($_u5); })(this),fan.std.Type.find("std::Map<sys::Str,sys::Str>"));
  this.m_timeout = 10000;
  this.m_withCredentials = false;
  return;
}
fan.vaseClient.HttpReq.prototype.$typeof = function() { return fan.vaseClient.HttpReq.$type; }
fan.vaseClient.HttpReq.make = function(f) {
  var self = new fan.vaseClient.HttpReq();
  fan.vaseClient.HttpReq.make$(self,f);
  return self;
  }
fan.vaseClient.HttpReq.make$ = function(self,f)
{
  if (f === undefined) f = null;
  ;
  if (f != null)
  {
    f.call(self);
  }
  ;
  return;
}
fan.vaseClient.HttpReq.prototype.send = function(method,content)
{
  return this.peer.send(this,method,content);
}
fan.vaseClient.HttpReq.prototype.get = function()
{
  return this.send("GET",null);
}
fan.vaseClient.HttpReq.prototype.post = function(content)
{
  return this.send("POST",content);
}
fan.vaseClient.HttpReq.prototype.m_uri = null;
fan.vaseClient.HttpReq.prototype.m_headers = null;
fan.vaseClient.HttpReq.prototype.m_timeout = 0;
fan.vaseClient.HttpReq.prototype.m_withCredentials = false;
fan.vaseClient.HttpReqPeer = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseClient.HttpReqPeer.prototype.$ctor = function(self) {}
fan.vaseClient.HttpReqPeer.prototype.send = function(self, method, content, f)
{
  return new Promise(function(resolve, reject) {
    fan.vaseClient.HttpReqPeer.doRequest(self, method, content, resolve);
  });
}
fan.vaseClient.HttpReqPeer.doRequest = function(self, method, content, resolve)
{
  var xhr = new XMLHttpRequest();
  var buf;
  var view;
  xhr.open(method.toUpperCase(), self.m_uri.m_str, true);
  xhr.onreadystatechange = function () {
    if (xhr.readyState == 4) {
      res = fan.vaseClient.HttpReqPeer.makeRes(xhr);
      resolve(res);
    }
  }
  var ct = false;
  var k = self.m_headers.keys();
  for (var i=0; i<k.size(); i++)
  {
    var key = k.get(i);
    if (fan.sys.Str.lower(key) == "content-type") ct = true;
    xhr.setRequestHeader(key, self.m_headers.get(key));
  }
  xhr.withCredentials = self.m_withCredentials;
  if (content == null)
  {
    xhr.send(null);
  }
  else if (fan.sys.ObjUtil.$typeof(content) === fan.sys.Str.$type)
  {
    // send text
    if (!ct) xhr.setRequestHeader("Content-Type", "text/plain");
    xhr.send(content);
  }
  else if (content instanceof fan.sys.Buf)
  {
    // send binary
    if (!ct) xhr.setRequestHeader("Content-Type", "application/octet-stream");
    buf = new ArrayBuffer(content.size());
    view = new Uint8Array(buf);
    view.set(content.m_buf.slice(0, content.size()));
    xhr.send(view);
  }
  else if (content instanceof File)
  {
    // send file as raw data
    xhr.send(content);
  }
  else
  {
    throw fan.sys.Err.make("Can only send Str or Buf: " + content);
  }
}
fan.vaseClient.HttpReqPeer.makeRes = function(xhr)
{
  var res = fan.vaseClient.HttpRes.make();
  res.m_status  = xhr.status;
  res.m_content = xhr.responseText;
  var all = xhr.getAllResponseHeaders().split("\n");
  for (var i=0; i<all.length; i++)
  {
    if (all[i].length == 0) continue;
    var j = all[i].indexOf(":");
    var k = fan.sys.Str.trim(all[i].substr(0, j));
    var v = fan.sys.Str.trim(all[i].substr(j+1));
    res.m_headers.set(k, v);
  }
  return res;
}
fan.vaseClient.HttpRes = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseClient.HttpRes.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_headers = fan.sys.ObjUtil.coerce(fan.std.CaseInsensitiveMap.make(),fan.std.Type.find("std::Map<sys::Str,sys::Str>"));
  this.m_content = "";
  return;
}
fan.vaseClient.HttpRes.prototype.$typeof = function() { return fan.vaseClient.HttpRes.$type; }
fan.vaseClient.HttpRes.make = function() {
  var self = new fan.vaseClient.HttpRes();
  fan.vaseClient.HttpRes.make$(self);
  return self;
  }
fan.vaseClient.HttpRes.make$ = function(self)
{
  ;
  return;
}
fan.vaseClient.HttpRes.prototype.status = function()
{
  return this.m_status;
}
fan.vaseClient.HttpRes.prototype.status$ = function(it)
{
  this.m_status = it;
  return;
}
fan.vaseClient.HttpRes.prototype.headers = function()
{
  return this.m_headers;
}
fan.vaseClient.HttpRes.prototype.headers$ = function(it)
{
  this.m_headers = it;
  return;
}
fan.vaseClient.HttpRes.prototype.content = function()
{
  return this.m_content;
}
fan.vaseClient.HttpRes.prototype.content$ = function(it)
{
  this.m_content = it;
  return;
}
fan.vaseClient.HttpRes.prototype.m_status = 0;
fan.vaseClient.HttpRes.prototype.m_headers = null;
fan.vaseClient.HttpRes.prototype.m_content = null;
fan.vaseClient.initReflect$ = function() {
  fan.vaseClient.$pod = fan.std.Pod.$add('vaseClient');
  with (fan.vaseClient.$pod)
  {
    fan.vaseClient.AsyncRunner.$type = $at('AsyncRunner','sys::Obj',[],{},8192);
    fan.vaseClient.HttpReq.$type = $at('HttpReq','sys::Obj',[],{},8194);
    fan.vaseClient.HttpRes.$type = $at('HttpRes','sys::Obj',[],{},8192);
    fan.vaseClient.AsyncRunner.$type.$am('init',40962,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('run',34818,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('s','concurrent::Async<sys::Obj>',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseClient.HttpReq.$type.$af('uri',73730,'std::Uri',{}).$af('headers',73730,'std::Map<sys::Str,sys::Str>',{}).$af('timeout',73730,'sys::Int',{}).$af('withCredentials',73730,'sys::Bool',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>?',true)], fan.std.Param.$type),{}).$am('send',8704,'concurrent::Promise<vaseClient::HttpRes>',fan.sys.List.makeFromJs([new fan.std.Param('method','sys::Str',false),new fan.std.Param('content','sys::Obj?',false)], fan.std.Param.$type),{}).$am('get',8192,'concurrent::Promise<vaseClient::HttpRes>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('post',8192,'concurrent::Promise<vaseClient::HttpRes>',fan.sys.List.makeFromJs([new fan.std.Param('content','sys::Obj',false)], fan.std.Param.$type),{});
    fan.vaseClient.HttpRes.$type.$af('status',73728,'sys::Int',{}).$af('headers',73728,'std::Map<sys::Str,sys::Str>',{}).$af('content',73728,'sys::Obj',{}).$am('make',2052,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    m_meta = {};
    m_meta["pod.name"] = "vaseClient";
    m_meta["pod.version"] = "1.0";
    m_meta["pod.depends"] = "sys 2.0;std 1.0;concurrent 1.0;vaseWindow 1.0";
    m_meta["pod.summary"] = "Http Client";
    m_meta["pod.isScript"] = "false";
    m_meta["fcode.version"] = "1.1.3";
    m_meta["build.host"] = "mywifi.local";
    m_meta["build.user"] = "yangjiandong";
    m_meta["build.ts"] = "2020-04-13T19:27:36.000+08:00 Asia/Harbin";
    m_meta["build.tsKey"] = "200413192736";
    m_meta["build.compiler"] = "1.1";
    m_meta["build.platform"] = "macosx-x86_64";
    m_meta["pod.docApi"] = "true";
    m_meta["pod.docSrc"] = "false";
    m_meta["pod.native.java"] = "true";
    m_meta["pod.native.jni"] = "false";
    m_meta["pod.native.dotnet"] = "false";
    m_meta["pod.native.js"] = "true";
  }
  fan.vaseClient.$clos$_u0 = new fan.sys.ClosureFuncSpec$("vaseClient::$clos$_u0",fan.sys.Void.$type,["s","concurrent::Async<sys::Obj>","false"]);
  fan.vaseClient.$clos$_u1 = new fan.sys.ClosureFuncSpec$("vaseClient::$clos$_u1",fan.sys.Void.$type,["res","sys::Obj?","false","err","sys::Err?","false"]);
  fan.vaseClient.$clos$_u2 = new fan.sys.ClosureFuncSpec$("vaseClient::$clos$_u2",fan.sys.Void.$type,["it","sys::Obj?","false"]);
  fan.vaseClient.$clos$_u3 = new fan.sys.ClosureFuncSpec$("vaseClient::$clos$_u3",fan.sys.Void.$type,[]);
}
fan.vaseClient.initStatic$ = function() {
}
fan.vaseClient.initReflect$();
fan.vaseClient.initStatic$();
}).call(this);

(function () {
var root=this;
var fan=root.fan;
if (fan === undefined) {
   if (typeof exports !== 'undefined') {
     fan = exports;
   } else {
     fan = root.fan = {};
   }
}
if (!fan.sys && (typeof require !== 'undefined')) fan = require('sys.js');

if (typeof exports !== 'undefined') {
  fan.vaseGui = exports;
} else {
  fan.vaseGui = root.fan.vaseGui = {};
}

fan.vaseGui.Align = fan.sys.Obj.$extend(fan.sys.Enum);
fan.vaseGui.Align.prototype.$ctor = function()
{
  fan.sys.Enum.prototype.$ctor.call(this);
  this.peer = new fan.sys.EnumPeer(this);
  var $this = this;
}
fan.vaseGui.Align.prototype.$typeof = function() { return fan.vaseGui.Align.$type; }
fan.vaseGui.Align.make = function($ordinal,$name) {
  var self = new fan.vaseGui.Align();
  fan.vaseGui.Align.make$(self,$ordinal,$name);
  return self;
  }
fan.vaseGui.Align.make$ = function(self,$ordinal,$name)
{
  fan.sys.Enum.make$(self,$ordinal,$name);
  return;
}
fan.vaseGui.Align.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.sys.Enum.doFromStr("vaseGui::Align",$name,checked),fan.vaseGui.Align.$type.toNullable());
}
fan.vaseGui.Align.static$init = function()
{
  if (fan.vaseGui.Align.static$inited) return;
  fan.vaseGui.Align.static$inited = true;
  fan.vaseGui.Align.m_begin = fan.vaseGui.Align.make(0,"begin");
  fan.vaseGui.Align.m_center = fan.vaseGui.Align.make(1,"center");
  fan.vaseGui.Align.m_end = fan.vaseGui.Align.make(2,"end");
  fan.vaseGui.Align.m_vals = fan.sys.ObjUtil.coerce((function($this) { var $_u3 = fan.sys.List.make(fan.vaseGui.Align.$type, [((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_begin),((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_center),((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_end)]); if ($_u3 == null) return null; return fan.sys.ObjUtil.toImmutable($_u3); })(this),fan.std.Type.find("sys::List<vaseGui::Align>"));
  if (true)
  {
  }
  ;
  return;
}
fan.vaseGui.Align.m_begin = null;
fan.vaseGui.Align.m_center = null;
fan.vaseGui.Align.m_end = null;
fan.vaseGui.Align.m_vals = null;
fan.vaseGui.SizeType = fan.sys.Obj.$extend(fan.sys.Enum);
fan.vaseGui.SizeType.prototype.$ctor = function()
{
  fan.sys.Enum.prototype.$ctor.call(this);
  this.peer = new fan.sys.EnumPeer(this);
  var $this = this;
}
fan.vaseGui.SizeType.prototype.$typeof = function() { return fan.vaseGui.SizeType.$type; }
fan.vaseGui.SizeType.make = function($ordinal,$name) {
  var self = new fan.vaseGui.SizeType();
  fan.vaseGui.SizeType.make$(self,$ordinal,$name);
  return self;
  }
fan.vaseGui.SizeType.make$ = function(self,$ordinal,$name)
{
  fan.sys.Enum.make$(self,$ordinal,$name);
  return;
}
fan.vaseGui.SizeType.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.sys.Enum.doFromStr("vaseGui::SizeType",$name,checked),fan.vaseGui.SizeType.$type.toNullable());
}
fan.vaseGui.SizeType.static$init = function()
{
  if (fan.vaseGui.SizeType.static$inited) return;
  fan.vaseGui.SizeType.static$inited = true;
  fan.vaseGui.SizeType.m_matchParent = fan.vaseGui.SizeType.make(0,"matchParent");
  fan.vaseGui.SizeType.m_wrapContent = fan.vaseGui.SizeType.make(1,"wrapContent");
  fan.vaseGui.SizeType.m_fixed = fan.vaseGui.SizeType.make(2,"fixed");
  fan.vaseGui.SizeType.m_percent = fan.vaseGui.SizeType.make(3,"percent");
  fan.vaseGui.SizeType.m_vals = fan.sys.ObjUtil.coerce((function($this) { var $_u4 = fan.sys.List.make(fan.vaseGui.SizeType.$type, [((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent),((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_wrapContent),((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_fixed),((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_percent)]); if ($_u4 == null) return null; return fan.sys.ObjUtil.toImmutable($_u4); })(this),fan.std.Type.find("sys::List<vaseGui::SizeType>"));
  if (true)
  {
  }
  ;
  return;
}
fan.vaseGui.SizeType.m_matchParent = null;
fan.vaseGui.SizeType.m_wrapContent = null;
fan.vaseGui.SizeType.m_fixed = null;
fan.vaseGui.SizeType.m_percent = null;
fan.vaseGui.SizeType.m_vals = null;
fan.vaseGui.LayoutParam = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.LayoutParam.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent);
  this.m_heightType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_wrapContent);
  this.m_ignore = false;
  this.m_widthVal = fan.sys.Float.make(0.0);
  this.m_heightVal = fan.sys.Float.make(0.0);
  this.m_weight = fan.sys.Float.make(1.0);
  this.m_offsetX = fan.sys.Float.make(0.0);
  this.m_offsetY = fan.sys.Float.make(0.0);
  this.m_vAlign = ((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_begin);
  this.m_hAlign = ((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_begin);
  return;
}
fan.vaseGui.LayoutParam.prototype.$typeof = function() { return fan.vaseGui.LayoutParam.$type; }
fan.vaseGui.LayoutParam.prototype.widthType = function()
{
  return this.m_widthType;
}
fan.vaseGui.LayoutParam.prototype.widthType$ = function(it)
{
  this.m_widthType = it;
  return;
}
fan.vaseGui.LayoutParam.prototype.heightType = function()
{
  return this.m_heightType;
}
fan.vaseGui.LayoutParam.prototype.heightType$ = function(it)
{
  this.m_heightType = it;
  return;
}
fan.vaseGui.LayoutParam.prototype.ignore = function()
{
  return this.m_ignore;
}
fan.vaseGui.LayoutParam.prototype.ignore$ = function(it)
{
  this.m_ignore = it;
  return;
}
fan.vaseGui.LayoutParam.prototype.widthVal = function()
{
  return this.m_widthVal;
}
fan.vaseGui.LayoutParam.prototype.widthVal$ = function(it)
{
  this.m_widthVal = it;
  return;
}
fan.vaseGui.LayoutParam.prototype.heightVal = function()
{
  return this.m_heightVal;
}
fan.vaseGui.LayoutParam.prototype.heightVal$ = function(it)
{
  this.m_heightVal = it;
  return;
}
fan.vaseGui.LayoutParam.prototype.weight = function()
{
  return this.m_weight;
}
fan.vaseGui.LayoutParam.prototype.weight$ = function(it)
{
  this.m_weight = it;
  return;
}
fan.vaseGui.LayoutParam.prototype.offsetX = function()
{
  return this.m_offsetX;
}
fan.vaseGui.LayoutParam.prototype.offsetX$ = function(it)
{
  this.m_offsetX = it;
  return;
}
fan.vaseGui.LayoutParam.prototype.offsetY = function()
{
  return this.m_offsetY;
}
fan.vaseGui.LayoutParam.prototype.offsetY$ = function(it)
{
  this.m_offsetY = it;
  return;
}
fan.vaseGui.LayoutParam.prototype.vAlign = function()
{
  return this.m_vAlign;
}
fan.vaseGui.LayoutParam.prototype.vAlign$ = function(it)
{
  this.m_vAlign = it;
  return;
}
fan.vaseGui.LayoutParam.prototype.hAlign = function()
{
  return this.m_hAlign;
}
fan.vaseGui.LayoutParam.prototype.hAlign$ = function(it)
{
  this.m_hAlign = it;
  return;
}
fan.vaseGui.LayoutParam.prototype.prefX = function(w,parentWidth,selfWidth)
{
  var parent = fan.sys.Float.make(0.0);
  var anchor = fan.sys.Float.make(0.0);
  if (fan.sys.ObjUtil.equals(this.m_hAlign,((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_center)))
  {
    parent = fan.sys.Float.make(0.5);
    anchor = fan.sys.Float.make(0.5);
  }
  else
  {
    if (fan.sys.ObjUtil.equals(this.m_hAlign,((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_end)))
    {
      parent = fan.sys.Float.make(1.0);
      anchor = fan.sys.Float.make(1.0);
    }
    ;
  }
  ;
  var x = fan.sys.Float.plusInt(fan.sys.Float.minus(fan.sys.Float.multInt(parent,parentWidth),fan.sys.Float.multInt(anchor,selfWidth)),w.dpToPixel(this.m_offsetX));
  return fan.sys.Float.toInt(x);
}
fan.vaseGui.LayoutParam.prototype.prefY = function(w,parentHeight,selfHeight)
{
  var parent = fan.sys.Float.make(0.0);
  var anchor = fan.sys.Float.make(0.0);
  if (fan.sys.ObjUtil.equals(this.m_vAlign,((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_center)))
  {
    parent = fan.sys.Float.make(0.5);
    anchor = fan.sys.Float.make(0.5);
  }
  else
  {
    if (fan.sys.ObjUtil.equals(this.m_vAlign,((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_end)))
    {
      parent = fan.sys.Float.make(1.0);
      anchor = fan.sys.Float.make(1.0);
    }
    ;
  }
  ;
  var y = fan.sys.Float.plusInt(fan.sys.Float.minus(fan.sys.Float.multInt(parent,parentHeight),fan.sys.Float.multInt(anchor,selfHeight)),w.dpToPixel(this.m_offsetY));
  return fan.sys.Float.toInt(y);
}
fan.vaseGui.LayoutParam.prototype.prefWidth = function(w,parentWidth,selfWidth)
{
  var $_u5 = this.m_widthType;
  if (fan.sys.ObjUtil.equals($_u5,((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent)))
  {
    return parentWidth;
  }
  else if (fan.sys.ObjUtil.equals($_u5,((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_wrapContent)))
  {
    return selfWidth;
  }
  else if (fan.sys.ObjUtil.equals($_u5,((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_percent)))
  {
    return fan.sys.Float.toInt(fan.sys.Float.divInt(fan.sys.Int.multFloat(parentWidth,this.m_widthVal),100));
  }
  else if (fan.sys.ObjUtil.equals($_u5,((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_fixed)))
  {
    return w.dpToPixel(this.m_widthVal);
  }
  else
  {
    return w.dpToPixel(this.m_widthVal);
  }
  ;
}
fan.vaseGui.LayoutParam.prototype.prefHeight = function(w,parentHeight,selfHeight)
{
  var $_u6 = this.m_heightType;
  if (fan.sys.ObjUtil.equals($_u6,((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent)))
  {
    return parentHeight;
  }
  else if (fan.sys.ObjUtil.equals($_u6,((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_wrapContent)))
  {
    return selfHeight;
  }
  else if (fan.sys.ObjUtil.equals($_u6,((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_percent)))
  {
    return fan.sys.Float.toInt(fan.sys.Float.divInt(fan.sys.Int.multFloat(parentHeight,this.m_heightVal),100));
  }
  else if (fan.sys.ObjUtil.equals($_u6,((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_fixed)))
  {
    return w.dpToPixel(this.m_heightVal);
  }
  else
  {
    return w.dpToPixel(this.m_heightVal);
  }
  ;
}
fan.vaseGui.LayoutParam.prototype.hash = function()
{
  var hash = 17;
  hash = fan.sys.Int.plus(fan.sys.Int.mult(31,hash),fan.sys.ObjUtil.hash(this.m_widthType));
  hash = fan.sys.Int.plus(fan.sys.Int.mult(31,hash),fan.sys.ObjUtil.hash(this.m_heightType));
  hash = fan.sys.Int.plus(fan.sys.Int.mult(31,hash),fan.sys.Float.hash(this.m_widthVal));
  hash = fan.sys.Int.plus(fan.sys.Int.mult(31,hash),fan.sys.Float.hash(this.m_heightVal));
  hash = fan.sys.Int.plus(fan.sys.Int.mult(31,hash),fan.sys.Float.hash(this.m_offsetX));
  hash = fan.sys.Int.plus(fan.sys.Int.mult(31,hash),fan.sys.Float.hash(this.m_offsetY));
  hash = fan.sys.Int.plus(fan.sys.Int.mult(31,hash),fan.sys.Float.hash(this.m_weight));
  return hash;
}
fan.vaseGui.LayoutParam.prototype.equals = function(obj)
{
  var that = fan.sys.ObjUtil.as(obj,fan.vaseGui.LayoutParam.$type);
  if (that == null)
  {
    return false;
  }
  ;
  return (fan.sys.ObjUtil.equals(this.m_widthType,that.m_widthType) && fan.sys.ObjUtil.equals(this.m_heightType,that.m_heightType) && fan.sys.ObjUtil.equals(this.m_widthVal,that.m_widthVal) && fan.sys.ObjUtil.equals(this.m_heightVal,that.m_heightVal) && fan.sys.ObjUtil.equals(this.m_weight,that.m_weight) && fan.sys.ObjUtil.equals(this.m_offsetX,that.m_offsetX) && fan.sys.ObjUtil.equals(this.m_offsetY,that.m_offsetY));
}
fan.vaseGui.LayoutParam.make = function() {
  var self = new fan.vaseGui.LayoutParam();
  fan.vaseGui.LayoutParam.make$(self);
  return self;
  }
fan.vaseGui.LayoutParam.make$ = function(self)
{
  ;
  return;
}
fan.vaseGui.LayoutParam.prototype.m_widthType = null;
fan.vaseGui.LayoutParam.prototype.m_heightType = null;
fan.vaseGui.LayoutParam.prototype.m_ignore = false;
fan.vaseGui.LayoutParam.prototype.m_widthVal = fan.sys.Float.make(0);
fan.vaseGui.LayoutParam.prototype.m_heightVal = fan.sys.Float.make(0);
fan.vaseGui.LayoutParam.prototype.m_weight = fan.sys.Float.make(0);
fan.vaseGui.LayoutParam.prototype.m_offsetX = fan.sys.Float.make(0);
fan.vaseGui.LayoutParam.prototype.m_offsetY = fan.sys.Float.make(0);
fan.vaseGui.LayoutParam.prototype.m_vAlign = null;
fan.vaseGui.LayoutParam.prototype.m_hAlign = null;
fan.vaseGui.DisplayMetrics = function() {}
fan.vaseGui.DisplayMetrics.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.DisplayMetrics.prototype.$typeof = function() { return fan.vaseGui.DisplayMetrics.$type; }
fan.vaseGui.DisplayMetrics.dp = function()
{
  return fan.sys.Float.mult(fan.vaseWindow.Toolkit.cur().density(),fan.sys.Float.make(0.5));
}
fan.vaseGui.DisplayMetrics.dpToPixel = function(d)
{
  return fan.sys.Float.toInt(fan.sys.Float.mult(d,fan.vaseGui.DisplayMetrics.dp()));
}
fan.vaseGui.DisplayMetrics.pixelToDp = function(p)
{
  return fan.sys.Int.divFloat(p,fan.vaseGui.DisplayMetrics.dp());
}
fan.vaseGui.WinView = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.WinView.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_frameOut = false;
  this.m_stack = fan.sys.List.make(fan.vaseGui.Frame.$type);
  this.m_gesture = fan.vaseGui.Gesture.make();
  this.m_width = 0;
  this.m_height = 0;
  this.m_layoutDirty = 1;
  return;
}
fan.vaseGui.WinView.prototype.$typeof = function() { return fan.vaseGui.WinView.$type; }
fan.vaseGui.WinView.prototype.host = function()
{
  return this.m_host;
}
fan.vaseGui.WinView.prototype.host$ = function(it)
{
  this.m_host = it;
  return;
}
fan.vaseGui.WinView.prototype.curFrame = function()
{
  return this.m_curFrame;
}
fan.vaseGui.WinView.prototype.curFrame$ = function(it)
{
  this.m_curFrame = it;
  return;
}
fan.vaseGui.WinView.prototype.oldFrame = function()
{
  return this.m_oldFrame;
}
fan.vaseGui.WinView.prototype.oldFrame$ = function(it)
{
  this.m_oldFrame = it;
  return;
}
fan.vaseGui.WinView.prototype.frameOut = function()
{
  return this.m_frameOut;
}
fan.vaseGui.WinView.prototype.frameOut$ = function(it)
{
  this.m_frameOut = it;
  return;
}
fan.vaseGui.WinView.prototype.stack = function()
{
  return this.m_stack;
}
fan.vaseGui.WinView.prototype.stack$ = function(it)
{
  this.m_stack = it;
  return;
}
fan.vaseGui.WinView.prototype.gesture = function()
{
  return this.m_gesture;
}
fan.vaseGui.WinView.prototype.gesture$ = function(it)
{
  this.m_gesture = it;
  return;
}
fan.vaseGui.WinView.prototype.width = function()
{
  return this.m_width;
}
fan.vaseGui.WinView.prototype.width$ = function(it)
{
  this.m_width = it;
  return;
}
fan.vaseGui.WinView.prototype.height = function()
{
  return this.m_height;
}
fan.vaseGui.WinView.prototype.height$ = function(it)
{
  this.m_height = it;
  return;
}
fan.vaseGui.WinView.prototype.layoutDirty = function()
{
  return this.m_layoutDirty;
}
fan.vaseGui.WinView.prototype.layoutDirty$ = function(it)
{
  this.m_layoutDirty = it;
  return;
}
fan.vaseGui.WinView.make = function(frame) {
  var self = new fan.vaseGui.WinView();
  fan.vaseGui.WinView.make$(self,frame);
  return self;
  }
fan.vaseGui.WinView.make$ = function(self,frame)
{
  var $this = self;
  ;
  self.m_curFrame = frame;
  self.m_gesture.m_onGestureEvent.add(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u7,
    function(e)
    {
      e.m_relativeX = e.m_x;
      e.m_relativeY = e.m_y;
      if ($this.m_oldFrame == null)
      {
        $this.m_curFrame.gestureEvent(e);
      }
      ;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,vaseWindow::Event?>")));
  return;
}
fan.vaseGui.WinView.prototype.pushFrame = function(frame)
{
  var $this = this;
  this.m_stack.push(this.m_curFrame);
  this.m_oldFrame = this.m_curFrame;
  this.m_curFrame = frame;
  this.m_frameOut = false;
  if (this.m_oldFrame != null)
  {
    this.m_curFrame.m_animManager.clear();
    var anim = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TweenAnimation.make(),fan.sys.Func.make$closure(
      fan.vaseGui.$clos$_u8,
      function(it)
      {
        it.m_duration = 300;
        it.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TranslateAnimChannel.make(),fan.sys.Func.make$closure(
          fan.vaseGui.$clos$_u9,
          function(it)
          {
            it.m_to = ((fan.vaseGraphics.Point.static$init ? fan.vaseGraphics.Point.static$init() : null),fan.vaseGraphics.Point.m_defVal);
            it.m_from = fan.vaseGraphics.Point.make($this.m_oldFrame.width(),0);
            return;
          })),fan.vaseGui.TranslateAnimChannel.$type));
        return;
      })),fan.vaseGui.TweenAnimation.$type);
    anim.bind(this.m_curFrame);
    anim.whenDone().add(fan.sys.Func.make$closure(
      fan.vaseGui.$clos$_u10,
      function(it)
      {
        $this.m_oldFrame.detach();
        return;
      }));
    anim.start();
  }
  ;
  this.m_layoutDirty = 2;
  this.host().repaint();
  return;
}
fan.vaseGui.WinView.prototype.popFrame = function()
{
  var $this = this;
  var frame = this.m_stack.pop();
  if (frame == null)
  {
    fan.sys.ObjUtil.echo("nomore frame");
    return null;
  }
  ;
  this.m_oldFrame = this.m_curFrame;
  this.m_curFrame = fan.sys.ObjUtil.coerce(frame,fan.vaseGui.Frame.$type);
  this.m_frameOut = true;
  if (this.m_oldFrame != null)
  {
    this.m_oldFrame.m_animManager.clear();
    var anim = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TweenAnimation.make(),fan.sys.Func.make$closure(
      fan.vaseGui.$clos$_u8,
      function(it)
      {
        it.m_duration = 300;
        it.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TranslateAnimChannel.make(),fan.sys.Func.make$closure(
          fan.vaseGui.$clos$_u9,
          function(it)
          {
            it.m_from = ((fan.vaseGraphics.Point.static$init ? fan.vaseGraphics.Point.static$init() : null),fan.vaseGraphics.Point.m_defVal);
            it.m_to = fan.vaseGraphics.Point.make($this.m_oldFrame.width(),0);
            return;
          })),fan.vaseGui.TranslateAnimChannel.$type));
        return;
      })),fan.vaseGui.TweenAnimation.$type);
    anim.bind(fan.sys.ObjUtil.coerce(this.m_oldFrame,fan.vaseGui.Widget.$type));
    anim.whenDone().add(fan.sys.Func.make$closure(
      fan.vaseGui.$clos$_u10,
      function(it)
      {
        $this.m_oldFrame.detach();
        return;
      }));
    anim.start();
  }
  ;
  this.m_layoutDirty = 2;
  this.host().repaint();
  return frame;
}
fan.vaseGui.WinView.prototype.onPaint = function(g)
{
  var s = this.host().size();
  if ((fan.sys.ObjUtil.compareNE(this.m_width,s.m_w) || fan.sys.ObjUtil.compareNE(this.m_height,s.m_h)))
  {
    this.m_width = s.m_w;
    this.m_height = s.m_h;
    this.m_layoutDirty = 2;
  }
  ;
  if (fan.sys.ObjUtil.compareGT(this.m_layoutDirty,0))
  {
    this.m_curFrame.layout(0,0,s.m_w,s.m_h,fan.sys.ObjUtil.compareGT(this.m_layoutDirty,1));
    this.m_layoutDirty = 0;
    if (!this.m_curFrame.m_inited)
    {
      this.m_curFrame.m_inited = true;
      this.m_curFrame.onMounted();
      this.m_curFrame.onOpened().fire(null);
    }
    ;
  }
  ;
  (function($this) { var $_u11 = $this.m_oldFrame; if ($_u11 == null) return null; return $_u11.onUpdate(); })(this);
  if ((!this.m_frameOut && this.m_oldFrame != null))
  {
    g.push();
    this.m_oldFrame.paint(g);
    g.pop();
  }
  ;
  this.m_curFrame.onUpdate();
  this.m_curFrame.paint(g);
  if ((this.m_frameOut && this.m_oldFrame != null))
  {
    g.push();
    this.m_oldFrame.paint(g);
    g.pop();
  }
  ;
  return;
}
fan.vaseGui.WinView.prototype.onMotionEvent = function(e)
{
  if (this.m_oldFrame == null)
  {
    this.m_curFrame.motionEvent(e);
  }
  ;
  if (!e.consumed())
  {
    this.m_gesture.onEvent(e);
  }
  ;
  return;
}
fan.vaseGui.WinView.prototype.onKeyEvent = function(e)
{
  if (this.m_oldFrame == null)
  {
    this.m_curFrame.keyEvent(e);
  }
  ;
  return;
}
fan.vaseGui.WinView.prototype.onWindowEvent = function(e)
{
  if (this.m_oldFrame == null)
  {
    this.m_curFrame.windowEvent(e);
  }
  ;
  return;
}
fan.vaseGui.WinView.prototype.getPrefSize = function(hintsWidth,hintsHeight)
{
  var result = this.m_curFrame.prefSize(hintsWidth,hintsHeight);
  return fan.vaseGraphics.Size.make(result.m_w,result.m_h);
}
fan.vaseGui.WinView.prototype.m_host = null;
fan.vaseGui.WinView.prototype.m_curFrame = null;
fan.vaseGui.WinView.prototype.m_oldFrame = null;
fan.vaseGui.WinView.prototype.m_frameOut = false;
fan.vaseGui.WinView.prototype.m_stack = null;
fan.vaseGui.WinView.prototype.m_gesture = null;
fan.vaseGui.WinView.prototype.m_width = 0;
fan.vaseGui.WinView.prototype.m_height = 0;
fan.vaseGui.WinView.prototype.m_layoutDirty = 0;
fan.vaseGui.Widget = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.Widget.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_id = "";
  this.m_styleClass = "";
  this.m_clip = false;
  this.m_useRenderCache = false;
  this.m_renderCacheDirty = true;
  this.m_layoutDirty = 1;
  this.m_padding = ((fan.vaseGui.Insets.static$init ? fan.vaseGui.Insets.static$init() : null),fan.vaseGui.Insets.m_defVal);
  this.m_margin = ((fan.vaseGui.Insets.static$init ? fan.vaseGui.Insets.static$init() : null),fan.vaseGui.Insets.m_defVal);
  this.m_layoutParam = fan.vaseGui.LayoutParam.make();
  this.m_style = null;
  this.m_visible = true;
  this.m_enabled = true;
  this.m_x = 0;
  this.m_y = 0;
  this.m_width = 50;
  this.m_height = 50;
  this.m_onStateChanged$Store = "_once_";
  this.m_isFocusable = true;
  this.m_onFocusChanged$Store = "_once_";
  return;
}
fan.vaseGui.Widget.prototype.$typeof = function() { return fan.vaseGui.Widget.$type; }
fan.vaseGui.Widget.prototype.id = function()
{
  return this.m_id;
}
fan.vaseGui.Widget.prototype.id$ = function(it)
{
  this.m_id = it;
  return;
}
fan.vaseGui.Widget.prototype.styleClass = function()
{
  return this.m_styleClass;
}
fan.vaseGui.Widget.prototype.styleClass$ = function(it)
{
  this.fireStateChange(this.m_styleClass,it,fan.vaseGui.Widget.$type.slot("styleClass"));
  this.m_styleClass = it;
  return;
}
fan.vaseGui.Widget.prototype.transform = function()
{
  return this.m_transform;
}
fan.vaseGui.Widget.prototype.transform$ = function(it)
{
  this.m_transform = it;
  return;
}
fan.vaseGui.Widget.prototype.alpha = function()
{
  return this.m_alpha;
}
fan.vaseGui.Widget.prototype.alpha$ = function(it)
{
  this.m_alpha = it;
  return;
}
fan.vaseGui.Widget.prototype.clip = function()
{
  return this.m_clip;
}
fan.vaseGui.Widget.prototype.clip$ = function(it)
{
  this.m_clip = it;
  return;
}
fan.vaseGui.Widget.prototype.useRenderCache = function()
{
  return this.m_useRenderCache;
}
fan.vaseGui.Widget.prototype.useRenderCache$ = function(it)
{
  this.m_useRenderCache = it;
  return;
}
fan.vaseGui.Widget.prototype.renderCacheImage = function()
{
  return this.m_renderCacheImage;
}
fan.vaseGui.Widget.prototype.renderCacheImage$ = function(it)
{
  this.m_renderCacheImage = it;
  return;
}
fan.vaseGui.Widget.prototype.renderCacheDirty = function()
{
  return this.m_renderCacheDirty;
}
fan.vaseGui.Widget.prototype.renderCacheDirty$ = function(it)
{
  this.m_renderCacheDirty = it;
  return;
}
fan.vaseGui.Widget.prototype.layoutDirty = function()
{
  return this.m_layoutDirty;
}
fan.vaseGui.Widget.prototype.layoutDirty$ = function(it)
{
  this.m_layoutDirty = it;
  return;
}
fan.vaseGui.Widget.prototype.padding = function()
{
  return this.m_padding;
}
fan.vaseGui.Widget.prototype.padding$ = function(it)
{
  this.m_padding = it;
  return;
}
fan.vaseGui.Widget.prototype.margin = function()
{
  return this.m_margin;
}
fan.vaseGui.Widget.prototype.margin$ = function(it)
{
  this.m_margin = it;
  return;
}
fan.vaseGui.Widget.prototype.layoutParam = function()
{
  return this.m_layoutParam;
}
fan.vaseGui.Widget.prototype.layoutParam$ = function(it)
{
  this.m_layoutParam = it;
  return;
}
fan.vaseGui.Widget.prototype.style = function()
{
  return this.m_style;
}
fan.vaseGui.Widget.prototype.style$ = function(it)
{
  this.m_style = it;
  return;
}
fan.vaseGui.Widget.prototype.visible = function()
{
  return this.m_visible;
}
fan.vaseGui.Widget.prototype.visible$ = function(it)
{
  this.fireStateChange(fan.sys.ObjUtil.coerce(this.m_visible,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(it,fan.sys.Obj.$type.toNullable()),fan.vaseGui.Widget.$type.slot("visible"));
  this.m_visible = it;
  return;
}
fan.vaseGui.Widget.prototype.enabled = function()
{
  return this.m_enabled;
}
fan.vaseGui.Widget.prototype.enabled$ = function(it)
{
  this.fireStateChange(fan.sys.ObjUtil.coerce(this.m_enabled,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(it,fan.sys.Obj.$type.toNullable()),fan.vaseGui.Widget.$type.slot("enabled"));
  this.m_enabled = it;
  return;
}
fan.vaseGui.Widget.prototype.x = function()
{
  return this.m_x;
}
fan.vaseGui.Widget.prototype.x$ = function(it)
{
  this.fireStateChange(fan.sys.ObjUtil.coerce(this.m_x,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(it,fan.sys.Obj.$type.toNullable()),fan.vaseGui.Widget.$type.slot("x"));
  this.m_x = it;
  return;
}
fan.vaseGui.Widget.prototype.y = function()
{
  return this.m_y;
}
fan.vaseGui.Widget.prototype.y$ = function(it)
{
  this.fireStateChange(fan.sys.ObjUtil.coerce(this.m_y,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(it,fan.sys.Obj.$type.toNullable()),fan.vaseGui.Widget.$type.slot("y"));
  this.m_y = it;
  return;
}
fan.vaseGui.Widget.prototype.width = function()
{
  return this.m_width;
}
fan.vaseGui.Widget.prototype.width$ = function(it)
{
  this.fireStateChange(fan.sys.ObjUtil.coerce(this.m_width,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(it,fan.sys.Obj.$type.toNullable()),fan.vaseGui.Widget.$type.slot("width"));
  this.m_width = it;
  return;
}
fan.vaseGui.Widget.prototype.height = function()
{
  return this.m_height;
}
fan.vaseGui.Widget.prototype.height$ = function(it)
{
  this.fireStateChange(fan.sys.ObjUtil.coerce(this.m_height,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(it,fan.sys.Obj.$type.toNullable()),fan.vaseGui.Widget.$type.slot("height"));
  this.m_height = it;
  return;
}
fan.vaseGui.Widget.prototype.bounds = function()
{
  return fan.vaseGraphics.Rect.make(this.x(),this.y(),this.width(),this.height());
}
fan.vaseGui.Widget.prototype.bounds$ = function(it)
{
  this.x$(it.m_x);
  this.y$(it.m_y);
  this.width$(it.m_w);
  this.height$(it.m_h);
  return;
}
fan.vaseGui.Widget.prototype.fireStateChange = function(oldValue,newValue,field)
{
  var e = fan.vaseWindow.StateChangedEvent.make(oldValue,newValue,field,this);
  this.onStateChanged().fire(e);
  return;
}
fan.vaseGui.Widget.prototype.onStateChanged = function()
{
  if (this.m_onStateChanged$Store === "_once_")
  {
    this.m_onStateChanged$Store = this.onStateChanged$Once$Widget();
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_onStateChanged$Store,fan.vaseWindow.EventListeners.$type);
}
fan.vaseGui.Widget.prototype.parent = function()
{
  return this.m_parent;
}
fan.vaseGui.Widget.prototype.parent$ = function(it)
{
  this.m_parent = it;
  return;
}
fan.vaseGui.Widget.prototype.setParent = function(p)
{
  this.m_parent = p;
  return;
}
fan.vaseGui.Widget.prototype.findById = function(id)
{
  if (fan.sys.ObjUtil.equals(this.m_id,id))
  {
    return this;
  }
  else
  {
    return null;
  }
  ;
}
fan.vaseGui.Widget.prototype.motionEvent = function(e)
{
  return;
}
fan.vaseGui.Widget.prototype.gestureEvent = function(e)
{
  return;
}
fan.vaseGui.Widget.prototype.keyEvent = function(e)
{
  return;
}
fan.vaseGui.Widget.prototype.paint = function(g)
{
  if (!this.visible())
  {
    return;
  }
  ;
  if ((fan.sys.ObjUtil.compareLE(this.width(),0) || fan.sys.ObjUtil.compareLE(this.height(),0)))
  {
    return;
  }
  ;
  if (this.m_clip)
  {
    g.clip(fan.vaseGraphics.Rect.make(0,0,this.width(),this.height()));
  }
  ;
  if (this.m_transform != null)
  {
    g.transform(fan.sys.ObjUtil.coerce(this.m_transform,fan.vaseMath.Transform2D.$type));
  }
  ;
  if (this.m_alpha != null)
  {
    g.alpha$(fan.sys.Float.toInt(fan.sys.Float.multInt(fan.sys.ObjUtil.coerce(this.m_alpha,fan.sys.Float.$type),255)));
  }
  ;
  if (this.m_useRenderCache)
  {
    if ((this.m_renderCacheImage == null || fan.sys.ObjUtil.compareNE(this.m_renderCacheImage.size().m_w,this.width()) || fan.sys.ObjUtil.compareNE(this.m_renderCacheImage.size().m_h,this.height())))
    {
      this.m_renderCacheImage = fan.vaseGraphics.BufImage.make(fan.vaseGraphics.Size.make(this.width(),this.height()));
      this.m_renderCacheDirty = false;
      var cg = this.m_renderCacheImage.graphics();
      cg.antialias$(true);
      this.doPaint(cg);
      cg.dispose();
    }
    else
    {
      if (this.m_renderCacheDirty)
      {
        this.m_renderCacheDirty = false;
        var cg = this.m_renderCacheImage.graphics();
        cg.antialias$(true);
        this.doPaint(cg);
        cg.dispose();
      }
      ;
    }
    ;
    g.drawImage(fan.sys.ObjUtil.coerce(this.m_renderCacheImage,fan.vaseGraphics.Image.$type),0,0);
  }
  else
  {
    this.doPaint(g);
  }
  ;
  return;
}
fan.vaseGui.Widget.prototype.dpToPixel = function(d)
{
  return fan.vaseGui.DisplayMetrics.dpToPixel(d);
}
fan.vaseGui.Widget.prototype.pixelToDp = function(d)
{
  return fan.vaseGui.DisplayMetrics.pixelToDp(d);
}
fan.vaseGui.Widget.prototype.getStyle = function()
{
  if (this.m_style == null)
  {
    this.m_style = this.getRootView().findStyle(this);
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_style,fan.vaseGui.Style.$type);
}
fan.vaseGui.Widget.prototype.doPaint = function(g)
{
  this.getStyle().paint(this,g);
  return;
}
fan.vaseGui.Widget.prototype.detach = function(doRelayout)
{
  if (doRelayout === undefined) doRelayout = true;
  var p = this.m_parent;
  if (p == null)
  {
    return;
  }
  ;
  p.remove(this,doRelayout);
  return;
}
fan.vaseGui.Widget.prototype.bufferedPrefSize = function(parentContentWidth,parentContentHeight)
{
  if (parentContentWidth === undefined) parentContentWidth = -1;
  if (parentContentHeight === undefined) parentContentHeight = -1;
  var size = this.prefSize(parentContentWidth,parentContentHeight);
  return size.set(fan.sys.Int.plus(size.m_w,this.dpToPixel(fan.sys.Int.toFloat(fan.sys.Int.plus(this.m_margin.m_left,this.m_margin.m_right)))),fan.sys.Int.plus(size.m_h,this.dpToPixel(fan.sys.Int.toFloat(fan.sys.Int.plus(this.m_margin.m_top,this.m_margin.m_bottom)))));
}
fan.vaseGui.Widget.prototype.prefSize = function(parentContentWidth,parentContentHeight)
{
  if (parentContentWidth === undefined) parentContentWidth = -1;
  if (parentContentHeight === undefined) parentContentHeight = -1;
  var hintsWidth = fan.sys.Int.minus(parentContentWidth,this.dpToPixel(fan.sys.Int.toFloat(fan.sys.Int.plus(this.m_margin.m_left,this.m_margin.m_right))));
  var hintsHeight = fan.sys.Int.minus(parentContentHeight,this.dpToPixel(fan.sys.Int.toFloat(fan.sys.Int.plus(this.m_margin.m_top,this.m_margin.m_bottom))));
  var w = -1;
  var h = -1;
  w = this.m_layoutParam.prefWidth(this,hintsWidth,-1);
  h = this.m_layoutParam.prefHeight(this,hintsHeight,-1);
  if ((fan.sys.ObjUtil.compareLT(w,0) || fan.sys.ObjUtil.compareLT(h,0)))
  {
    var s = this.prefContentSize();
    if (fan.sys.ObjUtil.compareLT(w,0))
    {
      w = fan.sys.Int.plus(s.m_w,this.dpToPixel(fan.sys.Int.toFloat(fan.sys.Int.plus(this.m_padding.m_left,this.m_padding.m_right))));
    }
    ;
    if (fan.sys.ObjUtil.compareLT(h,0))
    {
      h = fan.sys.Int.plus(s.m_h,this.dpToPixel(fan.sys.Int.toFloat(fan.sys.Int.plus(this.m_padding.m_top,this.m_padding.m_bottom))));
    }
    ;
  }
  ;
  return fan.vaseGui.Dimension.make(w,h);
}
fan.vaseGui.Widget.prototype.prefContentSize = function()
{
  return fan.vaseGui.Dimension.make(this.width(),this.height());
}
fan.vaseGui.Widget.prototype.contentWidth = function()
{
  return fan.sys.Int.minus(this.width(),this.dpToPixel(fan.sys.Int.toFloat(fan.sys.Int.plus(this.m_padding.m_left,this.m_padding.m_right))));
}
fan.vaseGui.Widget.prototype.contentHeight = function()
{
  return fan.sys.Int.minus(this.height(),this.dpToPixel(fan.sys.Int.toFloat(fan.sys.Int.plus(this.m_padding.m_top,this.m_padding.m_bottom))));
}
fan.vaseGui.Widget.prototype.bufferedWidth = function()
{
  return fan.sys.Int.plus(this.width(),this.dpToPixel(fan.sys.Int.toFloat(fan.sys.Int.plus(this.m_margin.m_left,this.m_margin.m_right))));
}
fan.vaseGui.Widget.prototype.bufferedHeight = function()
{
  return fan.sys.Int.plus(this.height(),this.dpToPixel(fan.sys.Int.toFloat(fan.sys.Int.plus(this.m_margin.m_top,this.m_margin.m_bottom))));
}
fan.vaseGui.Widget.prototype.paddingLeft = function()
{
  return this.dpToPixel(fan.sys.Int.toFloat(this.m_padding.m_left));
}
fan.vaseGui.Widget.prototype.paddingTop = function()
{
  return this.dpToPixel(fan.sys.Int.toFloat(this.m_padding.m_top));
}
fan.vaseGui.Widget.prototype.layout = function(x,y,w,h,force)
{
  this.x$(fan.sys.Int.plus(x,this.dpToPixel(fan.sys.Int.toFloat(this.m_margin.m_left))));
  this.y$(fan.sys.Int.plus(y,this.dpToPixel(fan.sys.Int.toFloat(this.m_margin.m_top))));
  this.width$(fan.sys.Int.minus(w,this.dpToPixel(fan.sys.Int.toFloat(fan.sys.Int.plus(this.m_margin.m_left,this.m_margin.m_right)))));
  this.height$(fan.sys.Int.minus(h,this.dpToPixel(fan.sys.Int.toFloat(fan.sys.Int.plus(this.m_margin.m_top,this.m_margin.m_bottom)))));
  this.printInfo(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("layout: x",fan.sys.ObjUtil.coerce(this.x(),fan.sys.Obj.$type.toNullable())),", y"),fan.sys.ObjUtil.coerce(this.y(),fan.sys.Obj.$type.toNullable())),", w"),fan.sys.ObjUtil.coerce(this.width(),fan.sys.Obj.$type.toNullable())),", h"),fan.sys.ObjUtil.coerce(this.height(),fan.sys.Obj.$type.toNullable())));
  if ((fan.sys.ObjUtil.compareGT(this.m_layoutDirty,0) || force))
  {
    this.layoutChildren((force || fan.sys.ObjUtil.compareGT(this.m_layoutDirty,1)));
  }
  ;
  this.m_layoutDirty = 0;
  return;
}
fan.vaseGui.Widget.prototype.layoutChildren = function(force)
{
  return;
}
fan.vaseGui.Widget.prototype.relayout = function()
{
  this.m_layoutDirty = 1;
  this.m_renderCacheDirty = true;
  (function($this) { var $_u12 = $this.m_parent; if ($_u12 == null) return null; return $_u12.relayout(); })(this);
  return;
}
fan.vaseGui.Widget.prototype.contains = function(rx,ry)
{
  if ((fan.sys.ObjUtil.compareLT(rx,this.x()) || fan.sys.ObjUtil.compareGT(rx,fan.sys.Int.plus(this.x(),this.width()))))
  {
    return false;
  }
  ;
  if ((fan.sys.ObjUtil.compareLT(ry,this.y()) || fan.sys.ObjUtil.compareGT(ry,fan.sys.Int.plus(this.y(),this.height()))))
  {
    return false;
  }
  ;
  return true;
}
fan.vaseGui.Widget.prototype.posOnWindow = function(result)
{
  if (fan.sys.ObjUtil.is(this,fan.vaseGui.Frame.$type))
  {
    result.set(0,0);
    return true;
  }
  ;
  if (this.m_parent == null)
  {
    return false;
  }
  ;
  var parentOnWid = this.m_parent.posOnWindow(result);
  if (fan.sys.ObjUtil.equals(parentOnWid,false))
  {
    return false;
  }
  ;
  result.m_x = fan.sys.Int.plus(result.m_x,this.x());
  result.m_y = fan.sys.Int.plus(result.m_y,this.y());
  return true;
}
fan.vaseGui.Widget.prototype.mapToRelative = function(p)
{
  var x = p.m_x;
  var y = p.m_y;
  var posOW = this.m_parent.posOnWindow(p);
  if (fan.sys.ObjUtil.equals(posOW,false))
  {
    return false;
  }
  ;
  p.m_x = fan.sys.Int.minus(x,p.m_x);
  p.m_y = fan.sys.Int.minus(y,p.m_y);
  return true;
}
fan.vaseGui.Widget.prototype.mapToWidget = function(p)
{
  var x = p.m_x;
  var y = p.m_y;
  var posOW = this.posOnWindow(p);
  if (fan.sys.ObjUtil.equals(posOW,false))
  {
    return false;
  }
  ;
  p.m_x = fan.sys.Int.minus(x,p.m_x);
  p.m_y = fan.sys.Int.minus(y,p.m_y);
  return true;
}
fan.vaseGui.Widget.prototype.getRootView = function()
{
  var x = this;
  while (x != null)
  {
    if (fan.sys.ObjUtil.is(x,fan.vaseGui.Frame.$type))
    {
      return fan.sys.ObjUtil.coerce(x,fan.vaseGui.Frame.$type);
    }
    ;
    x = x.m_parent;
  }
  ;
  return null;
}
fan.vaseGui.Widget.prototype.repaint = function(dirty)
{
  if (dirty === undefined) dirty = null;
  this.m_renderCacheDirty = true;
  if (dirty != null)
  {
    dirty = fan.vaseGraphics.Rect.make(fan.sys.Int.plus(dirty.m_x,this.x()),fan.sys.Int.plus(dirty.m_y,this.y()),dirty.m_w,dirty.m_h);
  }
  ;
  (function($this) { var $_u13 = $this.m_parent; if ($_u13 == null) return null; return $_u13.repaint(dirty); })(this);
  return;
}
fan.vaseGui.Widget.prototype.isFocusable = function()
{
  return this.m_isFocusable;
}
fan.vaseGui.Widget.prototype.isFocusable$ = function(it)
{
  this.m_isFocusable = it;
  return;
}
fan.vaseGui.Widget.prototype.hasFocus = function()
{
  var root = this.getRootView();
  return root.isFocusWidiget(this);
}
fan.vaseGui.Widget.prototype.focus = function()
{
  if (this.m_isFocusable)
  {
    this.getRootView().focusIt(this);
  }
  ;
  return;
}
fan.vaseGui.Widget.prototype.onFocusChanged = function()
{
  if (this.m_onFocusChanged$Store === "_once_")
  {
    this.m_onFocusChanged$Store = this.onFocusChanged$Once$Widget();
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_onFocusChanged$Store,fan.vaseWindow.EventListeners.$type);
}
fan.vaseGui.Widget.prototype.mouseExit = function()
{
  return;
}
fan.vaseGui.Widget.prototype.mouseEnter = function()
{
  return;
}
fan.vaseGui.Widget.prototype.onMounted = function()
{
  return;
}
fan.vaseGui.Widget.prototype.printInfo = function(msg)
{
  if (fan.vaseGui.Widget.debug())
  {
    fan.sys.ObjUtil.echo(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.std.Type.$typeof(this).$name()),",id="),this.m_id),",bounds="),this.bounds()),":\t"),msg));
  }
  ;
  return;
}
fan.vaseGui.Widget.debug = function()
{
  if ((fan.sys.ObjUtil.compareNE(fan.std.Env.cur().runtime(),"js") && fan.sys.ObjUtil.compareNE(fan.vaseWindow.Toolkit.cur().$name(),"Android")))
  {
    return fan.sys.ObjUtil.equals(fan.vaseGui.Widget.$type.pod().config("debug","false"),"true");
  }
  else
  {
    return false;
  }
  ;
}
fan.vaseGui.Widget.make = function() {
  var self = new fan.vaseGui.Widget();
  fan.vaseGui.Widget.make$(self);
  return self;
  }
fan.vaseGui.Widget.make$ = function(self)
{
  ;
  return;
}
fan.vaseGui.Widget.prototype.onStateChanged$Once$Widget = function()
{
  return fan.vaseWindow.EventListeners.make();
}
fan.vaseGui.Widget.prototype.onFocusChanged$Once$Widget = function()
{
  return fan.vaseWindow.EventListeners.make();
}
fan.vaseGui.Widget.prototype.m_id = null;
fan.vaseGui.Widget.prototype.m_styleClass = null;
fan.vaseGui.Widget.prototype.m_transform = null;
fan.vaseGui.Widget.prototype.m_alpha = null;
fan.vaseGui.Widget.prototype.m_clip = false;
fan.vaseGui.Widget.prototype.m_useRenderCache = false;
fan.vaseGui.Widget.prototype.m_renderCacheImage = null;
fan.vaseGui.Widget.prototype.m_renderCacheDirty = false;
fan.vaseGui.Widget.prototype.m_layoutDirty = 0;
fan.vaseGui.Widget.prototype.m_padding = null;
fan.vaseGui.Widget.prototype.m_margin = null;
fan.vaseGui.Widget.prototype.m_layoutParam = null;
fan.vaseGui.Widget.prototype.m_style = null;
fan.vaseGui.Widget.prototype.m_visible = false;
fan.vaseGui.Widget.prototype.m_enabled = false;
fan.vaseGui.Widget.prototype.m_x = 0;
fan.vaseGui.Widget.prototype.m_y = 0;
fan.vaseGui.Widget.prototype.m_width = 0;
fan.vaseGui.Widget.prototype.m_height = 0;
fan.vaseGui.Widget.prototype.m_bounds = null;
fan.vaseGui.Widget.prototype.m_parent = null;
fan.vaseGui.Widget.prototype.m_isFocusable = false;
fan.vaseGui.Widget.prototype.m_onStateChanged$Store = null;
fan.vaseGui.Widget.prototype.m_onFocusChanged$Store = null;
fan.vaseGui.Coord = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.Coord.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.Coord.prototype.$typeof = function() { return fan.vaseGui.Coord.$type; }
fan.vaseGui.Coord.prototype.x = function()
{
  return this.m_x;
}
fan.vaseGui.Coord.prototype.x$ = function(it)
{
  this.m_x = it;
  return;
}
fan.vaseGui.Coord.prototype.y = function()
{
  return this.m_y;
}
fan.vaseGui.Coord.prototype.y$ = function(it)
{
  this.m_y = it;
  return;
}
fan.vaseGui.Coord.make = function(x,y) {
  var self = new fan.vaseGui.Coord();
  fan.vaseGui.Coord.make$(self,x,y);
  return self;
  }
fan.vaseGui.Coord.make$ = function(self,x,y)
{
  self.m_x = x;
  self.m_y = y;
  return;
}
fan.vaseGui.Coord.prototype.set = function(x,y)
{
  this.m_x = x;
  this.m_y = y;
  return this;
}
fan.vaseGui.Coord.fromStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  try
  {
    var comma = fan.sys.Str.index(s,",");
    return fan.vaseGui.Coord.make(fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(0,fan.sys.ObjUtil.coerce(comma,fan.sys.Int.$type),true)))),fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(fan.sys.Int.plus(fan.sys.ObjUtil.coerce(comma,fan.sys.Int.$type),1),-1)))));
  }
  catch ($_u14)
  {
  }
  ;
  if (checked)
  {
    throw fan.sys.ParseErr.make(fan.sys.Str.plus("Invalid Point: ",s));
  }
  ;
  return null;
}
fan.vaseGui.Coord.prototype.translate = function(t)
{
  return fan.vaseGui.Coord.make(fan.sys.Int.plus(this.m_x,t.m_x),fan.sys.Int.plus(this.m_y,t.m_y));
}
fan.vaseGui.Coord.prototype.hash = function()
{
  return fan.sys.Int.xor(this.m_x,fan.sys.Int.shiftl(this.m_y,16));
}
fan.vaseGui.Coord.prototype.equals = function(obj)
{
  var that = fan.sys.ObjUtil.as(obj,fan.vaseGraphics.Point.$type);
  if (that == null)
  {
    return false;
  }
  ;
  return (fan.sys.ObjUtil.equals(this.m_x,that.m_x) && fan.sys.ObjUtil.equals(this.m_y,that.m_y));
}
fan.vaseGui.Coord.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(this.m_x,fan.sys.Obj.$type.toNullable())),","),fan.sys.ObjUtil.coerce(this.m_y,fan.sys.Obj.$type.toNullable()));
}
fan.vaseGui.Coord.prototype.m_x = 0;
fan.vaseGui.Coord.prototype.m_y = 0;
fan.vaseGui.Dimension = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.Dimension.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.Dimension.prototype.$typeof = function() { return fan.vaseGui.Dimension.$type; }
fan.vaseGui.Dimension.prototype.w = function()
{
  return this.m_w;
}
fan.vaseGui.Dimension.prototype.w$ = function(it)
{
  this.m_w = it;
  return;
}
fan.vaseGui.Dimension.prototype.h = function()
{
  return this.m_h;
}
fan.vaseGui.Dimension.prototype.h$ = function(it)
{
  this.m_h = it;
  return;
}
fan.vaseGui.Dimension.make = function(w,h) {
  var self = new fan.vaseGui.Dimension();
  fan.vaseGui.Dimension.make$(self,w,h);
  return self;
  }
fan.vaseGui.Dimension.make$ = function(self,w,h)
{
  self.m_w = w;
  self.m_h = h;
  return;
}
fan.vaseGui.Dimension.prototype.set = function(w,h)
{
  this.m_w = w;
  this.m_h = h;
  return this;
}
fan.vaseGui.Dimension.fromStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  try
  {
    var comma = fan.sys.Str.index(s,",");
    return fan.vaseGui.Dimension.make(fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(0,fan.sys.ObjUtil.coerce(comma,fan.sys.Int.$type),true)))),fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(fan.sys.Int.plus(fan.sys.ObjUtil.coerce(comma,fan.sys.Int.$type),1),-1)))));
  }
  catch ($_u15)
  {
  }
  ;
  if (checked)
  {
    throw fan.sys.ParseErr.make(fan.sys.Str.plus("Invalid Size: ",s));
  }
  ;
  return null;
}
fan.vaseGui.Dimension.prototype.toStr = function()
{
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(this.m_w,fan.sys.Obj.$type.toNullable())),","),fan.sys.ObjUtil.coerce(this.m_h,fan.sys.Obj.$type.toNullable()));
}
fan.vaseGui.Dimension.prototype.hash = function()
{
  return fan.sys.Int.xor(this.m_w,fan.sys.Int.shiftl(this.m_h,16));
}
fan.vaseGui.Dimension.prototype.equals = function(obj)
{
  var that = fan.sys.ObjUtil.as(obj,fan.vaseGraphics.Size.$type);
  if (that == null)
  {
    return false;
  }
  ;
  return (fan.sys.ObjUtil.equals(this.m_w,that.m_w) && fan.sys.ObjUtil.equals(this.m_h,that.m_h));
}
fan.vaseGui.Dimension.prototype.m_w = 0;
fan.vaseGui.Dimension.prototype.m_h = 0;
fan.vaseGui.Insets = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.Insets.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.Insets.prototype.$typeof = function() { return fan.vaseGui.Insets.$type; }
fan.vaseGui.Insets.make = function(top,right,bottom,left) {
  var self = new fan.vaseGui.Insets();
  fan.vaseGui.Insets.make$(self,top,right,bottom,left);
  return self;
  }
fan.vaseGui.Insets.make$ = function(self,top,right,bottom,left)
{
  if (right === undefined) right = null;
  if (bottom === undefined) bottom = null;
  if (left === undefined) left = null;
  if (right == null)
  {
    right = fan.sys.ObjUtil.coerce(top,fan.sys.Int.$type.toNullable());
  }
  ;
  if (bottom == null)
  {
    bottom = fan.sys.ObjUtil.coerce(top,fan.sys.Int.$type.toNullable());
  }
  ;
  if (left == null)
  {
    left = right;
  }
  ;
  self.m_top = top;
  self.m_right = fan.sys.ObjUtil.coerce(right,fan.sys.Int.$type);
  self.m_bottom = fan.sys.ObjUtil.coerce(bottom,fan.sys.Int.$type);
  self.m_left = fan.sys.ObjUtil.coerce(left,fan.sys.Int.$type);
  return;
}
fan.vaseGui.Insets.fromStr = function(s,checked)
{
  if (checked === undefined) checked = true;
  try
  {
    var c1 = fan.sys.Str.index(s,",");
    if (c1 == null)
    {
      var len = fan.sys.Str.toInt(s);
      return fan.vaseGui.Insets.make(len,fan.sys.ObjUtil.coerce(len,fan.sys.Int.$type.toNullable()),fan.sys.ObjUtil.coerce(len,fan.sys.Int.$type.toNullable()),fan.sys.ObjUtil.coerce(len,fan.sys.Int.$type.toNullable()));
    }
    ;
    var c2 = fan.sys.Str.index(s,",",fan.sys.Int.plus(fan.sys.ObjUtil.coerce(c1,fan.sys.Int.$type),1));
    var c3 = fan.sys.Str.index(s,",",fan.sys.Int.plus(fan.sys.ObjUtil.coerce(c2,fan.sys.Int.$type),1));
    return fan.vaseGui.Insets.make(fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(0,fan.sys.ObjUtil.coerce(c1,fan.sys.Int.$type),true)))),fan.sys.ObjUtil.coerce(fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(fan.sys.Int.plus(fan.sys.ObjUtil.coerce(c1,fan.sys.Int.$type),1),fan.sys.ObjUtil.coerce(c2,fan.sys.Int.$type),true)))),fan.sys.Int.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(fan.sys.Int.plus(fan.sys.ObjUtil.coerce(c2,fan.sys.Int.$type),1),fan.sys.ObjUtil.coerce(c3,fan.sys.Int.$type),true)))),fan.sys.Int.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Str.toInt(fan.sys.Str.trim(fan.sys.Str.getRange(s,fan.sys.Range.make(fan.sys.Int.plus(fan.sys.ObjUtil.coerce(c3,fan.sys.Int.$type),1),-1)))),fan.sys.Int.$type.toNullable()));
  }
  catch ($_u16)
  {
  }
  ;
  if (checked)
  {
    throw fan.sys.ParseErr.make(fan.sys.Str.plus("Invalid Insets: ",s));
  }
  ;
  return null;
}
fan.vaseGui.Insets.prototype.toStr = function()
{
  if ((fan.sys.ObjUtil.equals(this.m_top,this.m_right) && fan.sys.ObjUtil.equals(this.m_top,this.m_bottom) && fan.sys.ObjUtil.equals(this.m_top,this.m_left)))
  {
    return fan.sys.Int.toStr(this.m_top);
  }
  else
  {
    return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(this.m_top,fan.sys.Obj.$type.toNullable())),","),fan.sys.ObjUtil.coerce(this.m_right,fan.sys.Obj.$type.toNullable())),","),fan.sys.ObjUtil.coerce(this.m_bottom,fan.sys.Obj.$type.toNullable())),","),fan.sys.ObjUtil.coerce(this.m_left,fan.sys.Obj.$type.toNullable()));
  }
  ;
}
fan.vaseGui.Insets.prototype.hash = function()
{
  return fan.sys.Int.xor(fan.sys.Int.xor(fan.sys.Int.xor(this.m_top,fan.sys.Int.shiftl(this.m_right,8)),fan.sys.Int.shiftl(this.m_bottom,16)),fan.sys.Int.shiftl(this.m_left,24));
}
fan.vaseGui.Insets.prototype.equals = function(obj)
{
  var that = fan.sys.ObjUtil.as(obj,fan.vaseGui.Insets.$type);
  if (that == null)
  {
    return false;
  }
  ;
  return (fan.sys.ObjUtil.equals(this.m_top,that.m_top) && fan.sys.ObjUtil.equals(this.m_right,that.m_right) && fan.sys.ObjUtil.equals(this.m_bottom,that.m_bottom) && fan.sys.ObjUtil.equals(this.m_left,that.m_left));
}
fan.vaseGui.Insets.prototype.toSize = function()
{
  return fan.vaseGraphics.Size.make(fan.sys.Int.plus(this.m_right,this.m_left),fan.sys.Int.plus(this.m_top,this.m_bottom));
}
fan.vaseGui.Insets.static$init = function()
{
  if (fan.vaseGui.Insets.static$inited) return;
  fan.vaseGui.Insets.static$inited = true;
  fan.vaseGui.Insets.m_defVal = fan.vaseGui.Insets.make(0,fan.sys.ObjUtil.coerce(0,fan.sys.Int.$type.toNullable()),fan.sys.ObjUtil.coerce(0,fan.sys.Int.$type.toNullable()),fan.sys.ObjUtil.coerce(0,fan.sys.Int.$type.toNullable()));
  return;
}
fan.vaseGui.Insets.m_defVal = null;
fan.vaseGui.Insets.prototype.m_top = 0;
fan.vaseGui.Insets.prototype.m_right = 0;
fan.vaseGui.Insets.prototype.m_bottom = 0;
fan.vaseGui.Insets.prototype.m_left = 0;
fan.vaseGui.Direction = fan.sys.Obj.$extend(fan.sys.Enum);
fan.vaseGui.Direction.prototype.$ctor = function()
{
  fan.sys.Enum.prototype.$ctor.call(this);
  this.peer = new fan.sys.EnumPeer(this);
  var $this = this;
}
fan.vaseGui.Direction.prototype.$typeof = function() { return fan.vaseGui.Direction.$type; }
fan.vaseGui.Direction.make = function($ordinal,$name) {
  var self = new fan.vaseGui.Direction();
  fan.vaseGui.Direction.make$(self,$ordinal,$name);
  return self;
  }
fan.vaseGui.Direction.make$ = function(self,$ordinal,$name)
{
  fan.sys.Enum.make$(self,$ordinal,$name);
  return;
}
fan.vaseGui.Direction.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.sys.Enum.doFromStr("vaseGui::Direction",$name,checked),fan.vaseGui.Direction.$type.toNullable());
}
fan.vaseGui.Direction.static$init = function()
{
  if (fan.vaseGui.Direction.static$inited) return;
  fan.vaseGui.Direction.static$inited = true;
  fan.vaseGui.Direction.m_top = fan.vaseGui.Direction.make(0,"top");
  fan.vaseGui.Direction.m_right = fan.vaseGui.Direction.make(1,"right");
  fan.vaseGui.Direction.m_down = fan.vaseGui.Direction.make(2,"down");
  fan.vaseGui.Direction.m_left = fan.vaseGui.Direction.make(3,"left");
  fan.vaseGui.Direction.m_vals = fan.sys.ObjUtil.coerce((function($this) { var $_u17 = fan.sys.List.make(fan.vaseGui.Direction.$type, [((fan.vaseGui.Direction.static$init ? fan.vaseGui.Direction.static$init() : null),fan.vaseGui.Direction.m_top),((fan.vaseGui.Direction.static$init ? fan.vaseGui.Direction.static$init() : null),fan.vaseGui.Direction.m_right),((fan.vaseGui.Direction.static$init ? fan.vaseGui.Direction.static$init() : null),fan.vaseGui.Direction.m_down),((fan.vaseGui.Direction.static$init ? fan.vaseGui.Direction.static$init() : null),fan.vaseGui.Direction.m_left)]); if ($_u17 == null) return null; return fan.sys.ObjUtil.toImmutable($_u17); })(this),fan.std.Type.find("sys::List<vaseGui::Direction>"));
  if (true)
  {
  }
  ;
  return;
}
fan.vaseGui.Direction.m_top = null;
fan.vaseGui.Direction.m_right = null;
fan.vaseGui.Direction.m_down = null;
fan.vaseGui.Direction.m_left = null;
fan.vaseGui.Direction.m_vals = null;
fan.vaseGui.Animation = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.Animation.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_$name = "";
  this.m_duration = 1000;
  this.m_elapsedTime = 0;
  this.m_speed = fan.sys.Float.make(1.0);
  this.m_blendWeight = fan.sys.Float.make(1.0);
  this.m_repeat = 0;
  this.m_delay = 0;
  this.m_isRuning = false;
  this.m_isFinished = false;
  this.m_channelList = fan.sys.List.make(fan.vaseGui.AnimChannel.$type);
  this.m_whenDone$Store = "_once_";
  return;
}
fan.vaseGui.Animation.prototype.$typeof = function() { return fan.vaseGui.Animation.$type; }
fan.vaseGui.Animation.prototype.$name = function()
{
  return this.m_$name;
}
fan.vaseGui.Animation.prototype.$name$ = function(it)
{
  this.m_$name = it;
  return;
}
fan.vaseGui.Animation.prototype.duration = function()
{
  return this.m_duration;
}
fan.vaseGui.Animation.prototype.duration$ = function(it)
{
  this.m_duration = it;
  return;
}
fan.vaseGui.Animation.prototype.elapsedTime = function()
{
  return this.m_elapsedTime;
}
fan.vaseGui.Animation.prototype.elapsedTime$ = function(it)
{
  this.m_elapsedTime = it;
  return;
}
fan.vaseGui.Animation.prototype.speed = function()
{
  return this.m_speed;
}
fan.vaseGui.Animation.prototype.speed$ = function(it)
{
  this.m_speed = it;
  return;
}
fan.vaseGui.Animation.prototype.blendWeight = function()
{
  return this.m_blendWeight;
}
fan.vaseGui.Animation.prototype.blendWeight$ = function(it)
{
  this.m_blendWeight = it;
  return;
}
fan.vaseGui.Animation.prototype.repeat = function()
{
  return this.m_repeat;
}
fan.vaseGui.Animation.prototype.repeat$ = function(it)
{
  this.m_repeat = it;
  return;
}
fan.vaseGui.Animation.prototype.delay = function()
{
  return this.m_delay;
}
fan.vaseGui.Animation.prototype.delay$ = function(it)
{
  this.m_delay = it;
  return;
}
fan.vaseGui.Animation.prototype.isRuning = function()
{
  return this.m_isRuning;
}
fan.vaseGui.Animation.prototype.isRuning$ = function(it)
{
  this.m_isRuning = it;
  return;
}
fan.vaseGui.Animation.prototype.isFinished = function()
{
  return this.m_isFinished;
}
fan.vaseGui.Animation.prototype.isFinished$ = function(it)
{
  this.m_isFinished = it;
  return;
}
fan.vaseGui.Animation.prototype.channelList = function()
{
  return this.m_channelList;
}
fan.vaseGui.Animation.prototype.channelList$ = function(it)
{
  this.m_channelList = it;
  return;
}
fan.vaseGui.Animation.prototype.whenDone = function()
{
  if (this.m_whenDone$Store === "_once_")
  {
    this.m_whenDone$Store = this.whenDone$Once$Animation();
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_whenDone$Store,fan.vaseWindow.EventListeners.$type);
}
fan.vaseGui.Animation.prototype.add = function(child)
{
  this.m_channelList.add(child);
  return this;
}
fan.vaseGui.Animation.prototype.start = function()
{
  this.m_elapsedTime = 0;
  this.m_isRuning = true;
  this.onStart();
  return;
}
fan.vaseGui.Animation.prototype.stop = function()
{
  this.m_isRuning = false;
  this.onStop();
  return;
}
fan.vaseGui.Animation.prototype.onStart = function()
{
  return;
}
fan.vaseGui.Animation.prototype.onStop = function()
{
  this.onFinised();
  return;
}
fan.vaseGui.Animation.prototype.onFinised = function()
{
  this.m_isRuning = false;
  this.whenDone().fire(null);
  this.m_isFinished = true;
  return;
}
fan.vaseGui.Animation.prototype.update = function(frameTime)
{
  var i = 0;
  if (!this.m_isRuning)
  {
    return;
  }
  ;
  this.m_elapsedTime = fan.sys.Int.plus(this.m_elapsedTime,fan.sys.Float.toInt(fan.sys.Float.mult(fan.sys.Int.toFloat(frameTime),this.m_speed)));
  var elapsed = fan.sys.Int.minus(this.m_elapsedTime,this.m_delay);
  if (fan.sys.ObjUtil.compareLT(elapsed,0))
  {
    return;
  }
  ;
  if (fan.sys.ObjUtil.compareGT(elapsed,this.m_duration))
  {
    if (fan.sys.ObjUtil.compareGT(this.m_repeat,1))
    {
      elapsed = fan.sys.Int.mod(elapsed,this.m_duration);
      this.m_repeat = fan.sys.Int.decrement(this.m_repeat);
    }
    else
    {
      this.updateChannel(elapsed,frameTime,fan.sys.Float.make(1.0));
      this.onFinised();
      return;
    }
    ;
  }
  ;
  var percent = fan.sys.Int.divFloat(elapsed,fan.sys.Int.toFloat(this.m_duration));
  this.updateChannel(elapsed,frameTime,percent);
  return;
}
fan.vaseGui.Animation.prototype.updateChannel = function(elapsed,frameTime,percent)
{
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_channelList.size()); i = fan.sys.Int.increment(i))
  {
    var channel = this.m_channelList.get(i);
    channel.update(elapsed,frameTime,percent,this.m_blendWeight);
  }
  ;
  return;
}
fan.vaseGui.Animation.make = function() {
  var self = new fan.vaseGui.Animation();
  fan.vaseGui.Animation.make$(self);
  return self;
  }
fan.vaseGui.Animation.make$ = function(self)
{
  ;
  return;
}
fan.vaseGui.Animation.prototype.whenDone$Once$Animation = function()
{
  return fan.vaseWindow.EventListeners.make();
}
fan.vaseGui.Animation.prototype.m_$name = null;
fan.vaseGui.Animation.prototype.m_duration = 0;
fan.vaseGui.Animation.prototype.m_elapsedTime = 0;
fan.vaseGui.Animation.prototype.m_speed = fan.sys.Float.make(0);
fan.vaseGui.Animation.prototype.m_blendWeight = fan.sys.Float.make(0);
fan.vaseGui.Animation.prototype.m_repeat = 0;
fan.vaseGui.Animation.prototype.m_delay = 0;
fan.vaseGui.Animation.prototype.m_isRuning = false;
fan.vaseGui.Animation.prototype.m_isFinished = false;
fan.vaseGui.Animation.prototype.m_channelList = null;
fan.vaseGui.Animation.prototype.m_whenDone$Store = null;
fan.vaseGui.TweenAnimation = fan.sys.Obj.$extend(fan.vaseGui.Animation);
fan.vaseGui.TweenAnimation.prototype.$ctor = function()
{
  fan.vaseGui.Animation.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.TweenAnimation.prototype.$typeof = function() { return fan.vaseGui.TweenAnimation.$type; }
fan.vaseGui.TweenAnimation.prototype.widget = function()
{
  return this.m_widget;
}
fan.vaseGui.TweenAnimation.prototype.widget$ = function(it)
{
  this.m_widget = it;
  return;
}
fan.vaseGui.TweenAnimation.prototype.onFinised = function()
{
  fan.vaseGui.Animation.prototype.onFinised.call(this);
  this.m_widget.m_alpha = null;
  this.m_widget.m_transform = null;
  return;
}
fan.vaseGui.TweenAnimation.prototype.onStart = function()
{
  if (this.m_widget.m_transform == null)
  {
    this.m_widget.m_transform = fan.vaseMath.Transform2D.make();
  }
  ;
  this.m_widget.repaint();
  return;
}
fan.vaseGui.TweenAnimation.prototype.bind = function(widget)
{
  var $this = this;
  this.m_widget = widget;
  this.m_channelList.each(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u18,
    function(c,ignoreparam$1)
    {
      c.m_widget = widget;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,vaseGui::AnimChannel,sys::Int>")));
  widget.getRootView().m_animManager.add(this);
  return this;
}
fan.vaseGui.TweenAnimation.make = function() {
  var self = new fan.vaseGui.TweenAnimation();
  fan.vaseGui.TweenAnimation.make$(self);
  return self;
  }
fan.vaseGui.TweenAnimation.make$ = function(self)
{
  fan.vaseGui.Animation.make$(self);
  return;
}
fan.vaseGui.TweenAnimation.prototype.m_widget = null;
fan.vaseGui.AnimChannel = function() {}
fan.vaseGui.AnimChannel.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.AnimChannel.prototype.$typeof = function() { return fan.vaseGui.AnimChannel.$type; }
fan.vaseGui.TweenAnimChannel = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.TweenAnimChannel.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_interpolation = fan.vaseGui.Interpolation.make();
  return;
}
fan.vaseGui.TweenAnimChannel.prototype.$typeof = function() { return fan.vaseGui.TweenAnimChannel.$type; }
fan.vaseGui.TweenAnimChannel.prototype.widget = function()
{
  return this.m_widget;
}
fan.vaseGui.TweenAnimChannel.prototype.widget$ = function(it)
{
  this.m_widget = it;
  return;
}
fan.vaseGui.TweenAnimChannel.prototype.interpolation = function()
{
  return this.m_interpolation;
}
fan.vaseGui.TweenAnimChannel.prototype.interpolation$ = function(it)
{
  this.m_interpolation = it;
  return;
}
fan.vaseGui.TweenAnimChannel.prototype.update = function(elapsedTime,frameTime,percent,blendWeight)
{
  var p = this.m_interpolation.evaluate(percent);
  this.onUpdate(p);
  this.m_widget.repaint();
  return;
}
fan.vaseGui.TweenAnimChannel.make = function() {
  var self = new fan.vaseGui.TweenAnimChannel();
  fan.vaseGui.TweenAnimChannel.make$(self);
  return self;
  }
fan.vaseGui.TweenAnimChannel.make$ = function(self)
{
  ;
  return;
}
fan.vaseGui.TweenAnimChannel.prototype.m_widget = null;
fan.vaseGui.TweenAnimChannel.prototype.m_interpolation = null;
fan.vaseGui.TranslateAnimChannel = fan.sys.Obj.$extend(fan.vaseGui.TweenAnimChannel);
fan.vaseGui.TranslateAnimChannel.prototype.$ctor = function()
{
  fan.vaseGui.TweenAnimChannel.prototype.$ctor.call(this);
  var $this = this;
  this.m_from = fan.vaseGraphics.Point.make(0,100);
  this.m_to = ((fan.vaseGraphics.Point.static$init ? fan.vaseGraphics.Point.static$init() : null),fan.vaseGraphics.Point.m_defVal);
  this.m_lastX = fan.sys.Float.make(0.0);
  this.m_lastY = fan.sys.Float.make(0.0);
  return;
}
fan.vaseGui.TranslateAnimChannel.prototype.$typeof = function() { return fan.vaseGui.TranslateAnimChannel.$type; }
fan.vaseGui.TranslateAnimChannel.prototype.from = function()
{
  return this.m_from;
}
fan.vaseGui.TranslateAnimChannel.prototype.from$ = function(it)
{
  this.m_from = it;
  return;
}
fan.vaseGui.TranslateAnimChannel.prototype.to = function()
{
  return this.m_to;
}
fan.vaseGui.TranslateAnimChannel.prototype.to$ = function(it)
{
  this.m_to = it;
  return;
}
fan.vaseGui.TranslateAnimChannel.prototype.lastX = function()
{
  return this.m_lastX;
}
fan.vaseGui.TranslateAnimChannel.prototype.lastX$ = function(it)
{
  this.m_lastX = it;
  return;
}
fan.vaseGui.TranslateAnimChannel.prototype.lastY = function()
{
  return this.m_lastY;
}
fan.vaseGui.TranslateAnimChannel.prototype.lastY$ = function(it)
{
  this.m_lastY = it;
  return;
}
fan.vaseGui.TranslateAnimChannel.prototype.onUpdate = function(percent)
{
  var x = fan.sys.Int.plusFloat(this.m_from.m_x,fan.sys.Int.multFloat(fan.sys.Int.minus(this.m_to.m_x,this.m_from.m_x),percent));
  var y = fan.sys.Int.plusFloat(this.m_from.m_y,fan.sys.Int.multFloat(fan.sys.Int.minus(this.m_to.m_y,this.m_from.m_y),percent));
  var dx = fan.sys.Float.minus(x,this.m_lastX);
  var dy = fan.sys.Float.minus(y,this.m_lastY);
  this.m_lastX = x;
  this.m_lastY = y;
  (function($this) { var $_u19 = (function($this) { var $_u20=$this.m_widget; return ($_u20==null) ? null : $_u20.m_transform }($this)); if ($_u19 == null) return null; return $_u19.translate(dx,dy); })(this);
  return;
}
fan.vaseGui.TranslateAnimChannel.make = function() {
  var self = new fan.vaseGui.TranslateAnimChannel();
  fan.vaseGui.TranslateAnimChannel.make$(self);
  return self;
  }
fan.vaseGui.TranslateAnimChannel.make$ = function(self)
{
  fan.vaseGui.TweenAnimChannel.make$(self);
  ;
  return;
}
fan.vaseGui.TranslateAnimChannel.prototype.m_from = null;
fan.vaseGui.TranslateAnimChannel.prototype.m_to = null;
fan.vaseGui.TranslateAnimChannel.prototype.m_lastX = fan.sys.Float.make(0);
fan.vaseGui.TranslateAnimChannel.prototype.m_lastY = fan.sys.Float.make(0);
fan.vaseGui.RotateAnimChannel = fan.sys.Obj.$extend(fan.vaseGui.TweenAnimChannel);
fan.vaseGui.RotateAnimChannel.prototype.$ctor = function()
{
  fan.vaseGui.TweenAnimChannel.prototype.$ctor.call(this);
  var $this = this;
  this.m_from = fan.sys.Float.make(0.0);
  this.m_to = fan.sys.Float.make(1.0);
  this.m_lastRotate = fan.sys.Float.make(1.0);
  return;
}
fan.vaseGui.RotateAnimChannel.prototype.$typeof = function() { return fan.vaseGui.RotateAnimChannel.$type; }
fan.vaseGui.RotateAnimChannel.prototype.from = function()
{
  return this.m_from;
}
fan.vaseGui.RotateAnimChannel.prototype.from$ = function(it)
{
  this.m_from = it;
  return;
}
fan.vaseGui.RotateAnimChannel.prototype.to = function()
{
  return this.m_to;
}
fan.vaseGui.RotateAnimChannel.prototype.to$ = function(it)
{
  this.m_to = it;
  return;
}
fan.vaseGui.RotateAnimChannel.prototype.lastRotate = function()
{
  return this.m_lastRotate;
}
fan.vaseGui.RotateAnimChannel.prototype.lastRotate$ = function(it)
{
  this.m_lastRotate = it;
  return;
}
fan.vaseGui.RotateAnimChannel.prototype.onUpdate = function(percent)
{
  var rotate = fan.sys.Float.plus(this.m_from,fan.sys.Float.mult(fan.sys.Float.minus(this.m_to,this.m_from),percent));
  var drotate = fan.sys.Float.minus(rotate,this.m_lastRotate);
  var x = fan.sys.Int.divFloat(this.m_widget.width(),fan.sys.Float.make(2.0));
  var y = fan.sys.Int.divFloat(this.m_widget.height(),fan.sys.Float.make(2.0));
  this.m_lastRotate = rotate;
  (function($this) { var $_u21 = (function($this) { var $_u22=$this.m_widget; return ($_u22==null) ? null : $_u22.m_transform }($this)); if ($_u21 == null) return null; return $_u21.rotate(x,y,drotate); })(this);
  return;
}
fan.vaseGui.RotateAnimChannel.make = function() {
  var self = new fan.vaseGui.RotateAnimChannel();
  fan.vaseGui.RotateAnimChannel.make$(self);
  return self;
  }
fan.vaseGui.RotateAnimChannel.make$ = function(self)
{
  fan.vaseGui.TweenAnimChannel.make$(self);
  ;
  return;
}
fan.vaseGui.RotateAnimChannel.prototype.m_from = fan.sys.Float.make(0);
fan.vaseGui.RotateAnimChannel.prototype.m_to = fan.sys.Float.make(0);
fan.vaseGui.RotateAnimChannel.prototype.m_lastRotate = fan.sys.Float.make(0);
fan.vaseGui.AlphaAnimChannel = fan.sys.Obj.$extend(fan.vaseGui.TweenAnimChannel);
fan.vaseGui.AlphaAnimChannel.prototype.$ctor = function()
{
  fan.vaseGui.TweenAnimChannel.prototype.$ctor.call(this);
  var $this = this;
  this.m_from = fan.sys.Float.make(0.0);
  this.m_to = fan.sys.Float.make(1.0);
  return;
}
fan.vaseGui.AlphaAnimChannel.prototype.$typeof = function() { return fan.vaseGui.AlphaAnimChannel.$type; }
fan.vaseGui.AlphaAnimChannel.prototype.from = function()
{
  return this.m_from;
}
fan.vaseGui.AlphaAnimChannel.prototype.from$ = function(it)
{
  this.m_from = it;
  return;
}
fan.vaseGui.AlphaAnimChannel.prototype.to = function()
{
  return this.m_to;
}
fan.vaseGui.AlphaAnimChannel.prototype.to$ = function(it)
{
  this.m_to = it;
  return;
}
fan.vaseGui.AlphaAnimChannel.prototype.onUpdate = function(percent)
{
  var alpha = fan.sys.Float.plus(this.m_from,fan.sys.Float.mult(fan.sys.Float.minus(this.m_to,this.m_from),percent));
  this.m_widget.m_alpha = fan.sys.ObjUtil.coerce(alpha,fan.sys.Float.$type.toNullable());
  return;
}
fan.vaseGui.AlphaAnimChannel.make = function() {
  var self = new fan.vaseGui.AlphaAnimChannel();
  fan.vaseGui.AlphaAnimChannel.make$(self);
  return self;
  }
fan.vaseGui.AlphaAnimChannel.make$ = function(self)
{
  fan.vaseGui.TweenAnimChannel.make$(self);
  ;
  return;
}
fan.vaseGui.AlphaAnimChannel.prototype.m_from = fan.sys.Float.make(0);
fan.vaseGui.AlphaAnimChannel.prototype.m_to = fan.sys.Float.make(0);
fan.vaseGui.ScaleAnimChannel = fan.sys.Obj.$extend(fan.vaseGui.TweenAnimChannel);
fan.vaseGui.ScaleAnimChannel.prototype.$ctor = function()
{
  fan.vaseGui.TweenAnimChannel.prototype.$ctor.call(this);
  var $this = this;
  this.m_from = fan.sys.Float.make(4.0);
  this.m_to = fan.sys.Float.make(1.0);
  this.m_lastScale = fan.sys.Float.make(1.0);
  return;
}
fan.vaseGui.ScaleAnimChannel.prototype.$typeof = function() { return fan.vaseGui.ScaleAnimChannel.$type; }
fan.vaseGui.ScaleAnimChannel.prototype.from = function()
{
  return this.m_from;
}
fan.vaseGui.ScaleAnimChannel.prototype.from$ = function(it)
{
  this.m_from = it;
  return;
}
fan.vaseGui.ScaleAnimChannel.prototype.to = function()
{
  return this.m_to;
}
fan.vaseGui.ScaleAnimChannel.prototype.to$ = function(it)
{
  this.m_to = it;
  return;
}
fan.vaseGui.ScaleAnimChannel.prototype.lastScale = function()
{
  return this.m_lastScale;
}
fan.vaseGui.ScaleAnimChannel.prototype.lastScale$ = function(it)
{
  this.m_lastScale = it;
  return;
}
fan.vaseGui.ScaleAnimChannel.prototype.onUpdate = function(percent)
{
  var scale = fan.sys.Float.plus(this.m_from,fan.sys.Float.mult(fan.sys.Float.minus(this.m_to,this.m_from),percent));
  var dscale = fan.sys.Float.div(scale,this.m_lastScale);
  var x = fan.sys.Int.divFloat(this.m_widget.width(),fan.sys.Float.make(2.0));
  var y = fan.sys.Int.divFloat(this.m_widget.height(),fan.sys.Float.make(2.0));
  this.m_lastScale = scale;
  (function($this) { var $_u23 = (function($this) { var $_u24=$this.m_widget; return ($_u24==null) ? null : $_u24.m_transform }($this)); if ($_u23 == null) return null; return $_u23.scale(x,y,dscale,dscale); })(this);
  return;
}
fan.vaseGui.ScaleAnimChannel.make = function() {
  var self = new fan.vaseGui.ScaleAnimChannel();
  fan.vaseGui.ScaleAnimChannel.make$(self);
  return self;
  }
fan.vaseGui.ScaleAnimChannel.make$ = function(self)
{
  fan.vaseGui.TweenAnimChannel.make$(self);
  ;
  return;
}
fan.vaseGui.ScaleAnimChannel.prototype.m_from = fan.sys.Float.make(0);
fan.vaseGui.ScaleAnimChannel.prototype.m_to = fan.sys.Float.make(0);
fan.vaseGui.ScaleAnimChannel.prototype.m_lastScale = fan.sys.Float.make(0);
fan.vaseGui.AnimManager = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.AnimManager.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_lastUpdateTime = 0;
  this.m_animationList = fan.sys.List.make(fan.vaseGui.Animation.$type);
  return;
}
fan.vaseGui.AnimManager.prototype.$typeof = function() { return fan.vaseGui.AnimManager.$type; }
fan.vaseGui.AnimManager.prototype.lastUpdateTime = function()
{
  return this.m_lastUpdateTime;
}
fan.vaseGui.AnimManager.prototype.lastUpdateTime$ = function(it)
{
  this.m_lastUpdateTime = it;
  return;
}
fan.vaseGui.AnimManager.prototype.animationList = function()
{
  return this.m_animationList;
}
fan.vaseGui.AnimManager.prototype.animationList$ = function(it)
{
  this.m_animationList = it;
  return;
}
fan.vaseGui.AnimManager.prototype.updateFrame = function()
{
  if (fan.sys.ObjUtil.equals(this.m_lastUpdateTime,0))
  {
    this.m_lastUpdateTime = fan.std.TimePoint.nowMillis();
  }
  ;
  var now = fan.std.TimePoint.nowMillis();
  var elapsedTime = fan.sys.Int.minus(now,this.m_lastUpdateTime);
  if (fan.sys.ObjUtil.compareGT(elapsedTime,0))
  {
    this.update(elapsedTime);
  }
  ;
  this.m_lastUpdateTime = now;
  return this.hasAnimation();
}
fan.vaseGui.AnimManager.prototype.update = function(frameTime)
{
  var n = this.m_animationList.size();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,n); i = fan.sys.Int.increment(i))
  {
    var anim = this.m_animationList.get(i);
    anim.update(frameTime);
    if (anim.m_isFinished)
    {
      this.m_animationList.removeAt(i);
      i = fan.sys.Int.decrement(i);
      n = fan.sys.Int.decrement(n);
    }
    ;
  }
  ;
  return fan.sys.ObjUtil.compareGT(this.m_animationList.size(),0);
}
fan.vaseGui.AnimManager.prototype.clear = function()
{
  this.m_animationList.clear();
  this.m_lastUpdateTime = 0;
  return;
}
fan.vaseGui.AnimManager.prototype.hasAnimation = function()
{
  return fan.sys.ObjUtil.compareGT(this.m_animationList.size(),0);
}
fan.vaseGui.AnimManager.prototype.add = function(a)
{
  this.m_animationList.add(a);
  return this;
}
fan.vaseGui.AnimManager.make = function() {
  var self = new fan.vaseGui.AnimManager();
  fan.vaseGui.AnimManager.make$(self);
  return self;
  }
fan.vaseGui.AnimManager.make$ = function(self)
{
  ;
  return;
}
fan.vaseGui.AnimManager.prototype.m_lastUpdateTime = 0;
fan.vaseGui.AnimManager.prototype.m_animationList = null;
fan.vaseGui.FloatPropertyAnimChannel = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.FloatPropertyAnimChannel.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_from = fan.sys.Float.make(0.0);
  this.m_to = fan.sys.Float.make(1.0);
  this.m_interpolation = fan.vaseGui.Interpolation.make();
  return;
}
fan.vaseGui.FloatPropertyAnimChannel.prototype.$typeof = function() { return fan.vaseGui.FloatPropertyAnimChannel.$type; }
fan.vaseGui.FloatPropertyAnimChannel.prototype.target = function()
{
  return this.m_target;
}
fan.vaseGui.FloatPropertyAnimChannel.prototype.target$ = function(it)
{
  this.m_target = it;
  return;
}
fan.vaseGui.FloatPropertyAnimChannel.prototype.field = function()
{
  return this.m_field;
}
fan.vaseGui.FloatPropertyAnimChannel.prototype.field$ = function(it)
{
  this.m_field = it;
  return;
}
fan.vaseGui.FloatPropertyAnimChannel.prototype.updateFunc = function()
{
  return this.m_updateFunc;
}
fan.vaseGui.FloatPropertyAnimChannel.prototype.updateFunc$ = function(it)
{
  this.m_updateFunc = it;
  return;
}
fan.vaseGui.FloatPropertyAnimChannel.prototype.from = function()
{
  return this.m_from;
}
fan.vaseGui.FloatPropertyAnimChannel.prototype.from$ = function(it)
{
  this.m_from = it;
  return;
}
fan.vaseGui.FloatPropertyAnimChannel.prototype.to = function()
{
  return this.m_to;
}
fan.vaseGui.FloatPropertyAnimChannel.prototype.to$ = function(it)
{
  this.m_to = it;
  return;
}
fan.vaseGui.FloatPropertyAnimChannel.make = function(target,field) {
  var self = new fan.vaseGui.FloatPropertyAnimChannel();
  fan.vaseGui.FloatPropertyAnimChannel.make$(self,target,field);
  return self;
  }
fan.vaseGui.FloatPropertyAnimChannel.make$ = function(self,target,field)
{
  ;
  self.m_target = target;
  self.m_field = field;
  return;
}
fan.vaseGui.FloatPropertyAnimChannel.prototype.interpolation = function()
{
  return this.m_interpolation;
}
fan.vaseGui.FloatPropertyAnimChannel.prototype.interpolation$ = function(it)
{
  this.m_interpolation = it;
  return;
}
fan.vaseGui.FloatPropertyAnimChannel.prototype.update = function(elapsedTime,frameTime,percent,blendWeight)
{
  var p = this.m_interpolation.evaluate(percent);
  var val = fan.sys.Float.plus(fan.sys.Float.mult(fan.sys.Float.minus(this.m_to,this.m_from),p),this.m_from);
  this.m_field.set(this.m_target,fan.sys.ObjUtil.coerce(val,fan.sys.Obj.$type.toNullable()));
  return;
}
fan.vaseGui.FloatPropertyAnimChannel.prototype.m_target = null;
fan.vaseGui.FloatPropertyAnimChannel.prototype.m_field = null;
fan.vaseGui.FloatPropertyAnimChannel.prototype.m_updateFunc = null;
fan.vaseGui.FloatPropertyAnimChannel.prototype.m_from = fan.sys.Float.make(0);
fan.vaseGui.FloatPropertyAnimChannel.prototype.m_to = fan.sys.Float.make(0);
fan.vaseGui.FloatPropertyAnimChannel.prototype.m_interpolation = null;
fan.vaseGui.Timer = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.Timer.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_canceled = true;
  this.m_timeOut = fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u25,
    function()
    {
      if ($this.m_canceled)
      {
        return;
      }
      ;
      $this.m_toolkit.callLater($this.m_period,$this.m_timeOut);
      $this.m_onTimeOut.call();
      return;
    });
  return;
}
fan.vaseGui.Timer.prototype.$typeof = function() { return fan.vaseGui.Timer.$type; }
fan.vaseGui.Timer.prototype.period = function()
{
  return this.m_period;
}
fan.vaseGui.Timer.prototype.period$ = function(it)
{
  this.m_period = it;
  return;
}
fan.vaseGui.Timer.prototype.canceled = function()
{
  return this.m_canceled;
}
fan.vaseGui.Timer.prototype.canceled$ = function(it)
{
  this.m_canceled = it;
  return;
}
fan.vaseGui.Timer.prototype.onTimeOut = function()
{
  return this.m_onTimeOut;
}
fan.vaseGui.Timer.prototype.onTimeOut$ = function(it)
{
  this.m_onTimeOut = it;
  return;
}
fan.vaseGui.Timer.prototype.toolkit = function()
{
  return this.m_toolkit;
}
fan.vaseGui.Timer.prototype.toolkit$ = function(it)
{
  this.m_toolkit = it;
  return;
}
fan.vaseGui.Timer.make = function(period,onTimeOut) {
  var self = new fan.vaseGui.Timer();
  fan.vaseGui.Timer.make$(self,period,onTimeOut);
  return self;
  }
fan.vaseGui.Timer.make$ = function(self,period,onTimeOut)
{
  ;
  self.m_toolkit = fan.vaseWindow.Toolkit.cur();
  self.m_onTimeOut = onTimeOut;
  self.m_period = period;
  return;
}
fan.vaseGui.Timer.prototype.start = function()
{
  this.m_canceled = false;
  this.m_toolkit.callLater(this.m_period,this.m_timeOut);
  return;
}
fan.vaseGui.Timer.prototype.cancel = function()
{
  this.m_canceled = true;
  return;
}
fan.vaseGui.Timer.prototype.timeOut = function()
{
  return this.m_timeOut;
}
fan.vaseGui.Timer.prototype.timeOut$ = function(it)
{
  this.m_timeOut = it;
  return;
}
fan.vaseGui.Timer.prototype.m_period = 0;
fan.vaseGui.Timer.prototype.m_canceled = false;
fan.vaseGui.Timer.prototype.m_onTimeOut = null;
fan.vaseGui.Timer.prototype.m_toolkit = null;
fan.vaseGui.Timer.prototype.m_timeOut = null;
fan.vaseGui.AnimExt = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.AnimExt.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.AnimExt.prototype.$typeof = function() { return fan.vaseGui.AnimExt.$type; }
fan.vaseGui.AnimExt.fadeInAnim = function(self,time)
{
  if (time === undefined) time = 500;
  var $this = this;
  var a = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TweenAnimation.make(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u8,
    function(it)
    {
      it.m_duration = time;
      it.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.AlphaAnimChannel.make(),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u26,
        function(it)
        {
          it.m_to = fan.sys.Float.make(1.0);
          it.m_from = fan.sys.Float.make(0.0);
          return;
        })),fan.vaseGui.AlphaAnimChannel.$type));
      return;
    })),fan.vaseGui.TweenAnimation.$type);
  a.bind(self);
  return a;
}
fan.vaseGui.AnimExt.fadeOutAnim = function(self,time,detach)
{
  if (time === undefined) time = 500;
  if (detach === undefined) detach = true;
  var $this = this;
  var a = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TweenAnimation.make(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u8,
    function(it)
    {
      it.m_duration = time;
      it.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.AlphaAnimChannel.make(),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u26,
        function(it)
        {
          it.m_from = fan.sys.Float.make(1.0);
          it.m_to = fan.sys.Float.make(0.0);
          return;
        })),fan.vaseGui.AlphaAnimChannel.$type));
      return;
    })),fan.vaseGui.TweenAnimation.$type);
  a.whenDone().add(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u10,
    function(it)
    {
      if (detach)
      {
        self.detach();
      }
      else
      {
        self.visible$(false);
      }
      ;
      return;
    }));
  a.bind(self);
  return a;
}
fan.vaseGui.AnimExt.moveInAnim = function(self,orig,time)
{
  if (time === undefined) time = 500;
  var $this = this;
  var x = 0;
  var y = 0;
  var p = fan.vaseGui.Coord.make(0,0);
  self.posOnWindow(p);
  var root = self.getRootView();
  var $_u27 = orig;
  if (fan.sys.ObjUtil.equals($_u27,((fan.vaseGui.Direction.static$init ? fan.vaseGui.Direction.static$init() : null),fan.vaseGui.Direction.m_top)))
  {
    y = fan.sys.Int.negate(fan.sys.Int.plus(p.m_y,self.height()));
  }
  else if (fan.sys.ObjUtil.equals($_u27,((fan.vaseGui.Direction.static$init ? fan.vaseGui.Direction.static$init() : null),fan.vaseGui.Direction.m_right)))
  {
    x = fan.sys.Int.minus(root.width(),p.m_x);
  }
  else if (fan.sys.ObjUtil.equals($_u27,((fan.vaseGui.Direction.static$init ? fan.vaseGui.Direction.static$init() : null),fan.vaseGui.Direction.m_down)))
  {
    y = fan.sys.Int.minus(root.height(),p.m_y);
  }
  else if (fan.sys.ObjUtil.equals($_u27,((fan.vaseGui.Direction.static$init ? fan.vaseGui.Direction.static$init() : null),fan.vaseGui.Direction.m_left)))
  {
    x = fan.sys.Int.negate(fan.sys.Int.plus(p.m_x,self.width()));
  }
  ;
  var a = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TweenAnimation.make(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u8,
    function(it)
    {
      it.m_duration = time;
      it.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TranslateAnimChannel.make(),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u9,
        function(it)
        {
          it.m_to = ((fan.vaseGraphics.Point.static$init ? fan.vaseGraphics.Point.static$init() : null),fan.vaseGraphics.Point.m_defVal);
          it.m_from = fan.vaseGraphics.Point.make(x,y);
          return;
        })),fan.vaseGui.TranslateAnimChannel.$type));
      return;
    })),fan.vaseGui.TweenAnimation.$type);
  a.bind(self);
  return a;
}
fan.vaseGui.AnimExt.moveOutAnim = function(self,orig,time,detach)
{
  if (time === undefined) time = 500;
  if (detach === undefined) detach = true;
  var $this = this;
  var x = 0;
  var y = 0;
  var p = fan.vaseGui.Coord.make(0,0);
  self.posOnWindow(p);
  var root = self.getRootView();
  var $_u28 = orig;
  if (fan.sys.ObjUtil.equals($_u28,((fan.vaseGui.Direction.static$init ? fan.vaseGui.Direction.static$init() : null),fan.vaseGui.Direction.m_top)))
  {
    y = fan.sys.Int.negate(fan.sys.Int.plus(p.m_y,self.height()));
  }
  else if (fan.sys.ObjUtil.equals($_u28,((fan.vaseGui.Direction.static$init ? fan.vaseGui.Direction.static$init() : null),fan.vaseGui.Direction.m_right)))
  {
    x = fan.sys.Int.minus(root.width(),p.m_x);
  }
  else if (fan.sys.ObjUtil.equals($_u28,((fan.vaseGui.Direction.static$init ? fan.vaseGui.Direction.static$init() : null),fan.vaseGui.Direction.m_down)))
  {
    y = fan.sys.Int.minus(root.height(),p.m_y);
  }
  else if (fan.sys.ObjUtil.equals($_u28,((fan.vaseGui.Direction.static$init ? fan.vaseGui.Direction.static$init() : null),fan.vaseGui.Direction.m_left)))
  {
    x = fan.sys.Int.negate(fan.sys.Int.plus(p.m_x,self.width()));
  }
  ;
  var a = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TweenAnimation.make(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u8,
    function(it)
    {
      it.m_duration = time;
      it.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TranslateAnimChannel.make(),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u9,
        function(it)
        {
          it.m_from = ((fan.vaseGraphics.Point.static$init ? fan.vaseGraphics.Point.static$init() : null),fan.vaseGraphics.Point.m_defVal);
          it.m_to = fan.vaseGraphics.Point.make(x,y);
          return;
        })),fan.vaseGui.TranslateAnimChannel.$type));
      return;
    })),fan.vaseGui.TweenAnimation.$type);
  a.whenDone().add(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u10,
    function(it)
    {
      if (detach)
      {
        self.detach();
      }
      else
      {
        self.visible$(false);
      }
      ;
      return;
    }));
  a.bind(self);
  return a;
}
fan.vaseGui.AnimExt.shakeAnim = function(self,time,repeat)
{
  if (time === undefined) time = 100;
  if (repeat === undefined) repeat = 10;
  var $this = this;
  var a = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TweenAnimation.make(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u8,
    function(it)
    {
      it.m_repeat = repeat;
      it.m_duration = time;
      it.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.RotateAnimChannel.make(),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u29,
        function(it)
        {
          it.m_to = fan.sys.Float.make(-0.1);
          it.m_from = fan.sys.Float.make(0.1);
          return;
        })),fan.vaseGui.RotateAnimChannel.$type));
      return;
    })),fan.vaseGui.TweenAnimation.$type);
  a.bind(self);
  return a;
}
fan.vaseGui.AnimExt.shrinkAnim = function(self,time,p,detach)
{
  if (time === undefined) time = 500;
  if (p === undefined) p = null;
  if (detach === undefined) detach = true;
  var $this = this;
  if (p == null)
  {
    p = fan.vaseGui.Coord.make(0,0);
    self.posOnWindow(fan.sys.ObjUtil.coerce(p,fan.vaseGui.Coord.$type));
  }
  ;
  self.mapToWidget(fan.sys.ObjUtil.coerce(p,fan.vaseGui.Coord.$type));
  var a = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TweenAnimation.make(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u8,
    function(it)
    {
      it.m_duration = time;
      fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(it.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.ScaleAnimChannel.make(),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u30,
        function(it)
        {
          it.m_to = fan.sys.Float.make(0.0);
          it.m_from = fan.sys.Float.make(1.0);
          return;
        })),fan.vaseGui.ScaleAnimChannel.$type)),fan.vaseGui.TweenAnimation.$type).add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TranslateAnimChannel.make(),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u9,
        function(it)
        {
          it.m_to = fan.vaseGraphics.Point.make(p.m_x,p.m_y);
          it.m_from = ((fan.vaseGraphics.Point.static$init ? fan.vaseGraphics.Point.static$init() : null),fan.vaseGraphics.Point.m_defVal);
          return;
        })),fan.vaseGui.TranslateAnimChannel.$type)),fan.vaseGui.TweenAnimation.$type).add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.AlphaAnimChannel.make(),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u26,
        function(it)
        {
          it.m_to = fan.sys.Float.make(0.0);
          it.m_from = fan.sys.Float.make(1.0);
          return;
        })),fan.vaseGui.AlphaAnimChannel.$type));
      return;
    })),fan.vaseGui.TweenAnimation.$type);
  a.whenDone().add(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u10,
    function(it)
    {
      if (detach)
      {
        self.detach();
      }
      else
      {
        self.visible$(false);
      }
      ;
      return;
    }));
  a.bind(self);
  return a;
}
fan.vaseGui.AnimExt.expandAnim = function(self,time,p)
{
  if (time === undefined) time = 500;
  if (p === undefined) p = null;
  var $this = this;
  if (p == null)
  {
    p = fan.vaseGui.Coord.make(0,0);
    self.posOnWindow(fan.sys.ObjUtil.coerce(p,fan.vaseGui.Coord.$type));
  }
  ;
  self.mapToWidget(fan.sys.ObjUtil.coerce(p,fan.vaseGui.Coord.$type));
  var a = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TweenAnimation.make(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u8,
    function(it)
    {
      it.m_duration = time;
      fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(it.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.ScaleAnimChannel.make(),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u30,
        function(it)
        {
          it.m_from = fan.sys.Float.make(0.0);
          it.m_to = fan.sys.Float.make(1.0);
          return;
        })),fan.vaseGui.ScaleAnimChannel.$type)),fan.vaseGui.TweenAnimation.$type).add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TranslateAnimChannel.make(),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u9,
        function(it)
        {
          it.m_from = fan.vaseGraphics.Point.make(p.m_x,p.m_y);
          it.m_to = ((fan.vaseGraphics.Point.static$init ? fan.vaseGraphics.Point.static$init() : null),fan.vaseGraphics.Point.m_defVal);
          return;
        })),fan.vaseGui.TranslateAnimChannel.$type)),fan.vaseGui.TweenAnimation.$type).add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.AlphaAnimChannel.make(),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u26,
        function(it)
        {
          it.m_to = fan.sys.Float.make(1.0);
          it.m_from = fan.sys.Float.make(0.0);
          return;
        })),fan.vaseGui.AlphaAnimChannel.$type));
      return;
    })),fan.vaseGui.TweenAnimation.$type);
  a.bind(self);
  return a;
}
fan.vaseGui.AnimExt.scaleAnim = function(self,from,time)
{
  if (from === undefined) from = fan.sys.Float.make(0.0);
  if (time === undefined) time = 500;
  var $this = this;
  var a = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.TweenAnimation.make(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u8,
    function(it)
    {
      it.m_duration = time;
      fan.sys.ObjUtil.coerce(it.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.ScaleAnimChannel.make(),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u30,
        function(it)
        {
          it.m_from = from;
          it.m_to = fan.sys.Float.make(1.0);
          return;
        })),fan.vaseGui.ScaleAnimChannel.$type)),fan.vaseGui.TweenAnimation.$type).add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.AlphaAnimChannel.make(),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u26,
        function(it)
        {
          it.m_to = fan.sys.Float.make(1.0);
          from = fan.sys.Float.make(0.0);
          return;
        })),fan.vaseGui.AlphaAnimChannel.$type));
      return;
    })),fan.vaseGui.TweenAnimation.$type);
  a.bind(self);
  return a;
}
fan.vaseGui.AnimExt.make = function() {
  var self = new fan.vaseGui.AnimExt();
  fan.vaseGui.AnimExt.make$(self);
  return self;
  }
fan.vaseGui.AnimExt.make$ = function(self)
{
  return;
}
fan.vaseGui.ScrollAnimChannel = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.ScrollAnimChannel.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_acceleration = fan.sys.Float.make(-0.001);
  this.m_startV = fan.sys.Float.make(1.0);
  this.m_backwards = false;
  this.m_inited = false;
  this.m_allowOverScroll = false;
  this.m_isFinished = false;
  return;
}
fan.vaseGui.ScrollAnimChannel.prototype.$typeof = function() { return fan.vaseGui.ScrollAnimChannel.$type; }
fan.vaseGui.ScrollAnimChannel.prototype.acceleration = function()
{
  return this.m_acceleration;
}
fan.vaseGui.ScrollAnimChannel.prototype.acceleration$ = function(it)
{
  this.m_acceleration = it;
  return;
}
fan.vaseGui.ScrollAnimChannel.prototype.startV = function()
{
  return this.m_startV;
}
fan.vaseGui.ScrollAnimChannel.prototype.startV$ = function(it)
{
  this.m_startV = it;
  return;
}
fan.vaseGui.ScrollAnimChannel.prototype.backwards = function()
{
  return this.m_backwards;
}
fan.vaseGui.ScrollAnimChannel.prototype.backwards$ = function(it)
{
  this.m_backwards = it;
  return;
}
fan.vaseGui.ScrollAnimChannel.prototype.inited = function()
{
  return this.m_inited;
}
fan.vaseGui.ScrollAnimChannel.prototype.inited$ = function(it)
{
  this.m_inited = it;
  return;
}
fan.vaseGui.ScrollAnimChannel.prototype.target = function()
{
  return this.m_target;
}
fan.vaseGui.ScrollAnimChannel.prototype.target$ = function(it)
{
  this.m_target = it;
  return;
}
fan.vaseGui.ScrollAnimChannel.prototype.allowOverScroll = function()
{
  return this.m_allowOverScroll;
}
fan.vaseGui.ScrollAnimChannel.prototype.allowOverScroll$ = function(it)
{
  this.m_allowOverScroll = it;
  return;
}
fan.vaseGui.ScrollAnimChannel.prototype.isFinished = function()
{
  return this.m_isFinished;
}
fan.vaseGui.ScrollAnimChannel.prototype.isFinished$ = function(it)
{
  this.m_isFinished = it;
  return;
}
fan.vaseGui.ScrollAnimChannel.prototype.init = function()
{
  this.m_backwards = fan.sys.ObjUtil.compareLT(this.m_startV,fan.sys.Float.make(0.0));
  if (this.m_backwards)
  {
    this.m_acceleration = fan.sys.Float.negate(this.m_acceleration);
  }
  ;
  return;
}
fan.vaseGui.ScrollAnimChannel.prototype.isEnd = function()
{
  var endV = fan.sys.Float.make(0.0);
  if (this.m_backwards)
  {
    if (fan.sys.ObjUtil.compareGE(this.m_startV,endV))
    {
      return true;
    }
    ;
  }
  else
  {
    if (fan.sys.ObjUtil.compareLE(this.m_startV,endV))
    {
      return true;
    }
    ;
  }
  ;
  if (this.m_target.isOverScroll())
  {
    return true;
  }
  ;
  return false;
}
fan.vaseGui.ScrollAnimChannel.prototype.update = function(elapsedTime,frameTime,percent,blendWeight)
{
  if (!this.m_inited)
  {
    this.m_inited = true;
    this.init();
  }
  ;
  if (this.m_isFinished)
  {
    return;
  }
  ;
  var t = frameTime;
  var s = fan.sys.Float.plus(fan.sys.Float.multInt(this.m_startV,t),fan.sys.Float.divInt(fan.sys.Float.multInt(fan.sys.Float.multInt(this.m_acceleration,t),t),2));
  this.m_startV = fan.sys.Float.plus(this.m_startV,fan.sys.Float.multInt(this.m_acceleration,t));
  var pos = fan.sys.Float.minus(this.m_target.m_curPos,s);
  this.m_target.setCurPos(pos,true,this.m_allowOverScroll);
  this.m_isFinished = this.isEnd();
  this.m_target.repaint();
  return;
}
fan.vaseGui.ScrollAnimChannel.make = function() {
  var self = new fan.vaseGui.ScrollAnimChannel();
  fan.vaseGui.ScrollAnimChannel.make$(self);
  return self;
  }
fan.vaseGui.ScrollAnimChannel.make$ = function(self)
{
  ;
  return;
}
fan.vaseGui.ScrollAnimChannel.prototype.m_acceleration = fan.sys.Float.make(0);
fan.vaseGui.ScrollAnimChannel.prototype.m_startV = fan.sys.Float.make(0);
fan.vaseGui.ScrollAnimChannel.prototype.m_backwards = false;
fan.vaseGui.ScrollAnimChannel.prototype.m_inited = false;
fan.vaseGui.ScrollAnimChannel.prototype.m_target = null;
fan.vaseGui.ScrollAnimChannel.prototype.m_allowOverScroll = false;
fan.vaseGui.ScrollAnimChannel.prototype.m_isFinished = false;
fan.vaseGui.OverScrollAnimChannel = fan.sys.Obj.$extend(fan.vaseGui.ScrollAnimChannel);
fan.vaseGui.OverScrollAnimChannel.prototype.$ctor = function()
{
  fan.vaseGui.ScrollAnimChannel.prototype.$ctor.call(this);
  var $this = this;
  this.m_startPos = fan.sys.Float.make(0.0);
  return;
}
fan.vaseGui.OverScrollAnimChannel.prototype.$typeof = function() { return fan.vaseGui.OverScrollAnimChannel.$type; }
fan.vaseGui.OverScrollAnimChannel.prototype.startPos = function()
{
  return this.m_startPos;
}
fan.vaseGui.OverScrollAnimChannel.prototype.startPos$ = function(it)
{
  this.m_startPos = it;
  return;
}
fan.vaseGui.OverScrollAnimChannel.prototype.init = function()
{
  this.m_startV = fan.sys.Float.make(0.0);
  if (fan.sys.ObjUtil.compareGT(this.m_target.m_curPos,fan.sys.Float.make(0.0)))
  {
    this.m_acceleration = fan.sys.Float.negate(this.m_acceleration);
    this.m_backwards = true;
    this.m_startPos = fan.sys.Float.minus(this.m_target.m_max,this.m_target.m_viewport);
  }
  ;
  this.m_allowOverScroll = true;
  return;
}
fan.vaseGui.OverScrollAnimChannel.prototype.isEnd = function()
{
  if (this.m_backwards)
  {
    if (fan.sys.ObjUtil.compareLE(this.m_target.m_curPos,this.m_startPos))
    {
      this.m_target.setCurPos(this.m_startPos,true);
      return true;
    }
    ;
  }
  else
  {
    if (fan.sys.ObjUtil.compareGE(this.m_target.m_curPos,this.m_startPos))
    {
      this.m_target.setCurPos(this.m_startPos,true);
      return true;
    }
    ;
  }
  ;
  return false;
}
fan.vaseGui.OverScrollAnimChannel.make = function() {
  var self = new fan.vaseGui.OverScrollAnimChannel();
  fan.vaseGui.OverScrollAnimChannel.make$(self);
  return self;
  }
fan.vaseGui.OverScrollAnimChannel.make$ = function(self)
{
  fan.vaseGui.ScrollAnimChannel.make$(self);
  ;
  return;
}
fan.vaseGui.OverScrollAnimChannel.prototype.m_startPos = fan.sys.Float.make(0);
fan.vaseGui.Interpolation = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.Interpolation.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.Interpolation.prototype.$typeof = function() { return fan.vaseGui.Interpolation.$type; }
fan.vaseGui.Interpolation.prototype.evaluate = function(percent)
{
  return percent;
}
fan.vaseGui.Interpolation.make = function() {
  var self = new fan.vaseGui.Interpolation();
  fan.vaseGui.Interpolation.make$(self);
  return self;
  }
fan.vaseGui.Interpolation.make$ = function(self)
{
  return;
}
fan.vaseGui.WidgetGroup = fan.sys.Obj.$extend(fan.vaseGui.Widget);
fan.vaseGui.WidgetGroup.prototype.$ctor = function()
{
  fan.vaseGui.Widget.prototype.$ctor.call(this);
  var $this = this;
  this.m_children = fan.sys.List.make(fan.vaseGui.Widget.$type);
  return;
}
fan.vaseGui.WidgetGroup.prototype.$typeof = function() { return fan.vaseGui.WidgetGroup.$type; }
fan.vaseGui.WidgetGroup.make = function() {
  var self = new fan.vaseGui.WidgetGroup();
  fan.vaseGui.WidgetGroup.make$(self);
  return self;
  }
fan.vaseGui.WidgetGroup.make$ = function(self)
{
  fan.vaseGui.Widget.make$(self);
  ;
  self.m_useRenderCache = false;
  return;
}
fan.vaseGui.WidgetGroup.prototype.children = function()
{
  return this.m_children;
}
fan.vaseGui.WidgetGroup.prototype.children$ = function(it)
{
  this.m_children = it;
  return;
}
fan.vaseGui.WidgetGroup.prototype.each = function(f)
{
  this.m_children.each(f);
  return;
}
fan.vaseGui.WidgetGroup.prototype.remove = function(child,doRelayout)
{
  if (doRelayout === undefined) doRelayout = true;
  if (child == null)
  {
    return this;
  }
  ;
  var root = this.getRootView();
  (function($this) { var $_u31 = root; if ($_u31 == null) return null; return $_u31.onRemove(fan.sys.ObjUtil.coerce(child,fan.vaseGui.Widget.$type)); })(this);
  if (this.m_children.removeSame(fan.sys.ObjUtil.coerce(child,fan.vaseGui.Widget.$type)) == null)
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("not my child: ",child),", parent"),child.m_parent));
  }
  ;
  child.setParent(null);
  if ((doRelayout && root != null))
  {
    this.relayout();
  }
  ;
  return this;
}
fan.vaseGui.WidgetGroup.prototype.removeAll = function()
{
  var $this = this;
  this.m_children.dup().each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u32,
    function(kid,ignoreparam$1)
    {
      $this.remove(kid);
      return;
    }));
  return this;
}
fan.vaseGui.WidgetGroup.prototype.add = function(child)
{
  if (child.m_parent != null)
  {
    throw fan.sys.ArgErr.make(fan.sys.Str.plus("Child already parented: ",child));
  }
  ;
  child.setParent(this);
  this.m_children.add(child);
  return this;
}
fan.vaseGui.WidgetGroup.prototype.indexSame = function(child)
{
  return this.m_children.indexSame(child);
}
fan.vaseGui.WidgetGroup.prototype.childrenSize = function()
{
  return this.m_children.size();
}
fan.vaseGui.WidgetGroup.prototype.getChild = function(i)
{
  return this.m_children.get(i);
}
fan.vaseGui.WidgetGroup.prototype.findById = function(id)
{
  var $this = this;
  if (fan.sys.ObjUtil.equals(id,this.m_id))
  {
    return this;
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_children.eachWhile(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u33,
    function(it,ignoreparam$1)
    {
      return it.findById(id);
    })),fan.vaseGui.Widget.$type.toNullable());
}
fan.vaseGui.WidgetGroup.prototype.moveToTop = function(child)
{
  var i = fan.sys.ObjUtil.coerce(this.m_children.indexSame(child),fan.sys.Int.$type.toNullable());
  if (fan.sys.ObjUtil.equals(i,fan.sys.Int.minus(this.m_children.size(),1)))
  {
    return;
  }
  ;
  if (i != null)
  {
    this.m_children.removeAt(fan.sys.ObjUtil.coerce(i,fan.sys.Int.$type));
    this.m_children.add(child);
  }
  else
  {
    this.add(child);
  }
  ;
  return;
}
fan.vaseGui.WidgetGroup.prototype.motionEvent = function(e)
{
  var $this = this;
  var px = e.relativeX();
  var py = e.relativeY();
  this.m_children.eachr(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u34,
    function(it,ignoreparam$1)
    {
      if ((it.enabled() && it.visible() && !e.consumed()))
      {
        e.relativeX$(fan.sys.ObjUtil.coerce(fan.sys.Int.minus(fan.sys.ObjUtil.coerce(px,fan.sys.Int.$type),$this.x()),fan.sys.Int.$type.toNullable()));
        e.relativeY$(fan.sys.ObjUtil.coerce(fan.sys.Int.minus(fan.sys.ObjUtil.coerce(py,fan.sys.Int.$type),$this.y()),fan.sys.Int.$type.toNullable()));
        if (it.contains(fan.sys.ObjUtil.coerce(e.relativeX(),fan.sys.Int.$type),fan.sys.ObjUtil.coerce(e.relativeY(),fan.sys.Int.$type)))
        {
          it.motionEvent(e);
        }
        ;
      }
      ;
      return;
    }));
  e.relativeX$(px);
  e.relativeY$(py);
  return;
}
fan.vaseGui.WidgetGroup.prototype.gestureEvent = function(e)
{
  var px = e.m_relativeX;
  var py = e.m_relativeY;
  for (var i = fan.sys.Int.minus(this.m_children.size(),1); (fan.sys.ObjUtil.compareGE(i,0) && fan.sys.ObjUtil.compareLT(i,this.m_children.size())); i = fan.sys.Int.decrement(i))
  {
    var t = this.m_children.get(i);
    if ((t.enabled() && t.visible() && !e.consumed()))
    {
      e.m_relativeX = fan.sys.ObjUtil.coerce(fan.sys.Int.minus(fan.sys.ObjUtil.coerce(px,fan.sys.Int.$type),this.x()),fan.sys.Int.$type.toNullable());
      e.m_relativeY = fan.sys.ObjUtil.coerce(fan.sys.Int.minus(fan.sys.ObjUtil.coerce(py,fan.sys.Int.$type),this.y()),fan.sys.Int.$type.toNullable());
      if (t.contains(fan.sys.ObjUtil.coerce(e.m_relativeX,fan.sys.Int.$type),fan.sys.ObjUtil.coerce(e.m_relativeY,fan.sys.Int.$type)))
      {
        t.gestureEvent(e);
      }
      ;
    }
    ;
  }
  ;
  e.m_relativeX = px;
  e.m_relativeY = py;
  return;
}
fan.vaseGui.WidgetGroup.prototype.keyEvent = function(e)
{
  var $this = this;
  this.m_children.eachr(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u34,
    function(it,ignoreparam$1)
    {
      if (it.enabled())
      {
        it.keyEvent(e);
      }
      ;
      return;
    }));
  return;
}
fan.vaseGui.WidgetGroup.prototype.onMounted = function()
{
  var $this = this;
  this.m_children.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u34,
    function(it,ignoreparam$1)
    {
      it.onMounted();
      return;
    }));
  return;
}
fan.vaseGui.WidgetGroup.prototype.doPaint = function(g)
{
  var $this = this;
  fan.vaseGui.Widget.prototype.doPaint.call(this,g);
  this.paintChildren(g);
  if (fan.vaseGui.Widget.debug())
  {
    g.brush$(((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_red));
    g.pen$(fan.vaseGraphics.Pen.make(fan.sys.Func.make$closure(
      fan.vaseGui.$clos$_u35,
      function(it)
      {
        it.m_width = 1;
        return;
      })));
    g.drawRect(2,2,fan.sys.Int.minus(this.width(),4),fan.sys.Int.minus(this.height(),4));
  }
  ;
  return;
}
fan.vaseGui.WidgetGroup.prototype.paintChildren = function(g)
{
  var $this = this;
  this.m_children.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u34,
    function(it,ignoreparam$1)
    {
      if (it.visible())
      {
        g.push();
        g.transform(fan.vaseMath.Transform2D.make().translate(fan.sys.Int.toFloat(it.x()),fan.sys.Int.toFloat(it.y())));
        it.paint(g);
        g.pop();
      }
      ;
      return;
    }));
  return;
}
fan.vaseGui.WidgetGroup.prototype.m_children = null;
fan.vaseGui.VBox = fan.sys.Obj.$extend(fan.vaseGui.WidgetGroup);
fan.vaseGui.VBox.prototype.$ctor = function()
{
  fan.vaseGui.WidgetGroup.prototype.$ctor.call(this);
  var $this = this;
  this.m_spacing = fan.sys.Float.make(4.0);
  return;
}
fan.vaseGui.VBox.prototype.$typeof = function() { return fan.vaseGui.VBox.$type; }
fan.vaseGui.VBox.prototype.spacing = function()
{
  return this.m_spacing;
}
fan.vaseGui.VBox.prototype.spacing$ = function(it)
{
  this.m_spacing = it;
  return;
}
fan.vaseGui.VBox.prototype.getWeightSpace = function()
{
  var $this = this;
  var hintsW = this.contentWidth();
  var hintsH = this.contentHeight();
  var spacing = this.dpToPixel(this.m_spacing);
  var spaceUsage = 0;
  var allWeight = fan.sys.Float.make(0.0);
  this.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u36,
    function(c,i)
    {
      if (fan.sys.ObjUtil.equals(c.m_layoutParam.m_heightType,((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent)))
      {
        allWeight = fan.sys.Float.plus(allWeight,c.m_layoutParam.m_weight);
      }
      else
      {
        var size = c.bufferedPrefSize(-1,-1);
        spaceUsage = fan.sys.Int.plus(spaceUsage,size.m_h);
      }
      ;
      if (fan.sys.ObjUtil.compareGT(i,0))
      {
        spaceUsage = fan.sys.Int.plus(spaceUsage,spacing);
      }
      ;
      return;
    }));
  var weightSpace = fan.sys.Float.make(1.0);
  if ((fan.sys.ObjUtil.compareGT(hintsH,spaceUsage) && fan.sys.ObjUtil.compareGT(allWeight,fan.sys.Float.make(0.0))))
  {
    weightSpace = fan.sys.Int.divFloat(fan.sys.Int.minus(hintsH,spaceUsage),allWeight);
  }
  ;
  return weightSpace;
}
fan.vaseGui.VBox.prototype.layoutChildren = function(force)
{
  var $this = this;
  var x = this.paddingLeft();
  var y = this.paddingTop();
  var hintsW = this.contentWidth();
  var hintsH = this.contentHeight();
  var spacing = this.dpToPixel(this.m_spacing);
  var weightSpace = this.getWeightSpace();
  this.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u37,
    function(c,ignoreparam$1)
    {
      var size = c.bufferedPrefSize(hintsW,hintsH);
      var cx = x;
      var cy = y;
      var cw = size.m_w;
      var ch = size.m_h;
      if (fan.sys.ObjUtil.equals(c.m_layoutParam.m_heightType,((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent)))
      {
        ch = fan.sys.Float.toInt(fan.sys.Float.mult(c.m_layoutParam.m_weight,weightSpace));
      }
      ;
      y = fan.sys.Int.plus(y,fan.sys.Int.plus(ch,spacing));
      c.layout(cx,cy,cw,ch,force);
      return;
    }));
  return;
}
fan.vaseGui.VBox.prototype.prefContentSize = function()
{
  var $this = this;
  var w = 0;
  var h = 0;
  var spacing = this.dpToPixel(this.m_spacing);
  this.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u36,
    function(c,i)
    {
      var size = c.bufferedPrefSize();
      w = fan.sys.Int.max(w,size.m_w);
      h = fan.sys.Int.plus(h,size.m_h);
      if (fan.sys.ObjUtil.compareGT(i,0))
      {
        h = fan.sys.Int.plus(h,spacing);
      }
      ;
      return;
    }));
  return fan.vaseGui.Dimension.make(w,h);
}
fan.vaseGui.VBox.make = function() {
  var self = new fan.vaseGui.VBox();
  fan.vaseGui.VBox.make$(self);
  return self;
  }
fan.vaseGui.VBox.make$ = function(self)
{
  fan.vaseGui.WidgetGroup.make$(self);
  ;
  return;
}
fan.vaseGui.VBox.prototype.m_spacing = fan.sys.Float.make(0);
fan.vaseGui.MessageBox = fan.sys.Obj.$extend(fan.vaseGui.VBox);
fan.vaseGui.MessageBox.prototype.$ctor = function()
{
  fan.vaseGui.VBox.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.MessageBox.prototype.$typeof = function() { return fan.vaseGui.MessageBox.$type; }
fan.vaseGui.MessageBox.prototype.label = function()
{
  return this.m_label;
}
fan.vaseGui.MessageBox.prototype.label$ = function(it)
{
  this.m_label = it;
  return;
}
fan.vaseGui.MessageBox.make = function() {
  var self = new fan.vaseGui.MessageBox();
  fan.vaseGui.MessageBox.make$(self);
  return self;
  }
fan.vaseGui.MessageBox.make$ = function(self)
{
  var $this = self;
  fan.vaseGui.VBox.make$(self);
  self.m_label = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.Label.make(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u38,
    function(it)
    {
      it.m_id = "messageBox_msg";
      it.text$("messageBox");
      it.m_useRenderCache = false;
      it.m_margin = fan.vaseGui.Insets.make(20);
      return;
    })),fan.vaseGui.Label.$type);
  var btn = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.Button.make(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u39,
    function(it)
    {
      it.m_id = "messageBox_ok";
      it.onAction().add(fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u10,
        function(it)
        {
          fan.vaseGui.AnimExt.moveOutAnim($this,((fan.vaseGui.Direction.static$init ? fan.vaseGui.Direction.static$init() : null),fan.vaseGui.Direction.m_down)).start();
          return;
        }));
      it.text$("OK");
      it.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent);
      it.m_useRenderCache = false;
      return;
    })),fan.vaseGui.Button.$type);
  self.add(self.m_label);
  self.add(btn);
  self.m_layoutParam.m_hAlign = ((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_center);
  self.m_layoutParam.m_vAlign = ((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_center);
  self.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_wrapContent);
  self.m_padding = fan.vaseGui.Insets.make(50);
  return;
}
fan.vaseGui.MessageBox.prototype.show = function(w)
{
  var root = w.getRootView();
  var overlayer = root.topOverlayer();
  overlayer.add(this);
  this.focus();
  root.m_modal = true;
  overlayer.relayout();
  fan.vaseGui.AnimExt.moveInAnim(this,((fan.vaseGui.Direction.static$init ? fan.vaseGui.Direction.static$init() : null),fan.vaseGui.Direction.m_down)).start();
  return;
}
fan.vaseGui.MessageBox.prototype.m_label = null;
fan.vaseGui.HBox = fan.sys.Obj.$extend(fan.vaseGui.WidgetGroup);
fan.vaseGui.HBox.prototype.$ctor = function()
{
  fan.vaseGui.WidgetGroup.prototype.$ctor.call(this);
  var $this = this;
  this.m_spacing = fan.sys.Float.make(4.0);
  this.m_align = ((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_begin);
  return;
}
fan.vaseGui.HBox.prototype.$typeof = function() { return fan.vaseGui.HBox.$type; }
fan.vaseGui.HBox.prototype.spacing = function()
{
  return this.m_spacing;
}
fan.vaseGui.HBox.prototype.spacing$ = function(it)
{
  this.m_spacing = it;
  return;
}
fan.vaseGui.HBox.prototype.align = function()
{
  return this.m_align;
}
fan.vaseGui.HBox.prototype.align$ = function(it)
{
  this.m_align = it;
  return;
}
fan.vaseGui.HBox.prototype.weightSpace = function()
{
  return this.m_weightSpace;
}
fan.vaseGui.HBox.prototype.weightSpace$ = function(it)
{
  this.m_weightSpace = it;
  return;
}
fan.vaseGui.HBox.prototype.alignOffset = function()
{
  return this.m_alignOffset;
}
fan.vaseGui.HBox.prototype.alignOffset$ = function(it)
{
  this.m_alignOffset = it;
  return;
}
fan.vaseGui.HBox.prototype.calSpace = function()
{
  var $this = this;
  var hintsW = this.contentWidth();
  var hintsH = this.contentHeight();
  var spacing = this.dpToPixel(this.m_spacing);
  var spaceUsage = 0;
  var allWeight = fan.sys.Float.make(0.0);
  this.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u36,
    function(c,i)
    {
      if (fan.sys.ObjUtil.equals(c.m_layoutParam.m_widthType,((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent)))
      {
        allWeight = fan.sys.Float.plus(allWeight,c.m_layoutParam.m_weight);
      }
      else
      {
        var size = c.bufferedPrefSize(-1,-1);
        spaceUsage = fan.sys.Int.plus(spaceUsage,size.m_w);
      }
      ;
      if (fan.sys.ObjUtil.compareGT(i,0))
      {
        spaceUsage = fan.sys.Int.plus(spaceUsage,spacing);
      }
      ;
      return;
    }));
  this.m_weightSpace = fan.sys.Float.make(1.0);
  this.m_alignOffset = 0;
  if (fan.sys.ObjUtil.compareLE(hintsW,spaceUsage))
  {
    return;
  }
  ;
  if (fan.sys.ObjUtil.compareGT(allWeight,fan.sys.Float.make(0.0)))
  {
    this.m_weightSpace = fan.sys.Int.divFloat(fan.sys.Int.minus(hintsW,spaceUsage),allWeight);
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_align,((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_center)))
  {
    this.m_alignOffset = fan.sys.Int.toInt(fan.sys.Int.div(fan.sys.Int.minus(hintsW,spaceUsage),2));
  }
  else
  {
    if (fan.sys.ObjUtil.equals(this.m_align,((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_end)))
    {
      this.m_alignOffset = fan.sys.Int.minus(hintsW,spaceUsage);
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.HBox.prototype.layoutChildren = function(force)
{
  var $this = this;
  var x = this.paddingLeft();
  var y = this.paddingTop();
  var hintsW = this.contentWidth();
  var hintsH = this.contentHeight();
  var spacing = this.dpToPixel(this.m_spacing);
  this.calSpace();
  x = fan.sys.Int.plus(x,this.m_alignOffset);
  this.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u37,
    function(c,ignoreparam$1)
    {
      var size = c.bufferedPrefSize(hintsW,hintsH);
      var cx = x;
      var cy = y;
      var cw = size.m_w;
      var ch = size.m_h;
      if (fan.sys.ObjUtil.equals(c.m_layoutParam.m_widthType,((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent)))
      {
        cw = fan.sys.Float.toInt(fan.sys.Float.mult(c.m_layoutParam.m_weight,$this.m_weightSpace));
      }
      ;
      x = fan.sys.Int.plus(x,fan.sys.Int.plus(cw,spacing));
      c.layout(cx,cy,cw,ch,force);
      return;
    }));
  return;
}
fan.vaseGui.HBox.prototype.prefContentSize = function()
{
  var $this = this;
  var w = 0;
  var h = 0;
  var spacing = this.dpToPixel(this.m_spacing);
  this.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u36,
    function(c,i)
    {
      var size = c.bufferedPrefSize();
      h = fan.sys.Int.max(h,size.m_h);
      w = fan.sys.Int.plus(w,size.m_w);
      if (fan.sys.ObjUtil.compareGT(i,0))
      {
        w = fan.sys.Int.plus(w,spacing);
      }
      ;
      return;
    }));
  return fan.vaseGui.Dimension.make(w,h);
}
fan.vaseGui.HBox.make = function() {
  var self = new fan.vaseGui.HBox();
  fan.vaseGui.HBox.make$(self);
  return self;
  }
fan.vaseGui.HBox.make$ = function(self)
{
  fan.vaseGui.WidgetGroup.make$(self);
  ;
  return;
}
fan.vaseGui.HBox.prototype.m_spacing = fan.sys.Float.make(0);
fan.vaseGui.HBox.prototype.m_align = null;
fan.vaseGui.HBox.prototype.m_weightSpace = fan.sys.Float.make(0);
fan.vaseGui.HBox.prototype.m_alignOffset = 0;
fan.vaseGui.Menu = fan.sys.Obj.$extend(fan.vaseGui.HBox);
fan.vaseGui.Menu.prototype.$ctor = function()
{
  fan.vaseGui.HBox.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.Menu.prototype.$typeof = function() { return fan.vaseGui.Menu.$type; }
fan.vaseGui.Menu.make = function() {
  var self = new fan.vaseGui.Menu();
  fan.vaseGui.Menu.make$(self);
  return self;
  }
fan.vaseGui.Menu.make$ = function(self)
{
  fan.vaseGui.HBox.make$(self);
  self.m_layoutParam.m_heightType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_wrapContent);
  self.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent);
  return;
}
fan.vaseGui.Menu.prototype.close = function()
{
  this.getRootView().topOverlayer().removeAll();
  this.getRootView().repaint();
  return;
}
fan.vaseGui.MenuList = fan.sys.Obj.$extend(fan.vaseGui.VBox);
fan.vaseGui.MenuList.prototype.$ctor = function()
{
  fan.vaseGui.VBox.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.MenuList.prototype.$typeof = function() { return fan.vaseGui.MenuList.$type; }
fan.vaseGui.MenuList.prototype.owner = function()
{
  return this.m_owner;
}
fan.vaseGui.MenuList.prototype.owner$ = function(it)
{
  this.m_owner = it;
  return;
}
fan.vaseGui.MenuList.make = function() {
  var self = new fan.vaseGui.MenuList();
  fan.vaseGui.MenuList.make$(self);
  return self;
  }
fan.vaseGui.MenuList.make$ = function(self)
{
  fan.vaseGui.VBox.make$(self);
  self.m_spacing = fan.sys.Float.make(0.0);
  self.m_margin = fan.vaseGui.Insets.make(3);
  return;
}
fan.vaseGui.MenuList.prototype.m_owner = null;
fan.vaseGui.Label = fan.sys.Obj.$extend(fan.vaseGui.Widget);
fan.vaseGui.Label.prototype.$ctor = function()
{
  fan.vaseGui.Widget.prototype.$ctor.call(this);
  var $this = this;
  this.m_text = "Label";
  return;
}
fan.vaseGui.Label.prototype.$typeof = function() { return fan.vaseGui.Label.$type; }
fan.vaseGui.Label.prototype.text = function()
{
  return this.m_text;
}
fan.vaseGui.Label.prototype.text$ = function(it)
{
  this.m_text = it;
  this.repaint();
  return;
}
fan.vaseGui.Label.prototype.font = function()
{
  return this.getStyle().font();
}
fan.vaseGui.Label.make = function() {
  var self = new fan.vaseGui.Label();
  fan.vaseGui.Label.make$(self);
  return self;
  }
fan.vaseGui.Label.make$ = function(self)
{
  fan.vaseGui.Widget.make$(self);
  ;
  return;
}
fan.vaseGui.Label.prototype.prefContentSize = function()
{
  var w = this.font().width(this.text());
  var h = this.font().height();
  return fan.vaseGui.Dimension.make(w,h);
}
fan.vaseGui.Label.prototype.m_text = null;
fan.vaseGui.ButtonBase = fan.sys.Obj.$extend(fan.vaseGui.Label);
fan.vaseGui.ButtonBase.prototype.$ctor = function()
{
  fan.vaseGui.Label.prototype.$ctor.call(this);
  var $this = this;
  this.m_state = ((fan.vaseGui.ButtonBase.static$init ? fan.vaseGui.ButtonBase.static$init() : null),fan.vaseGui.ButtonBase.m_mouseOut);
  this.m_onAction$Store = "_once_";
  return;
}
fan.vaseGui.ButtonBase.prototype.$typeof = function() { return fan.vaseGui.ButtonBase.$type; }
fan.vaseGui.ButtonBase.prototype.state = function()
{
  return this.m_state;
}
fan.vaseGui.ButtonBase.prototype.state$ = function(it)
{
  if (fan.sys.ObjUtil.equals(this.m_state,it))
  {
    return;
  }
  ;
  var e = fan.vaseWindow.StateChangedEvent.make(fan.sys.ObjUtil.coerce(this.m_state,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(it,fan.sys.Obj.$type.toNullable()),fan.vaseGui.ButtonBase.$type.slot("state"),this);
  this.onStateChanged().fire(e);
  this.m_state = it;
  this.repaint();
  return;
}
fan.vaseGui.ButtonBase.prototype.onAction = function()
{
  if (this.m_onAction$Store === "_once_")
  {
    this.m_onAction$Store = this.onAction$Once$ButtonBase();
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_onAction$Store,fan.vaseWindow.EventListeners.$type);
}
fan.vaseGui.ButtonBase.prototype.gestureEvent = function(e)
{
  fan.vaseGui.Label.prototype.gestureEvent.call(this,e);
  if (e.consumed())
  {
    return;
  }
  ;
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_click)))
  {
    this.focus();
    this.clicked();
    this.onAction().fire(e);
    e.consume();
  }
  ;
  return;
}
fan.vaseGui.ButtonBase.prototype.motionEvent = function(e)
{
  fan.vaseGui.Label.prototype.motionEvent.call(this,e);
  if (fan.sys.ObjUtil.equals(this.state(),((fan.vaseGui.ButtonBase.static$init ? fan.vaseGui.ButtonBase.static$init() : null),fan.vaseGui.ButtonBase.m_mouseOut)))
  {
    (function($this) { var $_u40 = $this.getRootView(); if ($_u40 == null) return null; return $_u40.mouseCapture($this); })(this);
  }
  ;
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_released)))
  {
    this.state$(((fan.vaseGui.ButtonBase.static$init ? fan.vaseGui.ButtonBase.static$init() : null),fan.vaseGui.ButtonBase.m_mouseOver));
  }
  else
  {
    if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_pressed)))
    {
      this.state$(((fan.vaseGui.ButtonBase.static$init ? fan.vaseGui.ButtonBase.static$init() : null),fan.vaseGui.ButtonBase.m_mouseDown));
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.ButtonBase.prototype.clicked = function()
{
  return;
}
fan.vaseGui.ButtonBase.prototype.mouseExit = function()
{
  this.state$(((fan.vaseGui.ButtonBase.static$init ? fan.vaseGui.ButtonBase.static$init() : null),fan.vaseGui.ButtonBase.m_mouseOut));
  return;
}
fan.vaseGui.ButtonBase.prototype.mouseEnter = function()
{
  this.state$(((fan.vaseGui.ButtonBase.static$init ? fan.vaseGui.ButtonBase.static$init() : null),fan.vaseGui.ButtonBase.m_mouseOver));
  return;
}
fan.vaseGui.ButtonBase.prototype.keyEvent = function(e)
{
  if ((fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.KeyEvent.static$init ? fan.vaseWindow.KeyEvent.static$init() : null),fan.vaseWindow.KeyEvent.m_released)) && fan.sys.ObjUtil.equals(e.key(),((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_enter))))
  {
    this.onAction().fire(e);
  }
  ;
  return;
}
fan.vaseGui.ButtonBase.make = function() {
  var self = new fan.vaseGui.ButtonBase();
  fan.vaseGui.ButtonBase.make$(self);
  return self;
  }
fan.vaseGui.ButtonBase.make$ = function(self)
{
  fan.vaseGui.Label.make$(self);
  ;
  return;
}
fan.vaseGui.ButtonBase.prototype.onAction$Once$ButtonBase = function()
{
  return fan.vaseWindow.EventListeners.make();
}
fan.vaseGui.ButtonBase.static$init = function()
{
  if (fan.vaseGui.ButtonBase.static$inited) return;
  fan.vaseGui.ButtonBase.static$inited = true;
  fan.vaseGui.ButtonBase.m_mouseOver = 0;
  fan.vaseGui.ButtonBase.m_mouseOut = 1;
  fan.vaseGui.ButtonBase.m_mouseDown = 2;
  return;
}
fan.vaseGui.ButtonBase.m_mouseOver = 0;
fan.vaseGui.ButtonBase.m_mouseOut = 0;
fan.vaseGui.ButtonBase.m_mouseDown = 0;
fan.vaseGui.ButtonBase.prototype.m_state = 0;
fan.vaseGui.ButtonBase.prototype.m_onAction$Store = null;
fan.vaseGui.MenuItem = fan.sys.Obj.$extend(fan.vaseGui.ButtonBase);
fan.vaseGui.MenuItem.prototype.$ctor = function()
{
  fan.vaseGui.ButtonBase.prototype.$ctor.call(this);
  var $this = this;
  this.m_topLevel = true;
  return;
}
fan.vaseGui.MenuItem.prototype.$typeof = function() { return fan.vaseGui.MenuItem.$type; }
fan.vaseGui.MenuItem.prototype.list = function()
{
  return this.m_list;
}
fan.vaseGui.MenuItem.prototype.list$ = function(it)
{
  this.m_list = it;
  return;
}
fan.vaseGui.MenuItem.prototype.topLevel = function()
{
  return this.m_topLevel;
}
fan.vaseGui.MenuItem.prototype.topLevel$ = function(it)
{
  this.m_topLevel = it;
  return;
}
fan.vaseGui.MenuItem.make = function() {
  var self = new fan.vaseGui.MenuItem();
  fan.vaseGui.MenuItem.make$(self);
  return self;
  }
fan.vaseGui.MenuItem.make$ = function(self)
{
  var $this = self;
  fan.vaseGui.ButtonBase.make$(self);
  ;
  self.onAction().add(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u10,
    function(it)
    {
      if (fan.sys.ObjUtil.compareGT($this.m_list.childrenSize(),0))
      {
        $this.expand($this.getRootView().topOverlayer());
      }
      else
      {
        (function($this) { var $_u41 = $this.rootMenu(); if ($_u41 == null) return null; return $_u41.close(); })($this);
      }
      ;
      return;
    }));
  self.onStateChanged().add(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u42,
    function(e)
    {
      if ((!$this.m_topLevel && fan.sys.ObjUtil.equals(e.m_field,fan.vaseGui.ButtonBase.$type.slot("state"))))
      {
        var newVal = fan.sys.ObjUtil.coerce(e.newValue(),fan.sys.Int.$type);
        if (fan.sys.ObjUtil.equals(newVal,((fan.vaseGui.ButtonBase.static$init ? fan.vaseGui.ButtonBase.static$init() : null),fan.vaseGui.ButtonBase.m_mouseOver)))
        {
          if (fan.sys.ObjUtil.compareGT($this.m_list.childrenSize(),0))
          {
            $this.expand($this.getRootView().topOverlayer());
          }
          ;
        }
        ;
      }
      ;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,vaseWindow::Event?>")));
  self.m_list = fan.vaseGui.MenuList.make();
  self.m_list.m_owner = self;
  self.m_padding = fan.vaseGui.Insets.make(20);
  self.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_wrapContent);
  return;
}
fan.vaseGui.MenuItem.prototype.rootMenu = function()
{
  var list = fan.sys.ObjUtil.as(this.m_parent,fan.vaseGui.MenuList.$type);
  while (list != null)
  {
    if (fan.sys.ObjUtil.is(list.m_owner.m_parent,fan.vaseGui.Menu.$type))
    {
      return fan.sys.ObjUtil.as(list.m_owner.m_parent,fan.vaseGui.Menu.$type);
    }
    ;
    list = fan.sys.ObjUtil.as(list.m_owner.m_parent,fan.vaseGui.MenuList.$type);
  }
  ;
  return null;
}
fan.vaseGui.MenuItem.prototype.addParentTo = function(group)
{
  var list = fan.sys.ObjUtil.as(this.m_parent,fan.vaseGui.MenuList.$type);
  while (list != null)
  {
    group.add(fan.sys.ObjUtil.coerce(list,fan.vaseGui.Widget.$type));
    var owner = fan.sys.ObjUtil.coerce(list.m_owner,fan.vaseGui.MenuItem.$type);
    list = fan.sys.ObjUtil.as(owner.m_parent,fan.vaseGui.MenuList.$type);
  }
  ;
  return;
}
fan.vaseGui.MenuItem.prototype.expand = function(group)
{
  if (this.m_list.m_parent != null)
  {
    this.m_list.detach();
  }
  else
  {
    group.removeAll();
    this.addParentTo(group);
    group.add(this.m_list);
    var pos = fan.vaseGui.Coord.make(0,0);
    var rc = this.posOnWindow(pos);
    if (fan.sys.ObjUtil.is(this.m_parent,fan.vaseGui.Menu.$type))
    {
      this.m_list.m_layoutParam.m_offsetX = this.pixelToDp(pos.m_x);
      this.m_list.m_layoutParam.m_offsetY = this.pixelToDp(fan.sys.Int.plus(pos.m_y,this.height()));
    }
    else
    {
      this.m_list.m_layoutParam.m_offsetX = this.pixelToDp(fan.sys.Int.plus(pos.m_x,this.width()));
      this.m_list.m_layoutParam.m_offsetY = this.pixelToDp(pos.m_y);
    }
    ;
  }
  ;
  group.relayout();
  return;
}
fan.vaseGui.MenuItem.prototype.add = function(item)
{
  this.m_list.add(item);
  item.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_fixed);
  item.m_layoutParam.m_widthVal = fan.sys.Float.make(500.0);
  item.m_padding = fan.vaseGui.Insets.make(1);
  item.m_topLevel = false;
  return this;
}
fan.vaseGui.MenuItem.prototype.m_list = null;
fan.vaseGui.MenuItem.prototype.m_topLevel = false;
fan.vaseGui.Pane = fan.sys.Obj.$extend(fan.vaseGui.WidgetGroup);
fan.vaseGui.Pane.prototype.$ctor = function()
{
  fan.vaseGui.WidgetGroup.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.Pane.prototype.$typeof = function() { return fan.vaseGui.Pane.$type; }
fan.vaseGui.Pane.prototype.layoutChildren = function(force)
{
  var $this = this;
  var x = this.paddingLeft();
  var y = this.paddingTop();
  var hintsW = this.contentWidth();
  var hintsH = this.contentHeight();
  this.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u37,
    function(c,ignoreparam$1)
    {
      if (!c.m_layoutParam.m_ignore)
      {
        var size = c.bufferedPrefSize(hintsW,hintsH);
        var posX = c.m_layoutParam.prefX($this,hintsW,size.m_w);
        var posY = c.m_layoutParam.prefY($this,hintsH,size.m_h);
        var cx = fan.sys.Int.plus(x,posX);
        var cy = fan.sys.Int.plus(y,posY);
        c.layout(cx,cy,size.m_w,size.m_h,force);
      }
      ;
      return;
    }));
  return;
}
fan.vaseGui.Pane.prototype.prefContentSize = function()
{
  var $this = this;
  var maxX = 0;
  var maxY = 0;
  this.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u37,
    function(c,ignoreparam$1)
    {
      if (!c.m_layoutParam.m_ignore)
      {
        var size = c.bufferedPrefSize();
        var x = size.m_w;
        var y = size.m_h;
        var offsetX = $this.dpToPixel(c.m_layoutParam.m_offsetX);
        var offsetY = $this.dpToPixel(c.m_layoutParam.m_offsetY);
        if (fan.sys.ObjUtil.compareGT(offsetX,0))
        {
          x = fan.sys.Int.plus(x,offsetX);
        }
        ;
        if (fan.sys.ObjUtil.compareGT(offsetY,0))
        {
          y = fan.sys.Int.plus(y,offsetY);
        }
        ;
        if (fan.sys.ObjUtil.compareLT(maxX,x))
        {
          maxX = x;
        }
        ;
        if (fan.sys.ObjUtil.compareLT(maxY,y))
        {
          maxY = y;
        }
        ;
      }
      ;
      return;
    }));
  return fan.vaseGui.Dimension.make(maxX,maxY);
}
fan.vaseGui.Pane.make = function() {
  var self = new fan.vaseGui.Pane();
  fan.vaseGui.Pane.make$(self);
  return self;
  }
fan.vaseGui.Pane.make$ = function(self)
{
  fan.vaseGui.WidgetGroup.make$(self);
  return;
}
fan.vaseGui.ScrollBase = fan.sys.Obj.$extend(fan.vaseGui.Pane);
fan.vaseGui.ScrollBase.prototype.$ctor = function()
{
  fan.vaseGui.Pane.prototype.$ctor.call(this);
  var $this = this;
  this.m_offsetX = 0;
  this.m_offsetY = 0;
  this.m_barSize = fan.sys.Float.make(60.0);
  this.m_autoAdjustChildren = false;
  return;
}
fan.vaseGui.ScrollBase.prototype.$typeof = function() { return fan.vaseGui.ScrollBase.$type; }
fan.vaseGui.ScrollBase.prototype.hbar = function()
{
  return this.m_hbar;
}
fan.vaseGui.ScrollBase.prototype.hbar$ = function(it)
{
  this.m_hbar = it;
  return;
}
fan.vaseGui.ScrollBase.prototype.vbar = function()
{
  return this.m_vbar;
}
fan.vaseGui.ScrollBase.prototype.vbar$ = function(it)
{
  this.m_vbar = it;
  return;
}
fan.vaseGui.ScrollBase.prototype.offsetX = function()
{
  return this.m_offsetX;
}
fan.vaseGui.ScrollBase.prototype.offsetX$ = function(it)
{
  this.m_offsetX = it;
  return;
}
fan.vaseGui.ScrollBase.prototype.offsetY = function()
{
  return this.m_offsetY;
}
fan.vaseGui.ScrollBase.prototype.offsetY$ = function(it)
{
  this.m_offsetY = it;
  return;
}
fan.vaseGui.ScrollBase.prototype.barSize = function()
{
  return this.m_barSize;
}
fan.vaseGui.ScrollBase.prototype.barSize$ = function(it)
{
  this.m_barSize = it;
  return;
}
fan.vaseGui.ScrollBase.prototype.autoAdjustChildren = function()
{
  return this.m_autoAdjustChildren;
}
fan.vaseGui.ScrollBase.prototype.autoAdjustChildren$ = function(it)
{
  this.m_autoAdjustChildren = it;
  return;
}
fan.vaseGui.ScrollBase.prototype.animation = function()
{
  return this.m_animation;
}
fan.vaseGui.ScrollBase.prototype.animation$ = function(it)
{
  this.m_animation = it;
  return;
}
fan.vaseGui.ScrollBase.make = function() {
  var self = new fan.vaseGui.ScrollBase();
  fan.vaseGui.ScrollBase.make$(self);
  return self;
  }
fan.vaseGui.ScrollBase.make$ = function(self)
{
  var $this = self;
  fan.vaseGui.Pane.make$(self);
  ;
  self.m_clip = true;
  self.m_hbar = fan.vaseGui.ScrollBar.make(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u43,
    function(it)
    {
      it.m_vertical = false;
      it.m_barSize = $this.m_barSize;
      it.m_layoutParam.m_ignore = true;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,vaseGui::ScrollBar>?")));
  self.m_vbar = fan.vaseGui.ScrollBar.make(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u43,
    function(it)
    {
      it.m_vertical = true;
      it.m_barSize = $this.m_barSize;
      it.m_layoutParam.m_ignore = true;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,vaseGui::ScrollBar>?")));
  self.m_hbar.onPosChanged().add(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u42,
    function(e)
    {
      if (fan.sys.ObjUtil.equals(e.m_field,fan.vaseGui.ScrollBar.$type.slot("curPos")))
      {
        var newVal = fan.sys.ObjUtil.coerce(e.newValue(),fan.sys.Float.$type);
        var oldVal = fan.sys.ObjUtil.coerce(e.oldValue(),fan.sys.Float.$type);
        $this.offsetX$(fan.sys.Float.toInt(newVal));
        if ($this.m_autoAdjustChildren)
        {
          var dx = fan.sys.Float.toInt(fan.sys.Float.minus(newVal,oldVal));
          $this.each(fan.sys.Func.make$closure(
            fan.vaseGui.$clos$_u34,
            function(it,ignoreparam$1)
            {
              it.x$(fan.sys.Int.plus(it.x(),dx));
              return;
            }));
        }
        ;
        $this.onViewportChanged();
        $this.repaint();
      }
      ;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,vaseWindow::Event?>")));
  self.m_vbar.onPosChanged().add(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u42,
    function(e)
    {
      if (fan.sys.ObjUtil.equals(e.m_field,fan.vaseGui.ScrollBar.$type.slot("curPos")))
      {
        var newVal = fan.sys.ObjUtil.coerce(e.newValue(),fan.sys.Float.$type);
        var oldVal = fan.sys.ObjUtil.coerce(e.oldValue(),fan.sys.Float.$type);
        $this.offsetY$(fan.sys.Float.toInt(newVal));
        if ($this.m_autoAdjustChildren)
        {
          var dy = fan.sys.Float.toInt(fan.sys.Float.minus(newVal,oldVal));
          $this.each(fan.sys.Func.make$closure(
            fan.vaseGui.$clos$_u34,
            function(it,ignoreparam$1)
            {
              it.y$(fan.sys.Int.plus(it.y(),dy));
              return;
            }));
        }
        ;
        $this.onViewportChanged();
        $this.repaint();
      }
      ;
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,vaseWindow::Event?>")));
  self.doAdd(self.m_hbar);
  self.doAdd(self.m_vbar);
  self.m_layoutParam.m_heightType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent);
  self.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent);
  self.m_padding = fan.vaseGui.Insets.make(0,fan.sys.ObjUtil.coerce(fan.sys.Float.toInt(self.m_barSize),fan.sys.Int.$type.toNullable()),fan.sys.ObjUtil.coerce(fan.sys.Float.toInt(self.m_barSize),fan.sys.Int.$type.toNullable()),fan.sys.ObjUtil.coerce(0,fan.sys.Int.$type.toNullable()));
  return;
}
fan.vaseGui.ScrollBase.prototype.onViewportChanged = function()
{
  return;
}
fan.vaseGui.ScrollBase.prototype.doAdd = function(child)
{
  fan.vaseGui.Pane.prototype.add.call(this,fan.sys.ObjUtil.coerce(child,fan.vaseGui.Widget.$type));
  return;
}
fan.vaseGui.ScrollBase.prototype.viewportWidth = function()
{
  return fan.sys.Int.toFloat(this.contentWidth());
}
fan.vaseGui.ScrollBase.prototype.viewportHeight = function()
{
  return fan.sys.Int.toFloat(this.contentHeight());
}
fan.vaseGui.ScrollBase.prototype.contentMaxWidth = function()
{
  var bs = this.prefContentSize();
  return fan.sys.Int.toFloat(bs.m_w);
}
fan.vaseGui.ScrollBase.prototype.contentMaxHeight = function()
{
  var bs = this.prefContentSize();
  return fan.sys.Int.toFloat(bs.m_h);
}
fan.vaseGui.ScrollBase.prototype.layoutScroolBar = function()
{
  var barSize = this.dpToPixel(this.m_barSize);
  this.m_hbar.width$(fan.sys.Int.plus(this.contentWidth(),barSize));
  this.m_hbar.height$(barSize);
  this.m_hbar.x$(this.paddingLeft());
  this.m_hbar.y$(fan.sys.Int.minus(this.height(),barSize));
  this.m_hbar.m_max = this.contentMaxWidth();
  this.m_hbar.m_viewport = this.viewportWidth();
  if (fan.sys.ObjUtil.compareLE(this.m_hbar.m_max,this.m_hbar.m_viewport))
  {
    this.m_hbar.enabled$(false);
    this.m_hbar.visible$(false);
    this.offsetX$(0);
    this.m_hbar.m_max = this.m_hbar.m_viewport;
  }
  else
  {
    this.m_hbar.enabled$(true);
    this.m_hbar.visible$(true);
  }
  ;
  this.m_vbar.width$(barSize);
  this.m_vbar.height$(this.contentHeight());
  this.m_vbar.x$(fan.sys.Int.minus(this.width(),barSize));
  this.m_vbar.y$(this.paddingTop());
  this.m_vbar.m_max = this.contentMaxHeight();
  this.m_vbar.m_viewport = this.viewportHeight();
  if (fan.sys.ObjUtil.compareLE(this.m_vbar.m_max,this.m_vbar.m_viewport))
  {
    this.m_vbar.enabled$(false);
    this.m_vbar.visible$(false);
    this.m_vbar.m_max = this.m_vbar.m_viewport;
  }
  else
  {
    this.m_vbar.enabled$(true);
    this.m_vbar.visible$(true);
  }
  ;
  if (this.m_autoAdjustChildren)
  {
    this.adjustContent();
  }
  ;
  return;
}
fan.vaseGui.ScrollBase.prototype.layoutChildren = function(force)
{
  this.m_hbar.detach();
  this.m_vbar.detach();
  this.layoutContent(force);
  this.layoutScroolBar();
  this.doAdd(this.m_hbar);
  this.doAdd(this.m_vbar);
  this.onViewportChanged();
  return;
}
fan.vaseGui.ScrollBase.prototype.layoutContent = function(force)
{
  fan.vaseGui.Pane.prototype.layoutChildren.call(this,force);
  return;
}
fan.vaseGui.ScrollBase.prototype.adjustContent = function()
{
  var $this = this;
  this.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u34,
    function(it,ignoreparam$1)
    {
      it.x$(fan.sys.Int.minus(it.x(),$this.offsetX()));
      it.y$(fan.sys.Int.minus(it.y(),$this.offsetY()));
      return;
    }));
  return;
}
fan.vaseGui.ScrollBase.prototype.motionEvent = function(e)
{
  fan.vaseGui.Pane.prototype.motionEvent.call(this,e);
  if (e.consumed())
  {
    return;
  }
  ;
  if (fan.sys.ObjUtil.compareLE(this.m_vbar.m_max,this.m_vbar.m_viewport))
  {
    return;
  }
  ;
  if ((fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_wheel)) && e.delta() != null))
  {
    var pos = fan.sys.Float.plusInt(this.m_vbar.m_curPos,fan.sys.Int.mult(fan.sys.ObjUtil.coerce(e.delta(),fan.sys.Int.$type),this.dpToPixel(fan.sys.Float.make(80.0))));
    this.m_vbar.setCurPos(pos,true);
    this.m_vbar.repaint();
    e.consume();
  }
  else
  {
    if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_pressed)))
    {
      if (this.m_animation != null)
      {
        this.m_animation.stop();
      }
      ;
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.ScrollBase.prototype.startAnimation = function(anim)
{
  if (this.m_animation != null)
  {
    this.m_animation.stop();
  }
  ;
  this.getRootView().m_animManager.add(anim);
  anim.start();
  this.m_animation = anim;
  return;
}
fan.vaseGui.ScrollBase.prototype.animatOverScroll = function()
{
  var $this = this;
  if (this.m_vbar.isOverScroll())
  {
    var anim = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.Animation.make(),fan.sys.Func.make$closure(
      fan.vaseGui.$clos$_u44,
      function(it)
      {
        it.m_duration = 2000;
        it.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.OverScrollAnimChannel.make(),fan.sys.Func.make$closure(
          fan.vaseGui.$clos$_u45,
          function(it)
          {
            it.m_target = $this.m_vbar;
            return;
          })),fan.vaseGui.OverScrollAnimChannel.$type));
        return;
      })),fan.vaseGui.Animation.$type);
    this.startAnimation(anim);
  }
  ;
  return;
}
fan.vaseGui.ScrollBase.prototype.gestureEvent = function(e)
{
  var $this = this;
  fan.vaseGui.Pane.prototype.gestureEvent.call(this,e);
  if (e.consumed())
  {
    return;
  }
  ;
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_drag)))
  {
    var pos = fan.sys.Float.minusInt(this.m_vbar.m_curPos,fan.sys.ObjUtil.coerce(e.m_deltaY,fan.sys.Int.$type));
    this.m_vbar.setCurPos(pos,true,true);
    this.m_vbar.repaint();
    e.consume();
  }
  else
  {
    if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_fling)))
    {
      if (this.m_vbar.isOverScroll())
      {
        this.animatOverScroll();
      }
      else
      {
        var anim = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.Animation.make(),fan.sys.Func.make$closure(
          fan.vaseGui.$clos$_u44,
          function(it)
          {
            it.m_duration = 2000;
            it.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.ScrollAnimChannel.make(),fan.sys.Func.make$closure(
              fan.vaseGui.$clos$_u46,
              function(it)
              {
                it.m_target = $this.m_vbar;
                it.m_startV = fan.sys.Float.toFloat(fan.sys.ObjUtil.coerce(e.m_speedY,fan.sys.Float.$type));
                return;
              })),fan.vaseGui.ScrollAnimChannel.$type));
            return;
          })),fan.vaseGui.Animation.$type);
        this.startAnimation(anim);
      }
      ;
      this.m_vbar.repaint();
    }
    else
    {
      if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_drop)))
      {
        this.animatOverScroll();
      }
      ;
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.ScrollBase.prototype.m_hbar = null;
fan.vaseGui.ScrollBase.prototype.m_vbar = null;
fan.vaseGui.ScrollBase.prototype.m_offsetX = 0;
fan.vaseGui.ScrollBase.prototype.m_offsetY = 0;
fan.vaseGui.ScrollBase.prototype.m_barSize = fan.sys.Float.make(0);
fan.vaseGui.ScrollBase.prototype.m_autoAdjustChildren = false;
fan.vaseGui.ScrollBase.prototype.m_animation = null;
fan.vaseGui.ScrollPane = fan.sys.Obj.$extend(fan.vaseGui.ScrollBase);
fan.vaseGui.ScrollPane.prototype.$ctor = function()
{
  fan.vaseGui.ScrollBase.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.ScrollPane.prototype.$typeof = function() { return fan.vaseGui.ScrollPane.$type; }
fan.vaseGui.ScrollPane.make = function() {
  var self = new fan.vaseGui.ScrollPane();
  fan.vaseGui.ScrollPane.make$(self);
  return self;
  }
fan.vaseGui.ScrollPane.make$ = function(self)
{
  fan.vaseGui.ScrollBase.make$(self);
  self.m_autoAdjustChildren = true;
  return;
}
fan.vaseGui.ContentPane = fan.sys.Obj.$extend(fan.vaseGui.Pane);
fan.vaseGui.ContentPane.prototype.$ctor = function()
{
  fan.vaseGui.Pane.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.ContentPane.prototype.$typeof = function() { return fan.vaseGui.ContentPane.$type; }
fan.vaseGui.ContentPane.make = function() {
  var self = new fan.vaseGui.ContentPane();
  fan.vaseGui.ContentPane.make$(self);
  return self;
  }
fan.vaseGui.ContentPane.make$ = function(self)
{
  fan.vaseGui.Pane.make$(self);
  return;
}
fan.vaseGui.ContentPane.prototype.content = function()
{
  return this.m_content;
}
fan.vaseGui.ContentPane.prototype.content$ = function(it)
{
  this.remove(this.m_content);
  this.doAdd(it);
  this.m_content = it;
  return;
}
fan.vaseGui.ContentPane.prototype.add = function(child)
{
  if (this.m_content == null)
  {
    this.content$(child);
  }
  else
  {
    throw fan.sys.UnsupportedErr.make("ContentPane not support add, pelease using content or daoAdd.");
  }
  ;
  return this;
}
fan.vaseGui.ContentPane.prototype.doAdd = function(child)
{
  fan.vaseGui.Pane.prototype.add.call(this,fan.sys.ObjUtil.coerce(child,fan.vaseGui.Widget.$type));
  return;
}
fan.vaseGui.ContentPane.prototype.m_content = null;
fan.vaseGui.Frame = fan.sys.Obj.$extend(fan.vaseGui.ContentPane);
fan.vaseGui.Frame.prototype.$ctor = function()
{
  fan.vaseGui.ContentPane.prototype.$ctor.call(this);
  var $this = this;
  this.m_antialias = true;
  this.m_styleManager = fan.vaseGui.StyleManager.make();
  this.m_animManager = fan.vaseGui.AnimManager.make();
  this.m_modal = false;
  this.m_background = ((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_white);
  this.m_inited = false;
  this.m_onWindowStateChange$Store = "_once_";
  this.m_onOpened$Store = "_once_";
  this.m_onTouchEvent = fan.vaseWindow.EventListeners.make();
  return;
}
fan.vaseGui.Frame.prototype.$typeof = function() { return fan.vaseGui.Frame.$type; }
fan.vaseGui.Frame.prototype.view = function()
{
  return this.m_view;
}
fan.vaseGui.Frame.prototype.view$ = function(it)
{
  this.m_view = it;
  return;
}
fan.vaseGui.Frame.prototype.focusWidget = function()
{
  return this.m_focusWidget;
}
fan.vaseGui.Frame.prototype.focusWidget$ = function(it)
{
  this.m_focusWidget = it;
  return;
}
fan.vaseGui.Frame.prototype.mouseOverWidget = function()
{
  return this.m_mouseOverWidget;
}
fan.vaseGui.Frame.prototype.mouseOverWidget$ = function(it)
{
  this.m_mouseOverWidget = it;
  return;
}
fan.vaseGui.Frame.prototype.topLayer = function()
{
  return this.m_topLayer;
}
fan.vaseGui.Frame.prototype.topLayer$ = function(it)
{
  this.m_topLayer = it;
  return;
}
fan.vaseGui.Frame.prototype.antialias = function()
{
  return this.m_antialias;
}
fan.vaseGui.Frame.prototype.antialias$ = function(it)
{
  this.m_antialias = it;
  return;
}
fan.vaseGui.Frame.prototype.styleManager = function()
{
  return this.m_styleManager;
}
fan.vaseGui.Frame.prototype.styleManager$ = function(it)
{
  this.m_styleManager = it;
  return;
}
fan.vaseGui.Frame.prototype.findStyle = function(widget)
{
  return this.m_styleManager.find(widget);
}
fan.vaseGui.Frame.prototype.animManager = function()
{
  return this.m_animManager;
}
fan.vaseGui.Frame.prototype.animManager$ = function(it)
{
  this.m_animManager = it;
  return;
}
fan.vaseGui.Frame.prototype.host = function()
{
  return this.m_view.host();
}
fan.vaseGui.Frame.prototype.modal = function()
{
  return this.m_modal;
}
fan.vaseGui.Frame.prototype.modal$ = function(it)
{
  this.m_modal = it;
  return;
}
fan.vaseGui.Frame.prototype.background = function()
{
  return this.m_background;
}
fan.vaseGui.Frame.prototype.background$ = function(it)
{
  this.m_background = it;
  return;
}
fan.vaseGui.Frame.prototype.inited = function()
{
  return this.m_inited;
}
fan.vaseGui.Frame.prototype.inited$ = function(it)
{
  this.m_inited = it;
  return;
}
fan.vaseGui.Frame.make = function() {
  var self = new fan.vaseGui.Frame();
  fan.vaseGui.Frame.make$(self);
  return self;
  }
fan.vaseGui.Frame.make$ = function(self)
{
  fan.vaseGui.ContentPane.make$(self);
  ;
  self.m_id = "frame";
  self.width$(0);
  self.height$(0);
  self.m_useRenderCache = false;
  return;
}
fan.vaseGui.Frame.prototype.show = function()
{
  var win = fan.vaseWindow.Toolkit.cur().window(null);
  if (win == null)
  {
    this.m_view = fan.vaseGui.WinView.make(this);
    fan.vaseWindow.Toolkit.cur().window(this.m_view);
  }
  else
  {
    this.m_view = fan.sys.ObjUtil.coerce(win.view(),fan.vaseGui.WinView.$type.toNullable());
    this.m_view.pushFrame(this);
  }
  ;
  return;
}
fan.vaseGui.Frame.prototype.pop = function()
{
  this.m_view.popFrame();
  return;
}
fan.vaseGui.Frame.prototype.topOverlayer = function()
{
  if (this.m_topLayer == null)
  {
    this.m_topLayer = fan.vaseGui.Pane.make();
    this.m_topLayer.m_useRenderCache = false;
    this.doAdd(this.m_topLayer);
  }
  ;
  this.m_topLayer.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent);
  this.m_topLayer.m_layoutParam.m_heightType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent);
  this.m_topLayer.width$(this.width());
  this.m_topLayer.height$(this.height());
  this.m_topLayer.x$(0);
  this.m_topLayer.y$(0);
  return fan.sys.ObjUtil.coerce(this.m_topLayer,fan.vaseGui.WidgetGroup.$type);
}
fan.vaseGui.Frame.prototype.onUpdate = function()
{
  if (this.m_animManager.updateFrame())
  {
    this.host().repaint();
  }
  ;
  return;
}
fan.vaseGui.Frame.prototype.detach = function(doRelayout)
{
  if (doRelayout === undefined) doRelayout = true;
  if (fan.sys.ObjUtil.equals(this.m_view.m_oldFrame,this))
  {
    this.m_view.m_oldFrame = null;
  }
  ;
  return;
}
fan.vaseGui.Frame.prototype.repaint = function(dirty)
{
  if (dirty === undefined) dirty = null;
  this.m_renderCacheDirty = true;
  if (dirty != null)
  {
    dirty = fan.vaseGraphics.Rect.make(fan.sys.Int.plus(dirty.m_x,this.x()),fan.sys.Int.plus(dirty.m_y,this.y()),dirty.m_w,dirty.m_h);
  }
  ;
  (function($this) { var $_u47 = $this.m_view.host(); if ($_u47 == null) return null; return $_u47.repaint(dirty); })(this);
  return;
}
fan.vaseGui.Frame.prototype.relayout = function()
{
  fan.vaseGui.ContentPane.prototype.relayout.call(this);
  this.m_view.m_layoutDirty = 1;
  (function($this) { var $_u48 = $this.m_view.host(); if ($_u48 == null) return null; return $_u48.repaint(null); })(this);
  return;
}
fan.vaseGui.Frame.prototype.doPaint = function(g)
{
  g.antialias$(this.m_antialias);
  g.brush$(this.m_background);
  g.fillRect(0,0,this.width(),this.height());
  g.push();
  g.transform(fan.vaseMath.Transform2D.make().translate(fan.sys.Int.toFloat(this.content().x()),fan.sys.Int.toFloat(this.content().y())));
  this.content().paint(g);
  if (this.m_modal)
  {
    g.brush$(((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_black));
    g.alpha$(100);
    g.fillRect(0,0,this.width(),this.height());
    g.alpha$(255);
  }
  ;
  g.pop();
  if (this.m_topLayer != null)
  {
    g.push();
    g.transform(fan.vaseMath.Transform2D.make().translate(fan.sys.Int.toFloat(this.m_topLayer.x()),fan.sys.Int.toFloat(this.m_topLayer.y())));
    this.m_topLayer.paint(g);
    g.pop();
  }
  ;
  return;
}
fan.vaseGui.Frame.prototype.onRemove = function(w)
{
  if (this.m_focusWidget === w)
  {
    this.m_focusWidget = null;
  }
  ;
  if (this.m_mouseOverWidget === w)
  {
    this.m_mouseOverWidget = null;
  }
  ;
  if (this.m_topLayer === w.m_parent)
  {
    this.m_modal = false;
  }
  ;
  return;
}
fan.vaseGui.Frame.prototype.focusIt = function(w)
{
  var e = fan.vaseWindow.Event.make();
  e.data$(fan.sys.ObjUtil.coerce(false,fan.sys.Obj.$type.toNullable()));
  (function($this) { var $_u49 = (function($this) { var $_u50 = $this.m_focusWidget; if ($_u50 == null) return null; return $_u50.onFocusChanged(); })($this); if ($_u49 == null) return null; return $_u49.fire(e); })(this);
  this.m_focusWidget = w;
  this.m_view.host().focus();
  e.data$(fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type.toNullable()));
  (function($this) { var $_u51 = (function($this) { var $_u52 = $this.m_focusWidget; if ($_u52 == null) return null; return $_u52.onFocusChanged(); })($this); if ($_u51 == null) return null; return $_u51.fire(e); })(this);
  return;
}
fan.vaseGui.Frame.prototype.mouseCapture = function(w)
{
  if (this.m_mouseOverWidget === w)
  {
    return;
  }
  ;
  (function($this) { var $_u53 = $this.m_mouseOverWidget; if ($_u53 == null) return null; return $_u53.mouseExit(); })(this);
  this.m_mouseOverWidget = w;
  w.mouseEnter();
  return;
}
fan.vaseGui.Frame.prototype.hasFocus = function()
{
  return this.m_view.host().hasFocus();
}
fan.vaseGui.Frame.prototype.isFocusWidiget = function(w)
{
  if (!this.hasFocus())
  {
    return false;
  }
  ;
  return w === this.m_focusWidget;
}
fan.vaseGui.Frame.prototype.gestureEvent = function(e)
{
  if (this.m_modal)
  {
    this.m_topLayer.gestureEvent(e);
  }
  else
  {
    fan.vaseGui.ContentPane.prototype.gestureEvent.call(this,e);
  }
  ;
  return;
}
fan.vaseGui.Frame.prototype.motionEvent = function(e)
{
  e.relativeX$(e.x());
  e.relativeY$(e.y());
  if (this.m_mouseOverWidget != null)
  {
    var p = fan.vaseGui.Coord.make(fan.sys.ObjUtil.coerce(e.x(),fan.sys.Int.$type),fan.sys.ObjUtil.coerce(e.y(),fan.sys.Int.$type));
    var b = this.m_mouseOverWidget.mapToRelative(p);
    if ((!b || !this.m_mouseOverWidget.contains(p.m_x,p.m_y)))
    {
      this.m_mouseOverWidget.mouseExit();
      this.m_mouseOverWidget = null;
    }
    ;
  }
  ;
  this.m_onTouchEvent.fire(e);
  if (e.consumed())
  {
    return;
  }
  ;
  if (this.m_modal)
  {
    this.m_topLayer.motionEvent(e);
  }
  else
  {
    fan.vaseGui.ContentPane.prototype.motionEvent.call(this,e);
  }
  ;
  return;
}
fan.vaseGui.Frame.prototype.keyEvent = function(e)
{
  if (this.m_focusWidget == null)
  {
    return;
  }
  ;
  if (this.m_focusWidget.enabled())
  {
    this.m_focusWidget.keyEvent(e);
  }
  ;
  return;
}
fan.vaseGui.Frame.prototype.windowEvent = function(e)
{
  this.onWindowStateChange().fire(e);
  return;
}
fan.vaseGui.Frame.prototype.onWindowStateChange = function()
{
  if (this.m_onWindowStateChange$Store === "_once_")
  {
    this.m_onWindowStateChange$Store = this.onWindowStateChange$Once$Frame();
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_onWindowStateChange$Store,fan.vaseWindow.EventListeners.$type);
}
fan.vaseGui.Frame.prototype.onOpened = function()
{
  if (this.m_onOpened$Store === "_once_")
  {
    this.m_onOpened$Store = this.onOpened$Once$Frame();
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_onOpened$Store,fan.vaseWindow.EventListeners.$type);
}
fan.vaseGui.Frame.prototype.onTouchEvent = function()
{
  return this.m_onTouchEvent;
}
fan.vaseGui.Frame.prototype.onTouchEvent$ = function(it)
{
  this.m_onTouchEvent = it;
  return;
}
fan.vaseGui.Frame.prototype.onWindowStateChange$Once$Frame = function()
{
  return fan.vaseWindow.EventListeners.make();
}
fan.vaseGui.Frame.prototype.onOpened$Once$Frame = function()
{
  return fan.vaseWindow.EventListeners.make();
}
fan.vaseGui.Frame.prototype.m_view = null;
fan.vaseGui.Frame.prototype.m_focusWidget = null;
fan.vaseGui.Frame.prototype.m_mouseOverWidget = null;
fan.vaseGui.Frame.prototype.m_topLayer = null;
fan.vaseGui.Frame.prototype.m_antialias = false;
fan.vaseGui.Frame.prototype.m_styleManager = null;
fan.vaseGui.Frame.prototype.m_animManager = null;
fan.vaseGui.Frame.prototype.m_modal = false;
fan.vaseGui.Frame.prototype.m_background = null;
fan.vaseGui.Frame.prototype.m_inited = false;
fan.vaseGui.Frame.prototype.m_onTouchEvent = null;
fan.vaseGui.Frame.prototype.m_onWindowStateChange$Store = null;
fan.vaseGui.Frame.prototype.m_onOpened$Store = null;
fan.vaseGui.FlowLayout = fan.sys.Obj.$extend(fan.vaseGui.WidgetGroup);
fan.vaseGui.FlowLayout.prototype.$ctor = function()
{
  fan.vaseGui.WidgetGroup.prototype.$ctor.call(this);
  var $this = this;
  this.m_spacing = 0;
  return;
}
fan.vaseGui.FlowLayout.prototype.$typeof = function() { return fan.vaseGui.FlowLayout.$type; }
fan.vaseGui.FlowLayout.prototype.spacing = function()
{
  return this.m_spacing;
}
fan.vaseGui.FlowLayout.prototype.spacing$ = function(it)
{
  this.m_spacing = it;
  return;
}
fan.vaseGui.FlowLayout.prototype.layoutChildren = function(force)
{
  var x = this.paddingLeft();
  var y = this.paddingTop();
  var hintsW = this.contentWidth();
  var hintsH = this.contentHeight();
  return;
}
fan.vaseGui.FlowLayout.prototype.prefContentSize = function()
{
  var $this = this;
  var w = 0;
  var h = 0;
  this.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u36,
    function(c,i)
    {
      var size = c.bufferedPrefSize(-1,-1);
      return;
    }));
  return fan.vaseGui.Dimension.make(w,h);
}
fan.vaseGui.FlowLayout.make = function() {
  var self = new fan.vaseGui.FlowLayout();
  fan.vaseGui.FlowLayout.make$(self);
  return self;
  }
fan.vaseGui.FlowLayout.make$ = function(self)
{
  fan.vaseGui.WidgetGroup.make$(self);
  ;
  return;
}
fan.vaseGui.FlowLayout.prototype.m_spacing = 0;
fan.vaseGui.EdgePane = fan.sys.Obj.$extend(fan.vaseGui.Pane);
fan.vaseGui.EdgePane.prototype.$ctor = function()
{
  fan.vaseGui.Pane.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.EdgePane.prototype.$typeof = function() { return fan.vaseGui.EdgePane.$type; }
fan.vaseGui.EdgePane.make = function() {
  var self = new fan.vaseGui.EdgePane();
  fan.vaseGui.EdgePane.make$(self);
  return self;
  }
fan.vaseGui.EdgePane.make$ = function(self)
{
  fan.vaseGui.Pane.make$(self);
  self.m_layoutParam.m_heightType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent);
  self.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent);
  return;
}
fan.vaseGui.EdgePane.prototype.top = function()
{
  return this.m_top;
}
fan.vaseGui.EdgePane.prototype.top$ = function(it)
{
  fan.sys.ObjUtil.coerce(this.remove(this.m_top),fan.vaseGui.EdgePane.$type).add(fan.sys.ObjUtil.coerce(it,fan.vaseGui.Widget.$type));
  this.m_top = it;
  return;
}
fan.vaseGui.EdgePane.prototype.bottom = function()
{
  return this.m_bottom;
}
fan.vaseGui.EdgePane.prototype.bottom$ = function(it)
{
  fan.sys.ObjUtil.coerce(this.remove(this.m_bottom),fan.vaseGui.EdgePane.$type).add(fan.sys.ObjUtil.coerce(it,fan.vaseGui.Widget.$type));
  this.m_bottom = it;
  return;
}
fan.vaseGui.EdgePane.prototype.left = function()
{
  return this.m_left;
}
fan.vaseGui.EdgePane.prototype.left$ = function(it)
{
  fan.sys.ObjUtil.coerce(this.remove(this.m_left),fan.vaseGui.EdgePane.$type).add(fan.sys.ObjUtil.coerce(it,fan.vaseGui.Widget.$type));
  this.m_left = it;
  return;
}
fan.vaseGui.EdgePane.prototype.right = function()
{
  return this.m_right;
}
fan.vaseGui.EdgePane.prototype.right$ = function(it)
{
  fan.sys.ObjUtil.coerce(this.remove(this.m_right),fan.vaseGui.EdgePane.$type).add(fan.sys.ObjUtil.coerce(it,fan.vaseGui.Widget.$type));
  this.m_right = it;
  return;
}
fan.vaseGui.EdgePane.prototype.center = function()
{
  return this.m_center;
}
fan.vaseGui.EdgePane.prototype.center$ = function(it)
{
  fan.sys.ObjUtil.coerce(this.remove(this.m_center),fan.vaseGui.EdgePane.$type).add(fan.sys.ObjUtil.coerce(it,fan.vaseGui.Widget.$type));
  this.m_center = it;
  return;
}
fan.vaseGui.EdgePane.prototype.prefContentSize = function()
{
  var result = fan.vaseGui.Dimension.make(0,0);
  result = this.pref(this.top());
  var top_w = result.m_w;
  var top_h = result.m_h;
  result = this.pref(this.bottom());
  var bottom_w = result.m_w;
  var bottom_h = result.m_h;
  result = this.pref(this.left());
  var left_w = result.m_w;
  var left_h = result.m_h;
  result = this.pref(this.right());
  var right_w = result.m_w;
  var right_h = result.m_h;
  var center = this.pref(this.center());
  var w = fan.sys.Int.max(fan.sys.Int.max(fan.sys.Int.plus(fan.sys.Int.plus(left_w,center.m_w),right_w),top_w),bottom_w);
  var h = fan.sys.Int.plus(fan.sys.Int.plus(top_h,bottom_h),fan.sys.Int.max(fan.sys.Int.max(left_h,center.m_h),right_h));
  result.m_w = w;
  result.m_h = h;
  return result;
}
fan.vaseGui.EdgePane.prototype.pref = function(w)
{
  if (w == null)
  {
    return fan.vaseGui.Dimension.make(0,0);
  }
  ;
  return w.bufferedPrefSize();
}
fan.vaseGui.EdgePane.prototype.layoutChildren = function(force)
{
  var x = this.paddingLeft();
  var y = this.paddingTop();
  var w = this.contentWidth();
  var h = this.contentHeight();
  if (this.top() != null)
  {
    var prefh = this.top().bufferedPrefSize().m_h;
    this.top().layout(x,y,w,prefh,force);
    y = fan.sys.Int.plus(y,prefh);
    h = fan.sys.Int.minus(h,prefh);
  }
  ;
  if (this.bottom() != null)
  {
    var prefh = this.bottom().bufferedPrefSize().m_h;
    this.bottom().layout(x,fan.sys.Int.minus(fan.sys.Int.plus(y,h),prefh),w,prefh,force);
    h = fan.sys.Int.minus(h,prefh);
  }
  ;
  if (this.left() != null)
  {
    var prefw = this.left().bufferedPrefSize().m_w;
    var prefh = h;
    this.left().layout(x,y,prefw,prefh,force);
    x = fan.sys.Int.plus(x,prefw);
    w = fan.sys.Int.minus(w,prefw);
  }
  ;
  if (this.right() != null)
  {
    var prefw = this.right().bufferedPrefSize().m_w;
    var prefh = h;
    this.right().layout(fan.sys.Int.minus(fan.sys.Int.plus(x,w),prefw),y,prefw,prefh,force);
    w = fan.sys.Int.minus(w,prefw);
  }
  ;
  var center = this.center();
  if (center != null)
  {
    center.layout(x,y,w,h,force);
  }
  ;
  return;
}
fan.vaseGui.EdgePane.prototype.m_top = null;
fan.vaseGui.EdgePane.prototype.m_bottom = null;
fan.vaseGui.EdgePane.prototype.m_left = null;
fan.vaseGui.EdgePane.prototype.m_right = null;
fan.vaseGui.EdgePane.prototype.m_center = null;
fan.vaseGui.ToggleButton = fan.sys.Obj.$extend(fan.vaseGui.ButtonBase);
fan.vaseGui.ToggleButton.prototype.$ctor = function()
{
  fan.vaseGui.ButtonBase.prototype.$ctor.call(this);
  var $this = this;
  this.m_selected = false;
  return;
}
fan.vaseGui.ToggleButton.prototype.$typeof = function() { return fan.vaseGui.ToggleButton.$type; }
fan.vaseGui.ToggleButton.prototype.selected = function()
{
  return this.m_selected;
}
fan.vaseGui.ToggleButton.prototype.selected$ = function(it)
{
  var e = fan.vaseWindow.StateChangedEvent.make(fan.sys.ObjUtil.coerce(this.m_selected,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(it,fan.sys.Obj.$type.toNullable()),fan.vaseGui.ToggleButton.$type.slot("selected"),this);
  this.onStateChanged().fire(e);
  this.m_selected = it;
  return;
}
fan.vaseGui.ToggleButton.make = function() {
  var self = new fan.vaseGui.ToggleButton();
  fan.vaseGui.ToggleButton.make$(self);
  return self;
  }
fan.vaseGui.ToggleButton.make$ = function(self)
{
  fan.vaseGui.ButtonBase.make$(self);
  ;
  self.text$("ToggleButton");
  self.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent);
  return;
}
fan.vaseGui.ToggleButton.prototype.clicked = function()
{
  fan.vaseGui.ButtonBase.prototype.clicked.call(this);
  this.selected$(!this.selected());
  this.repaint();
  return;
}
fan.vaseGui.ToggleButton.prototype.prefContentSize = function()
{
  var size = fan.vaseGui.ButtonBase.prototype.prefContentSize.call(this);
  return fan.vaseGui.Dimension.make(fan.sys.Int.plus(size.m_w,fan.sys.Int.mult(size.m_h,2)),fan.sys.Float.toInt(fan.sys.Int.multFloat(size.m_h,fan.sys.Float.make(1.3))));
}
fan.vaseGui.ToggleButton.prototype.m_selected = false;
fan.vaseGui.RadioButton = fan.sys.Obj.$extend(fan.vaseGui.ToggleButton);
fan.vaseGui.RadioButton.prototype.$ctor = function()
{
  fan.vaseGui.ToggleButton.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.RadioButton.prototype.$typeof = function() { return fan.vaseGui.RadioButton.$type; }
fan.vaseGui.RadioButton.prototype.clicked = function()
{
  var $this = this;
  if (this.m_parent == null)
  {
    fan.vaseGui.ToggleButton.prototype.clicked.call(this);
  }
  ;
  if (fan.sys.ObjUtil.equals(this.selected(),true))
  {
    return;
  }
  ;
  (function($this) { var $_u54 = $this.m_parent; if ($_u54 == null) return null; return $_u54.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u55,
    function(w,ignoreparam$1)
    {
      if (fan.sys.ObjUtil.is(w,fan.vaseGui.RadioButton.$type))
      {
        var r = fan.sys.ObjUtil.coerce(w,fan.vaseGui.RadioButton.$type);
        if (r.selected())
        {
          r.selected$(false);
          r.repaint();
        }
        ;
      }
      ;
      return;
    })); })(this);
  this.selected$(true);
  this.repaint();
  return;
}
fan.vaseGui.RadioButton.make = function() {
  var self = new fan.vaseGui.RadioButton();
  fan.vaseGui.RadioButton.make$(self);
  return self;
  }
fan.vaseGui.RadioButton.make$ = function(self)
{
  fan.vaseGui.ToggleButton.make$(self);
  return;
}
fan.vaseGui.Switch = fan.sys.Obj.$extend(fan.vaseGui.ToggleButton);
fan.vaseGui.Switch.prototype.$ctor = function()
{
  fan.vaseGui.ToggleButton.prototype.$ctor.call(this);
  var $this = this;
  this.m_animPostion = fan.sys.Float.make(0.0);
  return;
}
fan.vaseGui.Switch.prototype.$typeof = function() { return fan.vaseGui.Switch.$type; }
fan.vaseGui.Switch.prototype.animPostion = function()
{
  return this.m_animPostion;
}
fan.vaseGui.Switch.prototype.animPostion$ = function(it)
{
  this.m_animPostion = it;
  return;
}
fan.vaseGui.Switch.prototype.clicked = function()
{
  var $this = this;
  fan.vaseGui.ToggleButton.prototype.clicked.call(this);
  var afrom = fan.sys.Float.make(0.0);
  var ato = fan.sys.Float.make(1.0);
  if (!this.selected())
  {
    afrom = fan.sys.Float.make(1.0);
    ato = fan.sys.Float.make(0.0);
  }
  ;
  var anim = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.Animation.make(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u44,
    function(it)
    {
      it.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.FloatPropertyAnimChannel.make($this,fan.vaseGui.Switch.$type.slot("animPostion")),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u56,
        function(it)
        {
          it.m_from = afrom;
          it.m_to = ato;
          it.m_updateFunc = fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
            fan.vaseGui.$clos$_u25,
            function()
            {
              $this.repaint();
              return;
            }),fan.std.Type.find("sys::Func<sys::Void>?"));
          return;
        })),fan.vaseGui.FloatPropertyAnimChannel.$type));
      return;
    })),fan.vaseGui.Animation.$type);
  anim.whenDone().add(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u10,
    function(it)
    {
      $this.repaint();
      return;
    }));
  anim.m_duration = 200;
  this.getRootView().m_animManager.add(anim);
  anim.start();
  this.repaint();
  return;
}
fan.vaseGui.Switch.make = function() {
  var self = new fan.vaseGui.Switch();
  fan.vaseGui.Switch.make$(self);
  return self;
  }
fan.vaseGui.Switch.make$ = function(self)
{
  fan.vaseGui.ToggleButton.make$(self);
  ;
  return;
}
fan.vaseGui.Switch.prototype.m_animPostion = fan.sys.Float.make(0);
fan.vaseGui.TreeView = fan.sys.Obj.$extend(fan.vaseGui.ScrollBase);
fan.vaseGui.TreeView.prototype.$ctor = function()
{
  fan.vaseGui.ScrollBase.prototype.$ctor.call(this);
  var $this = this;
  this.m_model = fan.vaseGui.TreeModel.make();
  this.m_items = fan.sys.List.make(fan.vaseGui.TreeItem.$type);
  this.m_editable = true;
  this.m_minWidth = fan.sys.Float.make(600.0);
  this.m_indent = fan.sys.Float.make(60.0);
  return;
}
fan.vaseGui.TreeView.prototype.$typeof = function() { return fan.vaseGui.TreeView.$type; }
fan.vaseGui.TreeView.prototype.model = function()
{
  return this.m_model;
}
fan.vaseGui.TreeView.prototype.model$ = function(it)
{
  this.m_model = it;
  this.init();
  return;
}
fan.vaseGui.TreeView.prototype.items = function()
{
  return this.m_items;
}
fan.vaseGui.TreeView.prototype.items$ = function(it)
{
  this.m_items = it;
  return;
}
fan.vaseGui.TreeView.prototype.selectedItem = function()
{
  return this.m_selectedItem;
}
fan.vaseGui.TreeView.prototype.selectedItem$ = function(it)
{
  this.m_selectedItem = it;
  return;
}
fan.vaseGui.TreeView.prototype.dragDropItem = function()
{
  return this.m_dragDropItem;
}
fan.vaseGui.TreeView.prototype.dragDropItem$ = function(it)
{
  this.m_dragDropItem = it;
  return;
}
fan.vaseGui.TreeView.prototype.editable = function()
{
  return this.m_editable;
}
fan.vaseGui.TreeView.prototype.editable$ = function(it)
{
  this.m_editable = it;
  return;
}
fan.vaseGui.TreeView.prototype.rowHeight = function()
{
  return this.font().height();
}
fan.vaseGui.TreeView.prototype.font = function()
{
  return this.getStyle().font();
}
fan.vaseGui.TreeView.prototype.minWidth = function()
{
  return this.m_minWidth;
}
fan.vaseGui.TreeView.prototype.minWidth$ = function(it)
{
  this.m_minWidth = it;
  return;
}
fan.vaseGui.TreeView.prototype.indent = function()
{
  return this.m_indent;
}
fan.vaseGui.TreeView.prototype.indent$ = function(it)
{
  this.m_indent = it;
  return;
}
fan.vaseGui.TreeView.make = function(f) {
  var self = new fan.vaseGui.TreeView();
  fan.vaseGui.TreeView.make$(self,f);
  return self;
  }
fan.vaseGui.TreeView.make$ = function(self,f)
{
  if (f === undefined) f = null;
  fan.vaseGui.ScrollBase.make$(self);
  ;
  if (f != null)
  {
    f.call(self);
  }
  ;
  return;
}
fan.vaseGui.TreeView.prototype.contentMaxWidth = function()
{
  var $this = this;
  var w = this.dpToPixel(this.m_minWidth);
  var indent = this.dpToPixel(this.m_indent);
  this.m_items.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u57,
    function(it,ignoreparam$1)
    {
      var x = fan.sys.Int.plus(fan.sys.Int.mult(it.m_level,indent),$this.font().width(fan.sys.Str.plus("- ",it.text())));
      if (fan.sys.ObjUtil.compareLT(w,x))
      {
        w = x;
      }
      ;
      return;
    }));
  return fan.sys.Int.toFloat(w);
}
fan.vaseGui.TreeView.prototype.prefContentSize = function()
{
  var w = this.dpToPixel(this.m_minWidth);
  var h = fan.sys.Int.mult(this.m_items.size(),this.rowHeight());
  return fan.vaseGui.Dimension.make(w,h);
}
fan.vaseGui.TreeView.prototype.expanded = function(item)
{
  if (!item.hasChildren())
  {
    return;
  }
  ;
  if (item.m_expanded)
  {
    var i = fan.sys.Int.plus(this.m_items.indexSame(item),1);
    var start = i;
    for (var n = this.m_items.size(); fan.sys.ObjUtil.compareLT(i,n); i = fan.sys.Int.increment(i))
    {
      if (fan.sys.ObjUtil.compareLE(this.m_items.get(i).m_level,item.m_level))
      {
        break;
      }
      ;
    }
    ;
    this.m_items.removeRange(fan.sys.Range.make(start,i,true));
    item.m_expanded = !item.m_expanded;
    return;
  }
  else
  {
    var i = this.m_items.indexSame(item);
    this.m_items.insertAll(fan.sys.Int.plus(i,1),item.children());
    item.m_expanded = !item.m_expanded;
    return;
  }
  ;
}
fan.vaseGui.TreeView.prototype.init = function()
{
  var $this = this;
  this.m_items.clear();
  this.model().roots().each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u58,
    function(subNode,ignoreparam$1)
    {
      var item = fan.vaseGui.TreeItem.make($this,subNode,0);
      $this.m_items.add(item);
      return;
    }));
  return;
}
fan.vaseGui.TreeView.prototype.motionEvent = function(e)
{
  fan.vaseGui.ScrollBase.prototype.motionEvent.call(this,e);
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_pressed)))
  {
    this.m_selectedItem = this.findItemAt(fan.sys.ObjUtil.coerce(e.relativeY(),fan.sys.Int.$type));
    this.m_dragDropItem = null;
  }
  ;
  return;
}
fan.vaseGui.TreeView.prototype.findItemAt = function(eventY)
{
  var sy = fan.sys.Int.minus(eventY,this.y());
  var i = fan.sys.Int.div(fan.sys.Int.plus(this.offsetY(),sy),this.rowHeight());
  if (fan.sys.ObjUtil.compareLT(i,this.m_items.size()))
  {
    return this.m_items.get(i);
  }
  else
  {
    return null;
  }
  ;
}
fan.vaseGui.TreeView.prototype.gestureEvent = function(e)
{
  if (!this.m_editable)
  {
    fan.vaseGui.ScrollBase.prototype.gestureEvent.call(this,e);
    return;
  }
  ;
  if (e.consumed())
  {
    return;
  }
  ;
  var sy = fan.sys.Int.minus(fan.sys.ObjUtil.coerce(e.m_relativeY,fan.sys.Int.$type),this.y());
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_click)))
  {
    var item = this.findItemAt(fan.sys.ObjUtil.coerce(e.m_relativeY,fan.sys.Int.$type));
    if (item != null)
    {
      this.expanded(fan.sys.ObjUtil.coerce(item,fan.vaseGui.TreeItem.$type));
      this.relayout();
      e.consume();
    }
    ;
  }
  else
  {
    if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_drag)))
    {
      this.m_dragDropItem = this.findItemAt(fan.sys.ObjUtil.coerce(e.m_relativeY,fan.sys.Int.$type));
      e.consume();
      this.repaint();
    }
    else
    {
      if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_drop)))
      {
        this.m_dragDropItem = this.findItemAt(fan.sys.ObjUtil.coerce(e.m_relativeY,fan.sys.Int.$type));
        this.model().onDragDrop(fan.sys.ObjUtil.coerce(this.m_selectedItem,fan.sys.Obj.$type),fan.sys.ObjUtil.coerce(this.m_dragDropItem,fan.sys.Obj.$type));
        this.m_dragDropItem = null;
        this.relayout();
        e.consume();
      }
      ;
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.TreeView.prototype.m_model = null;
fan.vaseGui.TreeView.prototype.m_items = null;
fan.vaseGui.TreeView.prototype.m_selectedItem = null;
fan.vaseGui.TreeView.prototype.m_dragDropItem = null;
fan.vaseGui.TreeView.prototype.m_editable = false;
fan.vaseGui.TreeView.prototype.m_minWidth = fan.sys.Float.make(0);
fan.vaseGui.TreeView.prototype.m_indent = fan.sys.Float.make(0);
fan.vaseGui.TreeItem = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.TreeItem.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_level = 0;
  this.m_expanded = false;
  return;
}
fan.vaseGui.TreeItem.prototype.$typeof = function() { return fan.vaseGui.TreeItem.$type; }
fan.vaseGui.TreeItem.prototype.tree = function()
{
  return this.m_tree;
}
fan.vaseGui.TreeItem.prototype.tree$ = function(it)
{
  this.m_tree = it;
  return;
}
fan.vaseGui.TreeItem.prototype.node = function()
{
  return this.m_node;
}
fan.vaseGui.TreeItem.prototype.node$ = function(it)
{
  this.m_node = it;
  return;
}
fan.vaseGui.TreeItem.prototype.text = function()
{
  return this.m_tree.model().text(this.m_node);
}
fan.vaseGui.TreeItem.prototype.level = function()
{
  return this.m_level;
}
fan.vaseGui.TreeItem.prototype.level$ = function(it)
{
  this.m_level = it;
  return;
}
fan.vaseGui.TreeItem.prototype.expanded = function()
{
  return this.m_expanded;
}
fan.vaseGui.TreeItem.prototype.expanded$ = function(it)
{
  this.m_expanded = it;
  return;
}
fan.vaseGui.TreeItem.make = function(tree,node,level) {
  var self = new fan.vaseGui.TreeItem();
  fan.vaseGui.TreeItem.make$(self,tree,node,level);
  return self;
  }
fan.vaseGui.TreeItem.make$ = function(self,tree,node,level)
{
  ;
  self.m_tree = tree;
  self.m_node = node;
  self.m_level = level;
  return;
}
fan.vaseGui.TreeItem.prototype.hasChildren = function()
{
  return this.m_tree.model().hasChildren(this.m_node);
}
fan.vaseGui.TreeItem.prototype.children = function()
{
  var $this = this;
  var list = fan.sys.List.make(fan.vaseGui.TreeItem.$type);
  this.m_tree.model().children(this.m_node).each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u58,
    function(subNode,ignoreparam$1)
    {
      var item = fan.vaseGui.TreeItem.make($this.m_tree,subNode,fan.sys.Int.plus($this.m_level,1));
      list.add(item);
      return;
    }));
  return list;
}
fan.vaseGui.TreeItem.prototype.m_tree = null;
fan.vaseGui.TreeItem.prototype.m_node = null;
fan.vaseGui.TreeItem.prototype.m_level = 0;
fan.vaseGui.TreeItem.prototype.m_expanded = false;
fan.vaseGui.TreeModel = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.TreeModel.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.TreeModel.prototype.$typeof = function() { return fan.vaseGui.TreeModel.$type; }
fan.vaseGui.TreeModel.prototype.roots = function()
{
  return fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Obj.$type.toNullable()),fan.std.Type.find("sys::List<sys::Obj>"));
}
fan.vaseGui.TreeModel.prototype.text = function(node)
{
  return fan.sys.ObjUtil.toStr(node);
}
fan.vaseGui.TreeModel.prototype.image = function(node)
{
  return null;
}
fan.vaseGui.TreeModel.prototype.hasChildren = function(node)
{
  return !this.children(node).isEmpty();
}
fan.vaseGui.TreeModel.prototype.children = function(node)
{
  return ((fan.sys.List.static$init ? fan.sys.List.static$init() : null),fan.sys.List.m_defVal);
}
fan.vaseGui.TreeModel.prototype.onDragDrop = function(from,to)
{
  return;
}
fan.vaseGui.TreeModel.make = function() {
  var self = new fan.vaseGui.TreeModel();
  fan.vaseGui.TreeModel.make$(self);
  return self;
  }
fan.vaseGui.TreeModel.make$ = function(self)
{
  return;
}
fan.vaseGui.ImageView = fan.sys.Obj.$extend(fan.vaseGui.Widget);
fan.vaseGui.ImageView.prototype.$ctor = function()
{
  fan.vaseGui.Widget.prototype.$ctor.call(this);
  var $this = this;
  this.m_defSize = fan.vaseGui.Dimension.make(0,0);
  return;
}
fan.vaseGui.ImageView.prototype.$typeof = function() { return fan.vaseGui.ImageView.$type; }
fan.vaseGui.ImageView.prototype.image = function()
{
  return this.m_image;
}
fan.vaseGui.ImageView.prototype.image$ = function(it)
{
  this.m_image = it;
  return;
}
fan.vaseGui.ImageView.prototype.uri = function()
{
  return this.m_uri;
}
fan.vaseGui.ImageView.prototype.uri$ = function(it)
{
  this.m_uri = it;
  return;
}
fan.vaseGui.ImageView.prototype.defSize = function()
{
  return this.m_defSize;
}
fan.vaseGui.ImageView.prototype.defSize$ = function(it)
{
  this.m_defSize = it;
  return;
}
fan.vaseGui.ImageView.make = function(f) {
  var self = new fan.vaseGui.ImageView();
  fan.vaseGui.ImageView.make$(self,f);
  return self;
  }
fan.vaseGui.ImageView.make$ = function(self,f)
{
  if (f === undefined) f = null;
  fan.vaseGui.Widget.make$(self);
  ;
  self.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_wrapContent);
  if (f != null)
  {
    f.call(self);
  }
  ;
  if ((self.m_image == null && self.m_uri != null))
  {
    self.m_image = fan.vaseGraphics.ConstImage.make(fan.sys.ObjUtil.coerce(self.m_uri,fan.std.Uri.$type));
  }
  ;
  return;
}
fan.vaseGui.ImageView.prototype.prefContentSize = function()
{
  var $this = this;
  if (this.m_image == null)
  {
    return this.m_defSize;
  }
  ;
  if (!this.m_image.isReady())
  {
    fan.vaseWindow.Toolkit.cur().callLater(1000,fan.sys.Func.make$closure(
      fan.vaseGui.$clos$_u25,
      function()
      {
        $this.getRootView().relayout();
        return;
      }));
    return this.m_defSize;
  }
  ;
  var s = this.m_image.size();
  var w = this.dpToPixel(fan.sys.Int.toFloat(s.m_w));
  var h = this.dpToPixel(fan.sys.Int.toFloat(s.m_h));
  return fan.vaseGui.Dimension.make(w,h);
}
fan.vaseGui.ImageView.prototype.m_image = null;
fan.vaseGui.ImageView.prototype.m_uri = null;
fan.vaseGui.ImageView.prototype.m_defSize = null;
fan.vaseGui.ImageButton = fan.sys.Obj.$extend(fan.vaseGui.ButtonBase);
fan.vaseGui.ImageButton.prototype.$ctor = function()
{
  fan.vaseGui.ButtonBase.prototype.$ctor.call(this);
  var $this = this;
  this.m_defSize = fan.vaseGui.Dimension.make(0,0);
  return;
}
fan.vaseGui.ImageButton.prototype.$typeof = function() { return fan.vaseGui.ImageButton.$type; }
fan.vaseGui.ImageButton.prototype.image = function()
{
  return this.m_image;
}
fan.vaseGui.ImageButton.prototype.image$ = function(it)
{
  this.m_image = it;
  return;
}
fan.vaseGui.ImageButton.prototype.uri = function()
{
  return this.m_uri;
}
fan.vaseGui.ImageButton.prototype.uri$ = function(it)
{
  this.m_uri = it;
  return;
}
fan.vaseGui.ImageButton.prototype.defSize = function()
{
  return this.m_defSize;
}
fan.vaseGui.ImageButton.prototype.defSize$ = function(it)
{
  this.m_defSize = it;
  return;
}
fan.vaseGui.ImageButton.make = function(f) {
  var self = new fan.vaseGui.ImageButton();
  fan.vaseGui.ImageButton.make$(self,f);
  return self;
  }
fan.vaseGui.ImageButton.make$ = function(self,f)
{
  if (f === undefined) f = null;
  fan.vaseGui.ButtonBase.make$(self);
  ;
  self.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_wrapContent);
  if (f != null)
  {
    f.call(self);
  }
  ;
  if ((self.m_image == null && self.m_uri != null))
  {
    self.m_image = fan.vaseGraphics.ConstImage.make(fan.sys.ObjUtil.coerce(self.m_uri,fan.std.Uri.$type));
  }
  ;
  return;
}
fan.vaseGui.ImageButton.prototype.prefContentSize = function()
{
  var $this = this;
  if (this.m_image == null)
  {
    return this.m_defSize;
  }
  ;
  if (!this.m_image.isReady())
  {
    fan.vaseWindow.Toolkit.cur().callLater(1000,fan.sys.Func.make$closure(
      fan.vaseGui.$clos$_u25,
      function()
      {
        $this.getRootView().relayout();
        return;
      }));
    return this.m_defSize;
  }
  ;
  var s = this.m_image.size();
  var w = this.dpToPixel(fan.sys.Int.toFloat(s.m_w));
  var h = this.dpToPixel(fan.sys.Int.toFloat(s.m_h));
  return fan.vaseGui.Dimension.make(w,h);
}
fan.vaseGui.ImageButton.prototype.clicked = function()
{
  fan.vaseGui.AnimExt.scaleAnim(this,fan.sys.Float.make(0.9)).start();
  return;
}
fan.vaseGui.ImageButton.prototype.m_image = null;
fan.vaseGui.ImageButton.prototype.m_uri = null;
fan.vaseGui.ImageButton.prototype.m_defSize = null;
fan.vaseGui.Button = fan.sys.Obj.$extend(fan.vaseGui.ButtonBase);
fan.vaseGui.Button.prototype.$ctor = function()
{
  fan.vaseGui.ButtonBase.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.Button.prototype.$typeof = function() { return fan.vaseGui.Button.$type; }
fan.vaseGui.Button.make = function() {
  var self = new fan.vaseGui.Button();
  fan.vaseGui.Button.make$(self);
  return self;
  }
fan.vaseGui.Button.make$ = function(self)
{
  fan.vaseGui.ButtonBase.make$(self);
  self.m_padding = fan.vaseGui.Insets.make(25);
  return;
}
fan.vaseGui.TextAreaModel = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.TextAreaModel.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_onModify$Store = "_once_";
  return;
}
fan.vaseGui.TextAreaModel.prototype.$typeof = function() { return fan.vaseGui.TextAreaModel.$type; }
fan.vaseGui.TextAreaModel.prototype.onModify = function()
{
  if (this.m_onModify$Store === "_once_")
  {
    this.m_onModify$Store = this.onModify$Once$TextAreaModel();
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_onModify$Store,fan.vaseWindow.EventListeners.$type);
}
fan.vaseGui.TextAreaModel.prototype.lineDelimiter = function()
{
  return "\n";
}
fan.vaseGui.TextAreaModel.prototype.textRange = function(start,len)
{
  var lineIndex = this.lineAtOffset(start);
  var lineOffset = this.offsetAtLine(lineIndex);
  var lineText = this.line(lineIndex);
  var offsetInLine = fan.sys.Int.minus(start,lineOffset);
  if (fan.sys.ObjUtil.compareLE(fan.sys.Int.plus(offsetInLine,len),fan.sys.Str.size(lineText)))
  {
    return fan.sys.Str.getRange(lineText,fan.sys.Range.make(offsetInLine,fan.sys.Int.plus(offsetInLine,len),true));
  }
  ;
  var buf = fan.sys.StrBuf.make(len);
  var n = len;
  if (fan.sys.ObjUtil.compareGE(offsetInLine,0))
  {
    buf.add(fan.sys.Str.getRange(lineText,fan.sys.Range.make(offsetInLine,-1)));
    n = fan.sys.Int.minus(n,buf.size());
  }
  ;
  var delimiter = this.lineDelimiter();
  if (fan.sys.ObjUtil.compareGT(n,0))
  {
    buf.add(delimiter);
    n = fan.sys.Int.minus(n,fan.sys.Str.size(delimiter));
  }
  ;
  while (fan.sys.ObjUtil.compareGT(n,0))
  {
    lineText = this.line(lineIndex = fan.sys.Int.increment(lineIndex));
    if (fan.sys.ObjUtil.compareGE(n,fan.sys.Str.size(lineText)))
    {
      buf.add(lineText);
      n = fan.sys.Int.minus(n,fan.sys.Str.size(lineText));
      if (fan.sys.ObjUtil.compareGT(n,0))
      {
        buf.add(delimiter);
        n = fan.sys.Int.minus(n,fan.sys.Str.size(delimiter));
      }
      ;
    }
    else
    {
      buf.add(fan.sys.Str.getRange(lineText,fan.sys.Range.make(0,n,true)));
      break;
    }
    ;
  }
  ;
  return buf.toStr();
}
fan.vaseGui.TextAreaModel.prototype.lineStyling = function(lineIndex)
{
  return null;
}
fan.vaseGui.TextAreaModel.prototype.lineBackground = function(lineIndex)
{
  return null;
}
fan.vaseGui.TextAreaModel.make = function() {
  var self = new fan.vaseGui.TextAreaModel();
  fan.vaseGui.TextAreaModel.make$(self);
  return self;
  }
fan.vaseGui.TextAreaModel.make$ = function(self)
{
  ;
  return;
}
fan.vaseGui.TextAreaModel.prototype.onModify$Once$TextAreaModel = function()
{
  return fan.vaseWindow.EventListeners.make();
}
fan.vaseGui.TextAreaModel.prototype.m_text = null;
fan.vaseGui.TextAreaModel.prototype.m_onModify$Store = null;
fan.vaseGui.DefTextAreaModel = fan.sys.Obj.$extend(fan.vaseGui.TextAreaModel);
fan.vaseGui.DefTextAreaModel.prototype.$ctor = function()
{
  fan.vaseGui.TextAreaModel.prototype.$ctor.call(this);
  var $this = this;
  this.m_lines = fan.sys.List.make(fan.sys.Str.$type);
  return;
}
fan.vaseGui.DefTextAreaModel.prototype.$typeof = function() { return fan.vaseGui.DefTextAreaModel.$type; }
fan.vaseGui.DefTextAreaModel.prototype.lines = function()
{
  return this.m_lines;
}
fan.vaseGui.DefTextAreaModel.prototype.lines$ = function(it)
{
  this.m_lines = it;
  return;
}
fan.vaseGui.DefTextAreaModel.make = function(text) {
  var self = new fan.vaseGui.DefTextAreaModel();
  fan.vaseGui.DefTextAreaModel.make$(self,text);
  return self;
  }
fan.vaseGui.DefTextAreaModel.make$ = function(self,text)
{
  fan.vaseGui.TextAreaModel.make$(self);
  ;
  self.text$(text);
  return;
}
fan.vaseGui.DefTextAreaModel.prototype.text = function()
{
  return this.m_lines.join("\n");
}
fan.vaseGui.DefTextAreaModel.prototype.text$ = function(it)
{
  this.m_lines = fan.std.StrExt.splitLines(it);
  return;
}
fan.vaseGui.DefTextAreaModel.prototype.charCount = function()
{
  var $this = this;
  var s = 0;
  this.m_lines.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u59,
    function(it,ignoreparam$1)
    {
      s = fan.sys.Int.plus(s,fan.sys.Str.size(it));
      return;
    }));
  return s;
}
fan.vaseGui.DefTextAreaModel.prototype.lineCount = function()
{
  return this.m_lines.size();
}
fan.vaseGui.DefTextAreaModel.prototype.line = function(lineIndex)
{
  return this.m_lines.get(lineIndex);
}
fan.vaseGui.DefTextAreaModel.prototype.lineAtOffset = function(offset)
{
  var count = 0;
  var n = this.m_lines.size();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,n); i = fan.sys.Int.increment(i))
  {
    if (fan.sys.ObjUtil.compareLT(offset,fan.sys.Int.plus(fan.sys.Int.plus(count,fan.sys.Str.size(this.m_lines.get(i))),1)))
    {
      return i;
    }
    ;
    count = fan.sys.Int.plus(count,fan.sys.Int.plus(fan.sys.Str.size(this.m_lines.get(i)),1));
  }
  ;
  return n;
}
fan.vaseGui.DefTextAreaModel.prototype.posAtOffset = function(offset)
{
  var count = 0;
  var n = this.m_lines.size();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,n); i = fan.sys.Int.increment(i))
  {
    if (fan.sys.ObjUtil.compareLT(offset,fan.sys.Int.plus(fan.sys.Int.plus(count,fan.sys.Str.size(this.m_lines.get(i))),1)))
    {
      var y = i;
      var x = fan.sys.Int.minus(offset,count);
      return fan.vaseGraphics.Point.make(x,y);
    }
    ;
    count = fan.sys.Int.plus(count,fan.sys.Int.plus(fan.sys.Str.size(this.m_lines.get(i)),1));
  }
  ;
  if (fan.sys.ObjUtil.equals(n,0))
  {
    return fan.vaseGraphics.Point.make(0,0);
  }
  ;
  return fan.vaseGraphics.Point.make(fan.sys.Str.size(this.m_lines.get(fan.sys.Int.minus(n,1))),fan.sys.Int.minus(n,1));
}
fan.vaseGui.DefTextAreaModel.prototype.offsetAtLine = function(lineIndex)
{
  var count = 0;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,lineIndex); i = fan.sys.Int.increment(i))
  {
    count = fan.sys.Int.plus(count,fan.sys.Int.plus(fan.sys.Str.size(this.m_lines.get(i)),1));
  }
  ;
  return count;
}
fan.vaseGui.DefTextAreaModel.prototype.modifyLine = function(lineIndex,line,add)
{
  if (line == null)
  {
    this.m_lines.removeAt(lineIndex);
  }
  else
  {
    if (add)
    {
      this.m_lines.insert(lineIndex,fan.sys.ObjUtil.coerce(line,fan.sys.Str.$type));
    }
    else
    {
      this.m_lines.set(lineIndex,fan.sys.ObjUtil.coerce(line,fan.sys.Str.$type));
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.DefTextAreaModel.prototype.modify = function(start,replaceLen,newText)
{
  var sp = this.posAtOffset(start);
  if ((fan.sys.ObjUtil.equals(replaceLen,0) && fan.sys.ObjUtil.equals(newText,"\n")))
  {
    var line = this.m_lines.get(sp.m_y);
    if (fan.sys.ObjUtil.equals(fan.sys.Str.size(line),sp.m_x))
    {
      this.m_lines.insert(fan.sys.Int.plus(sp.m_y,1),"");
      return;
    }
    ;
    var line1 = fan.sys.Str.getRange(line,fan.sys.Range.make(0,sp.m_x,true));
    var line2 = fan.sys.Str.getRange(line,fan.sys.Range.make(sp.m_x,-1));
    this.m_lines.set(sp.m_y,line1);
    this.m_lines.insert(fan.sys.Int.plus(sp.m_y,1),line2);
    return;
  }
  ;
  var addLines = fan.sys.Str.split(newText);
  if ((fan.sys.ObjUtil.equals(replaceLen,0) && fan.sys.ObjUtil.equals(addLines.size(),1)))
  {
    var line = this.m_lines.get(sp.m_y);
    line = fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.getRange(line,fan.sys.Range.make(0,sp.m_x,true)),newText),fan.sys.Str.getRange(line,fan.sys.Range.make(sp.m_x,-1)));
    this.m_lines.set(sp.m_y,line);
    return;
  }
  ;
  var ep = this.posAtOffset(fan.sys.Int.plus(start,replaceLen));
  var newLines = fan.sys.List.make(fan.sys.Str.$type);
  var tempText = null;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,this.m_lines.size()); i = fan.sys.Int.increment(i))
  {
    if (fan.sys.ObjUtil.compareLT(i,sp.m_y))
    {
      newLines.add(this.m_lines.get(i));
      continue;
    }
    ;
    if (fan.sys.ObjUtil.equals(i,sp.m_y))
    {
      var nline = fan.sys.Str.plus(fan.sys.Str.getRange(this.m_lines.get(i),fan.sys.Range.make(0,sp.m_x,true)),addLines.get(0));
      if (fan.sys.ObjUtil.compareLE(addLines.size(),1))
      {
        tempText = nline;
      }
      else
      {
        newLines.add(nline);
        for (var j = 1; fan.sys.ObjUtil.compareLT(j,fan.sys.Int.minus(addLines.size(),1)); j = fan.sys.Int.increment(j))
        {
          newLines.add(addLines.get(j));
        }
        ;
        tempText = addLines.last();
      }
      ;
    }
    ;
    if (fan.sys.ObjUtil.equals(i,ep.m_y))
    {
      var nline = fan.sys.Str.getRange(this.m_lines.get(i),fan.sys.Range.make(ep.m_x,-1));
      if (tempText != null)
      {
        nline = fan.sys.Str.plus(tempText,nline);
      }
      ;
      newLines.add(nline);
      continue;
    }
    else
    {
      if (fan.sys.ObjUtil.compareGT(i,ep.m_y))
      {
        newLines.add(this.m_lines.get(i));
        continue;
      }
      ;
    }
    ;
  }
  ;
  this.m_lines = newLines;
  return;
}
fan.vaseGui.DefTextAreaModel.prototype.m_lines = null;
fan.vaseGui.DefTextAreaModel.prototype.m_text = null;
fan.vaseGui.RichTextStyle = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.RichTextStyle.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_underline = ((fan.vaseGui.RichTextUnderline.static$init ? fan.vaseGui.RichTextUnderline.static$init() : null),fan.vaseGui.RichTextUnderline.m_none);
  return;
}
fan.vaseGui.RichTextStyle.prototype.$typeof = function() { return fan.vaseGui.RichTextStyle.$type; }
fan.vaseGui.RichTextStyle.make = function(f) {
  var self = new fan.vaseGui.RichTextStyle();
  fan.vaseGui.RichTextStyle.make$(self,f);
  return self;
  }
fan.vaseGui.RichTextStyle.make$ = function(self,f)
{
  if (f === undefined) f = null;
  ;
  if (f != null)
  {
    f.call(self);
  }
  ;
  return;
}
fan.vaseGui.RichTextStyle.prototype.font = function()
{
  return this.m_font;
}
fan.vaseGui.RichTextStyle.prototype.font$ = function(it)
{
  this.m_font = it;
  return;
}
fan.vaseGui.RichTextStyle.prototype.toStr = function()
{
  var s = fan.sys.StrBuf.make();
  if (this.m_fg != null)
  {
    s.add(fan.sys.Str.plus("fg=",this.m_fg));
  }
  ;
  if (this.m_bg != null)
  {
    s.add(fan.sys.Str.plus(" bg=",this.m_bg));
  }
  ;
  if (this.m_font != null)
  {
    s.add(fan.sys.Str.plus(" font=",this.m_font));
  }
  ;
  if (fan.sys.ObjUtil.compareNE(this.m_underline,((fan.vaseGui.RichTextUnderline.static$init ? fan.vaseGui.RichTextUnderline.static$init() : null),fan.vaseGui.RichTextUnderline.m_none)))
  {
    s.add(fan.sys.Str.plus(" underline=",this.m_underline));
  }
  ;
  if (this.m_underlineColor != null)
  {
    s.add(fan.sys.Str.plus(" underlineColor=",this.m_underlineColor));
  }
  ;
  return fan.sys.Str.trim(s.toStr());
}
fan.vaseGui.RichTextStyle.prototype.m_fg = null;
fan.vaseGui.RichTextStyle.prototype.m_bg = null;
fan.vaseGui.RichTextStyle.prototype.m_font = null;
fan.vaseGui.RichTextStyle.prototype.m_underlineColor = null;
fan.vaseGui.RichTextStyle.prototype.m_underline = null;
fan.vaseGui.RichTextUnderline = fan.sys.Obj.$extend(fan.sys.Enum);
fan.vaseGui.RichTextUnderline.prototype.$ctor = function()
{
  fan.sys.Enum.prototype.$ctor.call(this);
  this.peer = new fan.sys.EnumPeer(this);
  var $this = this;
}
fan.vaseGui.RichTextUnderline.prototype.$typeof = function() { return fan.vaseGui.RichTextUnderline.$type; }
fan.vaseGui.RichTextUnderline.make = function($ordinal,$name) {
  var self = new fan.vaseGui.RichTextUnderline();
  fan.vaseGui.RichTextUnderline.make$(self,$ordinal,$name);
  return self;
  }
fan.vaseGui.RichTextUnderline.make$ = function(self,$ordinal,$name)
{
  fan.sys.Enum.make$(self,$ordinal,$name);
  return;
}
fan.vaseGui.RichTextUnderline.fromStr = function($name,checked)
{
  if (checked === undefined) checked = true;
  return fan.sys.ObjUtil.coerce(fan.sys.Enum.doFromStr("vaseGui::RichTextUnderline",$name,checked),fan.vaseGui.RichTextUnderline.$type.toNullable());
}
fan.vaseGui.RichTextUnderline.static$init = function()
{
  if (fan.vaseGui.RichTextUnderline.static$inited) return;
  fan.vaseGui.RichTextUnderline.static$inited = true;
  fan.vaseGui.RichTextUnderline.m_none = fan.vaseGui.RichTextUnderline.make(0,"none");
  fan.vaseGui.RichTextUnderline.m_single = fan.vaseGui.RichTextUnderline.make(1,"single");
  fan.vaseGui.RichTextUnderline.m_squiggle = fan.vaseGui.RichTextUnderline.make(2,"squiggle");
  fan.vaseGui.RichTextUnderline.m_vals = fan.sys.ObjUtil.coerce((function($this) { var $_u60 = fan.sys.List.make(fan.vaseGui.RichTextUnderline.$type, [((fan.vaseGui.RichTextUnderline.static$init ? fan.vaseGui.RichTextUnderline.static$init() : null),fan.vaseGui.RichTextUnderline.m_none),((fan.vaseGui.RichTextUnderline.static$init ? fan.vaseGui.RichTextUnderline.static$init() : null),fan.vaseGui.RichTextUnderline.m_single),((fan.vaseGui.RichTextUnderline.static$init ? fan.vaseGui.RichTextUnderline.static$init() : null),fan.vaseGui.RichTextUnderline.m_squiggle)]); if ($_u60 == null) return null; return fan.sys.ObjUtil.toImmutable($_u60); })(this),fan.std.Type.find("sys::List<vaseGui::RichTextUnderline>"));
  if (true)
  {
  }
  ;
  return;
}
fan.vaseGui.RichTextUnderline.m_none = null;
fan.vaseGui.RichTextUnderline.m_single = null;
fan.vaseGui.RichTextUnderline.m_squiggle = null;
fan.vaseGui.RichTextUnderline.m_vals = null;
fan.vaseGui.ListView = fan.sys.Obj.$extend(fan.vaseGui.ScrollBase);
fan.vaseGui.ListView.prototype.$ctor = function()
{
  fan.vaseGui.ScrollBase.prototype.$ctor.call(this);
  var $this = this;
  this.m_rowHeight = fan.sys.Float.make(100.0);
  this.m_tempChildren = fan.sys.List.make(fan.vaseGui.Widget.$type);
  this.m_itemLayoutDirty = true;
  return;
}
fan.vaseGui.ListView.prototype.$typeof = function() { return fan.vaseGui.ListView.$type; }
fan.vaseGui.ListView.prototype.rowHeight = function()
{
  return this.m_rowHeight;
}
fan.vaseGui.ListView.prototype.rowHeight$ = function(it)
{
  this.m_rowHeight = it;
  return;
}
fan.vaseGui.ListView.prototype.tempChildren = function()
{
  return this.m_tempChildren;
}
fan.vaseGui.ListView.prototype.tempChildren$ = function(it)
{
  this.m_tempChildren = it;
  return;
}
fan.vaseGui.ListView.prototype.itemLayoutDirty = function()
{
  return this.m_itemLayoutDirty;
}
fan.vaseGui.ListView.prototype.itemLayoutDirty$ = function(it)
{
  this.m_itemLayoutDirty = it;
  return;
}
fan.vaseGui.ListView.prototype.model = function()
{
  return this.m_model;
}
fan.vaseGui.ListView.prototype.model$ = function(it)
{
  this.m_model = it;
  this.init();
  return;
}
fan.vaseGui.ListView.make = function(f) {
  var self = new fan.vaseGui.ListView();
  fan.vaseGui.ListView.make$(self,f);
  return self;
  }
fan.vaseGui.ListView.make$ = function(self,f)
{
  if (f === undefined) f = null;
  fan.vaseGui.ScrollBase.make$(self);
  ;
  if (f != null)
  {
    f.call(self);
  }
  ;
  self.m_layoutParam.m_heightType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent);
  return;
}
fan.vaseGui.ListView.prototype.init = function()
{
  return;
}
fan.vaseGui.ListView.prototype.viewportHeight = function()
{
  return fan.sys.Int.toFloat(this.contentHeight());
}
fan.vaseGui.ListView.prototype.contentMaxHeight = function()
{
  var t = fan.sys.Int.multFloat(this.model().size(),this.m_rowHeight);
  return fan.sys.Float.toFloat(t);
}
fan.vaseGui.ListView.prototype.prefContentSize = function()
{
  return fan.vaseGui.Dimension.make(this.dpToPixel(fan.sys.Float.make(200.0)),this.dpToPixel(fan.sys.Float.make(400.0)));
}
fan.vaseGui.ListView.prototype.getView = function(i)
{
  var item = this.model().getItem(i);
  return fan.sys.ObjUtil.coerce(item.m_view,fan.vaseGui.Widget.$type);
}
fan.vaseGui.ListView.prototype.onViewportChanged = function()
{
  this.m_itemLayoutDirty = true;
  return;
}
fan.vaseGui.ListView.prototype.paintChildren = function(g)
{
  if (this.m_itemLayoutDirty)
  {
    this.m_itemLayoutDirty = false;
    this.layoutItem();
  }
  ;
  this.m_vbar.m_viewport = this.viewportHeight();
  this.m_vbar.m_max = this.contentMaxHeight();
  this.moveToTop(this.m_vbar);
  this.moveToTop(this.m_hbar);
  fan.vaseGui.ScrollBase.prototype.paintChildren.call(this,g);
  return;
}
fan.vaseGui.ListView.prototype.layoutItem = function()
{
  var $this = this;
  var x = this.paddingTop();
  var y = this.paddingLeft();
  var w = this.width();
  var h = this.height();
  var i = fan.sys.Float.toInt(fan.sys.Int.divFloat(this.offsetY(),this.m_rowHeight));
  var topOffset = fan.sys.Int.minus(this.offsetY(),fan.sys.Float.toInt(fan.sys.Int.multFloat(i,this.m_rowHeight)));
  y = fan.sys.Int.minus(y,topOffset);
  this.m_tempChildren.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u34,
    function(it,ignoreparam$1)
    {
      it.detach(false);
      return;
    }));
  this.m_tempChildren.clear();
  var count = 0;
  if (fan.sys.ObjUtil.compareLT(i,0))
  {
    y = fan.sys.Int.plus(y,fan.sys.Int.mult(fan.sys.Int.negate(i),fan.sys.Float.toInt(this.m_rowHeight)));
    i = 0;
  }
  ;
  for (; fan.sys.ObjUtil.compareLT(i,this.model().size()); i = fan.sys.Int.increment(i))
  {
    var view = this.getView(i);
    this.m_tempChildren.add(view);
    view.m_layoutParam.m_ignore = true;
    this.doAdd(view);
    count = fan.sys.Int.increment(count);
    var itemH = view.bufferedPrefSize().m_h;
    view.layout(x,y,w,itemH,false);
    y = fan.sys.Int.plus(y,itemH);
    this.m_rowHeight = fan.sys.Int.toFloat(itemH);
    if (fan.sys.ObjUtil.compareGT(y,h))
    {
      break;
    }
    ;
  }
  ;
  this.model().flush();
  return;
}
fan.vaseGui.ListView.prototype.m_rowHeight = fan.sys.Float.make(0);
fan.vaseGui.ListView.prototype.m_tempChildren = null;
fan.vaseGui.ListView.prototype.m_itemLayoutDirty = false;
fan.vaseGui.ListView.prototype.m_model = null;
fan.vaseGui.ListItem = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.ListItem.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_type = 0;
  this.m_pos = -1;
  this.m_mode = -1;
  return;
}
fan.vaseGui.ListItem.prototype.$typeof = function() { return fan.vaseGui.ListItem.$type; }
fan.vaseGui.ListItem.prototype.data = function()
{
  return this.m_data;
}
fan.vaseGui.ListItem.prototype.data$ = function(it)
{
  this.m_data = it;
  return;
}
fan.vaseGui.ListItem.prototype.view = function()
{
  return this.m_view;
}
fan.vaseGui.ListItem.prototype.view$ = function(it)
{
  this.m_view = it;
  return;
}
fan.vaseGui.ListItem.prototype.type = function()
{
  return this.m_type;
}
fan.vaseGui.ListItem.prototype.type$ = function(it)
{
  this.m_type = it;
  return;
}
fan.vaseGui.ListItem.prototype.pos = function()
{
  return this.m_pos;
}
fan.vaseGui.ListItem.prototype.pos$ = function(it)
{
  this.m_pos = it;
  return;
}
fan.vaseGui.ListItem.prototype.mode = function()
{
  return this.m_mode;
}
fan.vaseGui.ListItem.prototype.mode$ = function(it)
{
  this.m_mode = it;
  return;
}
fan.vaseGui.ListItem.make = function() {
  var self = new fan.vaseGui.ListItem();
  fan.vaseGui.ListItem.make$(self);
  return self;
  }
fan.vaseGui.ListItem.make$ = function(self)
{
  ;
  return;
}
fan.vaseGui.ListItem.prototype.m_data = null;
fan.vaseGui.ListItem.prototype.m_view = null;
fan.vaseGui.ListItem.prototype.m_type = 0;
fan.vaseGui.ListItem.prototype.m_pos = 0;
fan.vaseGui.ListItem.prototype.m_mode = 0;
fan.vaseGui.ListItemPool = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.ListItemPool.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_freeList = fan.std.Map.fromLiteral([],[],fan.std.Type.find("sys::Int"),fan.std.Type.find("sys::List<vaseGui::ListItem>"));
  this.m_activesMap = fan.std.Map.fromLiteral([],[],fan.std.Type.find("sys::Int"),fan.std.Type.find("vaseGui::ListItem"));
  this.m_mode = 0;
  return;
}
fan.vaseGui.ListItemPool.prototype.$typeof = function() { return fan.vaseGui.ListItemPool.$type; }
fan.vaseGui.ListItemPool.prototype.freeList = function()
{
  return this.m_freeList;
}
fan.vaseGui.ListItemPool.prototype.freeList$ = function(it)
{
  this.m_freeList = it;
  return;
}
fan.vaseGui.ListItemPool.prototype.activesMap = function()
{
  return this.m_activesMap;
}
fan.vaseGui.ListItemPool.prototype.activesMap$ = function(it)
{
  this.m_activesMap = it;
  return;
}
fan.vaseGui.ListItemPool.prototype.mode = function()
{
  return this.m_mode;
}
fan.vaseGui.ListItemPool.prototype.mode$ = function(it)
{
  this.m_mode = it;
  return;
}
fan.vaseGui.ListItemPool.prototype.get = function(pos)
{
  var item = this.m_activesMap.get(fan.sys.ObjUtil.coerce(pos,fan.sys.Obj.$type.toNullable()));
  if (item != null)
  {
    item.m_mode = this.m_mode;
    return item;
  }
  ;
  return item;
}
fan.vaseGui.ListItemPool.prototype.reuse = function(type)
{
  if (fan.sys.ObjUtil.compareGT(this.m_freeList.size(),0))
  {
    var list = this.m_freeList.get(fan.sys.ObjUtil.coerce(type,fan.sys.Obj.$type.toNullable()));
    if (list != null)
    {
      var item = list.pop();
      return item;
    }
    ;
  }
  ;
  return null;
}
fan.vaseGui.ListItemPool.prototype.add = function(pos,item)
{
  this.m_activesMap.set(fan.sys.ObjUtil.coerce(pos,fan.sys.Obj.$type.toNullable()),item);
  item.m_mode = this.m_mode;
  return;
}
fan.vaseGui.ListItemPool.prototype.flush = function()
{
  var $this = this;
  var old = fan.sys.ObjUtil.coerce(this.m_activesMap.findAll(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u61,
    function(it,ignoreparam$1)
    {
      return fan.sys.ObjUtil.compareNE(it.m_mode,$this.m_mode);
    })),fan.std.Type.find("std::Map<sys::Int,vaseGui::ListItem>"));
  old.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u62,
    function(it,ignoreparam$1)
    {
      var list = $this.m_freeList.getOrAdd(fan.sys.ObjUtil.coerce(it.m_type,fan.sys.Obj.$type.toNullable()),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u63,
        function(it)
        {
          return fan.sys.List.make(fan.vaseGui.ListItem.$type);
        }));
      list.add(it);
      $this.m_activesMap.remove(fan.sys.ObjUtil.coerce(it.m_pos,fan.sys.Obj.$type.toNullable()));
      return;
    }));
  this.m_mode = (function($this) { if (fan.sys.ObjUtil.equals($this.m_mode,0)) return 1; return 0; })(this);
  return;
}
fan.vaseGui.ListItemPool.make = function() {
  var self = new fan.vaseGui.ListItemPool();
  fan.vaseGui.ListItemPool.make$(self);
  return self;
  }
fan.vaseGui.ListItemPool.make$ = function(self)
{
  ;
  return;
}
fan.vaseGui.ListItemPool.prototype.m_freeList = null;
fan.vaseGui.ListItemPool.prototype.m_activesMap = null;
fan.vaseGui.ListItemPool.prototype.m_mode = 0;
fan.vaseGui.ListAdapter = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.ListAdapter.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_itemPool = fan.vaseGui.ListItemPool.make();
  this.m_dirty = true;
  return;
}
fan.vaseGui.ListAdapter.prototype.$typeof = function() { return fan.vaseGui.ListAdapter.$type; }
fan.vaseGui.ListAdapter.prototype.itemPool = function()
{
  return this.m_itemPool;
}
fan.vaseGui.ListAdapter.prototype.itemPool$ = function(it)
{
  this.m_itemPool = it;
  return;
}
fan.vaseGui.ListAdapter.prototype.dirty = function()
{
  return this.m_dirty;
}
fan.vaseGui.ListAdapter.prototype.dirty$ = function(it)
{
  this.m_dirty = it;
  return;
}
fan.vaseGui.ListAdapter.prototype.flush = function()
{
  this.m_itemPool.flush();
  return;
}
fan.vaseGui.ListAdapter.prototype.getItem = function(pos)
{
  var item = this.m_itemPool.get(pos);
  if (item != null)
  {
    if (this.m_dirty)
    {
      this.bind(fan.sys.ObjUtil.coerce(item.m_view,fan.vaseGui.Widget.$type),fan.sys.ObjUtil.coerce(item.m_data,fan.sys.Obj.$type));
    }
    ;
    return fan.sys.ObjUtil.coerce(item,fan.vaseGui.ListItem.$type);
  }
  ;
  item = fan.vaseGui.ListItem.make();
  item.m_pos = pos;
  this.getData(pos,fan.sys.ObjUtil.coerce(item,fan.vaseGui.ListItem.$type));
  var reuseItem = this.m_itemPool.reuse(item.m_type);
  if (reuseItem != null)
  {
    item.m_view = reuseItem.m_view;
  }
  else
  {
    item.m_view = this.newView(item.m_type);
  }
  ;
  this.bind(fan.sys.ObjUtil.coerce(item.m_view,fan.vaseGui.Widget.$type),fan.sys.ObjUtil.coerce(item.m_data,fan.sys.Obj.$type));
  this.m_itemPool.add(pos,fan.sys.ObjUtil.coerce(item,fan.vaseGui.ListItem.$type));
  return fan.sys.ObjUtil.coerce(item,fan.vaseGui.ListItem.$type);
}
fan.vaseGui.ListAdapter.make = function() {
  var self = new fan.vaseGui.ListAdapter();
  fan.vaseGui.ListAdapter.make$(self);
  return self;
  }
fan.vaseGui.ListAdapter.make$ = function(self)
{
  ;
  return;
}
fan.vaseGui.ListAdapter.prototype.m_itemPool = null;
fan.vaseGui.ListAdapter.prototype.m_dirty = false;
fan.vaseGui.SimpleListAdapter = fan.sys.Obj.$extend(fan.vaseGui.ListAdapter);
fan.vaseGui.SimpleListAdapter.prototype.$ctor = function()
{
  fan.vaseGui.ListAdapter.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.SimpleListAdapter.prototype.$typeof = function() { return fan.vaseGui.SimpleListAdapter.$type; }
fan.vaseGui.SimpleListAdapter.prototype.list = function()
{
  return this.m_list;
}
fan.vaseGui.SimpleListAdapter.prototype.list$ = function(it)
{
  this.m_list = it;
  return;
}
fan.vaseGui.SimpleListAdapter.make = function(list) {
  var self = new fan.vaseGui.SimpleListAdapter();
  fan.vaseGui.SimpleListAdapter.make$(self,list);
  return self;
  }
fan.vaseGui.SimpleListAdapter.make$ = function(self,list)
{
  fan.vaseGui.ListAdapter.make$(self);
  self.m_list = list;
  return;
}
fan.vaseGui.SimpleListAdapter.prototype.size = function()
{
  return this.m_list.size();
}
fan.vaseGui.SimpleListAdapter.prototype.getData = function(i,out)
{
  out.m_data = this.m_list.get(i);
  out.m_type = 0;
  return;
}
fan.vaseGui.SimpleListAdapter.prototype.bind = function(w,data)
{
  var l = fan.sys.ObjUtil.coerce(w,fan.vaseGui.Label.$type);
  l.text$(fan.sys.ObjUtil.toStr(data));
  return;
}
fan.vaseGui.SimpleListAdapter.prototype.newView = function(type)
{
  var $this = this;
  return fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.Label.make(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u38,
    function(it)
    {
      return;
    })),fan.vaseGui.Label.$type);
}
fan.vaseGui.SimpleListAdapter.prototype.m_list = null;
fan.vaseGui.ScrollBar = fan.sys.Obj.$extend(fan.vaseGui.Widget);
fan.vaseGui.ScrollBar.prototype.$ctor = function()
{
  fan.vaseGui.Widget.prototype.$ctor.call(this);
  var $this = this;
  this.m_max = fan.sys.Float.make(2000.0);
  this.m_viewport = fan.sys.Float.make(0.0);
  this.m_curPos = fan.sys.Float.make(0.0);
  this.m_onPosChanged$Store = "_once_";
  this.m_vertical = true;
  this.m_lastX = -1;
  this.m_lastY = -1;
  this.m_draging = false;
  this.m_barSize = fan.sys.Float.make(60.0);
  return;
}
fan.vaseGui.ScrollBar.prototype.$typeof = function() { return fan.vaseGui.ScrollBar.$type; }
fan.vaseGui.ScrollBar.prototype.max = function()
{
  return this.m_max;
}
fan.vaseGui.ScrollBar.prototype.max$ = function(it)
{
  this.m_max = it;
  return;
}
fan.vaseGui.ScrollBar.prototype.viewport = function()
{
  return this.m_viewport;
}
fan.vaseGui.ScrollBar.prototype.viewport$ = function(it)
{
  this.m_viewport = it;
  return;
}
fan.vaseGui.ScrollBar.prototype.curPos = function()
{
  return this.m_curPos;
}
fan.vaseGui.ScrollBar.prototype.curPos$ = function(it)
{
  this.m_curPos = it;
  return;
}
fan.vaseGui.ScrollBar.prototype.isActive = function()
{
  return this.m_draging;
}
fan.vaseGui.ScrollBar.prototype.isOverScroll = function()
{
  if (fan.sys.ObjUtil.compareLT(this.m_curPos,fan.sys.Float.make(0.0)))
  {
    return true;
  }
  ;
  if (fan.sys.ObjUtil.compareGT(fan.sys.Float.plus(this.m_curPos,this.m_viewport),this.m_max))
  {
    return true;
  }
  ;
  return false;
}
fan.vaseGui.ScrollBar.prototype.setCurPos = function(pos,fireEvent,allowOverScroll)
{
  if (allowOverScroll === undefined) allowOverScroll = false;
  var val = pos;
  if (!allowOverScroll)
  {
    if (fan.sys.ObjUtil.compareGT(fan.sys.Float.plus(pos,this.m_viewport),this.m_max))
    {
      val = fan.sys.Float.minus(this.m_max,this.m_viewport);
    }
    else
    {
      if (fan.sys.ObjUtil.compareLT(pos,fan.sys.Float.make(0.0)))
      {
        val = fan.sys.Float.make(0.0);
      }
      ;
    }
    ;
  }
  ;
  if (fan.sys.ObjUtil.equals(this.m_curPos,val))
  {
    return;
  }
  ;
  this.m_curPos = val;
  var e = fan.vaseWindow.StateChangedEvent.make(fan.sys.ObjUtil.coerce(this.m_curPos,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(val,fan.sys.Obj.$type.toNullable()),fan.vaseGui.ScrollBar.$type.slot("curPos"),this);
  this.onStateChanged().fire(e);
  if (fireEvent)
  {
    this.onPosChanged().fire(e);
  }
  ;
  return;
}
fan.vaseGui.ScrollBar.prototype.onPosChanged = function()
{
  if (this.m_onPosChanged$Store === "_once_")
  {
    this.m_onPosChanged$Store = this.onPosChanged$Once$ScrollBar();
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_onPosChanged$Store,fan.vaseWindow.EventListeners.$type);
}
fan.vaseGui.ScrollBar.prototype.vertical = function()
{
  return this.m_vertical;
}
fan.vaseGui.ScrollBar.prototype.vertical$ = function(it)
{
  this.m_vertical = it;
  return;
}
fan.vaseGui.ScrollBar.prototype.lastX = function()
{
  return this.m_lastX;
}
fan.vaseGui.ScrollBar.prototype.lastX$ = function(it)
{
  this.m_lastX = it;
  return;
}
fan.vaseGui.ScrollBar.prototype.lastY = function()
{
  return this.m_lastY;
}
fan.vaseGui.ScrollBar.prototype.lastY$ = function(it)
{
  this.m_lastY = it;
  return;
}
fan.vaseGui.ScrollBar.prototype.draging = function()
{
  return this.m_draging;
}
fan.vaseGui.ScrollBar.prototype.draging$ = function(it)
{
  this.m_draging = it;
  return;
}
fan.vaseGui.ScrollBar.prototype.barSize = function()
{
  return this.m_barSize;
}
fan.vaseGui.ScrollBar.prototype.barSize$ = function(it)
{
  this.m_barSize = it;
  return;
}
fan.vaseGui.ScrollBar.make = function(f) {
  var self = new fan.vaseGui.ScrollBar();
  fan.vaseGui.ScrollBar.make$(self,f);
  return self;
  }
fan.vaseGui.ScrollBar.make$ = function(self,f)
{
  if (f === undefined) f = null;
  fan.vaseGui.Widget.make$(self);
  ;
  if (f != null)
  {
    f.call(self);
  }
  ;
  if (self.m_vertical)
  {
    self.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_fixed);
    self.m_layoutParam.m_widthVal = self.m_barSize;
    self.m_layoutParam.m_heightType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent);
  }
  else
  {
    self.m_layoutParam.m_heightType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_fixed);
    self.m_layoutParam.m_heightVal = self.m_barSize;
    self.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent);
  }
  ;
  return;
}
fan.vaseGui.ScrollBar.prototype.barLength = function()
{
  if (this.m_vertical)
  {
    return this.contentHeight();
  }
  else
  {
    return this.contentWidth();
  }
  ;
}
fan.vaseGui.ScrollBar.prototype.thumbSize = function()
{
  return fan.sys.Float.toInt(this.toScreenCoord(this.m_viewport));
}
fan.vaseGui.ScrollBar.prototype.screenPos = function()
{
  return fan.sys.Float.toInt(this.toScreenCoord(this.m_curPos));
}
fan.vaseGui.ScrollBar.prototype.toScreenCoord = function(val)
{
  return fan.sys.Float.mult(fan.sys.Float.div(fan.sys.Float.toFloat(val),fan.sys.Float.toFloat(this.m_max)),fan.sys.Int.toFloat(this.barLength()));
}
fan.vaseGui.ScrollBar.prototype.toWorldCoord = function(val)
{
  return fan.sys.Float.mult(fan.sys.Float.div(fan.sys.Float.toFloat(val),fan.sys.Int.toFloat(this.barLength())),this.m_max);
}
fan.vaseGui.ScrollBar.prototype.onMounted = function()
{
  var $this = this;
  var rootVie = this.getRootView();
  rootVie.m_onTouchEvent.add(fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u65,
    function(e)
    {
      $this.doTouch(e);
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,vaseWindow::Event?>")));
  return;
}
fan.vaseGui.ScrollBar.prototype.doTouch = function(e)
{
  var p = fan.vaseGui.Coord.make(fan.sys.ObjUtil.coerce(e.x(),fan.sys.Int.$type),fan.sys.ObjUtil.coerce(e.y(),fan.sys.Int.$type));
  var rc = this.mapToRelative(p);
  if ((rc && this.contains(p.m_x,p.m_y)))
  {
    if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_pressed)))
    {
      this.m_draging = true;
      this.m_lastX = p.m_x;
      this.m_lastY = p.m_y;
      this.focus();
      e.consume();
      return;
    }
    ;
  }
  ;
  if (!this.m_draging)
  {
    return;
  }
  ;
  e.consume();
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_released)))
  {
    this.m_draging = false;
    this.m_lastX = -1;
    this.m_lastY = -1;
  }
  else
  {
    if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_moved)))
    {
      if (this.m_vertical)
      {
        var pos = fan.sys.Float.plus(this.toWorldCoord(fan.sys.Int.toFloat(fan.sys.Int.minus(p.m_y,this.m_lastY))),this.m_curPos);
        this.setCurPos(pos,true);
      }
      else
      {
        var pos = fan.sys.Float.plus(this.toWorldCoord(fan.sys.Int.toFloat(fan.sys.Int.minus(p.m_x,this.m_lastX))),this.m_curPos);
        this.setCurPos(pos,true);
      }
      ;
      this.m_lastX = p.m_x;
      this.m_lastY = p.m_y;
      this.repaint();
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.ScrollBar.prototype.onPosChanged$Once$ScrollBar = function()
{
  return fan.vaseWindow.EventListeners.make();
}
fan.vaseGui.ScrollBar.prototype.m_max = fan.sys.Float.make(0);
fan.vaseGui.ScrollBar.prototype.m_viewport = fan.sys.Float.make(0);
fan.vaseGui.ScrollBar.prototype.m_curPos = fan.sys.Float.make(0);
fan.vaseGui.ScrollBar.prototype.m_vertical = false;
fan.vaseGui.ScrollBar.prototype.m_lastX = 0;
fan.vaseGui.ScrollBar.prototype.m_lastY = 0;
fan.vaseGui.ScrollBar.prototype.m_draging = false;
fan.vaseGui.ScrollBar.prototype.m_barSize = fan.sys.Float.make(0);
fan.vaseGui.ScrollBar.prototype.m_onPosChanged$Store = null;
fan.vaseGui.SliderBar = fan.sys.Obj.$extend(fan.vaseGui.ScrollBar);
fan.vaseGui.SliderBar.prototype.$ctor = function()
{
  fan.vaseGui.ScrollBar.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.SliderBar.prototype.$typeof = function() { return fan.vaseGui.SliderBar.$type; }
fan.vaseGui.SliderBar.make = function() {
  var self = new fan.vaseGui.SliderBar();
  fan.vaseGui.SliderBar.make$(self);
  return self;
  }
fan.vaseGui.SliderBar.make$ = function(self)
{
  var $this = self;
  fan.vaseGui.ScrollBar.make$(self,fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u66,
    function(i)
    {
      i.m_vertical = false;
      i.m_barSize = fan.sys.Float.make(120.0);
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,vaseGui::ScrollBar>?")));
  self.m_viewport = fan.sys.Float.make(0.0);
  self.m_max = fan.sys.Float.make(100.0);
  self.m_padding = fan.vaseGui.Insets.make(30,fan.sys.ObjUtil.coerce(50,fan.sys.Int.$type.toNullable()));
  return;
}
fan.vaseGui.Table = fan.sys.Obj.$extend(fan.vaseGui.ScrollBase);
fan.vaseGui.Table.prototype.$ctor = function()
{
  fan.vaseGui.ScrollBase.prototype.$ctor.call(this);
  var $this = this;
  this.m_model = fan.vaseGui.TableModel.make();
  this.m_colWidth = fan.sys.Float.make(360.0);
  this.m_rowHeight = fan.sys.Float.make(60.0);
  this.m_header = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.HBox.make(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u67,
    function(it)
    {
      it.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_wrapContent);
      return;
    })),fan.vaseGui.HBox.$type);
  return;
}
fan.vaseGui.Table.prototype.$typeof = function() { return fan.vaseGui.Table.$type; }
fan.vaseGui.Table.prototype.model = function()
{
  return this.m_model;
}
fan.vaseGui.Table.prototype.model$ = function(it)
{
  this.m_model = it;
  this.init();
  return;
}
fan.vaseGui.Table.prototype.colWidth = function()
{
  return this.m_colWidth;
}
fan.vaseGui.Table.prototype.colWidth$ = function(it)
{
  this.m_colWidth = it;
  return;
}
fan.vaseGui.Table.prototype.rowHeight = function()
{
  return this.m_rowHeight;
}
fan.vaseGui.Table.prototype.rowHeight$ = function(it)
{
  this.m_rowHeight = it;
  return;
}
fan.vaseGui.Table.prototype.colWidthCache = function()
{
  return this.m_colWidthCache;
}
fan.vaseGui.Table.prototype.colWidthCache$ = function(it)
{
  this.m_colWidthCache = it;
  return;
}
fan.vaseGui.Table.prototype.header = function()
{
  return this.m_header;
}
fan.vaseGui.Table.prototype.header$ = function(it)
{
  this.m_header = it;
  return;
}
fan.vaseGui.Table.make = function(f) {
  var self = new fan.vaseGui.Table();
  fan.vaseGui.Table.make$(self,f);
  return self;
  }
fan.vaseGui.Table.make$ = function(self,f)
{
  if (f === undefined) f = null;
  fan.vaseGui.ScrollBase.make$(self);
  ;
  if (f != null)
  {
    f.call(self);
  }
  ;
  self.doAdd(self.m_header);
  return;
}
fan.vaseGui.Table.prototype.init = function()
{
  var $this = this;
  this.m_colWidthCache = fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Int.$type),fan.std.Type.find("sys::List<sys::Int>?"));
  this.m_header.removeAll();
  var colWidth = this.dpToPixel(this.m_colWidth);
  fan.sys.Int.times(this.model().numCols(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u68,
    function(c)
    {
      var btn = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.ButtonBase.make(),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u69,
        function(it)
        {
          it.text$($this.model().header(c));
          return;
        })),fan.vaseGui.ButtonBase.$type);
      btn.styleClass$("tableHeader");
      var w = (function($this) { var $_u70 = $this.model().prefWidth(c); if ($_u70 != null) return $_u70; return fan.sys.ObjUtil.coerce(colWidth,fan.sys.Int.$type.toNullable()); })($this);
      $this.m_colWidthCache.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(w,fan.sys.Int.$type),fan.sys.Obj.$type.toNullable()));
      btn.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_fixed);
      btn.m_layoutParam.m_widthVal = $this.pixelToDp(fan.sys.ObjUtil.coerce(w,fan.sys.Int.$type));
      btn.m_layoutParam.m_heightType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_fixed);
      btn.m_layoutParam.m_heightVal = $this.m_rowHeight;
      $this.m_header.add(btn);
      return;
    }));
  return;
}
fan.vaseGui.Table.prototype.offsetX = function()
{
  return fan.vaseGui.ScrollBase.prototype.offsetX.call(this);
}
fan.vaseGui.Table.prototype.offsetX$ = function(it)
{
  this.m_header.x$(fan.sys.Int.negate(it));
  fan.vaseGui.ScrollBase.prototype.offsetX$.call(this,it);
  return;
}
fan.vaseGui.Table.prototype.prefContentSize = function()
{
  var $this = this;
  var w = 0;
  var colWidth = this.dpToPixel(this.m_colWidth);
  fan.sys.Int.times(this.model().numCols(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u68,
    function(c)
    {
      w = fan.sys.Int.plus(w,fan.sys.ObjUtil.coerce((function($this) { var $_u71 = $this.model().prefWidth(c); if ($_u71 != null) return $_u71; return fan.sys.ObjUtil.coerce(colWidth,fan.sys.Int.$type.toNullable()); })($this),fan.sys.Int.$type));
      return;
    }));
  var h = fan.sys.Int.plus(fan.sys.Int.mult(this.model().numRows(),this.dpToPixel(this.m_rowHeight)),this.dpToPixel(this.m_rowHeight));
  return fan.vaseGui.Dimension.make(w,h);
}
fan.vaseGui.Table.prototype.contentMaxHeight = function()
{
  var t = fan.sys.Int.mult(this.model().numRows(),this.dpToPixel(this.m_rowHeight));
  return fan.sys.Int.toFloat(t);
}
fan.vaseGui.Table.prototype.viewportHeight = function()
{
  var t = fan.sys.Float.minusInt(fan.vaseGui.ScrollBase.prototype.viewportHeight.call(this),this.dpToPixel(this.m_rowHeight));
  return fan.sys.Float.toFloat(t);
}
fan.vaseGui.Table.prototype.m_model = null;
fan.vaseGui.Table.prototype.m_colWidth = fan.sys.Float.make(0);
fan.vaseGui.Table.prototype.m_rowHeight = fan.sys.Float.make(0);
fan.vaseGui.Table.prototype.m_colWidthCache = null;
fan.vaseGui.Table.prototype.m_header = null;
fan.vaseGui.Table.prototype.m_offsetX = 0;
fan.vaseGui.TableModel = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.TableModel.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.TableModel.prototype.$typeof = function() { return fan.vaseGui.TableModel.$type; }
fan.vaseGui.TableModel.prototype.numRows = function()
{
  return 0;
}
fan.vaseGui.TableModel.prototype.numCols = function()
{
  return 1;
}
fan.vaseGui.TableModel.prototype.header = function(col)
{
  return fan.sys.Str.plus("Header ",fan.sys.ObjUtil.coerce(col,fan.sys.Obj.$type.toNullable()));
}
fan.vaseGui.TableModel.prototype.prefWidth = function(col)
{
  return null;
}
fan.vaseGui.TableModel.prototype.text = function(col,row)
{
  return fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("",fan.sys.ObjUtil.coerce(col,fan.sys.Obj.$type.toNullable())),":"),fan.sys.ObjUtil.coerce(row,fan.sys.Obj.$type.toNullable()));
}
fan.vaseGui.TableModel.prototype.image = function(col,row)
{
  return null;
}
fan.vaseGui.TableModel.prototype.sortCompare = function(col,row1,row2)
{
  return fan.sys.ObjUtil.compare(this.text(col,row1),this.text(col,row2));
}
fan.vaseGui.TableModel.make = function() {
  var self = new fan.vaseGui.TableModel();
  fan.vaseGui.TableModel.make$(self);
  return self;
  }
fan.vaseGui.TableModel.make$ = function(self)
{
  return;
}
fan.vaseGui.Caret = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.Caret.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_visible = false;
  this.m_offset = 0;
  return;
}
fan.vaseGui.Caret.prototype.$typeof = function() { return fan.vaseGui.Caret.$type; }
fan.vaseGui.Caret.prototype.visible = function()
{
  return this.m_visible;
}
fan.vaseGui.Caret.prototype.visible$ = function(it)
{
  this.m_visible = it;
  return;
}
fan.vaseGui.Caret.prototype.offset = function()
{
  return this.m_offset;
}
fan.vaseGui.Caret.prototype.offset$ = function(it)
{
  this.m_offset = it;
  return;
}
fan.vaseGui.Caret.make = function() {
  var self = new fan.vaseGui.Caret();
  fan.vaseGui.Caret.make$(self);
  return self;
  }
fan.vaseGui.Caret.make$ = function(self)
{
  ;
  return;
}
fan.vaseGui.Caret.prototype.m_visible = false;
fan.vaseGui.Caret.prototype.m_offset = 0;
fan.vaseGui.EditText = fan.sys.Obj.$extend(fan.vaseGui.Widget);
fan.vaseGui.EditText.prototype.$ctor = function()
{
  fan.vaseGui.Widget.prototype.$ctor.call(this);
  var $this = this;
  this.m_text = "";
  this.m_hint = "";
  this.m_password = false;
  this.m_caret = fan.vaseGui.Caret.make();
  this.m_inputType = 1;
  this.m_multiLine = 0;
  this.m_editable = true;
  return;
}
fan.vaseGui.EditText.prototype.$typeof = function() { return fan.vaseGui.EditText.$type; }
fan.vaseGui.EditText.prototype.text = function()
{
  return this.m_text;
}
fan.vaseGui.EditText.prototype.text$ = function(it)
{
  var e = fan.vaseWindow.StateChangedEvent.make(this.m_text,it,fan.vaseGui.EditText.$type.slot("text"),this);
  this.onStateChanged().fire(e);
  this.m_text = it;
  this.m_caret.m_offset = fan.sys.Str.size(this.m_text);
  return;
}
fan.vaseGui.EditText.prototype.hint = function()
{
  return this.m_hint;
}
fan.vaseGui.EditText.prototype.hint$ = function(it)
{
  this.m_hint = it;
  return;
}
fan.vaseGui.EditText.prototype.password = function()
{
  return this.m_password;
}
fan.vaseGui.EditText.prototype.password$ = function(it)
{
  this.m_password = it;
  return;
}
fan.vaseGui.EditText.prototype.font = function()
{
  return this.getStyle().font();
}
fan.vaseGui.EditText.prototype.caret = function()
{
  return this.m_caret;
}
fan.vaseGui.EditText.prototype.caret$ = function(it)
{
  this.m_caret = it;
  return;
}
fan.vaseGui.EditText.prototype.timer = function()
{
  return this.m_timer;
}
fan.vaseGui.EditText.prototype.timer$ = function(it)
{
  this.m_timer = it;
  return;
}
fan.vaseGui.EditText.prototype.host = function()
{
  return this.m_host;
}
fan.vaseGui.EditText.prototype.host$ = function(it)
{
  this.m_host = it;
  return;
}
fan.vaseGui.EditText.make = function() {
  var self = new fan.vaseGui.EditText();
  fan.vaseGui.EditText.make$(self);
  return self;
  }
fan.vaseGui.EditText.make$ = function(self)
{
  var $this = self;
  fan.vaseGui.Widget.make$(self);
  ;
  self.onFocusChanged().add(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u72,
    function(e)
    {
      var focused = e.data();
      if (fan.sys.ObjUtil.coerce(focused,fan.sys.Bool.$type))
      {
        (function($this) { var $_u73 = $this.getRootView().host(); if ($_u73 == null) return null; return $_u73.textInput($this); })($this);
        $this.updateHost();
        if ($this.host() == null)
        {
          $this.startCaret();
        }
        ;
      }
      else
      {
        $this.stopCaret();
        $this.m_caret.m_visible = false;
        if ($this.host() != null)
        {
          $this.host().close();
        }
        ;
        $this.repaint();
      }
      ;
      return;
    }));
  self.m_padding = fan.vaseGui.Insets.make(20);
  return;
}
fan.vaseGui.EditText.prototype.textChange = function(text)
{
  this.text$(text);
  return text;
}
fan.vaseGui.EditText.prototype.keyAction = function(text)
{
  this.text$(text);
  return;
}
fan.vaseGui.EditText.prototype.inputType = function()
{
  return this.m_inputType;
}
fan.vaseGui.EditText.prototype.inputType$ = function(it)
{
  this.m_inputType = it;
  return;
}
fan.vaseGui.EditText.prototype.multiLine = function()
{
  return this.m_multiLine;
}
fan.vaseGui.EditText.prototype.multiLine$ = function(it)
{
  this.m_multiLine = it;
  return;
}
fan.vaseGui.EditText.prototype.editable = function()
{
  return this.m_editable;
}
fan.vaseGui.EditText.prototype.editable$ = function(it)
{
  this.m_editable = it;
  return;
}
fan.vaseGui.EditText.prototype.updateHost = function()
{
  if (this.host() == null)
  {
    return;
  }
  ;
  this.host().setType(this.m_multiLine,this.m_inputType,this.m_editable);
  var p = fan.vaseGui.Coord.make(0,0);
  this.posOnWindow(p);
  this.host().setPos(p.m_x,p.m_y,this.width(),this.height());
  this.host().setStyle(this.font(),((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_black),((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_white));
  this.host().setText(this.text());
  this.host().focus();
  return;
}
fan.vaseGui.EditText.prototype.layoutChildren = function(force)
{
  fan.vaseGui.Widget.prototype.layoutChildren.call(this,force);
  this.updateHost();
  return;
}
fan.vaseGui.EditText.prototype.prefContentSize = function()
{
  var w = this.font().width(this.text());
  var h = this.font().height();
  if (fan.sys.ObjUtil.compareGT(this.m_multiLine,1))
  {
    h = fan.sys.Int.mult(h,this.m_multiLine);
  }
  ;
  return fan.vaseGui.Dimension.make(w,h);
}
fan.vaseGui.EditText.prototype.startCaret = function()
{
  var $this = this;
  if ((this.m_timer != null && !this.m_timer.m_canceled))
  {
    return;
  }
  ;
  this.m_caret.m_visible = true;
  this.repaint();
  this.m_timer = fan.vaseGui.Timer.make(500,fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u25,
    function()
    {
      if ($this.hasFocus())
      {
        $this.m_caret.m_visible = !$this.m_caret.m_visible;
        $this.repaint();
      }
      ;
      return;
    }));
  this.m_timer.start();
  return;
}
fan.vaseGui.EditText.prototype.stopCaret = function()
{
  (function($this) { var $_u74 = $this.m_timer; if ($_u74 == null) return null; return $_u74.cancel(); })(this);
  return;
}
fan.vaseGui.EditText.prototype.onKeyEvent = function(e)
{
  return;
}
fan.vaseGui.EditText.prototype.keyEvent = function(e)
{
  if (fan.sys.ObjUtil.equals(e.key(),((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_backspace)))
  {
    if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.KeyEvent.static$init ? fan.vaseWindow.KeyEvent.static$init() : null),fan.vaseWindow.KeyEvent.m_pressed)))
    {
      if (fan.sys.ObjUtil.compareGT(fan.sys.Str.size(this.text()),0))
      {
        this.text$(fan.sys.Str.getRange(this.text(),fan.sys.Range.make(0,-2)));
        this.repaint();
      }
      ;
    }
    ;
    return;
  }
  ;
  if (fan.sys.ObjUtil.compareNE(e.type(),((fan.vaseWindow.KeyEvent.static$init ? fan.vaseWindow.KeyEvent.static$init() : null),fan.vaseWindow.KeyEvent.m_typed)))
  {
    return;
  }
  ;
  if (fan.sys.ObjUtil.compareLT(e.keyChar(),32))
  {
    return;
  }
  ;
  this.text$(fan.sys.Str.plus(this.text(),fan.sys.Int.toChar(fan.sys.ObjUtil.coerce(e.keyChar(),fan.sys.Int.$type))));
  this.repaint();
  return;
}
fan.vaseGui.EditText.prototype.gestureEvent = function(e)
{
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_click)))
  {
    this.focus();
    e.consume();
  }
  ;
  return;
}
fan.vaseGui.EditText.prototype.m_text = null;
fan.vaseGui.EditText.prototype.m_hint = null;
fan.vaseGui.EditText.prototype.m_password = false;
fan.vaseGui.EditText.prototype.m_caret = null;
fan.vaseGui.EditText.prototype.m_timer = null;
fan.vaseGui.EditText.prototype.m_host = null;
fan.vaseGui.EditText.prototype.m_inputType = 0;
fan.vaseGui.EditText.prototype.m_multiLine = 0;
fan.vaseGui.EditText.prototype.m_editable = false;
fan.vaseGui.NativeCaret = fan.sys.Obj.$extend(fan.vaseGui.Caret);
fan.vaseGui.NativeCaret.prototype.$ctor = function()
{
  fan.vaseGui.Caret.prototype.$ctor.call(this);
  var $this = this;
  this.m_lineIndex = 0;
  return;
}
fan.vaseGui.NativeCaret.prototype.$typeof = function() { return fan.vaseGui.NativeCaret.$type; }
fan.vaseGui.NativeCaret.prototype.x = function()
{
  return this.m_x;
}
fan.vaseGui.NativeCaret.prototype.x$ = function(it)
{
  this.m_x = it;
  return;
}
fan.vaseGui.NativeCaret.prototype.y = function()
{
  return this.m_y;
}
fan.vaseGui.NativeCaret.prototype.y$ = function(it)
{
  this.m_y = it;
  return;
}
fan.vaseGui.NativeCaret.prototype.lineIndex = function()
{
  return this.m_lineIndex;
}
fan.vaseGui.NativeCaret.prototype.lineIndex$ = function(it)
{
  this.m_lineIndex = it;
  return;
}
fan.vaseGui.NativeCaret.prototype.area = function()
{
  return this.m_area;
}
fan.vaseGui.NativeCaret.prototype.area$ = function(it)
{
  this.m_area = it;
  return;
}
fan.vaseGui.NativeCaret.make = function(area) {
  var self = new fan.vaseGui.NativeCaret();
  fan.vaseGui.NativeCaret.make$(self,area);
  return self;
  }
fan.vaseGui.NativeCaret.make$ = function(self,area)
{
  fan.vaseGui.Caret.make$(self);
  ;
  self.m_area = area;
  return;
}
fan.vaseGui.NativeCaret.prototype.host = function()
{
  return this.m_host;
}
fan.vaseGui.NativeCaret.prototype.host$ = function(it)
{
  this.m_host = it;
  return;
}
fan.vaseGui.NativeCaret.prototype.updateHost = function(all)
{
  if (all === undefined) all = true;
  if (this.host() == null)
  {
    return;
  }
  ;
  if (!all)
  {
    var c = fan.vaseGui.Coord.make(0,0);
    this.m_area.posOnWindow(c);
    this.host().setPos(fan.sys.Int.plus(c.m_x,this.m_x),fan.sys.Int.plus(c.m_y,this.m_y),1,this.m_area.rowHeight());
    return;
  }
  ;
  this.host().setType(0,0,true);
  var c = fan.vaseGui.Coord.make(0,0);
  this.m_area.posOnWindow(c);
  this.host().setPos(fan.sys.Int.plus(c.m_x,this.m_x),fan.sys.Int.plus(c.m_y,this.m_y),1,this.m_area.rowHeight());
  this.host().setStyle(this.m_area.font(),((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_black),((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_white));
  this.host().setText(this.text());
  this.host().select(this.m_offset,this.m_offset);
  this.host().focus();
  return;
}
fan.vaseGui.NativeCaret.prototype.text = function()
{
  return this.m_area.model().line(this.m_lineIndex);
}
fan.vaseGui.NativeCaret.prototype.textChange = function(text)
{
  this.m_area.model().modifyLine(this.m_lineIndex,text,false);
  this.m_area.repaint();
  return text;
}
fan.vaseGui.NativeCaret.prototype.keyAction = function(text)
{
  return;
}
fan.vaseGui.NativeCaret.prototype.onKeyEvent = function(e)
{
  this.m_area.keyEvent(e);
  return;
}
fan.vaseGui.NativeCaret.prototype.m_x = 0;
fan.vaseGui.NativeCaret.prototype.m_y = 0;
fan.vaseGui.NativeCaret.prototype.m_lineIndex = 0;
fan.vaseGui.NativeCaret.prototype.m_area = null;
fan.vaseGui.NativeCaret.prototype.m_host = null;
fan.vaseGui.TextArea = fan.sys.Obj.$extend(fan.vaseGui.ScrollBase);
fan.vaseGui.TextArea.prototype.$ctor = function()
{
  fan.vaseGui.ScrollBase.prototype.$ctor.call(this);
  var $this = this;
  this.m_tabSpacing = 4;
  this.m_caret = fan.vaseGui.NativeCaret.make(this);
  this.m_selectionStart = -1;
  this.m_selectionEnd = -1;
  this.m_draging = false;
  this.m_onModify$Store = "_once_";
  this.m_onVerify$Store = "_once_";
  this.m_onVerifyKey$Store = "_once_";
  this.m_onSelect$Store = "_once_";
  this.m_onCaret$Store = "_once_";
  this.m_model = fan.vaseGui.DefTextAreaModel.make("");
  this.m_onModelModifyFunc = fan.sys.ObjUtil.coerce(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u75,
    function(e)
    {
      $this.onModelModify(fan.sys.ObjUtil.coerce(e,fan.vaseWindow.Event.$type));
      return;
    }),fan.std.Type.find("sys::Func<sys::Void,vaseWindow::Event>"));
  return;
}
fan.vaseGui.TextArea.prototype.$typeof = function() { return fan.vaseGui.TextArea.$type; }
fan.vaseGui.TextArea.prototype.tabSpacing = function()
{
  return this.m_tabSpacing;
}
fan.vaseGui.TextArea.prototype.tabSpacing$ = function(it)
{
  this.m_tabSpacing = it;
  return;
}
fan.vaseGui.TextArea.prototype.text = function()
{
  return this.model().text();
}
fan.vaseGui.TextArea.prototype.text$ = function(it)
{
  this.model().text$(it);
  return;
}
fan.vaseGui.TextArea.prototype.rowHeight = function()
{
  return this.font().height();
}
fan.vaseGui.TextArea.prototype.caret = function()
{
  return this.m_caret;
}
fan.vaseGui.TextArea.prototype.caret$ = function(it)
{
  this.m_caret = it;
  return;
}
fan.vaseGui.TextArea.prototype.font = function()
{
  return this.getStyle().font();
}
fan.vaseGui.TextArea.prototype.selectionStart = function()
{
  return this.m_selectionStart;
}
fan.vaseGui.TextArea.prototype.selectionStart$ = function(it)
{
  this.m_selectionStart = it;
  return;
}
fan.vaseGui.TextArea.prototype.selectionEnd = function()
{
  return this.m_selectionEnd;
}
fan.vaseGui.TextArea.prototype.selectionEnd$ = function(it)
{
  this.m_selectionEnd = it;
  return;
}
fan.vaseGui.TextArea.prototype.draging = function()
{
  return this.m_draging;
}
fan.vaseGui.TextArea.prototype.draging$ = function(it)
{
  this.m_draging = it;
  return;
}
fan.vaseGui.TextArea.make = function(f) {
  var self = new fan.vaseGui.TextArea();
  fan.vaseGui.TextArea.make$(self,f);
  return self;
  }
fan.vaseGui.TextArea.make$ = function(self,f)
{
  if (f === undefined) f = null;
  fan.vaseGui.ScrollBase.make$(self);
  ;
  if (f != null)
  {
    f.call(self);
  }
  ;
  return;
}
fan.vaseGui.TextArea.prototype.prefContentSize = function()
{
  var h = fan.sys.Int.mult(this.model().lineCount(),this.rowHeight());
  var max = 0;
  var maxIndex = 0;
  var n = this.model().lineCount();
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,n); i = fan.sys.Int.increment(i))
  {
    var line = this.model().line(i);
    if (fan.sys.ObjUtil.compareLT(max,fan.sys.Str.size(line)))
    {
      max = fan.sys.Str.size(line);
      maxIndex = i;
    }
    ;
  }
  ;
  var w = this.font().width(this.model().line(maxIndex));
  return fan.vaseGui.Dimension.make(w,h);
}
fan.vaseGui.TextArea.prototype.onModify = function()
{
  if (this.m_onModify$Store === "_once_")
  {
    this.m_onModify$Store = this.onModify$Once$TextArea();
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_onModify$Store,fan.vaseWindow.EventListeners.$type);
}
fan.vaseGui.TextArea.prototype.onVerify = function()
{
  if (this.m_onVerify$Store === "_once_")
  {
    this.m_onVerify$Store = this.onVerify$Once$TextArea();
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_onVerify$Store,fan.vaseWindow.EventListeners.$type);
}
fan.vaseGui.TextArea.prototype.onVerifyKey = function()
{
  if (this.m_onVerifyKey$Store === "_once_")
  {
    this.m_onVerifyKey$Store = this.onVerifyKey$Once$TextArea();
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_onVerifyKey$Store,fan.vaseWindow.EventListeners.$type);
}
fan.vaseGui.TextArea.prototype.onSelect = function()
{
  if (this.m_onSelect$Store === "_once_")
  {
    this.m_onSelect$Store = this.onSelect$Once$TextArea();
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_onSelect$Store,fan.vaseWindow.EventListeners.$type);
}
fan.vaseGui.TextArea.prototype.onCaret = function()
{
  if (this.m_onCaret$Store === "_once_")
  {
    this.m_onCaret$Store = this.onCaret$Once$TextArea();
  }
  ;
  return fan.sys.ObjUtil.coerce(this.m_onCaret$Store,fan.vaseWindow.EventListeners.$type);
}
fan.vaseGui.TextArea.prototype.model = function()
{
  return this.m_model;
}
fan.vaseGui.TextArea.prototype.model$ = function(it)
{
  var old = this.m_model;
  if (old != null)
  {
    old.onModify().remove(fan.sys.ObjUtil.coerce(this.m_onModelModifyFunc,fan.std.Type.find("sys::Func<sys::Void,vaseWindow::Event?>")));
  }
  ;
  if (it != null)
  {
    it.onModify().add(fan.sys.ObjUtil.coerce(this.m_onModelModifyFunc,fan.std.Type.find("sys::Func<sys::Void,vaseWindow::Event?>")));
  }
  ;
  this.m_model = it;
  return;
}
fan.vaseGui.TextArea.prototype.onModelModifyFunc = function()
{
  return this.m_onModelModifyFunc;
}
fan.vaseGui.TextArea.prototype.onModelModifyFunc$ = function(it)
{
  this.m_onModelModifyFunc = it;
  return;
}
fan.vaseGui.TextArea.prototype.onModelModify = function(event)
{
  return;
}
fan.vaseGui.TextArea.prototype.updateCaretByCoord = function(x,y)
{
  var absX = fan.sys.Int.plus(x,this.offsetX());
  var absY = fan.sys.Int.plus(y,this.offsetY());
  var lineIndex = fan.sys.Int.div(absY,this.rowHeight());
  if (fan.sys.ObjUtil.compareGE(lineIndex,this.model().lineCount()))
  {
    return null;
  }
  ;
  var lineOffset = this.textIndexAtPos(this.model().line(lineIndex),absX);
  this.updateCaretAt(lineIndex,lineOffset);
  return fan.sys.ObjUtil.coerce(fan.sys.Int.plus(this.model().offsetAtLine(lineIndex),lineOffset),fan.sys.Int.$type.toNullable());
}
fan.vaseGui.TextArea.prototype.doPaint = function(g)
{
  if (this.m_caret.host() != null)
  {
    var caretPos = this.m_caret.host().caretPos();
    if (fan.sys.ObjUtil.compareNE(this.m_caret.m_offset,caretPos))
    {
      fan.sys.ObjUtil.echo(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("reset caret: ",fan.sys.ObjUtil.coerce(this.m_caret.m_offset,fan.sys.Obj.$type.toNullable()))," to "),fan.sys.ObjUtil.coerce(caretPos,fan.sys.Obj.$type.toNullable())));
      this.updateCaretAt(this.m_caret.m_lineIndex,caretPos,true,false);
    }
    ;
  }
  ;
  fan.vaseGui.ScrollBase.prototype.doPaint.call(this,g);
  return;
}
fan.vaseGui.TextArea.prototype.updateCaretAt = function(row,column,clipColumn,updateAll)
{
  if (clipColumn === undefined) clipColumn = true;
  if (updateAll === undefined) updateAll = true;
  if (fan.sys.ObjUtil.compareLT(row,0))
  {
    row = 0;
  }
  else
  {
    if (fan.sys.ObjUtil.compareGE(row,this.model().lineCount()))
    {
      row = fan.sys.Int.minus(this.model().lineCount(),1);
    }
    ;
  }
  ;
  if (clipColumn)
  {
    if (fan.sys.ObjUtil.compareLT(column,0))
    {
      column = 0;
    }
    else
    {
      if (fan.sys.ObjUtil.compareGT(column,fan.sys.Str.size(this.model().line(row))))
      {
        column = fan.sys.Str.size(this.model().line(row));
      }
      ;
    }
    ;
  }
  else
  {
    if (fan.sys.ObjUtil.equals(column,-1))
    {
      row = fan.sys.Int.decrement(row);
      if (fan.sys.ObjUtil.compareLT(row,0))
      {
        row = 0;
      }
      ;
      column = fan.sys.Str.size(this.model().line(row));
    }
    ;
    if (fan.sys.ObjUtil.compareGT(column,fan.sys.Str.size(this.model().line(row))))
    {
      if (fan.sys.ObjUtil.compareLT(row,fan.sys.Int.minus(this.model().lineCount(),1)))
      {
        row = fan.sys.Int.increment(row);
        column = 0;
      }
      else
      {
        if (fan.sys.ObjUtil.compareGT(column,0))
        {
          column = fan.sys.Int.decrement(column);
        }
        ;
      }
      ;
    }
    ;
  }
  ;
  fan.sys.ObjUtil.echo(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus(fan.sys.Str.plus("row ",fan.sys.ObjUtil.coerce(row,fan.sys.Obj.$type.toNullable()))," column "),fan.sys.ObjUtil.coerce(column,fan.sys.Obj.$type.toNullable()))," "),this.model().line(row)));
  this.m_caret.m_lineIndex = row;
  this.m_caret.m_y = fan.sys.Int.mult(row,this.rowHeight());
  this.m_caret.m_x = this.font().width(fan.sys.Str.getRange(this.model().line(row),fan.sys.Range.make(0,column,true)));
  this.m_caret.m_visible = true;
  this.m_caret.m_offset = column;
  (function($this) { var $_u76 = $this.getRootView().host(); if ($_u76 == null) return null; return $_u76.textInput($this.m_caret); })(this);
  this.m_caret.updateHost(updateAll);
  return;
}
fan.vaseGui.TextArea.prototype.offsetAtPos = function(x,y)
{
  var absX = fan.sys.Int.plus(x,this.offsetX());
  var absY = fan.sys.Int.plus(y,this.offsetY());
  var lineIndex = fan.sys.Int.div(absY,this.rowHeight());
  if (fan.sys.ObjUtil.compareGE(lineIndex,this.model().lineCount()))
  {
    return null;
  }
  ;
  var lineOffset = this.textIndexAtPos(this.model().line(lineIndex),absX);
  return fan.sys.ObjUtil.coerce(fan.sys.Int.plus(this.model().offsetAtLine(lineIndex),lineOffset),fan.sys.Int.$type.toNullable());
}
fan.vaseGui.TextArea.prototype.textIndexAtPos = function(text,w)
{
  var size = fan.sys.Str.size(text);
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,size); i = fan.sys.Int.increment(i))
  {
    var tw = this.font().width(fan.sys.Str.getRange(text,fan.sys.Range.make(0,fan.sys.Int.plus(i,1),true)));
    if (fan.sys.ObjUtil.compareGT(tw,w))
    {
      return i;
    }
    ;
  }
  ;
  return size;
}
fan.vaseGui.TextArea.prototype.hasSelected = function()
{
  return (fan.sys.ObjUtil.compareNE(this.m_selectionStart,this.m_selectionEnd) && fan.sys.ObjUtil.compareNE(this.m_selectionStart,-1) && fan.sys.ObjUtil.compareNE(this.m_selectionEnd,-1));
}
fan.vaseGui.TextArea.prototype.showLine = function(lineIndex)
{
  return;
}
fan.vaseGui.TextArea.prototype.motionEvent = function(e)
{
  fan.vaseGui.ScrollBase.prototype.motionEvent.call(this,e);
  if (e.consumed())
  {
    return;
  }
  ;
  var sx = fan.sys.Int.minus(fan.sys.ObjUtil.coerce(e.relativeX(),fan.sys.Int.$type),this.x());
  var sy = fan.sys.Int.minus(fan.sys.ObjUtil.coerce(e.relativeY(),fan.sys.Int.$type),this.y());
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_pressed)))
  {
    this.clearSelected();
    var offset = (function($this) { var $_u77 = $this.updateCaretByCoord(sx,sy); if ($_u77 != null) return $_u77; return fan.sys.ObjUtil.coerce($this.model().charCount(),fan.sys.Int.$type.toNullable()); })(this);
    this.m_selectionStart = fan.sys.ObjUtil.coerce(offset,fan.sys.Int.$type);
    this.m_draging = true;
    this.repaint();
    e.consume();
  }
  else
  {
    if (this.m_draging)
    {
      if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_moved)))
      {
        this.m_selectionEnd = fan.sys.ObjUtil.coerce((function($this) { var $_u78 = $this.offsetAtPos(sx,sy); if ($_u78 != null) return $_u78; return fan.sys.ObjUtil.coerce($this.model().charCount(),fan.sys.Int.$type.toNullable()); })(this),fan.sys.Int.$type);
        if (fan.sys.ObjUtil.compareGT(this.m_selectionStart,this.m_selectionEnd))
        {
          var temp = this.m_selectionStart;
          this.m_selectionStart = this.m_selectionEnd;
          this.m_selectionEnd = temp;
        }
        ;
        this.repaint();
        e.consume();
      }
      ;
      if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_released)))
      {
        if (this.m_caret.host() != null)
        {
          this.m_caret.updateHost();
        }
        ;
        this.m_draging = false;
        e.consume();
        this.repaint();
      }
      ;
    }
    else
    {
      if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_released)))
      {
        if (this.m_caret.host() != null)
        {
          this.m_caret.updateHost();
        }
        ;
        this.m_draging = false;
      }
      ;
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.TextArea.prototype.clearSelected = function()
{
  this.m_selectionStart = -1;
  this.m_selectionEnd = -1;
  return;
}
fan.vaseGui.TextArea.prototype.keyEvent = function(e)
{
  var $this = this;
  fan.sys.ObjUtil.echo(e);
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.KeyEvent.static$init ? fan.vaseWindow.KeyEvent.static$init() : null),fan.vaseWindow.KeyEvent.m_pressed)))
  {
    if (fan.sys.ObjUtil.equals(e.key(),((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_left)))
    {
      this.updateCaretAt(this.m_caret.m_lineIndex,fan.sys.Int.minus(this.m_caret.m_offset,1),false);
      this.clearSelected();
      this.repaint();
      e.consume();
      return;
    }
    else
    {
      if (fan.sys.ObjUtil.equals(e.key(),((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_right)))
      {
        this.updateCaretAt(this.m_caret.m_lineIndex,fan.sys.Int.plus(this.m_caret.m_offset,1),false);
        this.clearSelected();
        this.repaint();
        e.consume();
        return;
      }
      else
      {
        if (fan.sys.ObjUtil.equals(e.key(),((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_down)))
        {
          this.updateCaretAt(fan.sys.Int.plus(this.m_caret.m_lineIndex,1),this.m_caret.m_offset);
          this.clearSelected();
          this.repaint();
          e.consume();
          return;
        }
        else
        {
          if (fan.sys.ObjUtil.equals(e.key(),((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_up)))
          {
            this.updateCaretAt(fan.sys.Int.minus(this.m_caret.m_lineIndex,1),this.m_caret.m_offset);
            this.clearSelected();
            this.repaint();
            e.consume();
            return;
          }
          else
          {
            if (fan.sys.ObjUtil.equals(e.key(),((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_enter)))
            {
              if (this.hasSelected())
              {
                this.model().modify(this.m_selectionStart,fan.sys.Int.minus(this.m_selectionEnd,this.m_selectionStart),"\n");
              }
              else
              {
                var pos = fan.sys.Int.plus(this.model().offsetAtLine(this.m_caret.m_lineIndex),this.m_caret.m_offset);
                this.model().modify(pos,0,"\n");
              }
              ;
              this.updateCaretAt(fan.sys.Int.plus(this.m_caret.m_lineIndex,1),0);
              this.clearSelected();
              this.repaint();
              e.consume();
              return;
            }
            else
            {
              if ((fan.sys.ObjUtil.equals(e.key().primary(),((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_c)) && e.key().isCtrl()))
              {
                if (this.hasSelected())
                {
                  fan.vaseWindow.Toolkit.cur().clipboard().setText(this.model().textRange(this.m_selectionStart,fan.sys.Int.minus(this.m_selectionEnd,this.m_selectionStart)));
                }
                ;
                e.consume();
                return;
              }
              else
              {
                if ((fan.sys.ObjUtil.equals(e.key().primary(),((fan.vaseWindow.Key.static$init ? fan.vaseWindow.Key.static$init() : null),fan.vaseWindow.Key.m_v)) && e.key().isCtrl()))
                {
                  if (this.hasSelected())
                  {
                    this.model().modify(this.m_selectionStart,fan.sys.Int.minus(this.m_selectionEnd,this.m_selectionStart),"");
                    this.clearSelected();
                  }
                  ;
                  fan.vaseWindow.Toolkit.cur().clipboard().getText(fan.sys.Func.make$closure(
                    fan.vaseGui.$clos$_u79,
                    function(text)
                    {
                      if (text == null)
                      {
                        return;
                      }
                      ;
                      var pos = fan.sys.Int.plus($this.model().offsetAtLine($this.m_caret.m_lineIndex),$this.m_caret.m_offset);
                      $this.model().modify(pos,0,fan.sys.ObjUtil.coerce(text,fan.sys.Str.$type));
                      $this.repaint();
                      return;
                    }));
                  e.consume();
                  return;
                }
                else
                {
                  if (!e.key().hasModifier())
                  {
                    if (this.hasSelected())
                    {
                      this.model().modify(this.m_selectionStart,fan.sys.Int.minus(this.m_selectionEnd,this.m_selectionStart),"");
                      this.clearSelected();
                      this.repaint();
                      e.consume();
                    }
                    ;
                  }
                  ;
                }
                ;
              }
              ;
            }
            ;
          }
          ;
        }
        ;
      }
      ;
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.TextArea.prototype.onModify$Once$TextArea = function()
{
  return fan.vaseWindow.EventListeners.make();
}
fan.vaseGui.TextArea.prototype.onVerify$Once$TextArea = function()
{
  return fan.vaseWindow.EventListeners.make();
}
fan.vaseGui.TextArea.prototype.onVerifyKey$Once$TextArea = function()
{
  return fan.vaseWindow.EventListeners.make();
}
fan.vaseGui.TextArea.prototype.onSelect$Once$TextArea = function()
{
  return fan.vaseWindow.EventListeners.make();
}
fan.vaseGui.TextArea.prototype.onCaret$Once$TextArea = function()
{
  return fan.vaseWindow.EventListeners.make();
}
fan.vaseGui.TextArea.prototype.m_tabSpacing = 0;
fan.vaseGui.TextArea.prototype.m_text = null;
fan.vaseGui.TextArea.prototype.m_caret = null;
fan.vaseGui.TextArea.prototype.m_selectionStart = 0;
fan.vaseGui.TextArea.prototype.m_selectionEnd = 0;
fan.vaseGui.TextArea.prototype.m_draging = false;
fan.vaseGui.TextArea.prototype.m_model = null;
fan.vaseGui.TextArea.prototype.m_onModelModifyFunc = null;
fan.vaseGui.TextArea.prototype.m_onModify$Store = null;
fan.vaseGui.TextArea.prototype.m_onVerify$Store = null;
fan.vaseGui.TextArea.prototype.m_onVerifyKey$Store = null;
fan.vaseGui.TextArea.prototype.m_onSelect$Store = null;
fan.vaseGui.TextArea.prototype.m_onCaret$Store = null;
fan.vaseGui.ProgressView = fan.sys.Obj.$extend(fan.vaseGui.Widget);
fan.vaseGui.ProgressView.prototype.$ctor = function()
{
  fan.vaseGui.Widget.prototype.$ctor.call(this);
  var $this = this;
  this.m_proVal = fan.sys.Float.make(0.0);
  return;
}
fan.vaseGui.ProgressView.prototype.$typeof = function() { return fan.vaseGui.ProgressView.$type; }
fan.vaseGui.ProgressView.prototype.proVal = function()
{
  return this.m_proVal;
}
fan.vaseGui.ProgressView.prototype.proVal$ = function(it)
{
  this.m_proVal = it;
  return;
}
fan.vaseGui.ProgressView.make = function() {
  var self = new fan.vaseGui.ProgressView();
  fan.vaseGui.ProgressView.make$(self);
  return self;
  }
fan.vaseGui.ProgressView.make$ = function(self)
{
  fan.vaseGui.Widget.make$(self);
  ;
  self.m_padding = fan.vaseGui.Insets.make(20);
  self.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_wrapContent);
  self.m_useRenderCache = false;
  return;
}
fan.vaseGui.ProgressView.prototype.doPaint = function(g)
{
  fan.vaseGui.Widget.prototype.doPaint.call(this,g);
  this.repaint();
  return;
}
fan.vaseGui.ProgressView.prototype.m_proVal = fan.sys.Float.make(0);
fan.vaseGui.ComboBox = fan.sys.Obj.$extend(fan.vaseGui.ButtonBase);
fan.vaseGui.ComboBox.prototype.$ctor = function()
{
  fan.vaseGui.ButtonBase.prototype.$ctor.call(this);
  var $this = this;
  this.m_items = fan.sys.List.make(fan.sys.Obj.$type);
  this.m_selectedIndex = -1;
  return;
}
fan.vaseGui.ComboBox.prototype.$typeof = function() { return fan.vaseGui.ComboBox.$type; }
fan.vaseGui.ComboBox.prototype.items = function()
{
  return this.m_items;
}
fan.vaseGui.ComboBox.prototype.items$ = function(it)
{
  this.m_items = it;
  return;
}
fan.vaseGui.ComboBox.prototype.selectedIndex = function()
{
  return this.m_selectedIndex;
}
fan.vaseGui.ComboBox.prototype.selectedIndex$ = function(it)
{
  var val = it;
  if (fan.sys.ObjUtil.equals(this.m_selectedIndex,val))
  {
    return;
  }
  ;
  var e = fan.vaseWindow.StateChangedEvent.make(fan.sys.ObjUtil.coerce(this.m_selectedIndex,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(val,fan.sys.Obj.$type.toNullable()),fan.vaseGui.ComboBox.$type.slot("selectedIndex"),this);
  this.onStateChanged().fire(e);
  this.m_selectedIndex = val;
  this.text$(fan.sys.ObjUtil.toStr(this.m_items.get(val)));
  return;
}
fan.vaseGui.ComboBox.prototype.list = function()
{
  return this.m_list;
}
fan.vaseGui.ComboBox.prototype.list$ = function(it)
{
  this.m_list = it;
  return;
}
fan.vaseGui.ComboBox.make = function() {
  var self = new fan.vaseGui.ComboBox();
  fan.vaseGui.ComboBox.make$(self);
  return self;
  }
fan.vaseGui.ComboBox.make$ = function(self)
{
  var $this = self;
  fan.vaseGui.ButtonBase.make$(self);
  ;
  self.text$("v");
  self.onAction().add(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u10,
    function(it)
    {
      $this.show();
      return;
    }));
  self.m_padding = fan.vaseGui.Insets.make(10);
  return;
}
fan.vaseGui.ComboBox.prototype.select = function(btn,i)
{
  this.selectedIndex$(i);
  this.repaint();
  this.hide();
  return;
}
fan.vaseGui.ComboBox.prototype.show = function()
{
  var $this = this;
  if (this.m_list != null)
  {
    this.hide();
    return;
  }
  ;
  var pane = fan.vaseGui.VBox.make();
  this.m_list = pane;
  this.m_items.each(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u80,
    function(item,i)
    {
      var $name = fan.sys.ObjUtil.toStr(item);
      var button = null;
      button = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.ButtonBase.make(),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u69,
        function(it)
        {
          it.text$($name);
          it.styleClass$("menuItem");
          it.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_matchParent);
          it.onAction().add(fan.sys.Func.make$closure(
            fan.vaseGui.$clos$_u10,
            function(it)
            {
              $this.select(fan.sys.ObjUtil.coerce(button,fan.vaseGui.ButtonBase.$type),i);
              return;
            }));
          return;
        })),fan.vaseGui.ButtonBase.$type);
      pane.add(fan.sys.ObjUtil.coerce(button,fan.vaseGui.Widget.$type));
      return;
    }));
  var root = this.getRootView();
  var overlayer = root.topOverlayer();
  overlayer.add(pane);
  var pos = fan.vaseGui.Coord.make(0,0);
  var rc = this.posOnWindow(pos);
  pane.m_spacing = fan.sys.Float.make(0.0);
  pane.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_fixed);
  pane.m_layoutParam.m_widthVal = this.pixelToDp(this.width());
  pane.m_layoutParam.m_offsetX = this.pixelToDp(pos.m_x);
  pane.m_layoutParam.m_offsetY = this.pixelToDp(fan.sys.Int.plus(pos.m_y,this.height()));
  pane.focus();
  pane.onFocusChanged().add(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u72,
    function(e)
    {
      if (fan.sys.ObjUtil.equals(e.data(),false))
      {
        $this.hide();
      }
      ;
      return;
    }));
  overlayer.relayout();
  root.m_modal = true;
  return;
}
fan.vaseGui.ComboBox.prototype.hide = function()
{
  if ((this.m_list == null || this.m_list.m_parent == null))
  {
    return;
  }
  ;
  var p = fan.sys.ObjUtil.coerce(this.m_list.m_parent,fan.vaseGui.WidgetGroup.$type);
  p.remove(this.m_list);
  var root = this.getRootView();
  root.focusIt(null);
  root.m_modal = false;
  p.repaint();
  this.m_list = null;
  return;
}
fan.vaseGui.ComboBox.prototype.m_items = null;
fan.vaseGui.ComboBox.prototype.m_selectedIndex = 0;
fan.vaseGui.ComboBox.prototype.m_list = null;
fan.vaseGui.Toast = fan.sys.Obj.$extend(fan.vaseGui.Label);
fan.vaseGui.Toast.prototype.$ctor = function()
{
  fan.vaseGui.Label.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.Toast.prototype.$typeof = function() { return fan.vaseGui.Toast.$type; }
fan.vaseGui.Toast.make = function() {
  var self = new fan.vaseGui.Toast();
  fan.vaseGui.Toast.make$(self);
  return self;
  }
fan.vaseGui.Toast.make$ = function(self)
{
  fan.vaseGui.Label.make$(self);
  self.m_layoutParam.m_widthType = ((fan.vaseGui.SizeType.static$init ? fan.vaseGui.SizeType.static$init() : null),fan.vaseGui.SizeType.m_wrapContent);
  self.m_layoutParam.m_hAlign = ((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_center);
  self.m_layoutParam.m_vAlign = ((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_end);
  self.m_layoutParam.m_offsetY = fan.sys.Float.make(-50.0);
  self.m_padding = fan.vaseGui.Insets.make(20);
  return;
}
fan.vaseGui.Toast.prototype.show = function(w)
{
  var $this = this;
  var root = w.getRootView();
  var overlayer = root.topOverlayer();
  overlayer.add(this);
  overlayer.relayout();
  var a = fan.vaseGui.AnimExt.fadeInAnim(this);
  a.whenDone().add(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u10,
    function(it)
    {
      fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.AnimExt.fadeOutAnim($this),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u44,
        function(it)
        {
          it.m_delay = 1000;
          return;
        })),fan.vaseGui.Animation.$type).start();
      return;
    }));
  a.start();
  return;
}
fan.vaseGui.Effect = function() {}
fan.vaseGui.Effect.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.Effect.prototype.$typeof = function() { return fan.vaseGui.Effect.$type; }
fan.vaseGui.BlurEffect = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.BlurEffect.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_gray = false;
  return;
}
fan.vaseGui.BlurEffect.prototype.$typeof = function() { return fan.vaseGui.BlurEffect.$type; }
fan.vaseGui.BlurEffect.prototype.bufImage = function()
{
  return this.m_bufImage;
}
fan.vaseGui.BlurEffect.prototype.bufImage$ = function(it)
{
  this.m_bufImage = it;
  return;
}
fan.vaseGui.BlurEffect.prototype.originalGraphics = function()
{
  return this.m_originalGraphics;
}
fan.vaseGui.BlurEffect.prototype.originalGraphics$ = function(it)
{
  this.m_originalGraphics = it;
  return;
}
fan.vaseGui.BlurEffect.prototype.gray = function()
{
  return this.m_gray;
}
fan.vaseGui.BlurEffect.prototype.gray$ = function(it)
{
  this.m_gray = it;
  return;
}
fan.vaseGui.BlurEffect.prototype.tryMakeImage = function(img,size)
{
  if (fan.sys.ObjUtil.equals(fan.vaseWindow.Toolkit.cur().$name(),"SWT"))
  {
    img = null;
  }
  ;
  if (img != null)
  {
    if (fan.sys.ObjUtil.compareNE(img.size(),size))
    {
      img = null;
    }
    ;
  }
  ;
  if (img == null)
  {
    img = fan.vaseGraphics.BufImage.make(size);
  }
  ;
  return fan.sys.ObjUtil.coerce(img,fan.vaseGraphics.BufImage.$type);
}
fan.vaseGui.BlurEffect.prototype.prepare = function(widget,g)
{
  this.m_bufImage = this.tryMakeImage(this.m_bufImage,fan.vaseGraphics.Size.make(widget.width(),widget.height()));
  this.m_originalGraphics = g;
  var imageGraphics = this.m_bufImage.graphics();
  imageGraphics.brush$(fan.vaseGraphics.Color.makeArgb(0,0,0,0));
  imageGraphics.clearRect(0,0,widget.width(),widget.height());
  return imageGraphics;
}
fan.vaseGui.BlurEffect.prototype.filter = function(bufImage)
{
  var $this = this;
  var w = bufImage.size().m_w;
  var h = bufImage.size().m_h;
  var matrix = fan.sys.List.make(fan.std.Type.find("sys::List<sys::Int>"), [fan.sys.List.make(fan.sys.Int.$type, [fan.sys.ObjUtil.coerce(0,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(0,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(0,fan.sys.Obj.$type.toNullable())]),fan.sys.List.make(fan.sys.Int.$type, [fan.sys.ObjUtil.coerce(0,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(0,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(0,fan.sys.Obj.$type.toNullable())]),fan.sys.List.make(fan.sys.Int.$type, [fan.sys.ObjUtil.coerce(0,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(0,fan.sys.Obj.$type.toNullable()),fan.sys.ObjUtil.coerce(0,fan.sys.Obj.$type.toNullable())])]);
  var values = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.sys.List.make(fan.sys.Obj.$type.toNullable()),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u81,
    function(it)
    {
      it.size$(9);
      return;
    })),fan.std.Type.find("sys::List<sys::Obj?>")),fan.std.Type.find("sys::List<sys::Int>"));
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,w); i = fan.sys.Int.increment(i))
  {
    for (var j = 0; fan.sys.ObjUtil.compareLT(j,h); j = fan.sys.Int.increment(j))
    {
      fan.vaseGui.BlurEffect.readPixel(bufImage,i,j,values);
      fan.vaseGui.BlurEffect.fillMatrix(matrix,values);
      var c = this.avgMatrix(matrix);
      bufImage.setPixel(i,j,c);
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.BlurEffect.readPixel = function(img,x,y,pixels)
{
  var xStart = fan.sys.Int.minus(x,1);
  var yStart = fan.sys.Int.minus(y,1);
  var current = 0;
  var w = img.size().m_w;
  var h = img.size().m_h;
  for (var i = xStart; fan.sys.ObjUtil.compareLT(i,fan.sys.Int.plus(3,xStart)); (function($this) { var $_u82 = i; i = fan.sys.Int.increment(i); return $_u82; })(this))
  {
    for (var j = yStart; fan.sys.ObjUtil.compareLT(j,fan.sys.Int.plus(3,yStart)); (function($this) { var $_u83 = j; j = fan.sys.Int.increment(j); return $_u83; })(this))
    {
      var tx = i;
      if (fan.sys.ObjUtil.compareLT(tx,0))
      {
        tx = x;
      }
      else
      {
        if (fan.sys.ObjUtil.compareGE(tx,w))
        {
          tx = x;
        }
        ;
      }
      ;
      var ty = j;
      if (fan.sys.ObjUtil.compareLT(ty,0))
      {
        ty = y;
      }
      else
      {
        if (fan.sys.ObjUtil.compareGE(ty,h))
        {
          ty = y;
        }
        ;
      }
      ;
      pixels.set((function($this) { var $_u84 = current; current = fan.sys.Int.increment(current); return $_u84; })(this),fan.sys.ObjUtil.coerce(img.getPixel(tx,ty),fan.sys.Obj.$type.toNullable()));
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.BlurEffect.fillMatrix = function(matrix,values)
{
  var filled = 0;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,matrix.size()); (function($this) { var $_u85 = i; i = fan.sys.Int.increment(i); return $_u85; })(this))
  {
    var x = matrix.get(i);
    for (var j = 0; fan.sys.ObjUtil.compareLT(j,x.size()); (function($this) { var $_u86 = j; j = fan.sys.Int.increment(j); return $_u86; })(this))
    {
      x.set(j,fan.sys.ObjUtil.coerce(values.get((function($this) { var $_u87 = filled; filled = fan.sys.Int.increment(filled); return $_u87; })(this)),fan.sys.Obj.$type.toNullable()));
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.BlurEffect.prototype.avgMatrix = function(matrix)
{
  var r = 0;
  var g = 0;
  var b = 0;
  var a = 0;
  for (var i = 0; fan.sys.ObjUtil.compareLT(i,matrix.size()); (function($this) { var $_u88 = i; i = fan.sys.Int.increment(i); return $_u88; })(this))
  {
    var x = matrix.get(i);
    for (var j = 0; fan.sys.ObjUtil.compareLT(j,x.size()); (function($this) { var $_u89 = j; j = fan.sys.Int.increment(j); return $_u89; })(this))
    {
      var c = x.get(j);
      r = fan.sys.Int.plus(r,fan.vaseGraphics.Color.getR(c));
      g = fan.sys.Int.plus(g,fan.vaseGraphics.Color.getG(c));
      b = fan.sys.Int.plus(b,fan.vaseGraphics.Color.getB(c));
      a = fan.sys.Int.plus(a,fan.vaseGraphics.Color.getA(c));
    }
    ;
  }
  ;
  a = fan.sys.Int.div(a,9);
  r = fan.sys.Int.div(r,9);
  g = fan.sys.Int.div(g,9);
  b = fan.sys.Int.div(b,9);
  if (this.m_gray)
  {
    var p = fan.sys.Int.div(fan.sys.Int.plus(fan.sys.Int.plus(r,g),b),3);
    return fan.vaseGraphics.Color.fromArgb(a,p,p,p);
  }
  ;
  return fan.vaseGraphics.Color.fromArgb(a,r,g,b);
}
fan.vaseGui.BlurEffect.prototype.end = function(paint)
{
  this.filter(fan.sys.ObjUtil.coerce(this.m_bufImage,fan.vaseGraphics.BufImage.$type));
  this.m_originalGraphics.drawImage(fan.sys.ObjUtil.coerce(this.m_bufImage,fan.vaseGraphics.Image.$type),0,0);
  return;
}
fan.vaseGui.BlurEffect.make = function() {
  var self = new fan.vaseGui.BlurEffect();
  fan.vaseGui.BlurEffect.make$(self);
  return self;
  }
fan.vaseGui.BlurEffect.make$ = function(self)
{
  ;
  return;
}
fan.vaseGui.BlurEffect.prototype.m_bufImage = null;
fan.vaseGui.BlurEffect.prototype.m_originalGraphics = null;
fan.vaseGui.BlurEffect.prototype.m_gray = false;
fan.vaseGui.ShadowEffect = fan.sys.Obj.$extend(fan.vaseGui.BlurEffect);
fan.vaseGui.ShadowEffect.prototype.$ctor = function()
{
  fan.vaseGui.BlurEffect.prototype.$ctor.call(this);
  var $this = this;
  this.m_blurRadius = 1;
  this.m_xOffset = 2;
  this.m_yOffset = 2;
  return;
}
fan.vaseGui.ShadowEffect.prototype.$typeof = function() { return fan.vaseGui.ShadowEffect.$type; }
fan.vaseGui.ShadowEffect.prototype.blurRadius = function()
{
  return this.m_blurRadius;
}
fan.vaseGui.ShadowEffect.prototype.blurRadius$ = function(it)
{
  this.m_blurRadius = it;
  return;
}
fan.vaseGui.ShadowEffect.prototype.xOffset = function()
{
  return this.m_xOffset;
}
fan.vaseGui.ShadowEffect.prototype.xOffset$ = function(it)
{
  this.m_xOffset = it;
  return;
}
fan.vaseGui.ShadowEffect.prototype.yOffset = function()
{
  return this.m_yOffset;
}
fan.vaseGui.ShadowEffect.prototype.yOffset$ = function(it)
{
  this.m_yOffset = it;
  return;
}
fan.vaseGui.ShadowEffect.make = function() {
  var self = new fan.vaseGui.ShadowEffect();
  fan.vaseGui.ShadowEffect.make$(self);
  return self;
  }
fan.vaseGui.ShadowEffect.make$ = function(self)
{
  fan.vaseGui.BlurEffect.make$(self);
  ;
  self.m_gray = true;
  return;
}
fan.vaseGui.ShadowEffect.prototype.prepare = function(widget,g)
{
  var size = fan.vaseGraphics.Size.make(fan.sys.Int.plus(widget.width(),2),fan.sys.Int.plus(widget.height(),2));
  this.m_bufImage = this.tryMakeImage(this.m_bufImage,size);
  this.m_originalGraphics = g;
  var imageGraphics = this.m_bufImage.graphics();
  imageGraphics.brush$(fan.vaseGraphics.Color.makeArgb(0,0,0,0));
  imageGraphics.clearRect(0,0,widget.width(),widget.height());
  imageGraphics.brush$(fan.vaseGraphics.Color.makeArgb(255,255,255,255));
  return imageGraphics;
}
fan.vaseGui.ShadowEffect.prototype.end = function(paint)
{
  this.filter(fan.sys.ObjUtil.coerce(this.m_bufImage,fan.vaseGraphics.BufImage.$type));
  this.m_originalGraphics.drawImage(fan.sys.ObjUtil.coerce(this.m_bufImage,fan.vaseGraphics.Image.$type),this.m_xOffset,this.m_yOffset);
  paint.call(fan.sys.ObjUtil.coerce(this.m_originalGraphics,fan.vaseGraphics.Graphics.$type));
  return;
}
fan.vaseGui.ShadowEffect.prototype.m_blurRadius = 0;
fan.vaseGui.ShadowEffect.prototype.m_xOffset = 0;
fan.vaseGui.ShadowEffect.prototype.m_yOffset = 0;
fan.vaseGui.GestureEvent = fan.sys.Obj.$extend(fan.vaseWindow.Event);
fan.vaseGui.GestureEvent.prototype.$ctor = function()
{
  fan.vaseWindow.Event.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.GestureEvent.prototype.$typeof = function() { return fan.vaseGui.GestureEvent.$type; }
fan.vaseGui.GestureEvent.prototype.x = function()
{
  return this.m_x;
}
fan.vaseGui.GestureEvent.prototype.x$ = function(it)
{
  this.m_x = it;
  return;
}
fan.vaseGui.GestureEvent.prototype.y = function()
{
  return this.m_y;
}
fan.vaseGui.GestureEvent.prototype.y$ = function(it)
{
  this.m_y = it;
  return;
}
fan.vaseGui.GestureEvent.prototype.deltaX = function()
{
  return this.m_deltaX;
}
fan.vaseGui.GestureEvent.prototype.deltaX$ = function(it)
{
  this.m_deltaX = it;
  return;
}
fan.vaseGui.GestureEvent.prototype.deltaY = function()
{
  return this.m_deltaY;
}
fan.vaseGui.GestureEvent.prototype.deltaY$ = function(it)
{
  this.m_deltaY = it;
  return;
}
fan.vaseGui.GestureEvent.prototype.pressure = function()
{
  return this.m_pressure;
}
fan.vaseGui.GestureEvent.prototype.pressure$ = function(it)
{
  this.m_pressure = it;
  return;
}
fan.vaseGui.GestureEvent.prototype.size = function()
{
  return this.m_size;
}
fan.vaseGui.GestureEvent.prototype.size$ = function(it)
{
  this.m_size = it;
  return;
}
fan.vaseGui.GestureEvent.prototype.speedX = function()
{
  return this.m_speedX;
}
fan.vaseGui.GestureEvent.prototype.speedX$ = function(it)
{
  this.m_speedX = it;
  return;
}
fan.vaseGui.GestureEvent.prototype.speedY = function()
{
  return this.m_speedY;
}
fan.vaseGui.GestureEvent.prototype.speedY$ = function(it)
{
  this.m_speedY = it;
  return;
}
fan.vaseGui.GestureEvent.prototype.relativeX = function()
{
  return this.m_relativeX;
}
fan.vaseGui.GestureEvent.prototype.relativeX$ = function(it)
{
  this.m_relativeX = it;
  return;
}
fan.vaseGui.GestureEvent.prototype.relativeY = function()
{
  return this.m_relativeY;
}
fan.vaseGui.GestureEvent.prototype.relativeY$ = function(it)
{
  this.m_relativeY = it;
  return;
}
fan.vaseGui.GestureEvent.make = function(type) {
  var self = new fan.vaseGui.GestureEvent();
  fan.vaseGui.GestureEvent.make$(self,type);
  return self;
  }
fan.vaseGui.GestureEvent.make$ = function(self,type)
{
  fan.vaseWindow.Event.make$(self);
  self.type$(type);
  return;
}
fan.vaseGui.GestureEvent.static$init = function()
{
  if (fan.vaseGui.GestureEvent.static$inited) return;
  fan.vaseGui.GestureEvent.static$inited = true;
  fan.vaseGui.GestureEvent.m_click = 1;
  fan.vaseGui.GestureEvent.m_longPress = 2;
  fan.vaseGui.GestureEvent.m_fling = 3;
  fan.vaseGui.GestureEvent.m_doubleClick = 4;
  fan.vaseGui.GestureEvent.m_drag = 5;
  fan.vaseGui.GestureEvent.m_drop = 6;
  fan.vaseGui.GestureEvent.m_multiTouch = 7;
  return;
}
fan.vaseGui.GestureEvent.m_click = 0;
fan.vaseGui.GestureEvent.m_longPress = 0;
fan.vaseGui.GestureEvent.m_fling = 0;
fan.vaseGui.GestureEvent.m_doubleClick = 0;
fan.vaseGui.GestureEvent.m_drag = 0;
fan.vaseGui.GestureEvent.m_drop = 0;
fan.vaseGui.GestureEvent.m_multiTouch = 0;
fan.vaseGui.GestureEvent.prototype.m_x = null;
fan.vaseGui.GestureEvent.prototype.m_y = null;
fan.vaseGui.GestureEvent.prototype.m_deltaX = null;
fan.vaseGui.GestureEvent.prototype.m_deltaY = null;
fan.vaseGui.GestureEvent.prototype.m_pressure = null;
fan.vaseGui.GestureEvent.prototype.m_size = null;
fan.vaseGui.GestureEvent.prototype.m_speedX = null;
fan.vaseGui.GestureEvent.prototype.m_speedY = null;
fan.vaseGui.GestureEvent.prototype.m_relativeX = null;
fan.vaseGui.GestureEvent.prototype.m_relativeY = null;
fan.vaseGui.MultiTouchEvent = fan.sys.Obj.$extend(fan.vaseGui.GestureEvent);
fan.vaseGui.MultiTouchEvent.prototype.$ctor = function()
{
  fan.vaseGui.GestureEvent.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.MultiTouchEvent.prototype.$typeof = function() { return fan.vaseGui.MultiTouchEvent.$type; }
fan.vaseGui.MultiTouchEvent.prototype.centerX = function()
{
  return this.m_centerX;
}
fan.vaseGui.MultiTouchEvent.prototype.centerX$ = function(it)
{
  this.m_centerX = it;
  return;
}
fan.vaseGui.MultiTouchEvent.prototype.centerY = function()
{
  return this.m_centerY;
}
fan.vaseGui.MultiTouchEvent.prototype.centerY$ = function(it)
{
  this.m_centerY = it;
  return;
}
fan.vaseGui.MultiTouchEvent.prototype.distance = function()
{
  return this.m_distance;
}
fan.vaseGui.MultiTouchEvent.prototype.distance$ = function(it)
{
  this.m_distance = it;
  return;
}
fan.vaseGui.MultiTouchEvent.prototype.scale = function()
{
  return this.m_scale;
}
fan.vaseGui.MultiTouchEvent.prototype.scale$ = function(it)
{
  this.m_scale = it;
  return;
}
fan.vaseGui.MultiTouchEvent.prototype.rotate = function()
{
  return this.m_rotate;
}
fan.vaseGui.MultiTouchEvent.prototype.rotate$ = function(it)
{
  this.m_rotate = it;
  return;
}
fan.vaseGui.MultiTouchEvent.prototype.offsetX = function()
{
  return this.m_offsetX;
}
fan.vaseGui.MultiTouchEvent.prototype.offsetX$ = function(it)
{
  this.m_offsetX = it;
  return;
}
fan.vaseGui.MultiTouchEvent.prototype.offsetY = function()
{
  return this.m_offsetY;
}
fan.vaseGui.MultiTouchEvent.prototype.offsetY$ = function(it)
{
  this.m_offsetY = it;
  return;
}
fan.vaseGui.MultiTouchEvent.make = function() {
  var self = new fan.vaseGui.MultiTouchEvent();
  fan.vaseGui.MultiTouchEvent.make$(self);
  return self;
  }
fan.vaseGui.MultiTouchEvent.make$ = function(self)
{
  fan.vaseGui.GestureEvent.make$(self,((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_multiTouch));
  return;
}
fan.vaseGui.MultiTouchEvent.prototype.m_centerX = fan.sys.Float.make(0);
fan.vaseGui.MultiTouchEvent.prototype.m_centerY = fan.sys.Float.make(0);
fan.vaseGui.MultiTouchEvent.prototype.m_distance = fan.sys.Float.make(0);
fan.vaseGui.MultiTouchEvent.prototype.m_scale = fan.sys.Float.make(0);
fan.vaseGui.MultiTouchEvent.prototype.m_rotate = fan.sys.Float.make(0);
fan.vaseGui.MultiTouchEvent.prototype.m_offsetX = fan.sys.Float.make(0);
fan.vaseGui.MultiTouchEvent.prototype.m_offsetY = fan.sys.Float.make(0);
fan.vaseGui.GestureState = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.GestureState.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.GestureState.prototype.$typeof = function() { return fan.vaseGui.GestureState.$type; }
fan.vaseGui.GestureState.prototype.machine = function()
{
  return this.m_machine;
}
fan.vaseGui.GestureState.prototype.machine$ = function(it)
{
  this.m_machine = it;
  return;
}
fan.vaseGui.GestureState.make = function(machine) {
  var self = new fan.vaseGui.GestureState();
  fan.vaseGui.GestureState.make$(self,machine);
  return self;
  }
fan.vaseGui.GestureState.make$ = function(self,machine)
{
  self.m_machine = machine;
  return;
}
fan.vaseGui.GestureState.prototype.makeEvent = function(e,type)
{
  var ge = fan.vaseGui.GestureEvent.make(type);
  ge.m_x = e.x();
  ge.m_y = e.y();
  ge.m_pressure = e.pressure();
  ge.m_size = e.size();
  ge.m_speedX = e.speed();
  ge.m_speedY = e.speed();
  ge.rawEvent$(e);
  return ge;
}
fan.vaseGui.GestureState.prototype.onEnter = function(e)
{
  return;
}
fan.vaseGui.GestureState.prototype.onExit = function(e)
{
  return;
}
fan.vaseGui.GestureState.prototype.m_machine = null;
fan.vaseGui.MultiTouchState = fan.sys.Obj.$extend(fan.vaseGui.GestureState);
fan.vaseGui.MultiTouchState.prototype.$ctor = function()
{
  fan.vaseGui.GestureState.prototype.$ctor.call(this);
  var $this = this;
  this.m_x0 = 0;
  this.m_y0 = 0;
  this.m_x1 = 0;
  this.m_y1 = 0;
  this.m_centerX = fan.sys.Float.make(0.0);
  this.m_centerY = fan.sys.Float.make(0.0);
  this.m_distance = fan.sys.Float.make(0.0);
  return;
}
fan.vaseGui.MultiTouchState.prototype.$typeof = function() { return fan.vaseGui.MultiTouchState.$type; }
fan.vaseGui.MultiTouchState.prototype.x0 = function()
{
  return this.m_x0;
}
fan.vaseGui.MultiTouchState.prototype.x0$ = function(it)
{
  this.m_x0 = it;
  return;
}
fan.vaseGui.MultiTouchState.prototype.y0 = function()
{
  return this.m_y0;
}
fan.vaseGui.MultiTouchState.prototype.y0$ = function(it)
{
  this.m_y0 = it;
  return;
}
fan.vaseGui.MultiTouchState.prototype.x1 = function()
{
  return this.m_x1;
}
fan.vaseGui.MultiTouchState.prototype.x1$ = function(it)
{
  this.m_x1 = it;
  return;
}
fan.vaseGui.MultiTouchState.prototype.y1 = function()
{
  return this.m_y1;
}
fan.vaseGui.MultiTouchState.prototype.y1$ = function(it)
{
  this.m_y1 = it;
  return;
}
fan.vaseGui.MultiTouchState.prototype.centerX = function()
{
  return this.m_centerX;
}
fan.vaseGui.MultiTouchState.prototype.centerX$ = function(it)
{
  this.m_centerX = it;
  return;
}
fan.vaseGui.MultiTouchState.prototype.centerY = function()
{
  return this.m_centerY;
}
fan.vaseGui.MultiTouchState.prototype.centerY$ = function(it)
{
  this.m_centerY = it;
  return;
}
fan.vaseGui.MultiTouchState.prototype.distance = function()
{
  return this.m_distance;
}
fan.vaseGui.MultiTouchState.prototype.distance$ = function(it)
{
  this.m_distance = it;
  return;
}
fan.vaseGui.MultiTouchState.make = function(machine) {
  var self = new fan.vaseGui.MultiTouchState();
  fan.vaseGui.MultiTouchState.make$(self,machine);
  return self;
  }
fan.vaseGui.MultiTouchState.make$ = function(self,machine)
{
  fan.vaseGui.GestureState.make$(self,machine);
  ;
  return;
}
fan.vaseGui.MultiTouchState.prototype.onEnter = function(e)
{
  var e1 = e.pointers().get(0);
  var e2 = e.pointers().get(1);
  this.m_x0 = fan.sys.ObjUtil.coerce(e1.x(),fan.sys.Int.$type);
  this.m_y0 = fan.sys.ObjUtil.coerce(e1.y(),fan.sys.Int.$type);
  this.m_x1 = fan.sys.ObjUtil.coerce(e2.x(),fan.sys.Int.$type);
  this.m_y1 = fan.sys.ObjUtil.coerce(e2.y(),fan.sys.Int.$type);
  this.m_distance = fan.vaseGui.MultiTouchState.getDistance(this.m_x0,this.m_y0,this.m_x1,this.m_y1);
  this.m_centerX = fan.sys.Int.divFloat(fan.sys.Int.plus(this.m_x0,this.m_x1),fan.sys.Float.make(2.0));
  this.m_centerY = fan.sys.Int.divFloat(fan.sys.Int.plus(this.m_y0,this.m_y1),fan.sys.Float.make(2.0));
  return;
}
fan.vaseGui.MultiTouchState.getDistance = function(x1,y1,x2,y2)
{
  var dx = fan.sys.Int.minus(x2,x1);
  var dy = fan.sys.Int.minus(y2,y1);
  return fan.std.Math.sqrt(fan.sys.Int.toFloat(fan.sys.Int.plus(fan.sys.Int.mult(dx,dx),fan.sys.Int.mult(dy,dy))));
}
fan.vaseGui.MultiTouchState.dotProduct = function(x1,y1,x2,y2)
{
  return fan.sys.Int.toFloat(fan.sys.Int.plus(fan.sys.Int.mult(x1,x2),fan.sys.Int.mult(y1,y2)));
}
fan.vaseGui.MultiTouchState.getAngle = function(x1,y1,x2,y2)
{
  var product = fan.vaseGui.MultiTouchState.dotProduct(x1,y1,x2,y2);
  var len1 = fan.std.Math.sqrt(fan.sys.Int.toFloat(fan.sys.Int.plus(fan.sys.Int.mult(x1,x1),fan.sys.Int.mult(y1,y1))));
  var len2 = fan.std.Math.sqrt(fan.sys.Int.toFloat(fan.sys.Int.plus(fan.sys.Int.mult(x2,x2),fan.sys.Int.mult(y2,y2))));
  return fan.sys.Float.div(product,fan.sys.Float.mult(len1,len2));
}
fan.vaseGui.MultiTouchState.prototype.onEvent = function(e)
{
  var $this = this;
  if ((e.pointers() == null || (e.pointers() != null && fan.sys.ObjUtil.compareLE(e.pointers().size(),1))))
  {
    this.m_machine.onFinished(e);
    return;
  }
  ;
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_moved)))
  {
    var e1 = e.pointers().get(0);
    var e2 = e.pointers().get(1);
    var nx0 = e1.x();
    var ny0 = e1.y();
    var nx1 = e2.x();
    var ny1 = e2.y();
    var ndistance = fan.vaseGui.MultiTouchState.getDistance(fan.sys.ObjUtil.coerce(nx0,fan.sys.Int.$type),fan.sys.ObjUtil.coerce(ny0,fan.sys.Int.$type),fan.sys.ObjUtil.coerce(nx1,fan.sys.Int.$type),fan.sys.ObjUtil.coerce(ny1,fan.sys.Int.$type));
    var ncenterX = fan.sys.Int.divFloat(fan.sys.Int.plus(fan.sys.ObjUtil.coerce(nx0,fan.sys.Int.$type),fan.sys.ObjUtil.coerce(nx1,fan.sys.Int.$type)),fan.sys.Float.make(2.0));
    var ncenterY = fan.sys.Int.divFloat(fan.sys.Int.plus(fan.sys.ObjUtil.coerce(ny0,fan.sys.Int.$type),fan.sys.ObjUtil.coerce(ny1,fan.sys.Int.$type)),fan.sys.Float.make(2.0));
    var multiEvent = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.MultiTouchEvent.make(),fan.sys.Func.make$closure(
      fan.vaseGui.$clos$_u90,
      function(it)
      {
        it.m_distance = ndistance;
        it.m_centerX = ncenterX;
        it.m_centerY = ncenterY;
        return;
      })),fan.vaseGui.MultiTouchEvent.$type);
    multiEvent.m_scale = fan.sys.Float.div(ndistance,this.m_distance);
    multiEvent.m_offsetX = fan.sys.Float.minus(ncenterX,this.m_centerX);
    multiEvent.m_offsetY = fan.sys.Float.minus(ncenterY,this.m_centerY);
    var dx = fan.sys.Int.minus(this.m_x1,this.m_x0);
    var dy = fan.sys.Int.minus(this.m_y1,this.m_y0);
    var ndx = fan.sys.Int.minus(fan.sys.ObjUtil.coerce(nx1,fan.sys.Int.$type),fan.sys.ObjUtil.coerce(nx0,fan.sys.Int.$type));
    var ndy = fan.sys.Int.minus(fan.sys.ObjUtil.coerce(ny1,fan.sys.Int.$type),fan.sys.ObjUtil.coerce(ny0,fan.sys.Int.$type));
    var angle = fan.vaseGui.MultiTouchState.getAngle(dx,dy,ndx,ndy);
    multiEvent.m_rotate = angle;
    this.m_x0 = fan.sys.ObjUtil.coerce(nx0,fan.sys.Int.$type);
    this.m_y0 = fan.sys.ObjUtil.coerce(ny0,fan.sys.Int.$type);
    this.m_x1 = fan.sys.ObjUtil.coerce(nx1,fan.sys.Int.$type);
    this.m_y1 = fan.sys.ObjUtil.coerce(ny1,fan.sys.Int.$type);
    this.m_distance = ndistance;
    this.m_centerX = ncenterX;
    this.m_centerY = ncenterY;
    multiEvent.rawEvent$(e);
    this.m_machine.m_onGestureEvent.fire(multiEvent);
  }
  ;
  return;
}
fan.vaseGui.MultiTouchState.prototype.m_x0 = 0;
fan.vaseGui.MultiTouchState.prototype.m_y0 = 0;
fan.vaseGui.MultiTouchState.prototype.m_x1 = 0;
fan.vaseGui.MultiTouchState.prototype.m_y1 = 0;
fan.vaseGui.MultiTouchState.prototype.m_centerX = fan.sys.Float.make(0);
fan.vaseGui.MultiTouchState.prototype.m_centerY = fan.sys.Float.make(0);
fan.vaseGui.MultiTouchState.prototype.m_distance = fan.sys.Float.make(0);
fan.vaseGui.NoneState = fan.sys.Obj.$extend(fan.vaseGui.GestureState);
fan.vaseGui.NoneState.prototype.$ctor = function()
{
  fan.vaseGui.GestureState.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.NoneState.prototype.$typeof = function() { return fan.vaseGui.NoneState.$type; }
fan.vaseGui.NoneState.make = function(machine) {
  var self = new fan.vaseGui.NoneState();
  fan.vaseGui.NoneState.make$(self,machine);
  return self;
  }
fan.vaseGui.NoneState.make$ = function(self,machine)
{
  fan.vaseGui.GestureState.make$(self,machine);
  return;
}
fan.vaseGui.NoneState.prototype.onEvent = function(e)
{
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_pressed)))
  {
    var ns = fan.vaseGui.DownState.make(this.m_machine);
    this.m_machine.setCurrentState(ns,e);
  }
  ;
  return;
}
fan.vaseGui.DownState = fan.sys.Obj.$extend(fan.vaseGui.GestureState);
fan.vaseGui.DownState.prototype.$ctor = function()
{
  fan.vaseGui.GestureState.prototype.$ctor.call(this);
  var $this = this;
  this.m_valid = true;
  this.m_lastX = 0;
  this.m_lastY = 0;
  return;
}
fan.vaseGui.DownState.prototype.$typeof = function() { return fan.vaseGui.DownState.$type; }
fan.vaseGui.DownState.prototype.valid = function()
{
  return this.m_valid;
}
fan.vaseGui.DownState.prototype.valid$ = function(it)
{
  this.m_valid = it;
  return;
}
fan.vaseGui.DownState.prototype.lastX = function()
{
  return this.m_lastX;
}
fan.vaseGui.DownState.prototype.lastX$ = function(it)
{
  this.m_lastX = it;
  return;
}
fan.vaseGui.DownState.prototype.lastY = function()
{
  return this.m_lastY;
}
fan.vaseGui.DownState.prototype.lastY$ = function(it)
{
  this.m_lastY = it;
  return;
}
fan.vaseGui.DownState.make = function(machine) {
  var self = new fan.vaseGui.DownState();
  fan.vaseGui.DownState.make$(self,machine);
  return self;
  }
fan.vaseGui.DownState.make$ = function(self,machine)
{
  fan.vaseGui.GestureState.make$(self,machine);
  ;
  return;
}
fan.vaseGui.DownState.prototype.onEnter = function(e)
{
  var $this = this;
  this.m_valid = true;
  this.m_lastX = fan.sys.ObjUtil.coerce(e.x(),fan.sys.Int.$type);
  this.m_lastY = fan.sys.ObjUtil.coerce(e.y(),fan.sys.Int.$type);
  fan.vaseWindow.Toolkit.cur().callLater(this.m_machine.m_longPressTimeLimit,fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u25,
    function()
    {
      if ((fan.sys.ObjUtil.equals($this.m_machine.m_currentState,$this) && $this.m_valid))
      {
        var ge = $this.makeEvent(e,((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_longPress));
        $this.m_machine.m_onGestureEvent.fire(ge);
        e.consume();
        $this.m_machine.onFinished(e);
      }
      ;
      $this.m_lastX = fan.sys.ObjUtil.coerce(e.x(),fan.sys.Int.$type);
      $this.m_lastY = fan.sys.ObjUtil.coerce(e.y(),fan.sys.Int.$type);
      $this.m_valid = false;
      return;
    }));
  return;
}
fan.vaseGui.DownState.prototype.onEvent = function(e)
{
  if ((fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_longPressed)) || fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_clicked))))
  {
    return;
  }
  ;
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_released)))
  {
    if (this.m_machine.m_supportDoubleClick)
    {
      var ns = fan.vaseGui.OneClickState.make(this.m_machine);
      this.m_machine.setCurrentState(ns,e);
    }
    else
    {
      var ge = this.makeEvent(e,((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_click));
      this.m_machine.m_onGestureEvent.fire(ge);
      e.consume();
      this.m_machine.onFinished(e);
    }
    ;
  }
  else
  {
    if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_moved)))
    {
      var dx = fan.sys.Int.minus(fan.sys.ObjUtil.coerce(e.x(),fan.sys.Int.$type),this.m_lastX);
      var dy = fan.sys.Int.minus(fan.sys.ObjUtil.coerce(e.y(),fan.sys.Int.$type),this.m_lastY);
      var distance = fan.std.Math.sqrt(fan.sys.Int.toFloat(fan.sys.Int.plus(fan.sys.Int.mult(dx,dx),fan.sys.Int.mult(dy,dy))));
      if (fan.sys.ObjUtil.compareGT(distance,fan.sys.Int.toFloat(fan.vaseGui.DisplayMetrics.dpToPixel(fan.sys.Float.make(10.0)))))
      {
        var ns = fan.vaseGui.DragState.make(this.m_machine);
        this.m_machine.setCurrentState(ns,e);
      }
      else
      {
        this.m_lastX = fan.sys.ObjUtil.coerce(e.x(),fan.sys.Int.$type);
        this.m_lastY = fan.sys.ObjUtil.coerce(e.y(),fan.sys.Int.$type);
      }
      ;
    }
    else
    {
      this.m_machine.onFinished(e);
    }
    ;
  }
  ;
  this.m_valid = false;
  return;
}
fan.vaseGui.DownState.prototype.m_valid = false;
fan.vaseGui.DownState.prototype.m_lastX = 0;
fan.vaseGui.DownState.prototype.m_lastY = 0;
fan.vaseGui.OneClickState = fan.sys.Obj.$extend(fan.vaseGui.GestureState);
fan.vaseGui.OneClickState.prototype.$ctor = function()
{
  fan.vaseGui.GestureState.prototype.$ctor.call(this);
  var $this = this;
  this.m_valid = true;
  return;
}
fan.vaseGui.OneClickState.prototype.$typeof = function() { return fan.vaseGui.OneClickState.$type; }
fan.vaseGui.OneClickState.prototype.valid = function()
{
  return this.m_valid;
}
fan.vaseGui.OneClickState.prototype.valid$ = function(it)
{
  this.m_valid = it;
  return;
}
fan.vaseGui.OneClickState.make = function(machine) {
  var self = new fan.vaseGui.OneClickState();
  fan.vaseGui.OneClickState.make$(self,machine);
  return self;
  }
fan.vaseGui.OneClickState.make$ = function(self,machine)
{
  fan.vaseGui.GestureState.make$(self,machine);
  ;
  return;
}
fan.vaseGui.OneClickState.prototype.onEnter = function(e)
{
  var $this = this;
  this.m_valid = true;
  fan.vaseWindow.Toolkit.cur().callLater(this.m_machine.m_doubleClickTimeLimt,fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u25,
    function()
    {
      if ((fan.sys.ObjUtil.equals($this.m_machine.m_currentState,$this) && $this.m_valid))
      {
        var ge = $this.makeEvent(e,((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_click));
        $this.m_machine.m_onGestureEvent.fire(ge);
        e.consume();
        $this.m_machine.onFinished(e);
      }
      ;
      $this.m_valid = false;
      return;
    }));
  return;
}
fan.vaseGui.OneClickState.prototype.onEvent = function(e)
{
  if ((fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_other)) || fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_clicked))))
  {
    return;
  }
  ;
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_pressed)))
  {
    var ns = fan.vaseGui.TwoDownState.make(this.m_machine);
    this.m_machine.setCurrentState(ns,e);
  }
  else
  {
    this.m_machine.onFinished(e);
  }
  ;
  this.m_valid = false;
  return;
}
fan.vaseGui.OneClickState.prototype.m_valid = false;
fan.vaseGui.TwoDownState = fan.sys.Obj.$extend(fan.vaseGui.GestureState);
fan.vaseGui.TwoDownState.prototype.$ctor = function()
{
  fan.vaseGui.GestureState.prototype.$ctor.call(this);
  var $this = this;
  this.m_valid = true;
  return;
}
fan.vaseGui.TwoDownState.prototype.$typeof = function() { return fan.vaseGui.TwoDownState.$type; }
fan.vaseGui.TwoDownState.prototype.valid = function()
{
  return this.m_valid;
}
fan.vaseGui.TwoDownState.prototype.valid$ = function(it)
{
  this.m_valid = it;
  return;
}
fan.vaseGui.TwoDownState.make = function(machine) {
  var self = new fan.vaseGui.TwoDownState();
  fan.vaseGui.TwoDownState.make$(self,machine);
  return self;
  }
fan.vaseGui.TwoDownState.make$ = function(self,machine)
{
  fan.vaseGui.GestureState.make$(self,machine);
  ;
  return;
}
fan.vaseGui.TwoDownState.prototype.onEnter = function(e)
{
  var $this = this;
  this.m_valid = true;
  fan.vaseWindow.Toolkit.cur().callLater(this.m_machine.m_longPressTimeLimit,fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u25,
    function()
    {
      if ((fan.sys.ObjUtil.equals($this.m_machine.m_currentState,$this) && $this.m_valid))
      {
        var ge = $this.makeEvent(e,((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_longPress));
        ge.flag$(1);
        $this.m_machine.m_onGestureEvent.fire(ge);
        e.consume();
        $this.m_machine.onFinished(e);
      }
      ;
      $this.m_valid = false;
      return;
    }));
  return;
}
fan.vaseGui.TwoDownState.prototype.onEvent = function(e)
{
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_longPressed)))
  {
    return;
  }
  ;
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_released)))
  {
    var ge = this.makeEvent(e,((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_doubleClick));
    this.m_machine.m_onGestureEvent.fire(ge);
    e.consume();
    this.m_machine.onFinished(e);
  }
  else
  {
    if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_moved)))
    {
      var ns = fan.vaseGui.DragState.make(this.m_machine);
      ns.m_click = true;
      this.m_machine.setCurrentState(ns,e);
    }
    else
    {
      this.m_machine.onFinished(e);
    }
    ;
  }
  ;
  this.m_valid = false;
  return;
}
fan.vaseGui.TwoDownState.prototype.m_valid = false;
fan.vaseGui.DragState = fan.sys.Obj.$extend(fan.vaseGui.GestureState);
fan.vaseGui.DragState.prototype.$ctor = function()
{
  fan.vaseGui.GestureState.prototype.$ctor.call(this);
  var $this = this;
  this.m_click = false;
  this.m_beginX = 0;
  this.m_beginY = 0;
  this.m_lastX = 0;
  this.m_lastY = 0;
  this.m_beginTime = 0;
  return;
}
fan.vaseGui.DragState.prototype.$typeof = function() { return fan.vaseGui.DragState.$type; }
fan.vaseGui.DragState.prototype.click = function()
{
  return this.m_click;
}
fan.vaseGui.DragState.prototype.click$ = function(it)
{
  this.m_click = it;
  return;
}
fan.vaseGui.DragState.prototype.beginX = function()
{
  return this.m_beginX;
}
fan.vaseGui.DragState.prototype.beginX$ = function(it)
{
  this.m_beginX = it;
  return;
}
fan.vaseGui.DragState.prototype.beginY = function()
{
  return this.m_beginY;
}
fan.vaseGui.DragState.prototype.beginY$ = function(it)
{
  this.m_beginY = it;
  return;
}
fan.vaseGui.DragState.prototype.lastX = function()
{
  return this.m_lastX;
}
fan.vaseGui.DragState.prototype.lastX$ = function(it)
{
  this.m_lastX = it;
  return;
}
fan.vaseGui.DragState.prototype.lastY = function()
{
  return this.m_lastY;
}
fan.vaseGui.DragState.prototype.lastY$ = function(it)
{
  this.m_lastY = it;
  return;
}
fan.vaseGui.DragState.prototype.beginTime = function()
{
  return this.m_beginTime;
}
fan.vaseGui.DragState.prototype.beginTime$ = function(it)
{
  this.m_beginTime = it;
  return;
}
fan.vaseGui.DragState.make = function(machine) {
  var self = new fan.vaseGui.DragState();
  fan.vaseGui.DragState.make$(self,machine);
  return self;
  }
fan.vaseGui.DragState.make$ = function(self,machine)
{
  fan.vaseGui.GestureState.make$(self,machine);
  ;
  return;
}
fan.vaseGui.DragState.prototype.onEnter = function(e)
{
  this.m_beginX = fan.sys.ObjUtil.coerce(e.x(),fan.sys.Int.$type);
  this.m_beginY = fan.sys.ObjUtil.coerce(e.y(),fan.sys.Int.$type);
  this.m_lastX = fan.sys.ObjUtil.coerce(e.x(),fan.sys.Int.$type);
  this.m_lastY = fan.sys.ObjUtil.coerce(e.y(),fan.sys.Int.$type);
  this.m_beginTime = fan.std.Duration.nowTicks();
  return;
}
fan.vaseGui.DragState.prototype.asFling = function(e)
{
  var elapsedTime = fan.sys.Int.div(fan.sys.Int.minus(fan.std.Duration.nowTicks(),this.m_beginTime),1000000);
  var dx = fan.sys.Int.minus(fan.sys.ObjUtil.coerce(e.x(),fan.sys.Int.$type),this.m_beginX);
  var dy = fan.sys.Int.minus(fan.sys.ObjUtil.coerce(e.y(),fan.sys.Int.$type),this.m_beginY);
  var distance = fan.std.Math.sqrt(fan.sys.Int.toFloat(fan.sys.Int.plus(fan.sys.Int.mult(dx,dx),fan.sys.Int.mult(dy,dy))));
  var minDis = fan.sys.Int.toFloat(fan.vaseGui.DisplayMetrics.dpToPixel(fan.sys.Float.make(100.0)));
  if (fan.sys.ObjUtil.compareGT(distance,minDis))
  {
    var ge = this.makeEvent(e,((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_fling));
    ge.m_deltaX = fan.sys.ObjUtil.coerce(dx,fan.sys.Int.$type.toNullable());
    ge.m_deltaY = fan.sys.ObjUtil.coerce(dy,fan.sys.Int.$type.toNullable());
    if (this.m_click)
    {
      ge.flag$(1);
    }
    ;
    ge.m_speedX = fan.sys.ObjUtil.coerce(fan.sys.Float.divInt(fan.sys.Int.toFloat(dx),elapsedTime),fan.sys.Float.$type.toNullable());
    ge.m_speedY = fan.sys.ObjUtil.coerce(fan.sys.Float.divInt(fan.sys.Int.toFloat(dy),elapsedTime),fan.sys.Float.$type.toNullable());
    this.m_machine.m_onGestureEvent.fire(ge);
    e.consume();
    this.m_machine.onFinished(e);
    return true;
  }
  ;
  return false;
}
fan.vaseGui.DragState.prototype.onEvent = function(e)
{
  if (fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_moved)))
  {
    var dx = fan.sys.Int.minus(fan.sys.ObjUtil.coerce(e.x(),fan.sys.Int.$type),this.m_lastX);
    var dy = fan.sys.Int.minus(fan.sys.ObjUtil.coerce(e.y(),fan.sys.Int.$type),this.m_lastY);
    this.m_lastX = fan.sys.ObjUtil.coerce(e.x(),fan.sys.Int.$type);
    this.m_lastY = fan.sys.ObjUtil.coerce(e.y(),fan.sys.Int.$type);
    var ge = this.makeEvent(e,((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_drag));
    ge.m_deltaX = fan.sys.ObjUtil.coerce(dx,fan.sys.Int.$type.toNullable());
    ge.m_deltaY = fan.sys.ObjUtil.coerce(dy,fan.sys.Int.$type.toNullable());
    if (this.m_click)
    {
      ge.flag$(1);
    }
    ;
    this.m_machine.m_onGestureEvent.fire(ge);
    e.consume();
  }
  else
  {
    if ((fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_released)) || fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_cancel))))
    {
      if (this.asFling(e))
      {
        return;
      }
      ;
      var ge = this.makeEvent(e,((fan.vaseGui.GestureEvent.static$init ? fan.vaseGui.GestureEvent.static$init() : null),fan.vaseGui.GestureEvent.m_drop));
      this.m_machine.m_onGestureEvent.fire(ge);
      e.consume();
      this.m_machine.onFinished(e);
    }
    else
    {
      this.m_machine.onFinished(e);
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.DragState.prototype.m_click = false;
fan.vaseGui.DragState.prototype.m_beginX = 0;
fan.vaseGui.DragState.prototype.m_beginY = 0;
fan.vaseGui.DragState.prototype.m_lastX = 0;
fan.vaseGui.DragState.prototype.m_lastY = 0;
fan.vaseGui.DragState.prototype.m_beginTime = 0;
fan.vaseGui.Gesture = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.Gesture.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_history = fan.sys.List.make(fan.vaseWindow.MotionEvent.$type);
  this.m_defaultState = fan.vaseGui.NoneState.make(this);
  this.m_currentState = this.m_defaultState;
  this.m_lastTouchTime = 0;
  this.m_firstTouchTime = 0;
  this.m_longPressTimeLimit = 600;
  this.m_doubleClickTimeLimt = 150;
  this.m_supportDoubleClick = false;
  this.m_onGestureEvent = fan.vaseWindow.EventListeners.make();
  return;
}
fan.vaseGui.Gesture.prototype.$typeof = function() { return fan.vaseGui.Gesture.$type; }
fan.vaseGui.Gesture.prototype.history = function()
{
  return this.m_history;
}
fan.vaseGui.Gesture.prototype.history$ = function(it)
{
  this.m_history = it;
  return;
}
fan.vaseGui.Gesture.prototype.defaultState = function()
{
  return this.m_defaultState;
}
fan.vaseGui.Gesture.prototype.defaultState$ = function(it)
{
  this.m_defaultState = it;
  return;
}
fan.vaseGui.Gesture.prototype.currentState = function()
{
  return this.m_currentState;
}
fan.vaseGui.Gesture.prototype.currentState$ = function(it)
{
  this.m_currentState = it;
  return;
}
fan.vaseGui.Gesture.prototype.lastTouchTime = function()
{
  return this.m_lastTouchTime;
}
fan.vaseGui.Gesture.prototype.lastTouchTime$ = function(it)
{
  this.m_lastTouchTime = it;
  return;
}
fan.vaseGui.Gesture.prototype.firstTouchTime = function()
{
  return this.m_firstTouchTime;
}
fan.vaseGui.Gesture.prototype.firstTouchTime$ = function(it)
{
  this.m_firstTouchTime = it;
  return;
}
fan.vaseGui.Gesture.prototype.longPressTimeLimit = function()
{
  return this.m_longPressTimeLimit;
}
fan.vaseGui.Gesture.prototype.longPressTimeLimit$ = function(it)
{
  this.m_longPressTimeLimit = it;
  return;
}
fan.vaseGui.Gesture.prototype.doubleClickTimeLimt = function()
{
  return this.m_doubleClickTimeLimt;
}
fan.vaseGui.Gesture.prototype.doubleClickTimeLimt$ = function(it)
{
  this.m_doubleClickTimeLimt = it;
  return;
}
fan.vaseGui.Gesture.prototype.supportDoubleClick = function()
{
  return this.m_supportDoubleClick;
}
fan.vaseGui.Gesture.prototype.supportDoubleClick$ = function(it)
{
  this.m_supportDoubleClick = it;
  return;
}
fan.vaseGui.Gesture.prototype.onGestureEvent = function()
{
  return this.m_onGestureEvent;
}
fan.vaseGui.Gesture.prototype.onGestureEvent$ = function(it)
{
  this.m_onGestureEvent = it;
  return;
}
fan.vaseGui.Gesture.prototype.setCurrentState = function(newState,e)
{
  this.m_currentState.onExit(e);
  newState.onEnter(e);
  this.m_currentState = newState;
  return;
}
fan.vaseGui.Gesture.prototype.reset = function()
{
  this.m_currentState = this.m_defaultState;
  this.m_lastTouchTime = 0;
  this.m_firstTouchTime = 0;
  this.m_history.clear();
  return;
}
fan.vaseGui.Gesture.prototype.onFinished = function(e)
{
  this.reset();
  return;
}
fan.vaseGui.Gesture.prototype.isMultiTouch = function(e)
{
  return (e.pointers() != null && fan.sys.ObjUtil.compareGT(e.pointers().size(),1));
}
fan.vaseGui.Gesture.prototype.onEvent = function(e)
{
  if ((!this.m_history.isEmpty() && !this.isMultiTouch(fan.sys.ObjUtil.coerce(this.m_history.last(),fan.vaseWindow.MotionEvent.$type)) && fan.sys.ObjUtil.equals(e.type(),((fan.vaseWindow.MotionEvent.static$init ? fan.vaseWindow.MotionEvent.static$init() : null),fan.vaseWindow.MotionEvent.m_moved)) && !this.isMultiTouch(e)))
  {
    if ((fan.sys.ObjUtil.equals(this.m_history.last().x(),e.x()) && fan.sys.ObjUtil.equals(this.m_history.last().y(),e.y())))
    {
      return;
    }
    ;
  }
  ;
  if (this.m_history.isEmpty())
  {
    this.m_firstTouchTime = fan.std.Duration.nowTicks();
  }
  ;
  if ((e.pointers() != null && fan.sys.ObjUtil.compareGT(e.pointers().size(),1)))
  {
    var ns = fan.vaseGui.MultiTouchState.make(this);
    this.setCurrentState(ns,e);
  }
  else
  {
    this.m_currentState.onEvent(e);
  }
  ;
  this.m_history.add(e);
  this.m_lastTouchTime = fan.std.Duration.nowTicks();
  return;
}
fan.vaseGui.Gesture.make = function() {
  var self = new fan.vaseGui.Gesture();
  fan.vaseGui.Gesture.make$(self);
  return self;
  }
fan.vaseGui.Gesture.make$ = function(self)
{
  ;
  return;
}
fan.vaseGui.Gesture.prototype.m_history = null;
fan.vaseGui.Gesture.prototype.m_defaultState = null;
fan.vaseGui.Gesture.prototype.m_currentState = null;
fan.vaseGui.Gesture.prototype.m_lastTouchTime = 0;
fan.vaseGui.Gesture.prototype.m_firstTouchTime = 0;
fan.vaseGui.Gesture.prototype.m_longPressTimeLimit = 0;
fan.vaseGui.Gesture.prototype.m_doubleClickTimeLimt = 0;
fan.vaseGui.Gesture.prototype.m_supportDoubleClick = false;
fan.vaseGui.Gesture.prototype.m_onGestureEvent = null;
fan.vaseGui.Style = function() {}
fan.vaseGui.Style.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.Style.prototype.$typeof = function() { return fan.vaseGui.Style.$type; }
fan.vaseGui.WidgetStyle = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.WidgetStyle.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_background = fan.vaseGraphics.Color.make(16382457);
  this.m_foreground = fan.vaseGraphics.Color.make(3388901);
  this.m_outlineColor = fan.vaseGraphics.Color.make(15329769);
  this.m_fontColor = fan.vaseGraphics.Color.make(2236962);
  this.m_selectedColor = fan.vaseGraphics.Color.make(8947961);
  this.m_lineWidth = fan.sys.Float.make(2.0);
  this.m_fontSizeInit = false;
  this.m_font = fan.vaseGraphics.Font.make(40);
  return;
}
fan.vaseGui.WidgetStyle.prototype.$typeof = function() { return fan.vaseGui.WidgetStyle.$type; }
fan.vaseGui.WidgetStyle.prototype.background = function()
{
  return this.m_background;
}
fan.vaseGui.WidgetStyle.prototype.background$ = function(it)
{
  this.m_background = it;
  return;
}
fan.vaseGui.WidgetStyle.prototype.foreground = function()
{
  return this.m_foreground;
}
fan.vaseGui.WidgetStyle.prototype.foreground$ = function(it)
{
  this.m_foreground = it;
  return;
}
fan.vaseGui.WidgetStyle.prototype.outlineColor = function()
{
  return this.m_outlineColor;
}
fan.vaseGui.WidgetStyle.prototype.outlineColor$ = function(it)
{
  this.m_outlineColor = it;
  return;
}
fan.vaseGui.WidgetStyle.prototype.fontColor = function()
{
  return this.m_fontColor;
}
fan.vaseGui.WidgetStyle.prototype.fontColor$ = function(it)
{
  this.m_fontColor = it;
  return;
}
fan.vaseGui.WidgetStyle.prototype.selectedColor = function()
{
  return this.m_selectedColor;
}
fan.vaseGui.WidgetStyle.prototype.selectedColor$ = function(it)
{
  this.m_selectedColor = it;
  return;
}
fan.vaseGui.WidgetStyle.prototype.backgroundImage = function()
{
  return this.m_backgroundImage;
}
fan.vaseGui.WidgetStyle.prototype.backgroundImage$ = function(it)
{
  this.m_backgroundImage = it;
  return;
}
fan.vaseGui.WidgetStyle.prototype.lineWidth = function()
{
  return this.m_lineWidth;
}
fan.vaseGui.WidgetStyle.prototype.lineWidth$ = function(it)
{
  this.m_lineWidth = it;
  return;
}
fan.vaseGui.WidgetStyle.prototype.fontSizeInit = function()
{
  return this.m_fontSizeInit;
}
fan.vaseGui.WidgetStyle.prototype.fontSizeInit$ = function(it)
{
  this.m_fontSizeInit = it;
  return;
}
fan.vaseGui.WidgetStyle.prototype.font = function()
{
  if (!this.m_fontSizeInit)
  {
    this.m_font = this.m_font.toSize(this.dpToPixel(fan.sys.Int.toFloat(this.m_font.m_size)));
    this.m_fontSizeInit = true;
  }
  ;
  return this.m_font;
}
fan.vaseGui.WidgetStyle.prototype.font$ = function(it)
{
  this.m_font = it;
  return;
}
fan.vaseGui.WidgetStyle.prototype.paint = function(widget,g)
{
  this.doPaint(widget,g);
  return;
}
fan.vaseGui.WidgetStyle.prototype.doPaint = function(widget,g)
{
  return;
}
fan.vaseGui.WidgetStyle.prototype.dpToPixel = function(dp)
{
  return fan.vaseGui.DisplayMetrics.dpToPixel(dp);
}
fan.vaseGui.WidgetStyle.prototype.drawText = function(widget,g,text,align,vAlign)
{
  if (vAlign === undefined) vAlign = ((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_center);
  var top = widget.paddingTop();
  var left = widget.paddingLeft();
  g.brush$(this.m_fontColor);
  g.font$(this.font());
  var offset = fan.sys.Int.plus(this.font().ascent(),this.font().leading());
  var y = top;
  if (fan.sys.ObjUtil.equals(vAlign,((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_begin)))
  {
    y = fan.sys.Int.plus(top,offset);
  }
  else
  {
    if (fan.sys.ObjUtil.equals(vAlign,((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_center)))
    {
      y = fan.sys.Int.plus(fan.sys.Int.minus(fan.sys.Int.plus(top,fan.sys.Int.div(widget.contentHeight(),2)),fan.sys.Float.toInt(fan.sys.Int.divFloat(this.font().height(),fan.sys.Float.make(2.0)))),offset);
    }
    else
    {
      if (fan.sys.ObjUtil.equals(vAlign,((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_end)))
      {
        y = fan.sys.Int.plus(fan.sys.Int.minus(fan.sys.Int.plus(top,widget.contentHeight()),fan.sys.Int.toInt(this.font().height())),offset);
      }
      ;
    }
    ;
  }
  ;
  var x = left;
  if (fan.sys.ObjUtil.equals(align,((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_begin)))
  {
    x = fan.sys.Int.plus(left,this.dpToPixel(fan.sys.Float.make(2.0)));
  }
  else
  {
    if (fan.sys.ObjUtil.equals(align,((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_center)))
    {
      var w = this.font().width(text);
      x = fan.sys.Int.minus(fan.sys.Int.plus(left,fan.sys.Int.div(widget.contentWidth(),2)),fan.sys.Float.toInt(fan.sys.Int.divFloat(w,fan.sys.Float.make(2.0))));
    }
    else
    {
      if (fan.sys.ObjUtil.equals(align,((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_end)))
      {
        var w = this.font().width(text);
        x = fan.sys.Int.minus(fan.sys.Int.plus(left,widget.contentWidth()),fan.sys.Float.toInt(fan.sys.Int.divFloat(w,fan.sys.Float.make(2.0))));
      }
      ;
    }
    ;
  }
  ;
  g.drawText(text,x,y);
  return;
}
fan.vaseGui.WidgetStyle.make = function() {
  var self = new fan.vaseGui.WidgetStyle();
  fan.vaseGui.WidgetStyle.make$(self);
  return self;
  }
fan.vaseGui.WidgetStyle.make$ = function(self)
{
  ;
  return;
}
fan.vaseGui.WidgetStyle.prototype.m_background = null;
fan.vaseGui.WidgetStyle.prototype.m_foreground = null;
fan.vaseGui.WidgetStyle.prototype.m_outlineColor = null;
fan.vaseGui.WidgetStyle.prototype.m_fontColor = null;
fan.vaseGui.WidgetStyle.prototype.m_selectedColor = null;
fan.vaseGui.WidgetStyle.prototype.m_backgroundImage = null;
fan.vaseGui.WidgetStyle.prototype.m_lineWidth = fan.sys.Float.make(0);
fan.vaseGui.WidgetStyle.prototype.m_fontSizeInit = false;
fan.vaseGui.WidgetStyle.prototype.m_font = null;
fan.vaseGui.TreeStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.TreeStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.TreeStyle.prototype.$typeof = function() { return fan.vaseGui.TreeStyle.$type; }
fan.vaseGui.TreeStyle.prototype.doPaint = function(widget,g)
{
  var tree = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.TreeView.$type);
  var start = fan.sys.Int.div(tree.offsetY(),tree.rowHeight());
  var topOffset = fan.sys.Int.minus(tree.offsetY(),fan.sys.Int.mult(start,tree.rowHeight()));
  var fontOffset = fan.sys.Int.plus(this.font().ascent(),this.font().leading());
  var top = widget.paddingTop();
  var left = widget.paddingLeft();
  var bottom = this.dpToPixel(fan.sys.Int.toFloat(widget.m_padding.m_bottom));
  g.brush$(this.m_fontColor);
  g.font$(this.font());
  var y = fan.sys.Int.plus(fan.sys.Int.negate(topOffset),top);
  var bottomLine = fan.sys.Int.minus(tree.height(),bottom);
  var treeX = fan.sys.Int.plus(fan.sys.Int.negate(tree.offsetX()),left);
  for (var i = start; fan.sys.ObjUtil.compareLT(i,tree.m_items.size()); i = fan.sys.Int.increment(i))
  {
    if (fan.sys.ObjUtil.compareGE(i,0))
    {
      var item = tree.m_items.get(i);
      var x = fan.sys.Int.plus(fan.sys.Int.mult(item.m_level,this.dpToPixel(tree.m_indent)),treeX);
      this.drawItem(g,item,tree,treeX,x,y,fontOffset);
    }
    ;
    y = fan.sys.Int.plus(y,tree.rowHeight());
    if (fan.sys.ObjUtil.compareGT(y,bottomLine))
    {
      break;
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.TreeStyle.prototype.drawItem = function(g,item,tree,treeX,itemX,itemY,fontOffset)
{
  if (item === tree.m_selectedItem)
  {
    g.brush$(this.m_selectedColor);
    g.fillRect(treeX,itemY,tree.contentWidth(),tree.rowHeight());
    g.brush$(this.m_fontColor);
  }
  else
  {
    if (item === tree.m_dragDropItem)
    {
      g.brush$(fan.vaseGraphics.Color.make(15746133));
      g.fillRect(treeX,itemY,tree.contentWidth(),tree.rowHeight());
      g.brush$(this.m_fontColor);
    }
    ;
  }
  ;
  var text = item.text();
  if (item.hasChildren())
  {
    g.drawText(fan.sys.Str.plus("- ",text),itemX,fan.sys.Int.plus(itemY,fontOffset));
  }
  else
  {
    g.drawText(fan.sys.Str.plus("  ",text),itemX,fan.sys.Int.plus(itemY,fontOffset));
  }
  ;
  return;
}
fan.vaseGui.TreeStyle.make = function() {
  var self = new fan.vaseGui.TreeStyle();
  fan.vaseGui.TreeStyle.make$(self);
  return self;
  }
fan.vaseGui.TreeStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  return;
}
fan.vaseGui.StyleManager = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.StyleManager.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
  this.m_idMap = fan.std.Map.fromLiteral([],[],fan.std.Type.find("sys::Str"),fan.std.Type.find("vaseGui::Style"));
  this.m_styleClassMap = fan.std.Map.fromLiteral([],[],fan.std.Type.find("sys::Str"),fan.std.Type.find("vaseGui::Style"));
  return;
}
fan.vaseGui.StyleManager.prototype.$typeof = function() { return fan.vaseGui.StyleManager.$type; }
fan.vaseGui.StyleManager.prototype.idMap = function()
{
  return this.m_idMap;
}
fan.vaseGui.StyleManager.prototype.idMap$ = function(it)
{
  this.m_idMap = it;
  return;
}
fan.vaseGui.StyleManager.prototype.styleClassMap = function()
{
  return this.m_styleClassMap;
}
fan.vaseGui.StyleManager.prototype.styleClassMap$ = function(it)
{
  this.m_styleClassMap = it;
  return;
}
fan.vaseGui.StyleManager.prototype.typeMap = function()
{
  return this.m_typeMap;
}
fan.vaseGui.StyleManager.prototype.typeMap$ = function(it)
{
  this.m_typeMap = it;
  return;
}
fan.vaseGui.StyleManager.prototype.defStyle = function()
{
  return this.m_defStyle;
}
fan.vaseGui.StyleManager.prototype.defStyle$ = function(it)
{
  this.m_defStyle = it;
  return;
}
fan.vaseGui.StyleManager.make = function() {
  var self = new fan.vaseGui.StyleManager();
  fan.vaseGui.StyleManager.make$(self);
  return self;
  }
fan.vaseGui.StyleManager.make$ = function(self)
{
  ;
  self.m_typeMap = fan.sys.ObjUtil.coerce(fan.std.Map.fromLiteral([fan.vaseGui.Button.$type,fan.vaseGui.ImageView.$type,fan.vaseGui.Label.$type,fan.vaseGui.EditText.$type,fan.vaseGui.ToggleButton.$type,fan.vaseGui.RadioButton.$type,fan.vaseGui.ScrollBar.$type,fan.vaseGui.SliderBar.$type,fan.vaseGui.MessageBox.$type,fan.vaseGui.ComboBox.$type,fan.vaseGui.ButtonBase.$type,fan.vaseGui.Table.$type,fan.vaseGui.TreeView.$type,fan.vaseGui.TextArea.$type,fan.vaseGui.MenuItem.$type,fan.vaseGui.Menu.$type,fan.vaseGui.Switch.$type,fan.vaseGui.Toast.$type,fan.vaseGui.ImageButton.$type,fan.vaseGui.ProgressView.$type],[fan.vaseGui.RoundButtonStyle.make(),fan.vaseGui.ImageStyle.make(),fan.vaseGui.LabelStyle.make(),fan.vaseGui.EditTextStyle.make(),fan.vaseGui.ToggleButtonStyle.make(),fan.vaseGui.RadioButtonStyle.make(),fan.vaseGui.ScrollBarStyle.make(),fan.vaseGui.SliderBarStyle.make(),fan.vaseGui.MessageBoxStyle.make(),fan.vaseGui.ComboBoxStyle.make(),fan.vaseGui.ButtonBaseStyle.make(),fan.vaseGui.TableStyle.make(),fan.vaseGui.TreeStyle.make(),fan.vaseGui.TextAreaStyle.make(),fan.vaseGui.MenuItemStyle.make(),fan.vaseGui.MenuStyle.make(),fan.vaseGui.SwitchStyle.make(),fan.vaseGui.ToastStyle.make(),fan.vaseGui.ImageButtonStyle.make(),fan.vaseGui.ProgressViewStyle.make()],fan.std.Type.find("std::Type"),fan.std.Type.find("vaseGui::WidgetStyle")),fan.std.Type.find("std::Map<std::Type,vaseGui::Style>"));
  self.m_defStyle = fan.vaseGui.WidgetStyle.make();
  self.m_styleClassMap.set("menuItem",fan.vaseGui.MenuItemStyle.make());
  self.m_styleClassMap.set("tableHeader",fan.vaseGui.TableHeaderStyle.make());
  self.m_styleClassMap.set("pane",fan.vaseGui.PaneStyle.make());
  return;
}
fan.vaseGui.StyleManager.prototype.findByType = function(type)
{
  var s = this.m_typeMap.get(type);
  if (s != null)
  {
    return s;
  }
  ;
  if (fan.sys.ObjUtil.equals(type,fan.sys.Obj.$type))
  {
    return null;
  }
  ;
  return this.findByType(fan.sys.ObjUtil.coerce(type.base(),fan.std.Type.$type));
}
fan.vaseGui.StyleManager.prototype.find = function(widget)
{
  var s = this.m_idMap.get(widget.m_id);
  if (s != null)
  {
    return fan.sys.ObjUtil.coerce(s,fan.vaseGui.Style.$type);
  }
  ;
  s = this.m_styleClassMap.get(widget.styleClass());
  if (s != null)
  {
    return fan.sys.ObjUtil.coerce(s,fan.vaseGui.Style.$type);
  }
  ;
  s = this.findByType(fan.std.Type.$typeof(widget));
  if (s != null)
  {
    return fan.sys.ObjUtil.coerce(s,fan.vaseGui.Style.$type);
  }
  ;
  return this.m_defStyle;
}
fan.vaseGui.StyleManager.prototype.m_idMap = null;
fan.vaseGui.StyleManager.prototype.m_styleClassMap = null;
fan.vaseGui.StyleManager.prototype.m_typeMap = null;
fan.vaseGui.StyleManager.prototype.m_defStyle = null;
fan.vaseGui.ComboBoxStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.ComboBoxStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.ComboBoxStyle.prototype.$typeof = function() { return fan.vaseGui.ComboBoxStyle.$type; }
fan.vaseGui.ComboBoxStyle.prototype.colors = function()
{
  return this.m_colors;
}
fan.vaseGui.ComboBoxStyle.prototype.colors$ = function(it)
{
  this.m_colors = it;
  return;
}
fan.vaseGui.ComboBoxStyle.make = function() {
  var self = new fan.vaseGui.ComboBoxStyle();
  fan.vaseGui.ComboBoxStyle.make$(self);
  return self;
  }
fan.vaseGui.ComboBoxStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  self.m_colors = fan.sys.List.make(fan.vaseGraphics.Color.$type, [fan.vaseGraphics.Color.make(14278367),fan.vaseGraphics.Color.make(16777215),fan.vaseGraphics.Color.make(13421772)]);
  self.m_outlineColor = fan.vaseGraphics.Color.make(8355711);
  return;
}
fan.vaseGui.ComboBoxStyle.prototype.doPaint = function(widget,g)
{
  var $this = this;
  var btn = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.ButtonBase.$type);
  if (fan.sys.ObjUtil.compareLT(btn.state(),3))
  {
    g.brush$(this.m_colors.get(btn.state()));
  }
  else
  {
    g.brush$(this.m_background);
  }
  ;
  g.fillRect(0,0,widget.width(),widget.height());
  g.brush$(this.m_outlineColor);
  var lWidth = this.dpToPixel(this.m_lineWidth);
  g.pen$(fan.vaseGraphics.Pen.make(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u35,
    function(it)
    {
      it.m_width = lWidth;
      return;
    })));
  var top = widget.paddingTop();
  var left = widget.paddingLeft();
  var bottom = fan.sys.Int.plus(top,widget.contentHeight());
  var right = fan.sys.Int.plus(left,widget.contentWidth());
  g.drawLine(left,bottom,fan.sys.Int.minus(right,1),bottom);
  var cornerSize = fan.sys.Float.toInt(fan.sys.Int.multFloat(this.font().height(),fan.sys.Float.make(0.6)));
  var pa = fan.vaseGraphics.PointArray.make(3);
  pa.setX(0,fan.sys.Int.minus(right,cornerSize));
  pa.setY(0,bottom);
  pa.setX(1,right);
  pa.setY(1,bottom);
  pa.setX(2,right);
  pa.setY(2,fan.sys.Int.minus(bottom,cornerSize));
  g.fillPolygon(pa);
  this.drawText(widget,g,btn.text(),((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_begin));
  return;
}
fan.vaseGui.ComboBoxStyle.prototype.m_colors = null;
fan.vaseGui.ButtonBaseStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.ButtonBaseStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.ButtonBaseStyle.prototype.$typeof = function() { return fan.vaseGui.ButtonBaseStyle.$type; }
fan.vaseGui.ButtonBaseStyle.prototype.colors = function()
{
  return this.m_colors;
}
fan.vaseGui.ButtonBaseStyle.prototype.colors$ = function(it)
{
  this.m_colors = it;
  return;
}
fan.vaseGui.ButtonBaseStyle.make = function() {
  var self = new fan.vaseGui.ButtonBaseStyle();
  fan.vaseGui.ButtonBaseStyle.make$(self);
  return self;
  }
fan.vaseGui.ButtonBaseStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  self.m_colors = fan.sys.List.make(fan.vaseGraphics.Color.$type, [((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_yellow),((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_orange),((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_green)]);
  return;
}
fan.vaseGui.ButtonBaseStyle.prototype.doPaint = function(widget,g)
{
  var btn = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.ButtonBase.$type);
  if (fan.sys.ObjUtil.compareLT(btn.state(),3))
  {
    g.brush$(this.m_colors.get(btn.state()));
  }
  else
  {
    g.brush$(this.m_background);
  }
  ;
  g.fillRect(0,0,widget.width(),widget.height());
  this.drawText(widget,g,btn.text(),((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_center));
  return;
}
fan.vaseGui.ButtonBaseStyle.prototype.m_colors = null;
fan.vaseGui.MessageBoxStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.MessageBoxStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.MessageBoxStyle.prototype.$typeof = function() { return fan.vaseGui.MessageBoxStyle.$type; }
fan.vaseGui.MessageBoxStyle.make = function() {
  var self = new fan.vaseGui.MessageBoxStyle();
  fan.vaseGui.MessageBoxStyle.make$(self);
  return self;
  }
fan.vaseGui.MessageBoxStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  return;
}
fan.vaseGui.MessageBoxStyle.prototype.doPaint = function(widget,g)
{
  g.brush$(this.m_background);
  g.fillRect(0,0,widget.width(),widget.height());
  return;
}
fan.vaseGui.EditTextStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.EditTextStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
  this.m_hintColor = fan.vaseGraphics.Color.make(14145495);
  return;
}
fan.vaseGui.EditTextStyle.prototype.$typeof = function() { return fan.vaseGui.EditTextStyle.$type; }
fan.vaseGui.EditTextStyle.prototype.hintColor = function()
{
  return this.m_hintColor;
}
fan.vaseGui.EditTextStyle.prototype.hintColor$ = function(it)
{
  this.m_hintColor = it;
  return;
}
fan.vaseGui.EditTextStyle.make = function() {
  var self = new fan.vaseGui.EditTextStyle();
  fan.vaseGui.EditTextStyle.make$(self);
  return self;
  }
fan.vaseGui.EditTextStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  ;
  self.m_outlineColor = fan.vaseGraphics.Color.make(8750469);
  return;
}
fan.vaseGui.EditTextStyle.prototype.doPaint = function(widget,g)
{
  var $this = this;
  var lab = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.EditText.$type);
  var top = widget.paddingTop();
  var left = widget.paddingLeft();
  g.brush$(this.m_outlineColor);
  var lWidth = this.dpToPixel(this.m_lineWidth);
  g.pen$(fan.vaseGraphics.Pen.make(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u35,
    function(it)
    {
      it.m_width = lWidth;
      return;
    })));
  var lineLeft = lWidth;
  var bottom = fan.sys.Int.minus(fan.sys.Int.plus(top,widget.contentHeight()),lWidth);
  var right = fan.sys.Int.minus(widget.width(),lWidth);
  g.drawLine(lineLeft,bottom,fan.sys.Int.minus(right,lWidth),bottom);
  var upSize = fan.sys.Float.toInt(fan.sys.Int.multFloat(lab.font().height(),fan.sys.Float.make(0.3)));
  g.drawLine(lineLeft,bottom,lineLeft,fan.sys.Int.minus(bottom,upSize));
  g.drawLine(fan.sys.Int.minus(right,lWidth),bottom,fan.sys.Int.minus(right,lWidth),fan.sys.Int.minus(bottom,upSize));
  g.font$(this.font());
  var offset = fan.sys.Int.plus(this.font().ascent(),this.font().leading());
  var x = left;
  var y = top;
  if (!fan.sys.Str.isEmpty(lab.text()))
  {
    g.brush$(this.m_fontColor);
    var str = lab.text();
    if (lab.m_password)
    {
      var buf = fan.sys.StrBuf.make();
      fan.sys.Int.times(fan.sys.Str.size(str),fan.sys.Func.make$closure(
        fan.vaseGui.$clos$_u91,
        function(it)
        {
          buf.add("*");
          return;
        }));
      str = buf.toStr();
    }
    ;
    g.drawText(str,x,fan.sys.Int.plus(y,offset));
  }
  else
  {
    if (!fan.sys.Str.isEmpty(lab.m_hint))
    {
      g.brush$(this.m_hintColor);
      g.drawText(lab.m_hint,fan.sys.Int.plus(x,2),fan.sys.Int.plus(y,offset));
    }
    ;
  }
  ;
  if (lab.m_caret.m_visible)
  {
    var xOffset = 1;
    if (fan.sys.ObjUtil.compareGT(fan.sys.Str.size(lab.text()),0))
    {
      xOffset = lab.font().width(fan.sys.Str.getRange(lab.text(),fan.sys.Range.make(0,lab.m_caret.m_offset,true)));
    }
    ;
    g.drawLine(fan.sys.Int.plus(x,xOffset),y,fan.sys.Int.plus(x,xOffset),fan.sys.Int.plus(y,lab.font().height()));
  }
  ;
  return;
}
fan.vaseGui.EditTextStyle.prototype.m_hintColor = null;
fan.vaseGui.RoundButtonStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.RoundButtonStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
  this.m_overColor = fan.vaseGraphics.Color.make(7066875);
  this.m_outColor = fan.vaseGraphics.Color.make(3388901);
  this.m_downColor = fan.vaseGraphics.Color.make(39372);
  return;
}
fan.vaseGui.RoundButtonStyle.prototype.$typeof = function() { return fan.vaseGui.RoundButtonStyle.$type; }
fan.vaseGui.RoundButtonStyle.prototype.overColor = function()
{
  return this.m_overColor;
}
fan.vaseGui.RoundButtonStyle.prototype.overColor$ = function(it)
{
  this.m_overColor = it;
  return;
}
fan.vaseGui.RoundButtonStyle.prototype.outColor = function()
{
  return this.m_outColor;
}
fan.vaseGui.RoundButtonStyle.prototype.outColor$ = function(it)
{
  this.m_outColor = it;
  return;
}
fan.vaseGui.RoundButtonStyle.prototype.downColor = function()
{
  return this.m_downColor;
}
fan.vaseGui.RoundButtonStyle.prototype.downColor$ = function(it)
{
  this.m_downColor = it;
  return;
}
fan.vaseGui.RoundButtonStyle.make = function() {
  var self = new fan.vaseGui.RoundButtonStyle();
  fan.vaseGui.RoundButtonStyle.make$(self);
  return self;
  }
fan.vaseGui.RoundButtonStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  ;
  self.m_fontColor = ((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_white);
  return;
}
fan.vaseGui.RoundButtonStyle.prototype.doPaint = function(widget,g)
{
  var btn = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.ButtonBase.$type);
  var width = widget.width();
  var height = widget.height();
  g.brush$(this.m_outlineColor);
  var arc = fan.sys.Int.div(height,2);
  g.fillRoundRect(0,0,width,height,arc,arc);
  var offsetW = this.dpToPixel(fan.sys.Float.make(8.0));
  var offsetR = this.dpToPixel(fan.sys.Float.make(4.0));
  width = fan.sys.Int.minus(width,offsetW);
  height = fan.sys.Int.minus(height,offsetW);
  arc = fan.sys.Int.div(height,2);
  if (fan.sys.ObjUtil.equals(btn.state(),0))
  {
    g.brush$(this.m_overColor);
  }
  else
  {
    if (fan.sys.ObjUtil.equals(btn.state(),1))
    {
      g.brush$(this.m_outColor);
    }
    else
    {
      if (fan.sys.ObjUtil.equals(btn.state(),2))
      {
        g.brush$(this.m_downColor);
      }
      ;
    }
    ;
  }
  ;
  g.fillRoundRect(offsetR,offsetR,width,height,arc,arc);
  this.drawText(widget,g,btn.text(),((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_center));
  return;
}
fan.vaseGui.RoundButtonStyle.prototype.m_overColor = null;
fan.vaseGui.RoundButtonStyle.prototype.m_outColor = null;
fan.vaseGui.RoundButtonStyle.prototype.m_downColor = null;
fan.vaseGui.ProgressViewStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.ProgressViewStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.ProgressViewStyle.prototype.$typeof = function() { return fan.vaseGui.ProgressViewStyle.$type; }
fan.vaseGui.ProgressViewStyle.prototype.doPaint = function(widget,g)
{
  var $this = this;
  var p = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.ProgressView.$type);
  var w = widget.contentWidth();
  var h = widget.contentHeight();
  var top = widget.paddingTop();
  var left = widget.paddingLeft();
  var width = this.dpToPixel(fan.sys.Float.make(20.0));
  g.brush$(this.m_outlineColor);
  g.pen$(fan.vaseGraphics.Pen.make(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u35,
    function(it)
    {
      it.m_width = width;
      return;
    })));
  var i = fan.sys.Float.toInt(p.m_proVal);
  for (; fan.sys.ObjUtil.compareLE(i,360); i = fan.sys.Int.plus(i,30))
  {
    g.drawArc(top,left,w,h,i,5);
  }
  ;
  p.m_proVal = fan.sys.Float.plus(p.m_proVal,fan.sys.Float.make(0.2));
  if (fan.sys.ObjUtil.compareGT(p.m_proVal,fan.sys.Float.make(30.0)))
  {
    p.m_proVal = fan.sys.Float.minus(p.m_proVal,fan.sys.Float.make(30.0));
  }
  ;
  return;
}
fan.vaseGui.ProgressViewStyle.make = function() {
  var self = new fan.vaseGui.ProgressViewStyle();
  fan.vaseGui.ProgressViewStyle.make$(self);
  return self;
  }
fan.vaseGui.ProgressViewStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  return;
}
fan.vaseGui.MenuStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.MenuStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.MenuStyle.prototype.$typeof = function() { return fan.vaseGui.MenuStyle.$type; }
fan.vaseGui.MenuStyle.make = function() {
  var self = new fan.vaseGui.MenuStyle();
  fan.vaseGui.MenuStyle.make$(self);
  return self;
  }
fan.vaseGui.MenuStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  self.m_background = fan.vaseGraphics.Color.make(4408131);
  return;
}
fan.vaseGui.MenuStyle.prototype.doPaint = function(widget,g)
{
  g.brush$(this.m_background);
  g.fillRect(0,0,widget.width(),widget.height());
  return;
}
fan.vaseGui.MenuItemStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.MenuItemStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
  this.m_mouseOverColor = fan.vaseGraphics.Color.make(11711154);
  return;
}
fan.vaseGui.MenuItemStyle.prototype.$typeof = function() { return fan.vaseGui.MenuItemStyle.$type; }
fan.vaseGui.MenuItemStyle.prototype.mouseOverColor = function()
{
  return this.m_mouseOverColor;
}
fan.vaseGui.MenuItemStyle.prototype.mouseOverColor$ = function(it)
{
  this.m_mouseOverColor = it;
  return;
}
fan.vaseGui.MenuItemStyle.make = function() {
  var self = new fan.vaseGui.MenuItemStyle();
  fan.vaseGui.MenuItemStyle.make$(self);
  return self;
  }
fan.vaseGui.MenuItemStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  ;
  self.m_background = fan.vaseGraphics.Color.make(4408131);
  self.m_fontColor = ((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_white);
  return;
}
fan.vaseGui.MenuItemStyle.prototype.doPaint = function(widget,g)
{
  var btn = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.ButtonBase.$type);
  if (fan.sys.ObjUtil.equals(btn.state(),((fan.vaseGui.ButtonBase.static$init ? fan.vaseGui.ButtonBase.static$init() : null),fan.vaseGui.ButtonBase.m_mouseOver)))
  {
    g.brush$(this.m_mouseOverColor);
  }
  else
  {
    g.brush$(this.m_background);
  }
  ;
  g.fillRect(0,0,widget.width(),widget.height());
  this.drawText(widget,g,btn.text(),((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_begin));
  return;
}
fan.vaseGui.MenuItemStyle.prototype.m_mouseOverColor = null;
fan.vaseGui.PaneStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.PaneStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
  this.m_arc = fan.sys.Float.make(40.0);
  return;
}
fan.vaseGui.PaneStyle.prototype.$typeof = function() { return fan.vaseGui.PaneStyle.$type; }
fan.vaseGui.PaneStyle.prototype.arc = function()
{
  return this.m_arc;
}
fan.vaseGui.PaneStyle.prototype.arc$ = function(it)
{
  this.m_arc = it;
  return;
}
fan.vaseGui.PaneStyle.make = function() {
  var self = new fan.vaseGui.PaneStyle();
  fan.vaseGui.PaneStyle.make$(self);
  return self;
  }
fan.vaseGui.PaneStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  ;
  self.m_outlineColor = ((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_gray);
  return;
}
fan.vaseGui.PaneStyle.prototype.doPaint = function(widget,g)
{
  var $this = this;
  if (fan.sys.ObjUtil.compareGT(this.m_lineWidth,fan.sys.Float.make(0.0)))
  {
    var l = this.dpToPixel(fan.sys.Float.divInt(this.m_lineWidth,2));
    var x = l;
    var y = l;
    var w = fan.sys.Int.minus(fan.sys.Int.minus(widget.width(),l),l);
    var h = fan.sys.Int.minus(fan.sys.Int.minus(widget.height(),l),l);
    g.brush$(this.m_outlineColor);
    g.pen$(fan.vaseGraphics.Pen.make(fan.sys.Func.make$closure(
      fan.vaseGui.$clos$_u35,
      function(it)
      {
        it.m_width = $this.dpToPixel($this.m_lineWidth);
        return;
      })));
    var a = this.dpToPixel(this.m_arc);
    g.drawRoundRect(x,y,w,h,a,a);
  }
  ;
  if (this.m_backgroundImage != null)
  {
    var srcSize = this.m_backgroundImage.size();
    var src = fan.vaseGraphics.Rect.make(0,0,srcSize.m_w,srcSize.m_h);
    var dst = fan.vaseGraphics.Rect.make(widget.x(),widget.y(),widget.width(),widget.height());
    g.copyImage(fan.sys.ObjUtil.coerce(this.m_backgroundImage,fan.vaseGraphics.Image.$type),src,dst);
  }
  ;
  return;
}
fan.vaseGui.PaneStyle.prototype.m_arc = fan.sys.Float.make(0);
fan.vaseGui.ToggleButtonStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.ToggleButtonStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
  this.m_outLinePen = fan.vaseGraphics.Pen.make(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u35,
    function(it)
    {
      it.m_width = $this.dpToPixel(fan.sys.Float.make(3.0));
      return;
    }));
  this.m_contectPen = fan.vaseGraphics.Pen.make(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u35,
    function(it)
    {
      it.m_width = $this.dpToPixel(fan.sys.Float.make(8.0));
      return;
    }));
  return;
}
fan.vaseGui.ToggleButtonStyle.prototype.$typeof = function() { return fan.vaseGui.ToggleButtonStyle.$type; }
fan.vaseGui.ToggleButtonStyle.prototype.outLinePen = function()
{
  return this.m_outLinePen;
}
fan.vaseGui.ToggleButtonStyle.prototype.outLinePen$ = function(it)
{
  this.m_outLinePen = it;
  return;
}
fan.vaseGui.ToggleButtonStyle.prototype.contectPen = function()
{
  return this.m_contectPen;
}
fan.vaseGui.ToggleButtonStyle.prototype.contectPen$ = function(it)
{
  this.m_contectPen = it;
  return;
}
fan.vaseGui.ToggleButtonStyle.make = function() {
  var self = new fan.vaseGui.ToggleButtonStyle();
  fan.vaseGui.ToggleButtonStyle.make$(self);
  return self;
  }
fan.vaseGui.ToggleButtonStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  ;
  self.m_foreground = fan.vaseGraphics.Color.make(5362022);
  self.m_background = ((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_white);
  return;
}
fan.vaseGui.ToggleButtonStyle.prototype.doPaint = function(widget,g)
{
  var btn = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.ToggleButton.$type);
  this.drawText(btn,g,btn.text(),((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_begin));
  var top = widget.paddingTop();
  var left = widget.paddingLeft();
  var size = fan.sys.Int.min(btn.contentWidth(),btn.contentHeight());
  var r = fan.sys.Int.div(size,2);
  var x = fan.sys.Int.minus(fan.sys.Int.plus(left,widget.contentWidth()),size);
  var y = fan.sys.Int.minus(fan.sys.Int.plus(top,widget.contentHeight()),r);
  r = fan.sys.Float.toInt(fan.sys.Int.multFloat(r,fan.sys.Float.make(0.7)));
  size = fan.sys.Int.plus(r,r);
  g.brush$(this.m_background);
  g.fillRect(fan.sys.Int.minus(x,r),fan.sys.Int.minus(y,r),size,size);
  g.brush$(this.m_outlineColor);
  g.pen$(this.m_outLinePen);
  g.drawRect(fan.sys.Int.minus(x,r),fan.sys.Int.minus(y,r),size,size);
  if (btn.selected())
  {
    g.pen$(this.m_contectPen);
    g.brush$(this.m_foreground);
    var path = fan.vaseGraphics.Path.make();
    path.moveTo(fan.sys.Int.minusFloat(x,fan.sys.Int.multFloat(r,fan.sys.Float.make(0.6))),fan.sys.Int.minusFloat(y,fan.sys.Int.multFloat(r,fan.sys.Float.make(0.15)))).lineTo(fan.sys.Int.toFloat(x),fan.sys.Int.plusFloat(y,fan.sys.Int.divFloat(r,fan.sys.Float.make(2.0)))).lineTo(fan.sys.Int.plusFloat(x,fan.sys.Int.multFloat(r,fan.sys.Float.make(1.05))),fan.sys.Int.minusFloat(y,fan.sys.Int.multFloat(r,fan.sys.Float.make(1.05))));
    g.drawPath(path);
  }
  ;
  return;
}
fan.vaseGui.ToggleButtonStyle.prototype.m_outLinePen = null;
fan.vaseGui.ToggleButtonStyle.prototype.m_contectPen = null;
fan.vaseGui.RadioButtonStyle = fan.sys.Obj.$extend(fan.vaseGui.ToggleButtonStyle);
fan.vaseGui.RadioButtonStyle.prototype.$ctor = function()
{
  fan.vaseGui.ToggleButtonStyle.prototype.$ctor.call(this);
  var $this = this;
  this.m_buttonColor = ((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_white);
  return;
}
fan.vaseGui.RadioButtonStyle.prototype.$typeof = function() { return fan.vaseGui.RadioButtonStyle.$type; }
fan.vaseGui.RadioButtonStyle.prototype.buttonColor = function()
{
  return this.m_buttonColor;
}
fan.vaseGui.RadioButtonStyle.prototype.buttonColor$ = function(it)
{
  this.m_buttonColor = it;
  return;
}
fan.vaseGui.RadioButtonStyle.make = function() {
  var self = new fan.vaseGui.RadioButtonStyle();
  fan.vaseGui.RadioButtonStyle.make$(self);
  return self;
  }
fan.vaseGui.RadioButtonStyle.make$ = function(self)
{
  fan.vaseGui.ToggleButtonStyle.make$(self);
  ;
  self.m_foreground = fan.vaseGraphics.Color.make(5362022);
  return;
}
fan.vaseGui.RadioButtonStyle.prototype.doPaint = function(widget,g)
{
  var btn = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.ToggleButton.$type);
  this.drawText(btn,g,btn.text(),((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_begin));
  var top = widget.paddingTop();
  var left = widget.paddingLeft();
  var size = fan.sys.Int.min(btn.contentWidth(),btn.contentHeight());
  var r = fan.sys.Int.div(size,2);
  var x = fan.sys.Int.minus(fan.sys.Int.plus(left,widget.contentWidth()),size);
  var y = fan.sys.Int.minus(fan.sys.Int.plus(top,widget.contentHeight()),r);
  r = fan.sys.Float.toInt(fan.sys.Int.multFloat(r,fan.sys.Float.make(0.9)));
  size = fan.sys.Int.plus(r,r);
  g.brush$(this.m_outlineColor);
  g.fillOval(fan.sys.Int.minus(x,r),fan.sys.Int.minus(y,r),size,size);
  var cw = fan.sys.Float.toInt(fan.sys.Int.multFloat(r,fan.sys.Float.make(0.85)));
  if (btn.selected())
  {
    g.brush$(this.m_foreground);
    g.fillOval(fan.sys.Int.minus(x,cw),fan.sys.Int.minus(y,cw),fan.sys.Int.plus(cw,cw),fan.sys.Int.plus(cw,cw));
  }
  else
  {
    g.brush$(this.m_buttonColor);
    g.fillOval(fan.sys.Int.minus(x,cw),fan.sys.Int.minus(y,cw),fan.sys.Int.plus(cw,cw),fan.sys.Int.plus(cw,cw));
  }
  ;
  return;
}
fan.vaseGui.RadioButtonStyle.prototype.m_buttonColor = null;
fan.vaseGui.SwitchStyle = fan.sys.Obj.$extend(fan.vaseGui.ToggleButtonStyle);
fan.vaseGui.SwitchStyle.prototype.$ctor = function()
{
  fan.vaseGui.ToggleButtonStyle.prototype.$ctor.call(this);
  var $this = this;
  this.m_buttonColor = ((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_white);
  return;
}
fan.vaseGui.SwitchStyle.prototype.$typeof = function() { return fan.vaseGui.SwitchStyle.$type; }
fan.vaseGui.SwitchStyle.prototype.buttonColor = function()
{
  return this.m_buttonColor;
}
fan.vaseGui.SwitchStyle.prototype.buttonColor$ = function(it)
{
  this.m_buttonColor = it;
  return;
}
fan.vaseGui.SwitchStyle.make = function() {
  var self = new fan.vaseGui.SwitchStyle();
  fan.vaseGui.SwitchStyle.make$(self);
  return self;
  }
fan.vaseGui.SwitchStyle.make$ = function(self)
{
  fan.vaseGui.ToggleButtonStyle.make$(self);
  ;
  self.m_foreground = fan.vaseGraphics.Color.make(5362022);
  return;
}
fan.vaseGui.SwitchStyle.prototype.doPaint = function(widget,g)
{
  var btn = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.Switch.$type);
  this.drawText(btn,g,btn.text(),((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_begin));
  var top = widget.paddingTop();
  var left = widget.paddingLeft();
  var size = fan.sys.Int.mult(btn.contentHeight(),2);
  var r = btn.contentHeight();
  var centerX = fan.sys.Int.minus(fan.sys.Int.plus(left,widget.contentWidth()),r);
  var centerY = fan.sys.Int.minus(fan.sys.Int.plus(top,widget.contentHeight()),fan.sys.Int.div(r,2));
  r = fan.sys.Float.toInt(fan.sys.Int.multFloat(r,fan.sys.Float.make(0.9)));
  size = fan.sys.Int.plus(r,r);
  var widthHalf = fan.sys.Float.toInt(fan.sys.Int.multFloat(r,fan.sys.Float.make(0.8)));
  var heightHalf = fan.sys.Int.div(r,2);
  g.brush$(this.m_outlineColor);
  g.fillRoundRect(fan.sys.Int.minus(centerX,widthHalf),fan.sys.Int.minus(centerY,heightHalf),fan.sys.Int.plus(widthHalf,widthHalf),fan.sys.Int.plus(heightHalf,heightHalf),heightHalf,heightHalf);
  var widthR = fan.sys.Int.toInt(fan.sys.Int.minus(widthHalf,this.m_outLinePen.m_width));
  var heightR = fan.sys.Int.toInt(fan.sys.Int.minus(heightHalf,this.m_outLinePen.m_width));
  if (btn.selected())
  {
    g.brush$(this.m_foreground);
  }
  else
  {
    g.brush$(this.m_buttonColor);
  }
  ;
  g.fillRoundRect(fan.sys.Int.minus(centerX,widthR),fan.sys.Int.minus(centerY,heightR),fan.sys.Int.plus(widthR,widthR),fan.sys.Int.plus(heightR,heightR),heightR,heightR);
  var xOffset = fan.sys.Float.toInt(fan.sys.Int.multFloat(fan.sys.Int.minus(fan.sys.Int.minus(fan.sys.Int.plus(widthR,widthR),heightR),heightR),btn.m_animPostion));
  var height = fan.sys.Int.plus(heightR,heightR);
  g.brush$(this.m_outlineColor);
  g.fillOval(fan.sys.Int.plus(fan.sys.Int.minus(centerX,widthHalf),xOffset),fan.sys.Int.minus(centerY,heightHalf),fan.sys.Int.plus(heightHalf,heightHalf),fan.sys.Int.plus(heightHalf,heightHalf));
  g.brush$(this.m_buttonColor);
  g.fillOval(fan.sys.Int.plus(fan.sys.Int.minus(centerX,widthR),xOffset),fan.sys.Int.minus(centerY,heightR),height,height);
  return;
}
fan.vaseGui.SwitchStyle.prototype.m_buttonColor = null;
fan.vaseGui.LabelStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.LabelStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.LabelStyle.prototype.$typeof = function() { return fan.vaseGui.LabelStyle.$type; }
fan.vaseGui.LabelStyle.prototype.doPaint = function(widget,g)
{
  var lab = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.Label.$type);
  this.drawText(widget,g,lab.text(),((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_begin));
  return;
}
fan.vaseGui.LabelStyle.make = function() {
  var self = new fan.vaseGui.LabelStyle();
  fan.vaseGui.LabelStyle.make$(self);
  return self;
  }
fan.vaseGui.LabelStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  return;
}
fan.vaseGui.ToastStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.ToastStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.ToastStyle.prototype.$typeof = function() { return fan.vaseGui.ToastStyle.$type; }
fan.vaseGui.ToastStyle.make = function() {
  var self = new fan.vaseGui.ToastStyle();
  fan.vaseGui.ToastStyle.make$(self);
  return self;
  }
fan.vaseGui.ToastStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  self.m_background = fan.vaseGraphics.Color.make(4408131);
  self.m_fontColor = ((fan.vaseGraphics.Color.static$init ? fan.vaseGraphics.Color.static$init() : null),fan.vaseGraphics.Color.m_white);
  return;
}
fan.vaseGui.ToastStyle.prototype.doPaint = function(widget,g)
{
  var lab = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.Toast.$type);
  var width = widget.width();
  var height = widget.height();
  g.brush$(this.m_background);
  var arc = fan.sys.Int.div(height,2);
  g.fillRoundRect(0,0,width,height,arc,arc);
  this.drawText(widget,g,lab.text(),((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_center));
  return;
}
fan.vaseGui.TableHeaderStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.TableHeaderStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.TableHeaderStyle.prototype.$typeof = function() { return fan.vaseGui.TableHeaderStyle.$type; }
fan.vaseGui.TableHeaderStyle.make = function() {
  var self = new fan.vaseGui.TableHeaderStyle();
  fan.vaseGui.TableHeaderStyle.make$(self);
  return self;
  }
fan.vaseGui.TableHeaderStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  self.m_background = fan.vaseGraphics.Color.makeRgb(254,255,200);
  return;
}
fan.vaseGui.TableHeaderStyle.prototype.doPaint = function(widget,g)
{
  var btn = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.ButtonBase.$type);
  g.brush$(this.m_background);
  g.fillRect(0,0,widget.width(),widget.height());
  g.brush$(this.m_foreground);
  g.drawRect(0,0,widget.width(),widget.height());
  this.drawText(widget,g,btn.text(),((fan.vaseGui.Align.static$init ? fan.vaseGui.Align.static$init() : null),fan.vaseGui.Align.m_center));
  return;
}
fan.vaseGui.TableStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.TableStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.TableStyle.prototype.$typeof = function() { return fan.vaseGui.TableStyle.$type; }
fan.vaseGui.TableStyle.prototype.doPaint = function(widget,g)
{
  var tab = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.Table.$type);
  var top = widget.paddingTop();
  var left = widget.paddingLeft();
  g.font$(this.font());
  var rowHeight = this.dpToPixel(tab.m_rowHeight);
  var numCols = tab.model().numCols();
  var fontOffset = fan.sys.Int.plus(this.font().ascent(),this.font().leading());
  var bottomLine = fan.sys.Int.plus(top,tab.contentHeight());
  var rightLine = fan.sys.Int.plus(left,tab.contentWidth());
  var start = fan.sys.Int.div(tab.offsetY(),rowHeight);
  var topOffset = fan.sys.Int.minus(tab.offsetY(),fan.sys.Int.mult(start,rowHeight));
  var y = fan.sys.Int.plus(fan.sys.Int.plus(fan.sys.Int.negate(topOffset),rowHeight),top);
  for (var i = start; fan.sys.ObjUtil.compareLT(i,tab.model().numRows()); i = fan.sys.Int.increment(i))
  {
    if (fan.sys.ObjUtil.compareGE(i,0))
    {
      var x = fan.sys.Int.plus(fan.sys.Int.negate(tab.offsetX()),left);
      for (var j = 0; fan.sys.ObjUtil.compareLT(j,numCols); j = fan.sys.Int.increment(j))
      {
        var text = tab.model().text(j,i);
        this.drawCell(g,x,y,tab.m_colWidthCache.get(j),rowHeight,text,fontOffset);
        x = fan.sys.Int.plus(x,tab.m_colWidthCache.get(j));
        if (fan.sys.ObjUtil.compareGT(x,rightLine))
        {
          break;
        }
        ;
      }
      ;
    }
    ;
    y = fan.sys.Int.plus(y,rowHeight);
    if (fan.sys.ObjUtil.compareGT(y,bottomLine))
    {
      break;
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.TableStyle.prototype.drawCell = function(g,x,y,w,h,text,fontOffset)
{
  g.brush$(this.m_background);
  g.fillRect(x,y,w,h);
  g.brush$(this.m_foreground);
  g.drawRect(x,y,w,h);
  g.brush$(this.m_fontColor);
  g.drawText(text,fan.sys.Int.plus(x,1),fan.sys.Int.plus(y,fontOffset));
  return;
}
fan.vaseGui.TableStyle.make = function() {
  var self = new fan.vaseGui.TableStyle();
  fan.vaseGui.TableStyle.make$(self);
  return self;
  }
fan.vaseGui.TableStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  return;
}
fan.vaseGui.ImageStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.ImageStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.ImageStyle.prototype.$typeof = function() { return fan.vaseGui.ImageStyle.$type; }
fan.vaseGui.ImageStyle.prototype.doPaint = function(widget,g)
{
  var img = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.ImageView.$type);
  if (!img.m_image.isReady())
  {
    return;
  }
  ;
  var w = widget.contentWidth();
  var h = widget.contentHeight();
  var top = widget.paddingTop();
  var left = widget.paddingLeft();
  var srcSize = img.m_image.size();
  var src = fan.vaseGraphics.Rect.make(0,0,srcSize.m_w,srcSize.m_h);
  var dst = fan.vaseGraphics.Rect.make(left,top,w,h);
  g.copyImage(fan.sys.ObjUtil.coerce(img.m_image,fan.vaseGraphics.Image.$type),src,dst);
  return;
}
fan.vaseGui.ImageStyle.make = function() {
  var self = new fan.vaseGui.ImageStyle();
  fan.vaseGui.ImageStyle.make$(self);
  return self;
  }
fan.vaseGui.ImageStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  return;
}
fan.vaseGui.ImageButtonStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.ImageButtonStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.ImageButtonStyle.prototype.$typeof = function() { return fan.vaseGui.ImageButtonStyle.$type; }
fan.vaseGui.ImageButtonStyle.prototype.doPaint = function(widget,g)
{
  var img = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.ImageButton.$type);
  if (!img.m_image.isReady())
  {
    return;
  }
  ;
  var w = widget.contentWidth();
  var h = widget.contentHeight();
  var top = widget.paddingTop();
  var left = widget.paddingLeft();
  var srcSize = img.m_image.size();
  var src = fan.vaseGraphics.Rect.make(0,0,srcSize.m_w,srcSize.m_h);
  var dst = fan.vaseGraphics.Rect.make(left,top,w,h);
  g.copyImage(fan.sys.ObjUtil.coerce(img.m_image,fan.vaseGraphics.Image.$type),src,dst);
  return;
}
fan.vaseGui.ImageButtonStyle.make = function() {
  var self = new fan.vaseGui.ImageButtonStyle();
  fan.vaseGui.ImageButtonStyle.make$(self);
  return self;
  }
fan.vaseGui.ImageButtonStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  return;
}
fan.vaseGui.TextAreaStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.TextAreaStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.TextAreaStyle.prototype.$typeof = function() { return fan.vaseGui.TextAreaStyle.$type; }
fan.vaseGui.TextAreaStyle.prototype.doPaint = function(widget,g)
{
  var area = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.TextArea.$type);
  var top = widget.paddingTop();
  var left = widget.paddingLeft();
  g.font$(this.font());
  var start = fan.sys.Int.div(area.offsetY(),area.rowHeight());
  var topOffset = fan.sys.Int.minus(area.offsetY(),fan.sys.Int.mult(start,area.rowHeight()));
  var end = fan.sys.Float.toInt(fan.std.Math.ceil(fan.sys.Float.divInt(fan.sys.Int.toFloat(fan.sys.Int.plus(area.offsetY(),area.contentHeight())),area.rowHeight())));
  if (fan.sys.ObjUtil.compareGE(end,area.model().lineCount()))
  {
    end = fan.sys.Int.minus(area.model().lineCount(),1);
  }
  ;
  var fontOffset = fan.sys.Int.plus(this.font().ascent(),this.font().leading());
  var selectionStartLine = -1;
  var selectionEndLine = -1;
  var selectionStartOffset = -1;
  var selectionEndOffset = -1;
  var hasSelection = false;
  if (area.hasSelected())
  {
    selectionStartLine = area.model().lineAtOffset(area.m_selectionStart);
    selectionEndLine = area.model().lineAtOffset(area.m_selectionEnd);
    selectionStartOffset = fan.sys.Int.minus(area.m_selectionStart,area.model().offsetAtLine(selectionStartLine));
    selectionEndOffset = fan.sys.Int.minus(area.m_selectionEnd,area.model().offsetAtLine(selectionEndLine));
    if ((fan.sys.ObjUtil.compareGT(selectionStartLine,end) || fan.sys.ObjUtil.compareLT(selectionEndLine,start)))
    {
    }
    else
    {
      hasSelection = true;
    }
    ;
  }
  ;
  var selStart = -1;
  var selEnd = -1;
  var c = 0;
  var x = fan.sys.Int.plus(fan.sys.Int.negate(area.offsetX()),left);
  var y = fan.sys.Int.plus(fan.sys.Int.negate(topOffset),top);
  var bottomY = fan.sys.Int.plus(top,area.contentHeight());
  for (var i = start; fan.sys.ObjUtil.compareLT(i,area.model().lineCount()); i = fan.sys.Int.increment(i))
  {
    var lineText = area.model().line(i);
    if (hasSelection)
    {
      if (fan.sys.ObjUtil.equals(i,selectionStartLine))
      {
        selStart = selectionStartOffset;
      }
      else
      {
        if (fan.sys.ObjUtil.compareGT(i,selectionStartLine))
        {
          selStart = 0;
        }
        else
        {
          selStart = -1;
        }
        ;
      }
      ;
      if (fan.sys.ObjUtil.equals(i,selectionEndLine))
      {
        selEnd = selectionEndOffset;
      }
      else
      {
        if (fan.sys.ObjUtil.compareLT(i,selectionEndLine))
        {
          selEnd = fan.sys.Str.size(lineText);
        }
        else
        {
          selEnd = -1;
        }
        ;
      }
      ;
    }
    ;
    this.drawLineText(g,area.rowHeight(),fontOffset,x,y,lineText,selStart,selEnd);
    y = fan.sys.Int.plus(y,area.rowHeight());
    if (fan.sys.ObjUtil.compareGT(y,bottomY))
    {
      break;
    }
    ;
  }
  ;
  this.drawCaret(area,g,start,end);
  return;
}
fan.vaseGui.TextAreaStyle.prototype.drawCaret = function(area,g,start,end)
{
  if (area.m_caret.m_visible)
  {
    var lineIndex = area.m_caret.m_lineIndex;
    if ((fan.sys.ObjUtil.compareLT(lineIndex,start) || fan.sys.ObjUtil.compareGT(lineIndex,end)))
    {
    }
    else
    {
      var y = fan.sys.Int.mult(fan.sys.Int.minus(lineIndex,start),area.rowHeight());
      var line = area.model().line(lineIndex);
      var xOffset = area.m_caret.m_offset;
      var x = fan.sys.Int.minus(this.font().width(fan.sys.Str.getRange(line,fan.sys.Range.make(0,xOffset,true))),area.offsetX());
      g.drawLine(x,y,x,fan.sys.Int.plus(y,area.rowHeight()));
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.TextAreaStyle.prototype.drawLineText = function(g,rowHeight,fontOffset,left,top,text,selStart,selEnd)
{
  if ((fan.sys.ObjUtil.compareGE(selStart,0) && fan.sys.ObjUtil.compareGE(selEnd,0)))
  {
    g.brush$(fan.vaseGraphics.Color.makeRgb(200,200,200));
    var selection = fan.sys.Str.getRange(text,fan.sys.Range.make(selStart,selEnd,true));
    g.fillRect(fan.sys.Int.plus(g.font().width(fan.sys.Str.getRange(text,fan.sys.Range.make(0,selStart,true))),left),top,g.font().width(selection),rowHeight);
  }
  ;
  g.brush$(this.m_fontColor);
  g.drawText(text,left,fan.sys.Int.plus(top,fontOffset));
  return;
}
fan.vaseGui.TextAreaStyle.make = function() {
  var self = new fan.vaseGui.TextAreaStyle();
  fan.vaseGui.TextAreaStyle.make$(self);
  return self;
  }
fan.vaseGui.TextAreaStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  return;
}
fan.vaseGui.ScrollBarStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.ScrollBarStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
  this.m_barWidth = fan.sys.Float.make(12.0);
  return;
}
fan.vaseGui.ScrollBarStyle.prototype.$typeof = function() { return fan.vaseGui.ScrollBarStyle.$type; }
fan.vaseGui.ScrollBarStyle.prototype.barWidth = function()
{
  return this.m_barWidth;
}
fan.vaseGui.ScrollBarStyle.prototype.barWidth$ = function(it)
{
  this.m_barWidth = it;
  return;
}
fan.vaseGui.ScrollBarStyle.make = function() {
  var self = new fan.vaseGui.ScrollBarStyle();
  fan.vaseGui.ScrollBarStyle.make$(self);
  return self;
  }
fan.vaseGui.ScrollBarStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  ;
  self.m_background = fan.vaseGraphics.Color.make(16448250);
  self.m_foreground = fan.vaseGraphics.Color.make(8158332);
  return;
}
fan.vaseGui.ScrollBarStyle.prototype.doPaint = function(widget,g)
{
  var bar = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.ScrollBar.$type);
  if (bar.isActive())
  {
    g.brush$(this.m_background);
    g.fillRect(0,0,widget.width(),widget.height());
  }
  else
  {
    g.alpha$(100);
  }
  ;
  g.brush$(this.m_foreground);
  var pos = bar.screenPos();
  var thumb = bar.thumbSize();
  var top = widget.paddingTop();
  var left = widget.paddingLeft();
  if (bar.m_vertical)
  {
    if (bar.isActive())
    {
      g.fillRect(left,fan.sys.Int.plus(top,pos),widget.contentWidth(),thumb);
    }
    else
    {
      var barW = this.dpToPixel(this.m_barWidth);
      g.fillRect(fan.sys.Int.minus(fan.sys.Int.plus(left,widget.contentWidth()),barW),fan.sys.Int.plus(top,pos),barW,thumb);
    }
    ;
  }
  else
  {
    if (bar.isActive())
    {
      g.fillRect(fan.sys.Int.plus(left,pos),top,thumb,widget.contentHeight());
    }
    else
    {
      var barW = this.dpToPixel(this.m_barWidth);
      g.fillRect(fan.sys.Int.plus(left,pos),fan.sys.Int.minus(fan.sys.Int.plus(top,widget.contentHeight()),barW),thumb,barW);
    }
    ;
  }
  ;
  return;
}
fan.vaseGui.ScrollBarStyle.prototype.m_barWidth = fan.sys.Float.make(0);
fan.vaseGui.SliderBarStyle = fan.sys.Obj.$extend(fan.vaseGui.WidgetStyle);
fan.vaseGui.SliderBarStyle.prototype.$ctor = function()
{
  fan.vaseGui.WidgetStyle.prototype.$ctor.call(this);
  var $this = this;
  this.m_width = fan.sys.Float.make(8.0);
  return;
}
fan.vaseGui.SliderBarStyle.prototype.$typeof = function() { return fan.vaseGui.SliderBarStyle.$type; }
fan.vaseGui.SliderBarStyle.prototype.width = function()
{
  return this.m_width;
}
fan.vaseGui.SliderBarStyle.prototype.width$ = function(it)
{
  this.m_width = it;
  return;
}
fan.vaseGui.SliderBarStyle.make = function() {
  var self = new fan.vaseGui.SliderBarStyle();
  fan.vaseGui.SliderBarStyle.make$(self);
  return self;
  }
fan.vaseGui.SliderBarStyle.make$ = function(self)
{
  fan.vaseGui.WidgetStyle.make$(self);
  ;
  self.m_outlineColor = fan.vaseGraphics.Color.make(8158332);
  self.m_foreground = fan.vaseGraphics.Color.make(5362022);
  return;
}
fan.vaseGui.SliderBarStyle.prototype.doPaint = function(widget,g)
{
  var $this = this;
  var bar = fan.sys.ObjUtil.coerce(widget,fan.vaseGui.ScrollBar.$type);
  var top = widget.paddingTop();
  var left = widget.paddingLeft();
  var cx = fan.sys.Int.plus(fan.sys.Int.div(widget.contentWidth(),2),left);
  var cy = fan.sys.Int.plus(fan.sys.Int.div(widget.contentHeight(),2),top);
  var width = this.dpToPixel(this.m_width);
  var size = widget.contentHeight();
  g.brush$(this.m_outlineColor);
  g.pen$(fan.vaseGraphics.Pen.make(fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u35,
    function(it)
    {
      it.m_width = width;
      return;
    })));
  if (bar.m_vertical)
  {
    g.drawLine(cx,top,cx,fan.sys.Int.plus(top,widget.contentHeight()));
  }
  else
  {
    g.drawLine(left,cy,fan.sys.Int.plus(left,widget.contentWidth()),cy);
  }
  ;
  g.brush$(this.m_foreground);
  var pos = bar.screenPos();
  var r = fan.sys.Int.div(size,2);
  cx = fan.sys.Int.minus(cx,r);
  cy = fan.sys.Int.minus(cy,r);
  if (bar.m_vertical)
  {
    g.fillOval(cx,fan.sys.Int.minus(fan.sys.Int.plus(pos,top),r),size,size);
  }
  else
  {
    g.fillOval(fan.sys.Int.minus(fan.sys.Int.plus(pos,left),r),cy,size,size);
  }
  ;
  return;
}
fan.vaseGui.SliderBarStyle.prototype.m_width = fan.sys.Float.make(0);
fan.vaseGui.BaseTestWin = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseGui.BaseTestWin.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseGui.BaseTestWin.prototype.$typeof = function() { return fan.vaseGui.BaseTestWin.$type; }
fan.vaseGui.BaseTestWin.prototype.root = function()
{
  return this.m_root;
}
fan.vaseGui.BaseTestWin.prototype.root$ = function(it)
{
  this.m_root = it;
  return;
}
fan.vaseGui.BaseTestWin.prototype.main = function()
{
  this.m_root = fan.vaseGui.Frame.make();
  var view = this.build();
  this.m_root.content$(view);
  this.init(fan.sys.ObjUtil.coerce(this.m_root,fan.vaseGui.Frame.$type));
  this.m_root.show();
  var buf = fan.sys.StrBuf.make();
  fan.std.Extension.writeObj(fan.std.StrExt.out(buf),this.m_root,true,fan.sys.ObjUtil.coerce(fan.std.Map.fromLiteral(["indent","skipDefaults"],[fan.sys.ObjUtil.coerce(2,fan.sys.Obj.$type),fan.sys.ObjUtil.coerce(true,fan.sys.Obj.$type)],fan.std.Type.find("sys::Str"),fan.std.Type.find("sys::Obj")),fan.std.Type.find("std::Map<sys::Str,sys::Obj>?")));
  fan.sys.ObjUtil.echo(buf);
  return;
}
fan.vaseGui.BaseTestWin.prototype.build = function()
{
  var $this = this;
  return fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.Label.make(),fan.sys.Func.make$closure(
    fan.vaseGui.$clos$_u38,
    function(it)
    {
      it.text$("Hello ");
      return;
    })),fan.vaseGui.Label.$type);
}
fan.vaseGui.BaseTestWin.prototype.init = function(root)
{
  return;
}
fan.vaseGui.BaseTestWin.make = function() {
  var self = new fan.vaseGui.BaseTestWin();
  fan.vaseGui.BaseTestWin.make$(self);
  return self;
  }
fan.vaseGui.BaseTestWin.make$ = function(self)
{
  return;
}
fan.vaseGui.BaseTestWin.prototype.m_root = null;
fan.vaseGui.initReflect$ = function() {
  fan.vaseGui.$pod = fan.std.Pod.$add('vaseGui');
  with (fan.vaseGui.$pod)
  {
    fan.vaseGui.Align.$type = $at('Align','sys::Enum',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},8234);
    fan.vaseGui.SizeType.$type = $at('SizeType','sys::Enum',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},8234);
    fan.vaseGui.LayoutParam.$type = $at('LayoutParam','sys::Obj',[],{'sys::Js':"",'sys::Serializable':""},270336);
    fan.vaseGui.DisplayMetrics.$type = $am('DisplayMetrics','sys::Obj',[],{'sys::Js':""},8449);
    fan.vaseGui.WinView.$type = $at('WinView','sys::Obj',['vaseWindow::View'],{'sys::Js':""},262272);
    fan.vaseGui.Widget.$type = $at('Widget','sys::Obj',[],{'sys::Js':"",'sys::Serializable':""},8193);
    fan.vaseGui.Coord.$type = $at('Coord','sys::Obj',[],{'sys::Js':""},270336);
    fan.vaseGui.Dimension.$type = $at('Dimension','sys::Obj',[],{'sys::Js':""},270336);
    fan.vaseGui.Insets.$type = $at('Insets','sys::Obj',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},270338);
    fan.vaseGui.Direction.$type = $at('Direction','sys::Enum',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},8234);
    fan.vaseGui.Animation.$type = $at('Animation','sys::Obj',[],{'sys::Js':""},270336);
    fan.vaseGui.TweenAnimation.$type = $at('TweenAnimation','vaseGui::Animation',[],{'sys::Js':""},270336);
    fan.vaseGui.AnimChannel.$type = $am('AnimChannel','sys::Obj',[],{'sys::Js':""},8449);
    fan.vaseGui.TweenAnimChannel.$type = $at('TweenAnimChannel','sys::Obj',['vaseGui::AnimChannel'],{'sys::Js':""},8193);
    fan.vaseGui.TranslateAnimChannel.$type = $at('TranslateAnimChannel','vaseGui::TweenAnimChannel',[],{'sys::Js':""},270336);
    fan.vaseGui.RotateAnimChannel.$type = $at('RotateAnimChannel','vaseGui::TweenAnimChannel',[],{'sys::Js':""},270336);
    fan.vaseGui.AlphaAnimChannel.$type = $at('AlphaAnimChannel','vaseGui::TweenAnimChannel',[],{'sys::Js':""},270336);
    fan.vaseGui.ScaleAnimChannel.$type = $at('ScaleAnimChannel','vaseGui::TweenAnimChannel',[],{'sys::Js':""},270336);
    fan.vaseGui.AnimManager.$type = $at('AnimManager','sys::Obj',[],{'sys::Js':""},8192);
    fan.vaseGui.FloatPropertyAnimChannel.$type = $at('FloatPropertyAnimChannel','sys::Obj',['vaseGui::AnimChannel'],{'sys::Js':""},270336);
    fan.vaseGui.Timer.$type = $at('Timer','sys::Obj',[],{'sys::Js':""},8192);
    fan.vaseGui.AnimExt.$type = $at('AnimExt','sys::Obj',[],{'sys::Js':""},8192);
    fan.vaseGui.ScrollAnimChannel.$type = $at('ScrollAnimChannel','sys::Obj',['vaseGui::AnimChannel'],{'sys::Js':""},270336);
    fan.vaseGui.OverScrollAnimChannel.$type = $at('OverScrollAnimChannel','vaseGui::ScrollAnimChannel',[],{'sys::Js':""},270336);
    fan.vaseGui.Interpolation.$type = $at('Interpolation','sys::Obj',[],{'sys::Js':""},270336);
    fan.vaseGui.WidgetGroup.$type = $at('WidgetGroup','vaseGui::Widget',[],{'sys::Js':"",'sys::Serializable':""},8193);
    fan.vaseGui.VBox.$type = $at('VBox','vaseGui::WidgetGroup',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{collection=true;}"},270336);
    fan.vaseGui.MessageBox.$type = $at('MessageBox','vaseGui::VBox',[],{'sys::Js':""},8192);
    fan.vaseGui.HBox.$type = $at('HBox','vaseGui::WidgetGroup',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{collection=true;}"},270336);
    fan.vaseGui.Menu.$type = $at('Menu','vaseGui::HBox',[],{'sys::Js':""},8192);
    fan.vaseGui.MenuList.$type = $at('MenuList','vaseGui::VBox',[],{'sys::Js':""},128);
    fan.vaseGui.Label.$type = $at('Label','vaseGui::Widget',[],{'sys::Js':""},270336);
    fan.vaseGui.ButtonBase.$type = $at('ButtonBase','vaseGui::Label',[],{'sys::Js':""},270336);
    fan.vaseGui.MenuItem.$type = $at('MenuItem','vaseGui::ButtonBase',[],{'sys::Js':""},270336);
    fan.vaseGui.Pane.$type = $at('Pane','vaseGui::WidgetGroup',[],{'sys::Js':""},270336);
    fan.vaseGui.ScrollBase.$type = $at('ScrollBase','vaseGui::Pane',[],{'sys::Js':""},8193);
    fan.vaseGui.ScrollPane.$type = $at('ScrollPane','vaseGui::ScrollBase',[],{'sys::Js':""},8192);
    fan.vaseGui.ContentPane.$type = $at('ContentPane','vaseGui::Pane',[],{'sys::Js':""},270336);
    fan.vaseGui.Frame.$type = $at('Frame','vaseGui::ContentPane',[],{'sys::Js':""},270336);
    fan.vaseGui.FlowLayout.$type = $at('FlowLayout','vaseGui::WidgetGroup',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{collection=true;}"},270336);
    fan.vaseGui.EdgePane.$type = $at('EdgePane','vaseGui::Pane',[],{'sys::Js':""},270336);
    fan.vaseGui.ToggleButton.$type = $at('ToggleButton','vaseGui::ButtonBase',[],{'sys::Js':""},270336);
    fan.vaseGui.RadioButton.$type = $at('RadioButton','vaseGui::ToggleButton',[],{'sys::Js':""},270336);
    fan.vaseGui.Switch.$type = $at('Switch','vaseGui::ToggleButton',[],{'sys::Js':""},270336);
    fan.vaseGui.TreeView.$type = $at('TreeView','vaseGui::ScrollBase',[],{'sys::Js':""},270336);
    fan.vaseGui.TreeItem.$type = $at('TreeItem','sys::Obj',[],{'sys::Js':""},8192);
    fan.vaseGui.TreeModel.$type = $at('TreeModel','sys::Obj',[],{'sys::Js':""},270336);
    fan.vaseGui.ImageView.$type = $at('ImageView','vaseGui::Widget',[],{'sys::Js':""},270336);
    fan.vaseGui.ImageButton.$type = $at('ImageButton','vaseGui::ButtonBase',[],{'sys::Js':""},270336);
    fan.vaseGui.Button.$type = $at('Button','vaseGui::ButtonBase',[],{'sys::Js':""},8192);
    fan.vaseGui.TextAreaModel.$type = $at('TextAreaModel','sys::Obj',[],{'sys::Js':""},8193);
    fan.vaseGui.DefTextAreaModel.$type = $at('DefTextAreaModel','vaseGui::TextAreaModel',[],{'sys::Js':""},270336);
    fan.vaseGui.RichTextStyle.$type = $at('RichTextStyle','sys::Obj',[],{'sys::Js':"",'sys::Serializable':""},270336);
    fan.vaseGui.RichTextUnderline.$type = $at('RichTextUnderline','sys::Enum',[],{'sys::Js':"",'sys::Serializable':"sys::Serializable{simple=true;}"},8234);
    fan.vaseGui.ListView.$type = $at('ListView','vaseGui::ScrollBase',[],{'sys::Js':""},270336);
    fan.vaseGui.ListItem.$type = $at('ListItem','sys::Obj',[],{'sys::Js':""},8192);
    fan.vaseGui.ListItemPool.$type = $at('ListItemPool','sys::Obj',[],{'sys::Js':""},128);
    fan.vaseGui.ListAdapter.$type = $at('ListAdapter','sys::Obj',[],{'sys::Js':""},8193);
    fan.vaseGui.SimpleListAdapter.$type = $at('SimpleListAdapter','vaseGui::ListAdapter',[],{'sys::Js':""},270336);
    fan.vaseGui.ScrollBar.$type = $at('ScrollBar','vaseGui::Widget',[],{'sys::Js':""},270336);
    fan.vaseGui.SliderBar.$type = $at('SliderBar','vaseGui::ScrollBar',[],{'sys::Js':""},8192);
    fan.vaseGui.Table.$type = $at('Table','vaseGui::ScrollBase',[],{'sys::Js':""},270336);
    fan.vaseGui.TableModel.$type = $at('TableModel','sys::Obj',[],{'sys::Js':""},270336);
    fan.vaseGui.Caret.$type = $at('Caret','sys::Obj',[],{'sys::Js':""},270336);
    fan.vaseGui.EditText.$type = $at('EditText','vaseGui::Widget',['vaseWindow::TextInput'],{'sys::Js':""},270336);
    fan.vaseGui.NativeCaret.$type = $at('NativeCaret','vaseGui::Caret',['vaseWindow::TextInput'],{'sys::Js':""},270336);
    fan.vaseGui.TextArea.$type = $at('TextArea','vaseGui::ScrollBase',[],{'sys::Js':""},270336);
    fan.vaseGui.ProgressView.$type = $at('ProgressView','vaseGui::Widget',[],{'sys::Js':""},270336);
    fan.vaseGui.ComboBox.$type = $at('ComboBox','vaseGui::ButtonBase',[],{'sys::Js':""},8192);
    fan.vaseGui.Toast.$type = $at('Toast','vaseGui::Label',[],{'sys::Js':""},8192);
    fan.vaseGui.Effect.$type = $am('Effect','sys::Obj',[],{'sys::Js':""},8449);
    fan.vaseGui.BlurEffect.$type = $at('BlurEffect','sys::Obj',['vaseGui::Effect'],{'sys::Js':""},270336);
    fan.vaseGui.ShadowEffect.$type = $at('ShadowEffect','vaseGui::BlurEffect',[],{'sys::Js':""},270336);
    fan.vaseGui.GestureEvent.$type = $at('GestureEvent','vaseWindow::Event',[],{'sys::Js':""},270336);
    fan.vaseGui.MultiTouchEvent.$type = $at('MultiTouchEvent','vaseGui::GestureEvent',[],{'sys::Js':""},8192);
    fan.vaseGui.GestureState.$type = $at('GestureState','sys::Obj',[],{'sys::Js':""},8193);
    fan.vaseGui.MultiTouchState.$type = $at('MultiTouchState','vaseGui::GestureState',[],{'sys::Js':""},270336);
    fan.vaseGui.NoneState.$type = $at('NoneState','vaseGui::GestureState',[],{'sys::Js':""},270336);
    fan.vaseGui.DownState.$type = $at('DownState','vaseGui::GestureState',[],{'sys::Js':""},270336);
    fan.vaseGui.OneClickState.$type = $at('OneClickState','vaseGui::GestureState',[],{'sys::Js':""},270336);
    fan.vaseGui.TwoDownState.$type = $at('TwoDownState','vaseGui::GestureState',[],{'sys::Js':""},270336);
    fan.vaseGui.DragState.$type = $at('DragState','vaseGui::GestureState',[],{'sys::Js':""},270336);
    fan.vaseGui.Gesture.$type = $at('Gesture','sys::Obj',[],{'sys::Js':""},270336);
    fan.vaseGui.Style.$type = $am('Style','sys::Obj',[],{'sys::Js':""},8449);
    fan.vaseGui.WidgetStyle.$type = $at('WidgetStyle','sys::Obj',['vaseGui::Style'],{'sys::Js':""},270336);
    fan.vaseGui.TreeStyle.$type = $at('TreeStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.StyleManager.$type = $at('StyleManager','sys::Obj',[],{'sys::Js':""},8192);
    fan.vaseGui.ComboBoxStyle.$type = $at('ComboBoxStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.ButtonBaseStyle.$type = $at('ButtonBaseStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.MessageBoxStyle.$type = $at('MessageBoxStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.EditTextStyle.$type = $at('EditTextStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.RoundButtonStyle.$type = $at('RoundButtonStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.ProgressViewStyle.$type = $at('ProgressViewStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.MenuStyle.$type = $at('MenuStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.MenuItemStyle.$type = $at('MenuItemStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.PaneStyle.$type = $at('PaneStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.ToggleButtonStyle.$type = $at('ToggleButtonStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.RadioButtonStyle.$type = $at('RadioButtonStyle','vaseGui::ToggleButtonStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.SwitchStyle.$type = $at('SwitchStyle','vaseGui::ToggleButtonStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.LabelStyle.$type = $at('LabelStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.ToastStyle.$type = $at('ToastStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.TableHeaderStyle.$type = $at('TableHeaderStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.TableStyle.$type = $at('TableStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.ImageStyle.$type = $at('ImageStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.ImageButtonStyle.$type = $at('ImageButtonStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.TextAreaStyle.$type = $at('TextAreaStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.ScrollBarStyle.$type = $at('ScrollBarStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.SliderBarStyle.$type = $at('SliderBarStyle','vaseGui::WidgetStyle',[],{'sys::Js':""},270336);
    fan.vaseGui.BaseTestWin.$type = $at('BaseTestWin','sys::Obj',[],{'sys::Js':""},270336);
    fan.vaseGui.Align.$type.$af('begin',106506,'vaseGui::Align',{}).$af('center',106506,'vaseGui::Align',{}).$af('end',106506,'vaseGui::Align',{}).$af('vals',106498,'sys::List<vaseGui::Align>',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('$ordinal','sys::Int',false),new fan.std.Param('$name','sys::Str',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'vaseGui::Align?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.SizeType.$type.$af('matchParent',106506,'vaseGui::SizeType',{}).$af('wrapContent',106506,'vaseGui::SizeType',{}).$af('fixed',106506,'vaseGui::SizeType',{}).$af('percent',106506,'vaseGui::SizeType',{}).$af('vals',106498,'sys::List<vaseGui::SizeType>',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('$ordinal','sys::Int',false),new fan.std.Param('$name','sys::Str',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'vaseGui::SizeType?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.LayoutParam.$type.$af('widthType',73728,'vaseGui::SizeType',{}).$af('heightType',73728,'vaseGui::SizeType',{}).$af('ignore',73728,'sys::Bool',{}).$af('widthVal',73728,'sys::Float',{}).$af('heightVal',73728,'sys::Float',{}).$af('weight',73728,'sys::Float',{}).$af('offsetX',73728,'sys::Float',{}).$af('offsetY',73728,'sys::Float',{}).$af('vAlign',73728,'vaseGui::Align',{}).$af('hAlign',73728,'vaseGui::Align',{}).$am('prefX',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('w','vaseGui::Widget',false),new fan.std.Param('parentWidth','sys::Int',false),new fan.std.Param('selfWidth','sys::Int',false)], fan.std.Param.$type),{}).$am('prefY',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('w','vaseGui::Widget',false),new fan.std.Param('parentHeight','sys::Int',false),new fan.std.Param('selfHeight','sys::Int',false)], fan.std.Param.$type),{}).$am('prefWidth',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('w','vaseGui::Widget',false),new fan.std.Param('parentWidth','sys::Int',false),new fan.std.Param('selfWidth','sys::Int',false)], fan.std.Param.$type),{}).$am('prefHeight',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('w','vaseGui::Widget',false),new fan.std.Param('parentHeight','sys::Int',false),new fan.std.Param('selfHeight','sys::Int',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.DisplayMetrics.$type.$am('dp',34818,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('dpToPixel',40962,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('d','sys::Float',false)], fan.std.Param.$type),{}).$am('pixelToDp',40962,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('p','sys::Int',false)], fan.std.Param.$type),{});
    fan.vaseGui.WinView.$type.$af('host',336896,'vaseWindow::Window?',{}).$af('curFrame',67584,'vaseGui::Frame',{}).$af('oldFrame',65664,'vaseGui::Frame?',{}).$af('frameOut',67584,'sys::Bool',{}).$af('stack',67584,'sys::List<vaseGui::Frame>',{}).$af('gesture',67584,'vaseGui::Gesture',{'sys::Transient':""}).$af('width',67584,'sys::Int',{}).$af('height',67584,'sys::Int',{}).$af('layoutDirty',69632,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('frame','vaseGui::Frame',false)], fan.std.Param.$type),{}).$am('pushFrame',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('frame','vaseGui::Frame',false)], fan.std.Param.$type),{}).$am('popFrame',8192,'vaseGui::Frame?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('onMotionEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('onKeyEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::KeyEvent',false)], fan.std.Param.$type),{}).$am('onWindowEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::WindowEvent',false)], fan.std.Param.$type),{}).$am('getPrefSize',271360,'vaseGraphics::Size',fan.sys.List.makeFromJs([new fan.std.Param('hintsWidth','sys::Int',false),new fan.std.Param('hintsHeight','sys::Int',false)], fan.std.Param.$type),{});
    fan.vaseGui.Widget.$type.$af('id',73728,'sys::Str',{}).$af('styleClass',73728,'sys::Str',{}).$af('transform',73728,'vaseMath::Transform2D?',{'sys::Transient':""}).$af('alpha',73728,'sys::Float?',{'sys::Transient':""}).$af('clip',73728,'sys::Bool',{}).$af('useRenderCache',73728,'sys::Bool',{}).$af('renderCacheImage',67584,'vaseGraphics::BufImage?',{'sys::Transient':""}).$af('renderCacheDirty',69632,'sys::Bool',{'sys::Transient':""}).$af('layoutDirty',69632,'sys::Int',{'sys::Transient':""}).$af('padding',73728,'vaseGui::Insets',{}).$af('margin',73728,'vaseGui::Insets',{}).$af('layoutParam',73728,'vaseGui::LayoutParam',{}).$af('style',67584,'vaseGui::Style?',{'sys::Transient':""}).$af('visible',73728,'sys::Bool',{}).$af('enabled',73728,'sys::Bool',{}).$af('x',73728,'sys::Int',{'sys::Transient':""}).$af('y',73728,'sys::Int',{'sys::Transient':""}).$af('width',73728,'sys::Int',{'sys::Transient':""}).$af('height',73728,'sys::Int',{'sys::Transient':""}).$af('bounds',8192,'vaseGraphics::Rect',{'sys::Transient':""}).$af('parent',73728,'vaseGui::WidgetGroup?',{'sys::Transient':""}).$af('isFocusable',73728,'sys::Bool',{}).$af('onStateChanged$Store',198656,'sys::Obj?',{}).$af('onFocusChanged$Store',198656,'sys::Obj?',{}).$am('fireStateChange',4096,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('oldValue','sys::Obj?',false),new fan.std.Param('newValue','sys::Obj?',false),new fan.std.Param('field','std::Field?',false)], fan.std.Param.$type),{}).$am('onStateChanged',2147491840,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('setParent',128,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('p','vaseGui::WidgetGroup?',false)], fan.std.Param.$type),{}).$am('findById',270336,'vaseGui::Widget?',fan.sys.List.makeFromJs([new fan.std.Param('id','sys::Str',false)], fan.std.Param.$type),{}).$am('motionEvent',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('gestureEvent',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseGui::GestureEvent',false)], fan.std.Param.$type),{}).$am('keyEvent',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::KeyEvent',false)], fan.std.Param.$type),{}).$am('paint',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('dpToPixel',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('d','sys::Float',false)], fan.std.Param.$type),{}).$am('pixelToDp',8192,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('d','sys::Int',false)], fan.std.Param.$type),{}).$am('getStyle',4096,'vaseGui::Style',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('detach',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('doRelayout','sys::Bool',true)], fan.std.Param.$type),{}).$am('bufferedPrefSize',4096,'vaseGui::Dimension',fan.sys.List.makeFromJs([new fan.std.Param('parentContentWidth','sys::Int',true),new fan.std.Param('parentContentHeight','sys::Int',true)], fan.std.Param.$type),{}).$am('prefSize',270336,'vaseGui::Dimension',fan.sys.List.makeFromJs([new fan.std.Param('parentContentWidth','sys::Int',true),new fan.std.Param('parentContentHeight','sys::Int',true)], fan.std.Param.$type),{}).$am('prefContentSize',266240,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('contentWidth',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('contentHeight',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('bufferedWidth',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('bufferedHeight',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('paddingLeft',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('paddingTop',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('layout',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false),new fan.std.Param('force','sys::Bool',false)], fan.std.Param.$type),{}).$am('layoutChildren',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('force','sys::Bool',false)], fan.std.Param.$type),{}).$am('relayout',270336,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('contains',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('rx','sys::Int',false),new fan.std.Param('ry','sys::Int',false)], fan.std.Param.$type),{}).$am('posOnWindow',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('result','vaseGui::Coord',false)], fan.std.Param.$type),{}).$am('mapToRelative',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('p','vaseGui::Coord',false)], fan.std.Param.$type),{}).$am('mapToWidget',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('p','vaseGui::Coord',false)], fan.std.Param.$type),{}).$am('getRootView',8192,'vaseGui::Frame?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('repaint',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('dirty','vaseGraphics::Rect?',true)], fan.std.Param.$type),{}).$am('hasFocus',270336,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('focus',270336,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onFocusChanged',2147491840,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('mouseExit',266240,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('mouseEnter',266240,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onMounted',266240,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('printInfo',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('msg','sys::Str',false)], fan.std.Param.$type),{}).$am('debug',40962,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onStateChanged$Once$Widget',133120,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onFocusChanged$Once$Widget',133120,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.Coord.$type.$af('x',73728,'sys::Int',{}).$af('y',73728,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false)], fan.std.Param.$type),{}).$am('set',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false)], fan.std.Param.$type),{}).$am('fromStr',40962,'vaseGui::Coord?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('translate',8192,'vaseGui::Coord',fan.sys.List.makeFromJs([new fan.std.Param('t','vaseGui::Coord',false)], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.Dimension.$type.$af('w',73728,'sys::Int',{}).$af('h',73728,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false)], fan.std.Param.$type),{}).$am('set',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false)], fan.std.Param.$type),{}).$am('fromStr',40962,'vaseGui::Dimension?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{});
    fan.vaseGui.Insets.$type.$af('defVal',106498,'vaseGui::Insets',{}).$af('top',73730,'sys::Int',{}).$af('right',73730,'sys::Int',{}).$af('bottom',73730,'sys::Int',{}).$af('left',73730,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('top','sys::Int',false),new fan.std.Param('right','sys::Int?',true),new fan.std.Param('bottom','sys::Int?',true),new fan.std.Param('left','sys::Int?',true)], fan.std.Param.$type),{}).$am('fromStr',40962,'vaseGui::Insets?',fan.sys.List.makeFromJs([new fan.std.Param('s','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hash',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('equals',271360,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('obj','sys::Obj?',false)], fan.std.Param.$type),{}).$am('toSize',8192,'vaseGraphics::Size',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.Direction.$type.$af('top',106506,'vaseGui::Direction',{}).$af('right',106506,'vaseGui::Direction',{}).$af('down',106506,'vaseGui::Direction',{}).$af('left',106506,'vaseGui::Direction',{}).$af('vals',106498,'sys::List<vaseGui::Direction>',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('$ordinal','sys::Int',false),new fan.std.Param('$name','sys::Str',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'vaseGui::Direction?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.Animation.$type.$af('name',73728,'sys::Str',{}).$af('duration',73728,'sys::Int',{}).$af('elapsedTime',73728,'sys::Int',{}).$af('speed',73728,'sys::Float',{}).$af('blendWeight',73728,'sys::Float',{}).$af('repeat',73728,'sys::Int',{}).$af('delay',73728,'sys::Int',{}).$af('isRuning',73728,'sys::Bool',{}).$af('isFinished',73728,'sys::Bool',{}).$af('channelList',69632,'sys::List<vaseGui::AnimChannel>',{}).$af('whenDone$Store',198656,'sys::Obj?',{}).$am('whenDone',2147491840,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('add',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('child','vaseGui::AnimChannel',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('start',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('stop',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onStart',266240,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onStop',266240,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onFinised',266240,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('update',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('frameTime','sys::Int',false)], fan.std.Param.$type),{}).$am('updateChannel',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('elapsed','sys::Int',false),new fan.std.Param('frameTime','sys::Int',false),new fan.std.Param('percent','sys::Float',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('whenDone$Once$Animation',133120,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.TweenAnimation.$type.$af('widget',73728,'vaseGui::Widget?',{}).$am('onFinised',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onStart',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('bind',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.AnimChannel.$type.$am('update',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('elapsedTime','sys::Int',false),new fan.std.Param('frameTime','sys::Int',false),new fan.std.Param('percent','sys::Float',false),new fan.std.Param('blendWeight','sys::Float',false)], fan.std.Param.$type),{});
    fan.vaseGui.TweenAnimChannel.$type.$af('widget',73728,'vaseGui::Widget?',{}).$af('interpolation',73728,'vaseGui::Interpolation',{}).$am('update',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('elapsedTime','sys::Int',false),new fan.std.Param('frameTime','sys::Int',false),new fan.std.Param('percent','sys::Float',false),new fan.std.Param('blendWeight','sys::Float',false)], fan.std.Param.$type),{}).$am('onUpdate',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('percent','sys::Float',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.TranslateAnimChannel.$type.$af('from',73728,'vaseGraphics::Point',{}).$af('to',73728,'vaseGraphics::Point',{}).$af('lastX',67584,'sys::Float',{}).$af('lastY',67584,'sys::Float',{}).$am('onUpdate',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('percent','sys::Float',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.RotateAnimChannel.$type.$af('from',73728,'sys::Float',{}).$af('to',73728,'sys::Float',{}).$af('lastRotate',67584,'sys::Float',{}).$am('onUpdate',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('percent','sys::Float',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.AlphaAnimChannel.$type.$af('from',73728,'sys::Float',{}).$af('to',73728,'sys::Float',{}).$am('onUpdate',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('percent','sys::Float',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ScaleAnimChannel.$type.$af('from',73728,'sys::Float',{}).$af('to',73728,'sys::Float',{}).$af('lastScale',67584,'sys::Float',{}).$am('onUpdate',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('percent','sys::Float',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.AnimManager.$type.$af('lastUpdateTime',73728,'sys::Int',{}).$af('animationList',67584,'sys::List<vaseGui::Animation>',{}).$am('updateFrame',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('update',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('frameTime','sys::Int',false)], fan.std.Param.$type),{}).$am('clear',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hasAnimation',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('add',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('a','vaseGui::Animation',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.FloatPropertyAnimChannel.$type.$af('target',73728,'sys::Obj',{}).$af('field',73728,'std::Field',{}).$af('updateFunc',73728,'sys::Func<sys::Void>?',{}).$af('from',73728,'sys::Float',{}).$af('to',73728,'sys::Float',{}).$af('interpolation',73728,'vaseGui::Interpolation',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('target','sys::Obj',false),new fan.std.Param('field','std::Field',false)], fan.std.Param.$type),{}).$am('update',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('elapsedTime','sys::Int',false),new fan.std.Param('frameTime','sys::Int',false),new fan.std.Param('percent','sys::Float',false),new fan.std.Param('blendWeight','sys::Float',false)], fan.std.Param.$type),{});
    fan.vaseGui.Timer.$type.$af('period',73728,'sys::Int',{}).$af('canceled',73728,'sys::Bool',{}).$af('onTimeOut',67584,'sys::Func<sys::Void>',{}).$af('toolkit',67584,'vaseWindow::Toolkit',{}).$af('timeOut',67584,'sys::Func<sys::Void>',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('period','sys::Int',false),new fan.std.Param('onTimeOut','sys::Func<sys::Void>',false)], fan.std.Param.$type),{}).$am('start',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('cancel',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.AnimExt.$type.$am('fadeInAnim',1089538,'vaseGui::Animation',fan.sys.List.makeFromJs([new fan.std.Param('self','vaseGui::Widget',false),new fan.std.Param('time','sys::Int',true)], fan.std.Param.$type),{}).$am('fadeOutAnim',1089538,'vaseGui::Animation',fan.sys.List.makeFromJs([new fan.std.Param('self','vaseGui::Widget',false),new fan.std.Param('time','sys::Int',true),new fan.std.Param('detach','sys::Bool',true)], fan.std.Param.$type),{}).$am('moveInAnim',1089538,'vaseGui::Animation',fan.sys.List.makeFromJs([new fan.std.Param('self','vaseGui::Widget',false),new fan.std.Param('orig','vaseGui::Direction',false),new fan.std.Param('time','sys::Int',true)], fan.std.Param.$type),{}).$am('moveOutAnim',1089538,'vaseGui::Animation',fan.sys.List.makeFromJs([new fan.std.Param('self','vaseGui::Widget',false),new fan.std.Param('orig','vaseGui::Direction',false),new fan.std.Param('time','sys::Int',true),new fan.std.Param('detach','sys::Bool',true)], fan.std.Param.$type),{}).$am('shakeAnim',1089538,'vaseGui::Animation',fan.sys.List.makeFromJs([new fan.std.Param('self','vaseGui::Widget',false),new fan.std.Param('time','sys::Int',true),new fan.std.Param('repeat','sys::Int',true)], fan.std.Param.$type),{}).$am('shrinkAnim',1089538,'vaseGui::Animation',fan.sys.List.makeFromJs([new fan.std.Param('self','vaseGui::Widget',false),new fan.std.Param('time','sys::Int',true),new fan.std.Param('p','vaseGui::Coord?',true),new fan.std.Param('detach','sys::Bool',true)], fan.std.Param.$type),{}).$am('expandAnim',1089538,'vaseGui::Animation',fan.sys.List.makeFromJs([new fan.std.Param('self','vaseGui::Widget',false),new fan.std.Param('time','sys::Int',true),new fan.std.Param('p','vaseGui::Coord?',true)], fan.std.Param.$type),{}).$am('scaleAnim',1089538,'vaseGui::Animation',fan.sys.List.makeFromJs([new fan.std.Param('self','vaseGui::Widget',false),new fan.std.Param('from','sys::Float',true),new fan.std.Param('time','sys::Int',true)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ScrollAnimChannel.$type.$af('acceleration',73728,'sys::Float',{}).$af('startV',73728,'sys::Float',{}).$af('backwards',69632,'sys::Bool',{}).$af('inited',69632,'sys::Bool',{}).$af('target',73728,'vaseGui::ScrollBar?',{}).$af('allowOverScroll',69632,'sys::Bool',{}).$af('isFinished',67584,'sys::Bool',{}).$am('init',266240,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isEnd',266240,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('update',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('elapsedTime','sys::Int',false),new fan.std.Param('frameTime','sys::Int',false),new fan.std.Param('percent','sys::Float',false),new fan.std.Param('blendWeight','sys::Float',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.OverScrollAnimChannel.$type.$af('startPos',67584,'sys::Float',{}).$am('init',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isEnd',267264,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.Interpolation.$type.$am('evaluate',270336,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('percent','sys::Float',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.WidgetGroup.$type.$af('children',67584,'sys::List<vaseGui::Widget>',{'sys::Transient':""}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('each',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,vaseGui::Widget,sys::Int>',false)], fan.std.Param.$type),{}).$am('remove',8192,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('child','vaseGui::Widget?',false),new fan.std.Param('doRelayout','sys::Bool',true)], fan.std.Param.$type),{}).$am('removeAll',270336,'sys::This',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('add',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('child','vaseGui::Widget',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('indexSame',8192,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('child','vaseGui::Widget',false)], fan.std.Param.$type),{}).$am('childrenSize',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('getChild',8192,'vaseGui::Widget',fan.sys.List.makeFromJs([new fan.std.Param('i','sys::Int',false)], fan.std.Param.$type),{}).$am('findById',271360,'vaseGui::Widget?',fan.sys.List.makeFromJs([new fan.std.Param('id','sys::Str',false)], fan.std.Param.$type),{}).$am('moveToTop',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('child','vaseGui::Widget',false)], fan.std.Param.$type),{}).$am('layoutChildren',267265,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('force','sys::Bool',false)], fan.std.Param.$type),{}).$am('prefContentSize',267265,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('motionEvent',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('gestureEvent',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseGui::GestureEvent',false)], fan.std.Param.$type),{}).$am('keyEvent',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::KeyEvent',false)], fan.std.Param.$type),{}).$am('onMounted',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('paintChildren',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.VBox.$type.$af('spacing',73728,'sys::Float',{}).$am('getWeightSpace',2048,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('layoutChildren',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('force','sys::Bool',false)], fan.std.Param.$type),{}).$am('prefContentSize',267264,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.MessageBox.$type.$af('label',73728,'vaseGui::Label',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('show',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('w','vaseGui::Widget',false)], fan.std.Param.$type),{});
    fan.vaseGui.HBox.$type.$af('spacing',73728,'sys::Float',{}).$af('align',73728,'vaseGui::Align',{}).$af('weightSpace',67584,'sys::Float',{}).$af('alignOffset',67584,'sys::Int',{}).$am('calSpace',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('layoutChildren',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('force','sys::Bool',false)], fan.std.Param.$type),{}).$am('prefContentSize',267264,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.Menu.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('close',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.MenuList.$type.$af('owner',73728,'vaseGui::MenuItem?',{'sys::Transient':""}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.Label.$type.$af('text',73728,'sys::Str',{}).$am('font',4096,'vaseGraphics::Font',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('prefContentSize',267264,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ButtonBase.$type.$af('mouseOver',106498,'sys::Int',{}).$af('mouseOut',106498,'sys::Int',{}).$af('mouseDown',106498,'sys::Int',{}).$af('state',73728,'sys::Int',{'sys::Transient':""}).$af('onAction$Store',198656,'sys::Obj?',{}).$am('onAction',2147491840,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('gestureEvent',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseGui::GestureEvent',false)], fan.std.Param.$type),{}).$am('motionEvent',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('clicked',266240,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('mouseExit',271360,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('mouseEnter',271360,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('keyEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::KeyEvent',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onAction$Once$ButtonBase',133120,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.MenuItem.$type.$af('list',65664,'vaseGui::MenuList',{}).$af('topLevel',67584,'sys::Bool',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('rootMenu',2048,'vaseGui::Menu?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('addParentTo',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('group','vaseGui::WidgetGroup',false)], fan.std.Param.$type),{}).$am('expand',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('group','vaseGui::WidgetGroup',false)], fan.std.Param.$type),{}).$am('add',270336,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('item','vaseGui::MenuItem',false)], fan.std.Param.$type),{'sys::Operator':""});
    fan.vaseGui.Pane.$type.$am('layoutChildren',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('force','sys::Bool',false)], fan.std.Param.$type),{}).$am('prefContentSize',267264,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ScrollBase.$type.$af('hbar',69632,'vaseGui::ScrollBar',{'sys::Transient':""}).$af('vbar',69632,'vaseGui::ScrollBar',{'sys::Transient':""}).$af('offsetX',335872,'sys::Int',{'sys::Transient':""}).$af('offsetY',335872,'sys::Int',{'sys::Transient':""}).$af('barSize',73728,'sys::Float',{}).$af('autoAdjustChildren',73728,'sys::Bool',{}).$af('animation',67584,'vaseGui::Animation?',{'sys::Transient':""}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onViewportChanged',266240,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doAdd',4096,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('child','vaseGui::Widget?',false)], fan.std.Param.$type),{}).$am('viewportWidth',266240,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('viewportHeight',266240,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('contentMaxWidth',266240,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('contentMaxHeight',266240,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('layoutScroolBar',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('layoutChildren',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('force','sys::Bool',false)], fan.std.Param.$type),{}).$am('layoutContent',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('force','sys::Bool',false)], fan.std.Param.$type),{}).$am('adjustContent',266240,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('motionEvent',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('startAnimation',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('anim','vaseGui::Animation',false)], fan.std.Param.$type),{}).$am('animatOverScroll',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('gestureEvent',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseGui::GestureEvent',false)], fan.std.Param.$type),{});
    fan.vaseGui.ScrollPane.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ContentPane.$type.$af('content',73728,'vaseGui::Widget?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('add',271360,'sys::This',fan.sys.List.makeFromJs([new fan.std.Param('child','vaseGui::Widget',false)], fan.std.Param.$type),{'sys::Operator':""}).$am('doAdd',128,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('child','vaseGui::Widget?',false)], fan.std.Param.$type),{});
    fan.vaseGui.Frame.$type.$af('view',67584,'vaseGui::WinView?',{'sys::Transient':""}).$af('focusWidget',67584,'vaseGui::Widget?',{'sys::Transient':""}).$af('mouseOverWidget',67584,'vaseGui::Widget?',{'sys::Transient':""}).$af('topLayer',67584,'vaseGui::WidgetGroup?',{'sys::Transient':""}).$af('antialias',73728,'sys::Bool',{}).$af('styleManager',73728,'vaseGui::StyleManager',{'sys::Transient':""}).$af('animManager',69632,'vaseGui::AnimManager',{'sys::Transient':""}).$af('modal',73728,'sys::Bool',{'sys::Transient':""}).$af('background',73728,'vaseGraphics::Brush',{}).$af('inited',73728,'sys::Bool',{}).$af('onTouchEvent',73728,'vaseWindow::EventListeners',{'sys::Transient':""}).$af('onWindowStateChange$Store',198656,'sys::Obj?',{}).$af('onOpened$Store',198656,'sys::Obj?',{}).$am('findStyle',8192,'vaseGui::Style',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false)], fan.std.Param.$type),{}).$am('host',8192,'vaseWindow::Window?',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('show',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('pop',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('topOverlayer',8192,'vaseGui::WidgetGroup',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onUpdate',4096,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('detach',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('doRelayout','sys::Bool',true)], fan.std.Param.$type),{}).$am('repaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('dirty','vaseGraphics::Rect?',true)], fan.std.Param.$type),{}).$am('relayout',271360,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('onRemove',128,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('w','vaseGui::Widget',false)], fan.std.Param.$type),{}).$am('focusIt',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('w','vaseGui::Widget?',false)], fan.std.Param.$type),{}).$am('mouseCapture',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('w','vaseGui::Widget',false)], fan.std.Param.$type),{}).$am('hasFocus',271360,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isFocusWidiget',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('w','vaseGui::Widget',false)], fan.std.Param.$type),{}).$am('gestureEvent',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseGui::GestureEvent',false)], fan.std.Param.$type),{}).$am('motionEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('keyEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::KeyEvent',false)], fan.std.Param.$type),{}).$am('windowEvent',4096,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::WindowEvent',false)], fan.std.Param.$type),{}).$am('onWindowStateChange',2147491840,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onOpened',2147491840,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onWindowStateChange$Once$Frame',133120,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onOpened$Once$Frame',133120,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.FlowLayout.$type.$af('spacing',73728,'sys::Int',{}).$am('layoutChildren',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('force','sys::Bool',false)], fan.std.Param.$type),{}).$am('prefContentSize',267264,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.EdgePane.$type.$af('top',73728,'vaseGui::Widget?',{}).$af('bottom',73728,'vaseGui::Widget?',{}).$af('left',73728,'vaseGui::Widget?',{}).$af('right',73728,'vaseGui::Widget?',{}).$af('center',73728,'vaseGui::Widget?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('prefContentSize',271360,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('pref',2048,'vaseGui::Dimension',fan.sys.List.makeFromJs([new fan.std.Param('w','vaseGui::Widget?',false)], fan.std.Param.$type),{}).$am('layoutChildren',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('force','sys::Bool',false)], fan.std.Param.$type),{});
    fan.vaseGui.ToggleButton.$type.$af('selected',73728,'sys::Bool',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('clicked',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('prefContentSize',267264,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.RadioButton.$type.$am('clicked',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.Switch.$type.$af('animPostion',73728,'sys::Float',{}).$am('clicked',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.TreeView.$type.$af('model',73728,'vaseGui::TreeModel',{'sys::Transient':""}).$af('items',65664,'sys::List<vaseGui::TreeItem>',{'sys::Transient':""}).$af('selectedItem',73728,'vaseGui::TreeItem?',{}).$af('dragDropItem',73728,'vaseGui::TreeItem?',{}).$af('editable',73728,'sys::Bool',{}).$af('minWidth',73728,'sys::Float',{}).$af('indent',73728,'sys::Float',{}).$am('rowHeight',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('font',2048,'vaseGraphics::Font',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>?',true)], fan.std.Param.$type),{}).$am('contentMaxWidth',267264,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('prefContentSize',267264,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('expanded',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('item','vaseGui::TreeItem',false)], fan.std.Param.$type),{}).$am('init',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('motionEvent',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('findItemAt',2048,'vaseGui::TreeItem?',fan.sys.List.makeFromJs([new fan.std.Param('eventY','sys::Int',false)], fan.std.Param.$type),{}).$am('gestureEvent',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseGui::GestureEvent',false)], fan.std.Param.$type),{});
    fan.vaseGui.TreeItem.$type.$af('tree',67584,'vaseGui::TreeView',{'sys::Transient':""}).$af('node',73728,'sys::Obj',{}).$af('level',73728,'sys::Int',{}).$af('expanded',73728,'sys::Bool',{}).$am('text',8192,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('tree','vaseGui::TreeView',false),new fan.std.Param('node','sys::Obj',false),new fan.std.Param('level','sys::Int',false)], fan.std.Param.$type),{}).$am('hasChildren',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('children',8192,'sys::List<vaseGui::TreeItem>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.TreeModel.$type.$am('roots',270336,'sys::List<sys::Obj>',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('text',270336,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('node','sys::Obj',false)], fan.std.Param.$type),{}).$am('image',270336,'vaseGraphics::Image?',fan.sys.List.makeFromJs([new fan.std.Param('node','sys::Obj',false)], fan.std.Param.$type),{}).$am('hasChildren',270336,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('node','sys::Obj',false)], fan.std.Param.$type),{}).$am('children',270336,'sys::List<sys::Obj>',fan.sys.List.makeFromJs([new fan.std.Param('node','sys::Obj',false)], fan.std.Param.$type),{}).$am('onDragDrop',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('from','sys::Obj',false),new fan.std.Param('to','sys::Obj',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ImageView.$type.$af('image',73728,'vaseGraphics::ConstImage?',{'sys::Transient':""}).$af('uri',73728,'std::Uri?',{}).$af('defSize',73728,'vaseGui::Dimension',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>?',true)], fan.std.Param.$type),{}).$am('prefContentSize',267264,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ImageButton.$type.$af('image',73728,'vaseGraphics::ConstImage?',{'sys::Transient':""}).$af('uri',73728,'std::Uri?',{}).$af('defSize',73728,'vaseGui::Dimension',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>?',true)], fan.std.Param.$type),{}).$am('prefContentSize',267264,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('clicked',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.Button.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.TextAreaModel.$type.$af('text',270337,'sys::Str',{}).$af('onModify$Store',198656,'sys::Obj?',{}).$am('onModify',2147491840,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('charCount',270337,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('lineCount',270337,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('line',270337,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('lineIndex','sys::Int',false)], fan.std.Param.$type),{}).$am('posAtOffset',270337,'vaseGraphics::Point',fan.sys.List.makeFromJs([new fan.std.Param('offset','sys::Int',false)], fan.std.Param.$type),{}).$am('lineAtOffset',270337,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('offset','sys::Int',false)], fan.std.Param.$type),{}).$am('offsetAtLine',270337,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('lineIndex','sys::Int',false)], fan.std.Param.$type),{}).$am('lineDelimiter',270336,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('textRange',270336,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('start','sys::Int',false),new fan.std.Param('len','sys::Int',false)], fan.std.Param.$type),{}).$am('modify',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('start','sys::Int',false),new fan.std.Param('replaceLen','sys::Int',false),new fan.std.Param('newText','sys::Str',false)], fan.std.Param.$type),{}).$am('modifyLine',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('lineIndex','sys::Int',false),new fan.std.Param('line','sys::Str?',false),new fan.std.Param('add','sys::Bool',false)], fan.std.Param.$type),{}).$am('lineStyling',270336,'sys::List<sys::Obj>?',fan.sys.List.makeFromJs([new fan.std.Param('lineIndex','sys::Int',false)], fan.std.Param.$type),{}).$am('lineBackground',270336,'vaseGraphics::Color?',fan.sys.List.makeFromJs([new fan.std.Param('lineIndex','sys::Int',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onModify$Once$TextAreaModel',133120,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.DefTextAreaModel.$type.$af('lines',67584,'sys::List<sys::Str>',{}).$af('text',271360,'sys::Str',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('text','sys::Str',false)], fan.std.Param.$type),{}).$am('charCount',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('lineCount',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('line',271360,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('lineIndex','sys::Int',false)], fan.std.Param.$type),{}).$am('lineAtOffset',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('offset','sys::Int',false)], fan.std.Param.$type),{}).$am('posAtOffset',271360,'vaseGraphics::Point',fan.sys.List.makeFromJs([new fan.std.Param('offset','sys::Int',false)], fan.std.Param.$type),{}).$am('offsetAtLine',271360,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('lineIndex','sys::Int',false)], fan.std.Param.$type),{}).$am('modifyLine',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('lineIndex','sys::Int',false),new fan.std.Param('line','sys::Str?',false),new fan.std.Param('add','sys::Bool',false)], fan.std.Param.$type),{}).$am('modify',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('start','sys::Int',false),new fan.std.Param('replaceLen','sys::Int',false),new fan.std.Param('newText','sys::Str',false)], fan.std.Param.$type),{});
    fan.vaseGui.RichTextStyle.$type.$af('fg',73730,'vaseGraphics::Color?',{}).$af('bg',73730,'vaseGraphics::Color?',{}).$af('font',73728,'vaseGraphics::Font?',{}).$af('underlineColor',73730,'vaseGraphics::Color?',{}).$af('underline',73730,'vaseGui::RichTextUnderline',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>?',true)], fan.std.Param.$type),{}).$am('toStr',271360,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.RichTextUnderline.$type.$af('none',106506,'vaseGui::RichTextUnderline',{}).$af('single',106506,'vaseGui::RichTextUnderline',{}).$af('squiggle',106506,'vaseGui::RichTextUnderline',{}).$af('vals',106498,'sys::List<vaseGui::RichTextUnderline>',{}).$am('make',133124,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('$ordinal','sys::Int',false),new fan.std.Param('$name','sys::Str',false)], fan.std.Param.$type),{}).$am('fromStr',40966,'vaseGui::RichTextUnderline?',fan.sys.List.makeFromJs([new fan.std.Param('name','sys::Str',false),new fan.std.Param('checked','sys::Bool',true)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ListView.$type.$af('rowHeight',67584,'sys::Float',{'sys::Transient':""}).$af('tempChildren',67584,'sys::List<vaseGui::Widget>',{'sys::Transient':""}).$af('itemLayoutDirty',67584,'sys::Bool',{}).$af('model',73728,'vaseGui::ListAdapter?',{'sys::Transient':""}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>?',true)], fan.std.Param.$type),{}).$am('init',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('viewportHeight',267264,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('contentMaxHeight',267264,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('prefContentSize',267264,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('getView',4096,'vaseGui::Widget',fan.sys.List.makeFromJs([new fan.std.Param('i','sys::Int',false)], fan.std.Param.$type),{}).$am('onViewportChanged',267264,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('paintChildren',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('layoutItem',266240,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ListItem.$type.$af('data',73728,'sys::Obj?',{}).$af('view',73728,'vaseGui::Widget?',{}).$af('type',73728,'sys::Int',{}).$af('pos',73728,'sys::Int',{}).$af('mode',73728,'sys::Int',{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ListItemPool.$type.$af('freeList',67584,'std::Map<sys::Int,sys::List<vaseGui::ListItem>>',{}).$af('activesMap',67584,'std::Map<sys::Int,vaseGui::ListItem>',{}).$af('mode',67584,'sys::Int',{}).$am('get',8192,'vaseGui::ListItem?',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false)], fan.std.Param.$type),{}).$am('reuse',8192,'vaseGui::ListItem?',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Int',false)], fan.std.Param.$type),{}).$am('add',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false),new fan.std.Param('item','vaseGui::ListItem',false)], fan.std.Param.$type),{}).$am('flush',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ListAdapter.$type.$af('itemPool',67584,'vaseGui::ListItemPool',{}).$af('dirty',67584,'sys::Bool',{}).$am('size',270337,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('getData',266241,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('i','sys::Int',false),new fan.std.Param('out','vaseGui::ListItem',false)], fan.std.Param.$type),{}).$am('bind',266241,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('w','vaseGui::Widget',false),new fan.std.Param('data','sys::Obj',false)], fan.std.Param.$type),{}).$am('newView',266241,'vaseGui::Widget',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Int',false)], fan.std.Param.$type),{}).$am('flush',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('getItem',270336,'vaseGui::ListItem',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Int',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.SimpleListAdapter.$type.$af('list',69632,'sys::List<sys::Obj>',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('list','sys::List<sys::Obj>',false)], fan.std.Param.$type),{}).$am('size',271360,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('getData',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('i','sys::Int',false),new fan.std.Param('out','vaseGui::ListItem',false)], fan.std.Param.$type),{}).$am('bind',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('w','vaseGui::Widget',false),new fan.std.Param('data','sys::Obj',false)], fan.std.Param.$type),{}).$am('newView',267264,'vaseGui::Widget',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Int',false)], fan.std.Param.$type),{});
    fan.vaseGui.ScrollBar.$type.$af('max',73728,'sys::Float',{}).$af('viewport',73728,'sys::Float',{}).$af('curPos',73728,'sys::Float',{}).$af('vertical',73728,'sys::Bool',{}).$af('lastX',67584,'sys::Int',{}).$af('lastY',67584,'sys::Int',{}).$af('draging',67584,'sys::Bool',{}).$af('barSize',73728,'sys::Float',{}).$af('onPosChanged$Store',198656,'sys::Obj?',{}).$am('isActive',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('isOverScroll',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('setCurPos',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('pos','sys::Float',false),new fan.std.Param('fireEvent','sys::Bool',false),new fan.std.Param('allowOverScroll','sys::Bool',true)], fan.std.Param.$type),{}).$am('onPosChanged',2147491840,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>?',true)], fan.std.Param.$type),{}).$am('barLength',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('thumbSize',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('screenPos',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('toScreenCoord',4096,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('val','sys::Float',false)], fan.std.Param.$type),{}).$am('toWorldCoord',4096,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('val','sys::Float',false)], fan.std.Param.$type),{}).$am('onMounted',271360,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doTouch',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('onPosChanged$Once$ScrollBar',133120,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.SliderBar.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.Table.$type.$af('model',73728,'vaseGui::TableModel',{'sys::Transient':""}).$af('colWidth',73728,'sys::Float',{}).$af('rowHeight',73728,'sys::Float',{}).$af('colWidthCache',65664,'sys::List<sys::Int>?',{'sys::Transient':""}).$af('header',65664,'vaseGui::WidgetGroup',{'sys::Transient':""}).$af('offsetX',271360,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>?',true)], fan.std.Param.$type),{}).$am('init',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('prefContentSize',267264,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('contentMaxHeight',267264,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('viewportHeight',267264,'sys::Float',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.TableModel.$type.$am('numRows',270336,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('numCols',270336,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('header',270336,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('col','sys::Int',false)], fan.std.Param.$type),{}).$am('prefWidth',270336,'sys::Int?',fan.sys.List.makeFromJs([new fan.std.Param('col','sys::Int',false)], fan.std.Param.$type),{}).$am('text',270336,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('col','sys::Int',false),new fan.std.Param('row','sys::Int',false)], fan.std.Param.$type),{}).$am('image',270336,'vaseGraphics::Image?',fan.sys.List.makeFromJs([new fan.std.Param('col','sys::Int',false),new fan.std.Param('row','sys::Int',false)], fan.std.Param.$type),{}).$am('sortCompare',270336,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('col','sys::Int',false),new fan.std.Param('row1','sys::Int',false),new fan.std.Param('row2','sys::Int',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.Caret.$type.$af('visible',73728,'sys::Bool',{}).$af('offset',73728,'sys::Int',{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.EditText.$type.$af('text',73728,'sys::Str',{}).$af('hint',73728,'sys::Str',{}).$af('password',73728,'sys::Bool',{}).$af('caret',73728,'vaseGui::Caret',{'sys::Transient':""}).$af('timer',67584,'vaseGui::Timer?',{'sys::Transient':""}).$af('host',336896,'vaseWindow::TextInputPeer?',{'sys::Transient':""}).$af('inputType',73728,'sys::Int',{}).$af('multiLine',73728,'sys::Int',{}).$af('editable',73728,'sys::Bool',{}).$am('font',8192,'vaseGraphics::Font',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('textChange',271360,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('text','sys::Str',false)], fan.std.Param.$type),{}).$am('keyAction',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('text','sys::Str',false)], fan.std.Param.$type),{}).$am('updateHost',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('layoutChildren',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('force','sys::Bool',false)], fan.std.Param.$type),{}).$am('prefContentSize',267264,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('startCaret',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('stopCaret',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onKeyEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::KeyEvent',false)], fan.std.Param.$type),{}).$am('keyEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::KeyEvent',false)], fan.std.Param.$type),{}).$am('gestureEvent',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseGui::GestureEvent',false)], fan.std.Param.$type),{});
    fan.vaseGui.NativeCaret.$type.$af('x',73728,'sys::Int',{}).$af('y',73728,'sys::Int',{}).$af('lineIndex',73728,'sys::Int',{}).$af('area',73728,'vaseGui::TextArea',{}).$af('host',336896,'vaseWindow::TextInputPeer?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('area','vaseGui::TextArea',false)], fan.std.Param.$type),{}).$am('updateHost',128,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('all','sys::Bool',true)], fan.std.Param.$type),{}).$am('text',2048,'sys::Str',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('textChange',271360,'sys::Str',fan.sys.List.makeFromJs([new fan.std.Param('text','sys::Str',false)], fan.std.Param.$type),{}).$am('keyAction',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('text','sys::Str',false)], fan.std.Param.$type),{}).$am('onKeyEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::KeyEvent',false)], fan.std.Param.$type),{});
    fan.vaseGui.TextArea.$type.$af('tabSpacing',73728,'sys::Int',{}).$af('text',8192,'sys::Str',{}).$af('caret',73728,'vaseGui::NativeCaret',{'sys::Transient':""}).$af('selectionStart',73728,'sys::Int',{}).$af('selectionEnd',73728,'sys::Int',{}).$af('draging',67584,'sys::Bool',{'sys::Transient':""}).$af('model',73728,'vaseGui::TextAreaModel?',{'sys::Transient':""}).$af('onModelModifyFunc',67584,'sys::Func<sys::Void,vaseWindow::Event>',{'sys::Transient':""}).$af('onModify$Store',198656,'sys::Obj?',{}).$af('onVerify$Store',198656,'sys::Obj?',{}).$af('onVerifyKey$Store',198656,'sys::Obj?',{}).$af('onSelect$Store',198656,'sys::Obj?',{}).$af('onCaret$Store',198656,'sys::Obj?',{}).$am('rowHeight',8192,'sys::Int',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('font',128,'vaseGraphics::Font',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('f','sys::Func<sys::Void,sys::This>?',true)], fan.std.Param.$type),{}).$am('prefContentSize',267264,'vaseGui::Dimension',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onModify',2147491840,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onVerify',2147491840,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onVerifyKey',2147491840,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onSelect',2147491840,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onCaret',2147491840,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onModelModify',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('event','vaseWindow::Event',false)], fan.std.Param.$type),{}).$am('updateCaretByCoord',2048,'sys::Int?',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false)], fan.std.Param.$type),{}).$am('doPaint',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('updateCaretAt',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('row','sys::Int',false),new fan.std.Param('column','sys::Int',false),new fan.std.Param('clipColumn','sys::Bool',true),new fan.std.Param('updateAll','sys::Bool',true)], fan.std.Param.$type),{}).$am('offsetAtPos',2048,'sys::Int?',fan.sys.List.makeFromJs([new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false)], fan.std.Param.$type),{}).$am('textIndexAtPos',2048,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('text','sys::Str',false),new fan.std.Param('w','sys::Int',false)], fan.std.Param.$type),{}).$am('hasSelected',8192,'sys::Bool',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('showLine',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('lineIndex','sys::Int',false)], fan.std.Param.$type),{}).$am('motionEvent',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('clearSelected',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('keyEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::KeyEvent',false)], fan.std.Param.$type),{}).$am('onModify$Once$TextArea',133120,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onVerify$Once$TextArea',133120,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onVerifyKey$Once$TextArea',133120,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onSelect$Once$TextArea',133120,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onCaret$Once$TextArea',133120,'vaseWindow::EventListeners',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ProgressView.$type.$af('proVal',65664,'sys::Float',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',267264,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.ComboBox.$type.$af('items',73728,'sys::List<sys::Obj>',{}).$af('selectedIndex',73728,'sys::Int',{}).$af('list',67584,'vaseGui::WidgetGroup?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('select',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('btn','vaseGui::ButtonBase',false),new fan.std.Param('i','sys::Int',false)], fan.std.Param.$type),{}).$am('show',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('hide',8192,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.Toast.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('show',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('w','vaseGui::Widget',false)], fan.std.Param.$type),{});
    fan.vaseGui.Effect.$type.$am('prepare',270337,'vaseGraphics::Graphics',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('end',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('paint','sys::Func<sys::Void,vaseGraphics::Graphics>',false)], fan.std.Param.$type),{});
    fan.vaseGui.BlurEffect.$type.$af('bufImage',69632,'vaseGraphics::BufImage?',{}).$af('originalGraphics',69632,'vaseGraphics::Graphics?',{}).$af('gray',69632,'sys::Bool',{}).$am('tryMakeImage',4096,'vaseGraphics::BufImage',fan.sys.List.makeFromJs([new fan.std.Param('img','vaseGraphics::BufImage?',false),new fan.std.Param('size','vaseGraphics::Size',false)], fan.std.Param.$type),{}).$am('prepare',271360,'vaseGraphics::Graphics',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('filter',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('bufImage','vaseGraphics::BufImage',false)], fan.std.Param.$type),{}).$am('readPixel',34818,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('img','vaseGraphics::BufImage',false),new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('pixels','sys::List<sys::Int>',false)], fan.std.Param.$type),{}).$am('fillMatrix',34818,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('matrix','sys::List<sys::List<sys::Int>>',false),new fan.std.Param('values','sys::List<sys::Int>',false)], fan.std.Param.$type),{}).$am('avgMatrix',2048,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('matrix','sys::List<sys::List<sys::Int>>',false)], fan.std.Param.$type),{}).$am('end',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('paint','sys::Func<sys::Void,vaseGraphics::Graphics>',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ShadowEffect.$type.$af('blurRadius',67584,'sys::Int',{}).$af('xOffset',67584,'sys::Int',{}).$af('yOffset',67584,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('prepare',271360,'vaseGraphics::Graphics',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('end',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('paint','sys::Func<sys::Void,vaseGraphics::Graphics>',false)], fan.std.Param.$type),{});
    fan.vaseGui.GestureEvent.$type.$af('click',106498,'sys::Int',{}).$af('longPress',106498,'sys::Int',{}).$af('fling',106498,'sys::Int',{}).$af('doubleClick',106498,'sys::Int',{}).$af('drag',106498,'sys::Int',{}).$af('drop',106498,'sys::Int',{}).$af('multiTouch',106498,'sys::Int',{}).$af('x',73728,'sys::Int?',{}).$af('y',73728,'sys::Int?',{}).$af('deltaX',73728,'sys::Int?',{}).$af('deltaY',73728,'sys::Int?',{}).$af('pressure',73728,'sys::Float?',{}).$af('size',73728,'sys::Float?',{}).$af('speedX',73728,'sys::Float?',{}).$af('speedY',73728,'sys::Float?',{}).$af('relativeX',73728,'sys::Int?',{}).$af('relativeY',73728,'sys::Int?',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('type','sys::Int',false)], fan.std.Param.$type),{}).$am('static$init',165890,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.MultiTouchEvent.$type.$af('centerX',73728,'sys::Float',{}).$af('centerY',73728,'sys::Float',{}).$af('distance',73728,'sys::Float',{}).$af('scale',73728,'sys::Float',{}).$af('rotate',73728,'sys::Float',{}).$af('offsetX',73728,'sys::Float',{}).$af('offsetY',73728,'sys::Float',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.GestureState.$type.$af('machine',73728,'vaseGui::Gesture',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('machine','vaseGui::Gesture',false)], fan.std.Param.$type),{}).$am('makeEvent',8192,'vaseGui::GestureEvent',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false),new fan.std.Param('type','sys::Int',false)], fan.std.Param.$type),{}).$am('onEnter',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('onExit',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('onEvent',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{});
    fan.vaseGui.MultiTouchState.$type.$af('x0',73728,'sys::Int',{}).$af('y0',73728,'sys::Int',{}).$af('x1',73728,'sys::Int',{}).$af('y1',73728,'sys::Int',{}).$af('centerX',73728,'sys::Float',{}).$af('centerY',73728,'sys::Float',{}).$af('distance',73728,'sys::Float',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('machine','vaseGui::Gesture',false)], fan.std.Param.$type),{}).$am('onEnter',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('getDistance',40962,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('x1','sys::Int',false),new fan.std.Param('y1','sys::Int',false),new fan.std.Param('x2','sys::Int',false),new fan.std.Param('y2','sys::Int',false)], fan.std.Param.$type),{}).$am('dotProduct',40962,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('x1','sys::Int',false),new fan.std.Param('y1','sys::Int',false),new fan.std.Param('x2','sys::Int',false),new fan.std.Param('y2','sys::Int',false)], fan.std.Param.$type),{}).$am('getAngle',40962,'sys::Float',fan.sys.List.makeFromJs([new fan.std.Param('x1','sys::Int',false),new fan.std.Param('y1','sys::Int',false),new fan.std.Param('x2','sys::Int',false),new fan.std.Param('y2','sys::Int',false)], fan.std.Param.$type),{}).$am('onEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{});
    fan.vaseGui.NoneState.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('machine','vaseGui::Gesture',false)], fan.std.Param.$type),{}).$am('onEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{});
    fan.vaseGui.DownState.$type.$af('valid',67584,'sys::Bool',{}).$af('lastX',73728,'sys::Int',{}).$af('lastY',73728,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('machine','vaseGui::Gesture',false)], fan.std.Param.$type),{}).$am('onEnter',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('onEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{});
    fan.vaseGui.OneClickState.$type.$af('valid',67584,'sys::Bool',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('machine','vaseGui::Gesture',false)], fan.std.Param.$type),{}).$am('onEnter',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('onEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{});
    fan.vaseGui.TwoDownState.$type.$af('valid',67584,'sys::Bool',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('machine','vaseGui::Gesture',false)], fan.std.Param.$type),{}).$am('onEnter',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('onEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{});
    fan.vaseGui.DragState.$type.$af('click',73728,'sys::Bool',{}).$af('beginX',73728,'sys::Int',{}).$af('beginY',73728,'sys::Int',{}).$af('lastX',73728,'sys::Int',{}).$af('lastY',73728,'sys::Int',{}).$af('beginTime',73728,'sys::Int',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('machine','vaseGui::Gesture',false)], fan.std.Param.$type),{}).$am('onEnter',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('asFling',8192,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('onEvent',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{});
    fan.vaseGui.Gesture.$type.$af('history',73728,'sys::List<vaseWindow::MotionEvent>',{}).$af('defaultState',73728,'vaseGui::GestureState',{}).$af('currentState',73728,'vaseGui::GestureState',{}).$af('lastTouchTime',73728,'sys::Int',{}).$af('firstTouchTime',73728,'sys::Int',{}).$af('longPressTimeLimit',73728,'sys::Int',{}).$af('doubleClickTimeLimt',73728,'sys::Int',{}).$af('supportDoubleClick',73728,'sys::Bool',{}).$af('onGestureEvent',73728,'vaseWindow::EventListeners',{}).$am('setCurrentState',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('newState','vaseGui::GestureState',false),new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('reset',2048,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('onFinished',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('isMultiTouch',2048,'sys::Bool',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('onEvent',8192,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('e','vaseWindow::MotionEvent',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.Style.$type.$am('paint',270337,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('font',270337,'vaseGraphics::Font',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.WidgetStyle.$type.$af('background',73728,'vaseGraphics::Brush',{}).$af('foreground',73728,'vaseGraphics::Brush',{}).$af('outlineColor',73728,'vaseGraphics::Brush',{}).$af('fontColor',73728,'vaseGraphics::Brush',{}).$af('selectedColor',73728,'vaseGraphics::Brush',{}).$af('backgroundImage',73728,'vaseGraphics::ConstImage?',{}).$af('lineWidth',73728,'sys::Float',{}).$af('fontSizeInit',67584,'sys::Bool',{}).$af('font',336896,'vaseGraphics::Font',{}).$am('paint',9216,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('doPaint',270336,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('dpToPixel',4096,'sys::Int',fan.sys.List.makeFromJs([new fan.std.Param('dp','sys::Float',false)], fan.std.Param.$type),{}).$am('drawText',4096,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false),new fan.std.Param('text','sys::Str',false),new fan.std.Param('align','vaseGui::Align',false),new fan.std.Param('vAlign','vaseGui::Align',true)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.TreeStyle.$type.$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('drawItem',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('g','vaseGraphics::Graphics',false),new fan.std.Param('item','vaseGui::TreeItem',false),new fan.std.Param('tree','vaseGui::TreeView',false),new fan.std.Param('treeX','sys::Int',false),new fan.std.Param('itemX','sys::Int',false),new fan.std.Param('itemY','sys::Int',false),new fan.std.Param('fontOffset','sys::Int',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.StyleManager.$type.$af('idMap',73728,'std::Map<sys::Str,vaseGui::Style>',{}).$af('styleClassMap',73728,'std::Map<sys::Str,vaseGui::Style>',{}).$af('typeMap',73728,'std::Map<std::Type,vaseGui::Style>',{}).$af('defStyle',67584,'vaseGui::Style',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('findByType',2048,'vaseGui::Style?',fan.sys.List.makeFromJs([new fan.std.Param('type','std::Type',false)], fan.std.Param.$type),{}).$am('find',8192,'vaseGui::Style',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false)], fan.std.Param.$type),{});
    fan.vaseGui.ComboBoxStyle.$type.$af('colors',73728,'sys::List<vaseGraphics::Color>',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.ButtonBaseStyle.$type.$af('colors',73728,'sys::List<vaseGraphics::Color>',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.MessageBoxStyle.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.EditTextStyle.$type.$af('hintColor',73728,'vaseGraphics::Color',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.RoundButtonStyle.$type.$af('overColor',73728,'vaseGraphics::Brush',{}).$af('outColor',73728,'vaseGraphics::Brush',{}).$af('downColor',73728,'vaseGraphics::Brush',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.ProgressViewStyle.$type.$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.MenuStyle.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.MenuItemStyle.$type.$af('mouseOverColor',73728,'vaseGraphics::Color',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.PaneStyle.$type.$af('arc',73728,'sys::Float',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.ToggleButtonStyle.$type.$af('outLinePen',73728,'vaseGraphics::Pen',{}).$af('contectPen',73728,'vaseGraphics::Pen',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.RadioButtonStyle.$type.$af('buttonColor',73728,'vaseGraphics::Brush',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.SwitchStyle.$type.$af('buttonColor',73728,'vaseGraphics::Brush',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.LabelStyle.$type.$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ToastStyle.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.TableHeaderStyle.$type.$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.TableStyle.$type.$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('drawCell',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('g','vaseGraphics::Graphics',false),new fan.std.Param('x','sys::Int',false),new fan.std.Param('y','sys::Int',false),new fan.std.Param('w','sys::Int',false),new fan.std.Param('h','sys::Int',false),new fan.std.Param('text','sys::Str',false),new fan.std.Param('fontOffset','sys::Int',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ImageStyle.$type.$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ImageButtonStyle.$type.$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.TextAreaStyle.$type.$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{}).$am('drawCaret',2048,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('area','vaseGui::TextArea',false),new fan.std.Param('g','vaseGraphics::Graphics',false),new fan.std.Param('start','sys::Int',false),new fan.std.Param('end','sys::Int',false)], fan.std.Param.$type),{}).$am('drawLineText',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('g','vaseGraphics::Graphics',false),new fan.std.Param('rowHeight','sys::Int',false),new fan.std.Param('fontOffset','sys::Int',false),new fan.std.Param('left','sys::Int',false),new fan.std.Param('top','sys::Int',false),new fan.std.Param('text','sys::Str',false),new fan.std.Param('selStart','sys::Int',false),new fan.std.Param('selEnd','sys::Int',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    fan.vaseGui.ScrollBarStyle.$type.$af('barWidth',73728,'sys::Float',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.SliderBarStyle.$type.$af('width',73728,'sys::Float',{}).$am('make',8196,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('doPaint',271360,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('widget','vaseGui::Widget',false),new fan.std.Param('g','vaseGraphics::Graphics',false)], fan.std.Param.$type),{});
    fan.vaseGui.BaseTestWin.$type.$af('root',69632,'vaseGui::Frame?',{}).$am('main',270336,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('build',266240,'vaseGui::Widget',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('init',266240,'sys::Void',fan.sys.List.makeFromJs([new fan.std.Param('root','vaseGui::Frame',false)], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    m_meta = {};
    m_meta["pod.name"] = "vaseGui";
    m_meta["pod.version"] = "1.0.73";
    m_meta["pod.depends"] = "sys 2.0;std 1.0;vaseGraphics 1.0;concurrent 1.0;vaseMath 1.0;vaseWindow 1.0";
    m_meta["pod.summary"] = "fantom widget";
    m_meta["pod.isScript"] = "false";
    m_meta["fcode.version"] = "1.1.3";
    m_meta["build.host"] = "mywifi.local";
    m_meta["build.user"] = "yangjiandong";
    m_meta["build.ts"] = "2020-04-13T19:27:07.000+08:00 Asia/Harbin";
    m_meta["build.tsKey"] = "200413192707";
    m_meta["build.compiler"] = "1.1";
    m_meta["build.platform"] = "macosx-x86_64";
    m_meta["pod.docApi"] = "true";
    m_meta["pod.docSrc"] = "false";
    m_meta["pod.native.java"] = "false";
    m_meta["pod.native.jni"] = "false";
    m_meta["pod.native.dotnet"] = "false";
    m_meta["pod.native.js"] = "false";
  }
  fan.vaseGui.$clos$_u7 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u7",fan.sys.Void.$type,["e","vaseGui::GestureEvent","false"]);
  fan.vaseGui.$clos$_u8 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u8",fan.sys.Void.$type,["it","vaseGui::TweenAnimation","false"]);
  fan.vaseGui.$clos$_u9 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u9",fan.sys.Void.$type,["it","vaseGui::TranslateAnimChannel","false"]);
  fan.vaseGui.$clos$_u10 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u10",fan.sys.Void.$type,["it","vaseWindow::Event?","false"]);
  fan.vaseGui.$clos$_u18 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u18",fan.sys.Void.$type,["c","vaseGui::TweenAnimChannel","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseGui.$clos$_u25 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u25",fan.sys.Void.$type,[]);
  fan.vaseGui.$clos$_u26 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u26",fan.sys.Void.$type,["it","vaseGui::AlphaAnimChannel","false"]);
  fan.vaseGui.$clos$_u29 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u29",fan.sys.Void.$type,["it","vaseGui::RotateAnimChannel","false"]);
  fan.vaseGui.$clos$_u30 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u30",fan.sys.Void.$type,["it","vaseGui::ScaleAnimChannel","false"]);
  fan.vaseGui.$clos$_u32 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u32",fan.sys.Void.$type,["kid","vaseGui::Widget","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseGui.$clos$_u33 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u33",fan.sys.Obj.$type.toNullable(),["it","vaseGui::Widget","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseGui.$clos$_u34 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u34",fan.sys.Void.$type,["it","vaseGui::Widget","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseGui.$clos$_u35 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u35",fan.sys.Void.$type,["it","vaseGraphics::Pen","false"]);
  fan.vaseGui.$clos$_u36 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u36",fan.sys.Void.$type,["c","vaseGui::Widget","false","i","sys::Int","false"]);
  fan.vaseGui.$clos$_u37 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u37",fan.sys.Void.$type,["c","vaseGui::Widget","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseGui.$clos$_u38 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u38",fan.sys.Void.$type,["it","vaseGui::Label","false"]);
  fan.vaseGui.$clos$_u39 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u39",fan.sys.Void.$type,["it","vaseGui::Button","false"]);
  fan.vaseGui.$clos$_u42 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u42",fan.sys.Void.$type,["e","vaseWindow::StateChangedEvent","false"]);
  fan.vaseGui.$clos$_u43 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u43",fan.sys.Void.$type,["it","vaseGui::ScrollBar","false"]);
  fan.vaseGui.$clos$_u44 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u44",fan.sys.Void.$type,["it","vaseGui::Animation","false"]);
  fan.vaseGui.$clos$_u45 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u45",fan.sys.Void.$type,["it","vaseGui::OverScrollAnimChannel","false"]);
  fan.vaseGui.$clos$_u46 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u46",fan.sys.Void.$type,["it","vaseGui::ScrollAnimChannel","false"]);
  fan.vaseGui.$clos$_u55 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u55",fan.sys.Void.$type,["w","vaseGui::Widget","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseGui.$clos$_u56 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u56",fan.sys.Void.$type,["it","vaseGui::FloatPropertyAnimChannel","false"]);
  fan.vaseGui.$clos$_u57 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u57",fan.sys.Void.$type,["it","vaseGui::TreeItem","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseGui.$clos$_u58 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u58",fan.sys.Void.$type,["subNode","sys::Obj","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseGui.$clos$_u59 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u59",fan.sys.Void.$type,["it","sys::Str","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseGui.$clos$_u61 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u61",fan.sys.Bool.$type,["it","vaseGui::ListItem","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseGui.$clos$_u62 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u62",fan.sys.Void.$type,["it","vaseGui::ListItem","false","ignoreparam$1","sys::Int","false"]);
  fan.vaseGui.$clos$_u63 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u63",fan.std.Type.find("sys::List<vaseGui::ListItem>"),["it","sys::Int","false"]);
  fan.vaseGui.$clos$_u65 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u65",fan.sys.Void.$type,["e","vaseWindow::MotionEvent","false"]);
  fan.vaseGui.$clos$_u66 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u66",fan.sys.Void.$type,["i","vaseGui::ScrollBar","false"]);
  fan.vaseGui.$clos$_u67 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u67",fan.sys.Void.$type,["it","vaseGui::HBox","false"]);
  fan.vaseGui.$clos$_u68 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u68",fan.sys.Void.$type,["c","sys::Int","false"]);
  fan.vaseGui.$clos$_u69 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u69",fan.sys.Void.$type,["it","vaseGui::ButtonBase","false"]);
  fan.vaseGui.$clos$_u72 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u72",fan.sys.Void.$type,["e","vaseWindow::Event?","false"]);
  fan.vaseGui.$clos$_u75 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u75",fan.sys.Void.$type,["e","sys::Obj?","false"]);
  fan.vaseGui.$clos$_u79 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u79",fan.sys.Void.$type,["text","sys::Str?","false"]);
  fan.vaseGui.$clos$_u80 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u80",fan.sys.Void.$type,["item","sys::Obj","false","i","sys::Int","false"]);
  fan.vaseGui.$clos$_u81 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u81",fan.sys.Void.$type,["it","sys::List<sys::Obj?>","false"]);
  fan.vaseGui.$clos$_u90 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u90",fan.sys.Void.$type,["it","vaseGui::MultiTouchEvent","false"]);
  fan.vaseGui.$clos$_u91 = new fan.sys.ClosureFuncSpec$("vaseGui::$clos$_u91",fan.sys.Void.$type,["it","sys::Int","false"]);
}
fan.vaseGui.initStatic$ = function() {
  fan.vaseGui.Align.static$init();
  fan.vaseGui.SizeType.static$init();
  fan.vaseGui.Insets.static$init();
  fan.vaseGui.Direction.static$init();
  fan.vaseGui.ButtonBase.static$init();
  fan.vaseGui.RichTextUnderline.static$init();
  fan.vaseGui.GestureEvent.static$init();
}
fan.vaseGui.initReflect$();
fan.vaseGui.initStatic$();
}).call(this);

(function () {
var root=this;
var fan=root.fan;
if (fan === undefined) {
   if (typeof exports !== 'undefined') {
     fan = exports;
   } else {
     fan = root.fan = {};
   }
}
if (!fan.sys && (typeof require !== 'undefined')) fan = require('sys.js');

if (typeof exports !== 'undefined') {
  fan.vaseDemo = exports;
} else {
  fan.vaseDemo = root.fan.vaseDemo = {};
}

fan.vaseDemo.WinTest = fan.sys.Obj.$extend(fan.sys.Obj);
fan.vaseDemo.WinTest.prototype.$ctor = function()
{
  fan.sys.Obj.prototype.$ctor.call(this);
  var $this = this;
}
fan.vaseDemo.WinTest.prototype.$typeof = function() { return fan.vaseDemo.WinTest.$type; }
fan.vaseDemo.WinTest.main = function()
{
  var $this = this;
  var root = fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.Frame.make(),fan.sys.Func.make$closure(
    fan.vaseDemo.$clos$_u0,
    function(it)
    {
      it.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.VBox.make(),fan.sys.Func.make$closure(
        fan.vaseDemo.$clos$_u1,
        function(it)
        {
          it.padding$(fan.vaseGui.Insets.make(40));
          it.spacing$(fan.sys.Float.make(15.0));
          fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.coerce(it.add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.Button.make(),fan.sys.Func.make$closure(
            fan.vaseDemo.$clos$_u2,
            function(it)
            {
              it.id$("button");
              it.text$("Hello Button");
              return;
            })),fan.vaseGui.Button.$type)),fan.vaseGui.VBox.$type).add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.ComboBox.make(),fan.sys.Func.make$closure(
            fan.vaseDemo.$clos$_u3,
            function(it)
            {
              it.items$(fan.sys.ObjUtil.coerce(fan.sys.List.make(fan.sys.Str.$type, ["comboBox1","comboBox2","comboBox3","comboBox4"]),fan.std.Type.find("sys::List<sys::Obj>")));
              it.selectedIndex$(0);
              return;
            })),fan.vaseGui.ComboBox.$type)),fan.vaseGui.VBox.$type).add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.Label.make(),fan.sys.Func.make$closure(
            fan.vaseDemo.$clos$_u4,
            function(it)
            {
              it.id$("label");
              it.text$("Label");
              return;
            })),fan.vaseGui.Label.$type)),fan.vaseGui.VBox.$type).add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.Switch.make(),fan.sys.Func.make$closure(
            fan.vaseDemo.$clos$_u5,
            function(it)
            {
              it.text$("switch");
              return;
            })),fan.vaseGui.Switch.$type)),fan.vaseGui.VBox.$type).add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.ToggleButton.make(),fan.sys.Func.make$closure(
            fan.vaseDemo.$clos$_u6,
            function(it)
            {
              it.text$("checkBox");
              return;
            })),fan.vaseGui.ToggleButton.$type)),fan.vaseGui.VBox.$type).add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.RadioButton.make(),fan.sys.Func.make$closure(
            fan.vaseDemo.$clos$_u7,
            function(it)
            {
              it.text$("radio1");
              return;
            })),fan.vaseGui.RadioButton.$type)),fan.vaseGui.VBox.$type).add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.RadioButton.make(),fan.sys.Func.make$closure(
            fan.vaseDemo.$clos$_u7,
            function(it)
            {
              it.text$("radio2");
              return;
            })),fan.vaseGui.RadioButton.$type)),fan.vaseGui.VBox.$type).add(fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.EditText.make(),fan.sys.Func.make$closure(
            fan.vaseDemo.$clos$_u8,
            function(it)
            {
              it.hint$("hint");
              return;
            })),fan.vaseGui.EditText.$type));
          return;
        })),fan.vaseGui.VBox.$type));
      return;
    })),fan.vaseGui.Frame.$type);
  var btn = fan.sys.ObjUtil.coerce(root.findById("button"),fan.vaseGui.Button.$type);
  btn.onAction().add(fan.sys.Func.make$closure(
    fan.vaseDemo.$clos$_u9,
    function(it)
    {
      fan.sys.ObjUtil.coerce(fan.sys.ObjUtil.$with(fan.vaseGui.MessageBox.make(),fan.sys.Func.make$closure(
        fan.vaseDemo.$clos$_u10,
        function(it)
        {
          it.label().text$("hello world");
          return;
        })),fan.vaseGui.MessageBox.$type).show(root);
      return;
    }));
  root.show();
  return;
}
fan.vaseDemo.WinTest.make = function() {
  var self = new fan.vaseDemo.WinTest();
  fan.vaseDemo.WinTest.make$(self);
  return self;
  }
fan.vaseDemo.WinTest.make$ = function(self)
{
  return;
}
fan.vaseDemo.initReflect$ = function() {
  fan.vaseDemo.$pod = fan.std.Pod.$add('vaseDemo');
  with (fan.vaseDemo.$pod)
  {
    fan.vaseDemo.WinTest.$type = $at('WinTest','sys::Obj',[],{'sys::Js':""},8192);
    fan.vaseDemo.WinTest.$type.$am('main',40962,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{}).$am('make',139268,'sys::Void',fan.sys.List.makeFromJs([], fan.std.Param.$type),{});
    m_meta = {};
    m_meta["pod.name"] = "vaseDemo";
    m_meta["pod.version"] = "1.0";
    m_meta["pod.depends"] = "sys 2.0;std 1.0;vaseGraphics 1.0;concurrent 1.0;vaseMath 1.0;vaseWindow 1.0;vaseAndroid 1.0;vaseGui 1.0";
    m_meta["pod.summary"] = "vaseDemo discription";
    m_meta["pod.isScript"] = "false";
    m_meta["fcode.version"] = "1.1.3";
    m_meta["build.host"] = "mywifi.local";
    m_meta["build.user"] = "yangjiandong";
    m_meta["build.ts"] = "2020-04-14T21:14:11.000+08:00 Asia/Harbin";
    m_meta["build.tsKey"] = "200414211411";
    m_meta["build.compiler"] = "1.1";
    m_meta["build.platform"] = "macosx-x86_64";
    m_meta["pod.docApi"] = "true";
    m_meta["pod.docSrc"] = "false";
    m_meta["pod.native.java"] = "false";
    m_meta["pod.native.jni"] = "false";
    m_meta["pod.native.dotnet"] = "false";
    m_meta["pod.native.js"] = "false";
  }
  fan.vaseDemo.$clos$_u0 = new fan.sys.ClosureFuncSpec$("vaseDemo::$clos$_u0",fan.sys.Void.$type,["it","vaseGui::Frame","false"]);
  fan.vaseDemo.$clos$_u1 = new fan.sys.ClosureFuncSpec$("vaseDemo::$clos$_u1",fan.sys.Void.$type,["it","vaseGui::VBox","false"]);
  fan.vaseDemo.$clos$_u2 = new fan.sys.ClosureFuncSpec$("vaseDemo::$clos$_u2",fan.sys.Void.$type,["it","vaseGui::Button","false"]);
  fan.vaseDemo.$clos$_u3 = new fan.sys.ClosureFuncSpec$("vaseDemo::$clos$_u3",fan.sys.Void.$type,["it","vaseGui::ComboBox","false"]);
  fan.vaseDemo.$clos$_u4 = new fan.sys.ClosureFuncSpec$("vaseDemo::$clos$_u4",fan.sys.Void.$type,["it","vaseGui::Label","false"]);
  fan.vaseDemo.$clos$_u5 = new fan.sys.ClosureFuncSpec$("vaseDemo::$clos$_u5",fan.sys.Void.$type,["it","vaseGui::Switch","false"]);
  fan.vaseDemo.$clos$_u6 = new fan.sys.ClosureFuncSpec$("vaseDemo::$clos$_u6",fan.sys.Void.$type,["it","vaseGui::ToggleButton","false"]);
  fan.vaseDemo.$clos$_u7 = new fan.sys.ClosureFuncSpec$("vaseDemo::$clos$_u7",fan.sys.Void.$type,["it","vaseGui::RadioButton","false"]);
  fan.vaseDemo.$clos$_u8 = new fan.sys.ClosureFuncSpec$("vaseDemo::$clos$_u8",fan.sys.Void.$type,["it","vaseGui::EditText","false"]);
  fan.vaseDemo.$clos$_u9 = new fan.sys.ClosureFuncSpec$("vaseDemo::$clos$_u9",fan.sys.Void.$type,["it","vaseWindow::Event?","false"]);
  fan.vaseDemo.$clos$_u10 = new fan.sys.ClosureFuncSpec$("vaseDemo::$clos$_u10",fan.sys.Void.$type,["it","vaseGui::MessageBox","false"]);
}
fan.vaseDemo.initStatic$ = function() {
}
fan.vaseDemo.initReflect$();
fan.vaseDemo.initStatic$();
}).call(this);

